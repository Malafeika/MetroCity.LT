/*

///////////////////
//www.MetroCity.lt 2018//
///////////////////


*/
//==============================================================================
#include <a_samp>
#include <a_mysql>
#include <md5>
#include <Pawn.CMD>
#include <foreach>
#include <sscanf2>
#include <streamer>
#include <iScreenFader>
#include <mSelection>
#include <progress2>
#include <!COO!>
#include <cbars>
#include <profiler>
#include "../gamemodes/GM/map.pwn"
//==============================================================================
#pragma tabsize 0
#pragma dynamic 300000
//==============================================================================
#define MySQL_HOST              "s1.justhost.lt"
#define MySQL_USER              "s390"
#define MySQL_DATA              "s390"
#define MySQL_PASS              "0kd4rcZgh"
#define ServerVersion 			"UL 0.0.0v"
//==============================================================================
#undef 	MAX_PLAYERS
#define MAX_PLAYERS 			200
#define MAX_HOUSES				280
#define MAX_PROPERTYS			50
#define MAX_GANGS				4
#define MAX_ZONES_IN_SERVER     4
#define MAX_ENTRANCES       	50
#define MAX_GARAGES 			13
#undef 	INVALID_TEXT_DRAW
#define INVALID_TEXT_DRAW       		Text:       0xFFFF
#define INVALID_PLAYER_TEXT_DRAW        PlayerText: 0xFFFF
#define MAX_TEXTDRAWS_IN_SERVER         100
#define MAX_CHEST_SLOTS			        30
#define ItemID                      	0
#define ItemAmmount                 	1
#define MAX_TRUNK_SLOTS             	20
#define MAX_INBOX_SENT_SLOTS            15
#define MAX_CREDIT_HOUSES 				2

#define	OBJECT				(0)
#define PLAYER				(1)
#define VEHICLE				(2)
#define DYNAMIC_OBJECT		(3)

#define VISIBLE_ITEMS 1000
//==============================================================================

WasteDeAMXersTime()
{
	new b;
	#emit load.pri b
	#emit stor.pri b
}

#define INVALID_PLAYER_TEXT_DRAW        PlayerText: 0xFFFF
#define f_public:%0(%1) 				forward %0(%1);		public %0(%1)

#define COL_PRICE		           		"{AEB404}"
#define COL_CMD	            			"{00FF6B}"
#define COL_INFO	            		"{FFFF00}"
#define COL_USAGE	            		"{8400FF}"
#define COL_ADMIN	            		"{1BB300}"
#define COL_ERROR	            		"{D60000}"

#define GANG_COST			50000
#define GANG_EXPERIENCE		1000

// nuo verslo ID reik nuimt -1
#define STOTIES_DEGALINE		6
#define VM_DEGALINE				0
#define DIDELE_DEGALINE			2
#define VIDUTINE_DEGALINE		3
#define DRABUZIU_PARDUOTUVE		33
#define MAISTO_PARDUOTUVE1		5
#define EL_PARDUOTUVE			34
#define VM_MOKYKLA				4
#define TR_SALONAS 				0
#define LAIVU_SALONAS 			12
#define SKELBIMU_CENTRAS		7
#define NAKTINIS_KLUBAS			8
#define GARAZHAS				25
#define CLUCKIN1				14
#define BURGER1					13
#define PICERIJA1 				15
#define MAISTO_PARDUOTUVE2		32
#define ZVEJYBOS_TURGUS 		11
#define GINKLU_PARDUOTUVE 		10

#define DIDELE_DEGALINE1		69
#define DIDELE_DEGALINE2		70

#define TYPE_RATAI				1
#define TYPE_BUTAS				2
#define TYPE_NAMAS 				3

#define GANG_ZONE_OWNER_ID_1			1
#define GANG_ZONE_OWNER_ID_2        	2
#define GANG_ZONE_OWNER_ID_3        	3

#define GANG_ZONE_COLOR_ID_1   			0xE408BF76
#define GANG_ZONE_COLOR_ID_2     		0xE1DD0076
#define GANG_ZONE_COLOR_ID_3   			0x00BBE176

#define GANG_ID_1 						1
#define GANG_ID_2 						2
#define GANG_ID_3 						3

//Iejimai
#define CLUCKIN4				80
#define BURGER3					81
#define BURGER2					82
#define PICERIJA3 				83
#define CLUCKIN2				84
#define CLUCKIN3				85
#define PICERIJA2 				86

#define GROBIA_HOTEL		1
#define GROBIA_VYRIAUSYBE	2
#define GROBIA_SALONA		3
#define GROBIA_PD			4

#define LEVEL_NONE		0
#define LEVEL_VIP		1
#define LEVEL_FIRST		2
#define LEVEL_SECOND	3
#define LEVEL_THIRD		4
#define LEVEL_OWNER		5

#define PRIZ_NIEKO		0
#define PRIZ_ADMIN		1
#define PRIZ_VIP		2
#define PRIZ_GAUJOS	3
#define PRIZ_DIRK		4
#define PRIZ_BAN		5

#define DUONOS_KAINA 		6
#define SURELIO_KAINA 		4
#define PICOS_KAINA 		16
#define SOKOLADO_KAINA 		10
#define SULCIU_KAINA 		8
#define LEDU_KAINA 			4
#define DESROS_KAINA 		14

#define ALIUMINIS 			4
#define VARIS 				6
#define ZALVARIS 			5
#define AUKSAS              9
#define TITANAS 			5
#define SIDABRAS 			8

#define ZALIU_SKIN 			107
#define GELTONU_SKIN 		109

#define ZALIAS 				1
#define GELTONAS 			2

#define FirstFishingLevel 			100
#define SecondFishingLevel 			175
#define ThirdFishingLevel 			250
#define FourthFishingLevel 			350

#define PIZZA_ATTACH_SLOT            	1
#define POLICEHAT_ATTACH_SLOT           2
#define SUNGLASSES_ATTACH_SLOT          3
#define TELPHONE_ATTACH_SLOT            4
#define POLICETAZER_ATTACH_SLOT 		5
#define POLICEARMOUR_ATTACH_SLOT        6
#define MESKERE_ATTACH_SLOT        		7

#define USING_FOR_NONE                  0
#define USING_ENTER_FROM_BUILDING       1
#define USING_ENTER_BUILDING            2
#define USING_FOR_JOB_CLOTHES           3
#define USING_LOADING_LOAD              4
#define USING_UNLOADING_LOAD            5
#define USING_CUSTOMS_CHECK             6
#define USING_PLAYER_DAMAGE             7
#define USING_FOR_JOB_CLOTHES_CLOTHING  8
#define USING_TELEPORT_TO_LS            9
#define USING_TELEPORT_TO_SF            10
#define USING_TELEPORT_TO_TRACK         11
#define USING_TELEPORT_FROM_TRACK       12
#define USING_COMMAND_MIRTI             13
#define USING_FOR_NEW_SPAWN        		14
#define USING_TELEPORT_TO_SHAMAL        15
#define USING_TELEPORT_FROM_SHAMAL      16
#define USING_TELEPORT_TO_DERBY         17
#define USING_TELEPORT_FROM_DERBY       18
#define USING_TELEPORT_TO_KART_TRACK  	19
#define USING_TELEPORT_FROM_KART_TRACK  20
#define	USING_TELEPORT_TO_NASCAR        21
#define USING_TELEPORT_FROM_NASCAR      22
#define USING_TELEPORT_TO_JOURLEY       23
#define USING_TELEPORT_FROM_JOURLEY     24

#define SPORT_VEHICLES					1
#define AIRPLANE        				2
#define BIKES           				3
#define NORMAL_VEHICLES 				4
#define HEAVY_VEHICLES					5
#define BOATS           				6

//Telefonai
#define	VIOLET_PHONE					1
#define	RED_PHONE						2
#define	GREEN_PHONE						3
#define	BLUE_PHONE						4
#define	YELLOW_PHONE					5
#define	WHITE_PHONE						6

#define	VIOLET_PHONE_ID					18869
#define	RED_PHONE_ID					18870
#define	GREEN_PHONE_ID					18871
#define	BLUE_PHONE_ID					18872
#define	YELLOW_PHONE_ID					18873
#define	WHITE_PHONE_ID					18874

#define TELPHONE_SOUND_CALLING			1
#define TELPHONE_SOUND_RINGING          2
#define TELPHONE_SOUND_STOP             3

#define TELLPHONE_NUMBER_POLICE         02
#define TELLPHONE_NUMBER_MEDICS         03
#define TELLPHONE_NUMBER_TAXI           1428
#define TELLPHONE_NUMBER_MECHANICS      1888
#define TELLPHONE_NUMBER_DEALERS        06
#define TELLPHONE_NUMBER_REPORTERS      07
#define TELLPHONE_NUMBER_STRETCH      	08

#define BANKAS_GROBIMAS 		1

#define BENZINAS			0
#define DYZELIS				1
#define DUJOS				2

/* Privilegijos */
#define VipPrice                  150
#define FirstLevelAdminPrice      450
#define SecondLevelAdminPrice     650
#define SSecondLevelAdminPrice    850
#define GunPacketPrice            50
#define DrugsPacketPrice          50

/* Pinigai, patirties taðkai */
#define FirstMoneyPrice           100 // ~ $10.000
#define SecondMoneyPrice          200 // ~ $35.000
#define ThirdMoneyPrice           300 // ~ $55.000

#define FirstExperiencePrice      50  // ~ 700 XP
#define SecondExperiencePrice     100 // ~ 1.600 XP
#define ThirdExperiencePrice      200 // ~ 3.500 XP

/* Kitos paslaugos */
#define UnjailPrice               80
#define VipWarnsPrice             120
#define AdminWarnsPrice           200
#define WantedLevelPrice          40
#define AllCategoryLicensesPrice  60
#define GunLicensesPrice          150
#define PropertyUpgradePrice      50
#define JobProfitUpgrade          300
#define ThirdOwnCarPrice          200

#define GangBandPrice             50
#define GangIsodintiPrice         35
#define GangTeleportPrice         40
#define GangKaukePrice         	  10
#define GangKliutisPrice          55

#define PrisijungimoDialogas			5922
#define RegistracijosDialogas			5923
#define LytiesPasirinkimoDialogas		5924
#define GlassesShopDialog               5950
#define SelectedGlassesBuyDialog        5951
#define BankAccountCreateDialog         5952
#define BankAccountDialog        		5953
#define BankAccountBalanseDialog    	5954
#define BankAccountSendDialog			5955
#define BankAccountAmountDialog			5956
#define BankAccountMoneyWitdrawDialog	5957
#define BankAccountMoneyPutDialog		5958
#define TimeUnbanDialog					5959
#define UnbanDialog						5960
#define ACategoryLicenseDialog			5961
#define BCategoryLicenseDialog			5962
#define CCategoryLicenseDialog			5963
#define TheoryLicenseDialog				5964
#define FirstTheoryQuestionDialog		5965
#define SecondTheoryQuestionDialog		5966
#define ThirdTheoryQuestionDialog		5967
#define FourthTheoryQuestionDialog		5968
#define FifthTheoryQuestionDialog		5969
#define SixthTheoryQuestionDialog		5970
#define SeventhTheoryQuestionDialog		5971
#define EightthTheoryQuestionDialog		5972
#define NinethTheoryQuestionDialog		5973
#define TenthTheoryQuestionDialog		5974
#define MainPropertyDialog				5975
#define PropertyProfitDepositDialog		5976
#define PropertyProfitControlDialog		5978
#define PropertyProfitWitdrawDialog		5979
#define PropertySellDialog				5980
#define PropertySellToPlayerDialog		5981
#define PropertyGiveToPlayerDialog		5982
#define PropertySuggestionDialog		5983
#define	PizzaDeliveryFirstDialog 		5984
#define PizzaDeliverySecondDialog		5985
#define MainMobilePhoneShopDialog		5986
#define SecondMobilePhoneShopDialog		5987
#define DefaultContractRenewDialog		5988
#define DefaultContractErrorDialog		5989
#define AbonentContractRenewDialog		5990
#define AbonentContractErrorDialog		5991
#define MobilePhoneInfoDialog			5992
#define GangInviteDialog				5993
#define GangChestDialog					5994
#define GangChestInputMoney				5995
#define GangChestWitdrawMoney			5996
#define PropertyBuyDialog				5997
#define PropertyUpgradeDialog			5998
#define DealersDocksDialog  	        5999
#define DealersDocksDrugsSelectDialog   5926
#define DealersDocksWeaponsDialog       5927
#define DealersDocksOtherDialog         5928
#define DealersDocksDrugsBuyDialog1     5929
#define DealersDocksDrugsBuyDialog2     6584
#define DealersDocksDrugsBuyDialog3     6585
#define DealersDocksDrugsBuyDialog4     6586
#define PolicijosDarboValdymasDialogas	6587
#define MedikuDarboValdymasDialogas		6588
#define KurjeriuDarboValdymasDialogas	6589
#define MechanikuDarboValdymasDialogas	6590
#define DyleriuDarboValdymasDialogas	6591
#define FuristuDarboValdymasDialogas	6592
#define PolicijosEXPDialogas			6593
#define MedikuEXPDialogas				6594
#define KurjeriuEXPDialogas				6595
#define MechanikuEXPDialogas			6596
#define DyleriuEXPDialogas				6597
#define FuristuEXPDialogas				6598
#define TurgausDialog					6599
#define PagrTAdialog					6600
#define MasinuPagrDialogas				6601
#define MasinuAtstatymoDialogas1		6602
#define MasinuAtstatymoDialogas2		6603
#define MasinuAtstatymoDialogas3		6604
#define MasinuValdymoDialogas1			6605
#define MasinuValdymoDialogas2			6606
#define MasinuValdymoDialogas3			6607
#define MasinosPardZaidejui1			6608
#define MasinosPardDialogas1			6609
#define MasinosPirkimoDialogas1			6610
#define MasinosPardavimas1				6611
#define MasinosAtidDialogas1			6612
#define MasinosInfo1					6613
#define MasinosPardZaidejui2			6614
#define MasinosPardDialogas2			6615
#define MasinosPirkimoDialogas2			6616
#define MasinosPardavimas2				6617
#define MasinosAtidDialogas2			6618
#define MasinosInfo2					6619
#define MasinosPardZaidejui3			6620
#define MasinosPardDialogas3			6621
#define MasinosPirkimoDialogas3			6622
#define MasinosPardavimas3				6623
#define MasinosAtidDialogas3			6624
#define MasinosInfo3					6625
#define PiltiKuraDialog					6626
#define PakrautiMasina					6627
#define TSRegDialog						6628
#define LigoninesIsejimas				6629
#define ItaDialog						6630
#define PatikrinimoDialogas 			6631
#define LeduPirkimoDialogas 			6632
#define HotDogPirkimoDialogas 			6633
#define AtsiskaitymasUzMaista 			6634
#define ValgytiMaista 					6635
#define PropertyChangeNameDialog		6636
#define PropertySellDialog2				6637
#define GinkluParduotuvesDialog			6638
#define GaujosTobulininimas				6639
#define PropertyUpgradeDialog2 			6640
#define MasinuPagrDialogas2 			6641
#define VielosPirkimas		 			6642
#define PagrTAdialog1					6643
#define FastFoodPirkimoDialogas 		6644
#define CluckinBellDialogas 			6646
#define BurgerShotDialogas 				6647
#define PicerijosDialogas 				6648
#define PagrTaksiLicDialog 				6649
#define PirmasKlausimas 				6650
#define AntrasKlausimas 				6651
#define TreciasKlausimas 				6652
#define KetvirtasKlausimas 				6653
#define PenktasKlausimas 				6654
#define FALDialog 		 				6655
#define SALDialog 						6656
#define TALDialog 						6657
#define MasinuPagrDialogas3 			6658
#define MasinuAtstatymoDialogas4		6659
#define MasinuAtstatymoDialogas5		6660
#define MasinuAtstatymoDialogas6		6661
#define AtsiskaitymasUzKura 			6662
#define GinkluSandelis 					6663
#define PaimtiAK 						6664
#define PaimtiSG 						6665
#define PadetiAK 						6666
#define PadetiSG 						6667
#define NarkSandelis 					6668
#define PaimtiHero 						6669
#define PaimtiEkst 						6670
#define PadetiHero 						6671
#define PadetiEkst 						6672
#define PaimtiWeed 						6673
#define PaimtiKokso 					6674
#define PadetiWeed 						6675
#define PadetiKokso 					6676
#define AKValdymas	 					6677
#define SGValdymas	 					6678
#define HeroValdymas	 				6679
#define EkstValdymas	 				6680
#define WeedValdymas	 				6681
#define KoksoValdymas	 				6682
#define DGLValdymas 					6683
#define PadetiDGL 						6684
#define PaimtiDGL 						6685
#define VehicleTrunkSelectionDialog     6686
#define VehicleTrunkDepositDialog       6687
#define VehicleTrunkWitdrawDialog       6689
#define TrunkWeaponAmmountDeposit       6690
#define TrunkItemAmmountWitdraw         6691
#define PlayerTelphoneInboxDialog       6692
#define PlayerTelphoneInboxWatch 		6693
#define GaujuValdymoDialog 				6694
#define GaujuKeitimoDialog 				6695
#define KeistiPavadinima 				6696
#define IsmestiLyderi 					6697
#define PaskirtiLyderi 					6698
#define GaujosNariai 					6699
#define Uzstatas1 						6700
#define Uzstatas2 						6701
#define GarazasDialog 					6702
#define DraudimoDialog 					6703
#define MechDialog 						6704
#define NitroDialog 					6705
#define MechTuneDialog					6706
#define MechColorDialog 				6707
#define SpoilerisDialog 				6708
#define SideskirtsDialog 				6709
#define StogasDialog 					6710
#define PaintjobDialog 					6711
#define IsmetimasDialog 				6712
#define GalinisBamperisDialog 			6713
#define PriekinisBamperisDialog 		6714
#define NutrauktiGarazoNuoma 			6715
#define PirktiGaraza 					6716
#define NuomosLaikas 					6717
#define GarazoValdymas 					6718
#define KauliukoDialog 					6719
#define DazasvydzioDialog 				6720
#define PradetiDazasvydiDialog 			6721
#define IsejimasDialog 					6722
#define PadetiISeifa 					6723
#define PaimtiIsSeifo 					6724
#define PagrSeifoValdymas 				6725
#define PadetiGinklusInput 				6726
#define PaimtiGinklusInput 				6727
#define PaimtiGinklus 					6728
#define PagrGinkluValdymas 				6729
#define PagrNamoValdymas 				6730
#define PagrNarkValdymas 				6731
#define NarkValdymas 					6732
#define PadetiNark 						6733
#define PaimtiNark 						6734
#define NamuGarazoValdymas 				6735
#define AtsisakytiNamo	 				6736
#define DIALOG_STARTGAMBLE				6737    //	DialogID of the dialog shown when a player types /gamble
#define DIALOG_STOPGAMBLE				6738
#define TaxiDarboValdymasDialogas		7000
#define TaxiEXPDialogas                 7001


#define GAMBLE_WAGER(%0)	PI[%0][Stafke]       //  Amount of money a player has to pay whenever he spins the slot machine (wager)
#define REWARD_DOUBLEBAR	6    //  Amount of money a player recieves when he has 3x the double goldbars (Should be highest value)
#define REWARD_BAR			5    //  Amount of money a player recieves when he has 3x the single goldbar
#define REWARD_BELL			4     //  Amount of money a player recieves when he has 3x the gold bell
#define REWARD_CHERRY		3     //  Amount of money a player recieves when he has 3x the cherry
#define REWARD_GRAPES		2     //  Amount of money a player recieves when he has 3x the grapes
#define REWARD_SIXTYNINE	1     //  Amount of money a player recieves when he has 3x the 69 (Should be lowest value)

#define GELTONAS_MYGTUKAS 				1
#define RAUDONAS_MYGTUKAS 				2
#define MELYNAS_MYGTUKAS 				0
#define ZALIAS_MYGTUKAS 				3

#define IP_LIMIT 2 // = Max connections from one single IP
#define SAME_IP_CONNECT 4 // = The number of connects from the same IP before banning the flooder
new Same_IP=0,Join_Stamp,ban_s[25],exceed=0;
#define Time_Limit 3500 // = The time span between connects, adjust it to your own specifications

#define GREEN           				0x3AD73AAA
#define YELLOW          				0xFFFF00AA
#define HOMER           				0xFF0000AA
#define BLUE            				0x33CCFFAA
#define ABLUE           				0x2641FEAA
#define SYNTAX          				0xAA3333AA
#define OTHER           				0xFF6347AA
#define WHITE           				0xFFFFFFAA
#define RED             				0xFF000030
#define PURPLE          				0xC2A2DAAA
#define VIOLET          				0x9400D3AA
#define BALTA           				0xFFFFFFFF
#define PG 								0x98FEB9FF
#define COLOR_GREEN 					0x3AD73AAA
#define COLOR_RED 						0xAA3333AA
#define COLOR_YELLOW 					0xFFFF00AA
#define COLOR_WHITE 					0xFFFFFFAA
#define COLOR_BLUE 						0x0000BBAA
#define COLOR_LIGHTBLUE 				0x33CCFFAA
#define COLOR_ORANGE 					0xFF9900FF
#define COLOR_RACIJA 					0xFFFFFFFF
#define COLOR_RED 						0xAA3333AA
#define COLOR_LIME 						0x10F441AA
#define COLOR_MAGENTA 					0xFF00FFFF
#define COLOR_NAVY 						0x000080AA
#define COLOR_AQUA 						0xF0F8FFAA
#define COLOR_CRIMSON 					0xDC143CAA
#define COLOR_FLBLUE 					0x6495EDAA
#define COLOR_BISQUE 					0xFFE4C4AA
#define COLOR_BLACK 					0x000000AA
#define COLOR_CHARTREUSE 				0x7FFF00AA
#define COLOR_BROWN 					0XA52A2AAA
#define COLOR_CORAL 					0xFF7F50AA
#define COLOR_GOLD 						0xB8860BAA
#define COLOR_GREENYELLOW 				0xADFF2FAA
#define COLOR_INDIGO 					0x4B00B0AA
#define COLOR_IVORY 					0xFFFF82AA
#define COLOR_LAWNGREEN 				0x7CFC00AA
#define COLOR_LIMEGREEN 				0x32CD32AA
#define COLOR_MIDNIGHTBLUE 				0X191970AA
#define COLOR_MAROON 					0x800000AA
#define COLOR_OLIVE 					0x808000AA
#define COLOR_ORANGERED 				0xFF4500AA
#define COLOR_PINK 						0xFFC0CBAA
#define COLOR_SPRINGGREEN 				0x00FF7FAA
#define COLOR_TOMATO 					0xFF6347AA
#define COLOR_YELLOWGREEN 				0x9ACD32AA
#define COLOR_MEDIUMAQUA 				0x83BFBFAA
#define COLOR_MEDIUMMAGENTA 			0x8B008BAA
#define COLOR_BRIGHTRED 				0xDC143CAA
#define COLOR_SYSTEM 					0xEFEFF7AA
#define COLOR_RED 						0xAA3333AA
#define COLOR_PURPLE 					0x330066AA
#define COLOR_INDIGO 					0x4B00B0AA
#define COLOR_GRAD1 					0xB4B5B7FF
#define COLOR_GRAD2 					0xBFC0C2FF
#define COLOR_GRAD3 					0xCBCCCEFF
#define COLOR_GRAD4 					0xD8D8D8FF
#define COLOR_GRAD5 					0xE3E3E3FF
#define COLOR_GRAD6 					0xF0F0F0FF
#define COLOR_LIGHTRED 					0xFF6347AA
#define COLOR_SALOTA 					0x40FF40FF
#define COLOR_GREY 						0xAFAFAFAA
#define COLOR_GREEN 					0x3AD73AAA
#define COLOR_WHITE 					0xFFFFFFAA
#define COLOR_BLUE 						0x0000BBAA
#define COLOR_LIGHTBLUE 				0x33CCFFAA
#define COLOR_MAGENTA 					0xFF00FFFF
#define COLOR_LIGHTGREEN 				0x9ACD32AA
#define COLOR_FIOLET 					0xAD5BFF30
#define TEXTCOL_WHITE 					0xFFFFFF30
#define TEXTCOL_SILVER 					0xD2D2D230
#define TEXTCOL_GREY 					0x80808030
#define TEXTCOL_BLACK 					0x00000030
#define TEXTCOL_GREEN 					0x98B13430
#define TEXTCOL_DARKGREEN 				0x00800030
#define TEXTCOL_RED 					0xFF000030
#define TEXTCOL_DARKRED					0xA6000030
#define TEXTCOL_BLUE 					0x6FA7FB30
#define TEXTCOL_DARKBLUE 				0x0000A830
#define TEXTCOL_GOLD 					0xE3B92430
#define TEXTCOL_BROWN 					0xC1762B30
#define TEXTCOL_DARKBROWN 				0x80400030
#define TEXTCOL_PINK 					0xFF80FF30
#define TEXTCOL_VIOLET 					0xAD5BFF30
#define ADMIN_COLOR 					0xB9B58630
#define PLAYCOL_HIDDEN 					0x80808000
#define COLOR							TEXTCOL_GOLD
#define SAVE_COLOR						COLOR_RED

#if !defined Loop
#define Loop(%0,%1) \
        for(new %0 = 0; %0 != %1; %0++)
#endif
 
#if !defined function
#define function%0(%1) \
        forward%0(%1); public%0(%1)
#endif

//CP JOHURT DEFINE
#define MAX_PLAYER_CPS  70
#define PLUS_CP_SIZE    2.0
#define s_%1; new tstr[128]; tstr=%1; return tstr;
#define ANTI_V(%1) \
	1 << (%1-400 & 0x1F)
#define TAZE_WEAPON 	23 // The weapon the tazer needs to be attached to.
#define TAZE_TIMER 		5000 // The time needed to be spent until the criminal automatically gets up.
#define TAZE_SPARK 		18717 // The objectid of the spark (It's recommended you don't change this...)
#define TAZE_DESTROY 	1250 // The time needed to be spent until the spark dissappears.
#define TAZE_LOSEHP 	1 // Set to 1 if you want the victim to lose health when shot. Set 0 or any

#define SetPlayerHealthEx(%0,%1) PI[%0][pHealthCheck] = gettime() + 5, PI[%0][PlayerHealth]=%1, SetPlayerHealth(%0,%1) // F-ja duoti zaidejui hp kad anticytas nepiktu.
#define SetPlayerArmourEx(%0,%1) PI[%0][pHealthCheck] = gettime() + 5, PI[%0][PlayerArmour]=%1, SetPlayerArmour(%0,%1) // F-ja duoti zaidejui ar kad anticytas nepiktu.

//#define GivePlayerMoneyA(%0,%1) PI[%0][pCashCheck] = gettime() + 15, PI[%0][pinigai] += %1, GivePlayerMoney(%0, %1)
//#define SetPlayerMoneyA(%0,%1) PI[%0][pCashCheck] = gettime() + 15, PI[%0][pinigai] = %1, ResetPlayerMoney(%0), GivePlayerMoney(%0, %1)
#define GetPlayerMoneyA(%0) PI[%0][pinigai]
//#define ResetPlayerMoneyA(%0) PI[%0][pCashCheck] = gettime() + 15, PI[%0][pinigai] = 0, ResetPlayerMoney(%0)


#define MAX_PING_KICK       400
#define MAX_SPEED_KICK      270
#define PIRKO_PASLAUGAS		"logs/pirkimai.txt"

#define I_PD_PELNA          10 // Pelnas[0]
#define I_MECHANIKU_PELNA	10 // Pelnas[1]
#define I_KURJ_PELNA        10 // Pelnas[2]
#define I_MEDIKU_PELNA		10 // Pelnas[3]
#define I_ARAS_PELNA		10 // Pelnas[4]
#define I_CARMELLO_PELNA	10 // Pelnas[5]
#define I_AZTECA_PELNA		10 // Pelnas[6]
#define I_FURU_PELNA		10 // Pelnas[8]
#define I_TAXI_PELNA		10 // Pelnas[9]

#define PELNO_DIALOG1       130
#define PELNO_DIALOG2       131
#define PELNO_DIALOG3       132
#define PELNO_DIALOG4       133
#define PELNO_DIALOG5       134

#define TUNE_NONE 			1
#define TRANSFENDER 		2
#define LOCOLOW 			3
#define ARCHANGELS 			4

#define C_RED				0xFF0000FF
#define C_YELLOW			0xFFFF00AA
#define CAR_COLOR_ON_MAP    C_YELLOW
#define INSURANCE_COST      2000
#define REGISTER_COST		1500
#define INSURANCE_TIME      1296000
#define CAMERA_POS_X		-2168.9526
#define CAMERA_POS_Y        -2454.6445
#define CAMERA_POS_Z        2056.9568
#define VEHICLE_POS_X       -2161.0115
#define VEHICLE_POS_Y       -2464.1731
#define VEHICLE_POS_Z       2056.3301
#define VEHICLE_POS_R		0.1138
#define GARAGE_POS_MINX     2366.8879
#define GARAGE_POS_MINY     257.8214
#define GARAGE_POS_MAXX     2379.1584
#define GARAGE_POS_MAXY     265.9849

#define vSHOP_DIALOGID1		99
#define vCAR_CONTROL        101
#define vCAR_GIVE_DIALOG1	102
#define vCAR_GIVE_DIALOG2   103
#define vCAR_SELL_DIALOG1	104
#define vCAR_SELL_DIALOG2   105
#define vCAR_SELL_DIALOG3   106
#define vCAR_SELL_DIALOG4   107
#define vCAR_INFO_DIALOG    108

//Mano
#define DIALOG_SPALVOS_PASIRINKIMAS 900
#define DIALOG_MASINOS_VALDYMAS 1020
#define DIALOG_MASINOS_ATIDAVIMAS	1021
#define DIALOG_MASINOS_ATIDAVIMAS2   1022
#define DIALOG_MASINOS_PARDAVIMAS	1023
#define DIALOG_MASINOS_PARDAVIMAS2   1024
#define DIALOG_MASINOS_PARDAVIMAS3   1025
#define DIALOG_MASINOS_PARDAVIMAS4   1026
#define DIALOG_MASINOS_INFO   1027


#define DIALOG_SLAPTAZODZIO_KEITIMAS 1041
#define DIALOG_SLAPTAZODZIO_KEITIMAS2 1043
#define DIALOG_BAUDOS_MOKEJIMAS_PASTATE 1040

#define DIALOG_MASINU_IMONTAVIMAI 140 //Pirmos maðinos draudimas, registravimas
#define DIALOG_MASINOS_REIKMENYS 141//Pirmas maðinos draudimas, registravimas
#define DIALOG_MASINOS_REIKMENYS2 142 //Antros maðinos draudimas, registravimas

#define DIALOG_NUSTATYMAI 6000

//Darbø paremimas.
#define DIALOG_DARBU_PAREMIMAS 6010

#define DIALOG_PAREMTI_MENTUS 6011
#define DIALOG_PAREMTI_MEDIKUS 6012
#define DIALOG_PAREMTI_KURJERIUS 6013
#define DIALOG_PAREMTI_MECHANIKUS 6014
#define DIALOG_PAREMTI_DYLERIUS 6015
#define DIALOG_PAREMTI_FURISTUS 6017
#define DIALOG_PAREMTI_TAXI     7002

#define NAUJOKO_LAIKAS		420
#define LEISTINAS_GREITIS	90

#define PICU_ISIDARBINIMO_XP         100
#define VALYTOJU_ISIDARBINIMO_XP     300
#define AUTOBUSU_ISIDARBINIMO_XP     600
#define GAISRININKU_ISIDARBINIMO_XP  800


#define GREICIO_RIBA 0.47
#define GT_SPEED 185

//#define strcpy(%0,%1,%2) strcat((%0[0] = '\0', %0), %1, %2)
//#define isnull(%1) ((!(%1[0])) || (((%1[0]) == '\1') && (!(%1[1]))))
//#define HOLDING(%0) ((newkeys & (%0)) == (%0))
#define SLOT 10
#define SPAO{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, POLICEHAT_ATTACH_SLOT, 18645, 2, (%0), (%1), (%2), (%3), (%4), (%5));

#define MAX_ZONES  3 // Maksimalos saugiu zonu kiekis.
#define MAX_WARNS  5 // Maksimalus ispejimu kiekis.
#define WARN_COLOR 0xf6102bFF // Ispejimo spalva.
#define ZONE_COLOR 0x66ff0096 // Saugiu zonu spalva.


#define LEAD_FARAI 		1
#define LEAD_MEDIKAI 	2
#define LEAD_KURJ 		3
#define LEAD_Mechanikas 4
#define LEAD_FUROS 		11
#define LEAD_Gdyleriai	5
#define LEAD_TAXI       13

#define POLICIJA			1
#define MEDIKAI				2
#define KURJERIAI 			3
#define MECHANIKAI 			4
#define DYLERIAI 			5
#define FURISTAI			11
#define PICAI 				20
#define KELIAI 				22
#define AUTOBUSAI 			24
#define GAISRAI 			26
#define TAXI                13

#define CARMELLO 			30
#define AZTECA 				32

#define NO_LEAD 0

#define STATIONS 36
#define STATION_SIZE 20

#define BE_MIN_HLS 500.00
#define BE_MAX_SPD_VAR 50
#define BE_MAX_SPD BE_MAX_SPD_VAR*0.005

#define GetPlayerNameEx(%0) PI[%0][PlayerName]
#define GetPlayerIpEx(%0)   PI[%0][PlayerIP]

#define SmsNumeris 		1398

#define PIZZA_DELIVERY_CHECKPOINT		45

#define sZOLE 		0
#define sKOKAINAS 	1
#define sEKSTAZI 	2
#define sHEROINAS 	3

#define HOLDING(%0) 	((newkeys & (%0)) == (%0)) // Laiko mygtukà
#define PRESSED(%0) 	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0))) // Paspaudþia mygtukà
#define RELEASED(%0) 	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0))) // Atleidþia mygtukà

/*
	SVARBU: norint tikrinti ar þmogus spaudþia 2 mygtukus reikia naudoti '||', o ne '&&'.
*/

new
        xCharacters[][] =
        {
            "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
                "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
            "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
                "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
            "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"
        },
        xChars[16] = "",
        xCash,
        bool: xTestBusy
;

new Float:RandomCarSpawn[][3] =
{
    {-2319.9392,-112.6036,35.1531},
    {-2324.9888,-112.5585,35.1531},
    {-2330.0417,-112.5133,35.1531},
    {-2335.0151,-112.4688,35.1531},
    {-2340.1013,-112.4233,35.1531},
    {-2345.1096,-112.3785,35.1531},
    {-2350.2319,-112.3327,35.1531},
    {-2355.1279,-112.2889,35.1531}
};

new Text:gang_zone_g[3], PlayerText:gang_zone_p[MAX_PLAYERS][1];
new Text3D: gatesText[10];
new LeftSpinner[MAX_PLAYERS];
new MiddleSpinner[MAX_PLAYERS];
new RightSpinner[MAX_PLAYERS];
new GamblingMachine;
new Float:ZOff[MAX_PLAYERS] = 0.0005;
new PreSpinTimer[MAX_PLAYERS];
new SymbolSL[MAX_PLAYERS],SymbolSM[MAX_PLAYERS],SymbolSR[MAX_PLAYERS];
new Float:pX[MAX_PLAYERS], Float:pY[MAX_PLAYERS], Float:pZ[MAX_PLAYERS];
new Text3D:GambleLabel[22];
new Float:Rotations[18] = {0.0, 20.0, 40.0, 60.0, 80.0, 100.0, 120.0, 140.0, 160.0, 180.0, 200.0, 220.0, 240.0, 260.0, 280.0, 300.0, 320.0, 340.0};
new ResultIDsLeft[18] = {2, 3, 1, 4, 6, 5, 6, 5, 4, 3, 4, 1, 6, 5, 3, 5, 4, 6};
new ResultIDsMiddle[18] = {3, 4, 6, 5, 2, 4, 5, 6, 4, 1, 5, 3, 6, 1, 6, 3, 4, 5};
new ResultIDsRight[18] = {5, 6, 3, 4, 5, 4, 3, 5, 6, 1, 2, 6, 4, 3, 5, 1, 4, 6};
new ResultNames[][] =
{
	"ld_slot:bar1_o",
	"ld_slot:bar2_o",
	"ld_slot:r_69",
	"ld_slot:bell",
	"ld_slot:grapes",
	"ld_slot:cherry"
};
new bool:IsGambling[MAX_PLAYERS];
new bool:movedup[MAX_PLAYERS] = false;
new bool:IsSpinning[MAX_PLAYERS] = false;
new Float:BanditLocs[22][4] =
{
    {2218.6675,1617.8453,1006.1818},
    {2218.6365,1615.4679,1006.1797},
    {2218.6467,1613.5095,1006.1797},
    {2221.9204,1603.9452,1006.1797},
    {2219.9626,1603.9191,1006.1797},
    {2218.2646,1603.9263,1006.1797},
    {2216.3064,1603.8970,1006.1819},
    {2218.6538,1593.6243,1006.1797},
    {2218.6699,1591.6659,1006.1859},
    {2218.6367,1589.3187,1006.1841},
    {2218.6531,1587.3612,1006.1827},
    {2255.1624,1608.8839,1006.1860},
    {2255.1670,1610.8419,1006.1797},
    {2255.1726,1612.9315,1006.1797},
    {2255.1494,1614.8890,1006.1797},
    {2255.1453,1616.8290,1006.1797},
    {2255.1399,1618.7893,1006.1797},
    {2268.5322,1606.6649,1006.1797},
    {2270.4905,1606.6846,1006.1797},
    {2272.5798,1606.6464,1006.1797},
    {2274.5374,1606.6764,1006.1797},
    {2218.6458,1619.8035,1006.1794}
};

enum tDraws
{
    PlayerText:Textdraw0,
	PlayerText:Textdraw1,
	PlayerText:Textdraw2,
	PlayerText:Textdraw3,
	PlayerText:Textdraw4,
	PlayerText:Textdraw5,
	PlayerText:Textdraw6,
	PlayerText:Textdraw7,
	PlayerText:Textdraw8,
	PlayerText:Textdraw9,
	PlayerText:Textdraw10,
	PlayerText:Textdraw11,
	PlayerText:Textdraw12,
	PlayerText:Textdraw13,
	PlayerText:Textdraw14,
	PlayerText:Textdraw15,
	PlayerText:Textdraw16,
	PlayerText:Textdraw17,
	PlayerText:Textdraw18,
	PlayerText:Textdraw19,
	PlayerText:Textdraw20,
	PlayerText:Textdraw21,
	PlayerText:Textdraw22,
	PlayerText:Textdraw23,
	PlayerText:Textdraw24,
	PlayerText:Textdraw25,
	PlayerText:Textdraw26,
	PlayerText:Textdraw27,
	PlayerText:Textdraw28,
	PlayerText:Textdraw29,
	PlayerText:Textdraw30,
	PlayerText:Textdraw31,
	PlayerText:Textdraw32,
	PlayerText:Textdraw33,
	PlayerText:Textdraw34,
	PlayerText:Textdraw35,
	PlayerText:Textdraw36,
	PlayerText:Textdraw37,
	TotalWon,
	TotalPaid,
	TotalTotal
}
new PlayerEnum[MAX_PLAYERS][tDraws];

forward SpinSpinners(playerid);
forward Prespin(playerid);
forward GiveResult(playerid);
forward SetPlayerWonPaid(playerid);

forward TarnybosKvietimas(playerid, number, vietuke[]);

new
	PlayerText:kliutis_p[MAX_PLAYERS][1],
    Text:kliutis_g[7]
;

new NesaPica[MAX_PLAYERS], bool: Pica[MAX_VEHICLES] = false, PicaCP[MAX_PLAYERS] = false;
new Text3D:	FirstLektuvoText[12];
new Text3D:	SecondLektuvoText[14];
new Text3D:	ThirdLektuvoText[17];
new
	Pizzaboy[14]
;
new KoksNarkotikas[MAX_PLAYERS];
new KokeGauja;
new ZeroGangID[2];
new FirstGangID[2];
new SecondGangID[2];
new SelectedCreditHouseID[MAX_PLAYERS];

new Text:zvejybos_td_g[6];
new PlayerText:zvejybos_td_p[MAX_PLAYERS][7];

new TaksiMasina[10];
new MedikuMasina[12], MedikuZenklas[6], KurjeriuMasina[9], FuristuMasina[10], FuristuPriekaba[10], PolicijosMasina[23], VairavimoMokyklosMasina[11],
	iPhonePrice, SamsungPrice, NokiaPrice, SonyPrice, AlcatelPrice, HTCPrice, DefaultContractPrice, AbonentContractPrice, ShotgunBulletCount, Ak47BulletCount, WeedDoseCount,
	HeroineDoseCount, EkstaziDoseCount, CocaineDoseCount, MedikuVartai, pdvartai, pdvartai2, pdvartai3, BCategoryLicensePrice, ACategoryLicensePrice, FuristuVartai, DeagleBulletCount,
	CCategoryLicensePrice, TheoryLicensePrice, Text3D: GunsLabel[3], Text3D: DrugsLabel[4], afondas, ClothesShopSkins[300], TotalClothesShopSkins,
	ClothesShopSkinPrices[sizeof(ClothesShopSkins)], SelectedSkin[MAX_PLAYERS], SelectedGangSkin[MAX_PLAYERS],pCPID[MAX_PLAYERS], Float:pCPPosX[MAX_PLAYERS][MAX_PLAYER_CPS], Float:pCPPosY[MAX_PLAYERS][MAX_PLAYER_CPS], Float:pCPPosZ[MAX_PLAYERS][MAX_PLAYER_CPS],
	Float:pCPSize[MAX_PLAYERS][MAX_PLAYER_CPS], bool:pCPShow[MAX_PLAYERS][MAX_PLAYER_CPS], SekamasZaidejas[MAX_PLAYERS], bool:Prisijunges[MAX_PLAYERS],
	ChoosedPlayers[MAX_PLAYERS], PropertyPrice[MAX_PLAYERS], IskraunamviskaisfurosEx[MAX_PLAYERS], KraunamdviraciusEx[MAX_PLAYERS], KraunambaldusEx[MAX_PLAYERS], KraunambuittechEx[MAX_PLAYERS],
	KraunamanglisEx[MAX_PLAYERS], KraunamzvyraEx[MAX_PLAYERS], KraunamgunusEx[MAX_PLAYERS], KraunamnarkusEx[MAX_PLAYERS], KraunamzoleEx[MAX_PLAYERS], ZvejojaEx[MAX_PLAYERS],
	UzkiboEx[MAX_PLAYERS], Floodas[MAX_PLAYERS], bool:Logged[MAX_PLAYERS], bool: VardaiIsjungti[MAX_PLAYERS], bool: AtstatomosMasinos = false, nuomaTimer[MAX_PLAYERS],
	Float: VehPos[MAX_VEHICLES][4], CanCheckVehiclePos[MAX_VEHICLES], Text: KalejimoLaikoTd[MAX_PLAYERS], GateAllreadyRotated[MAX_OBJECTS], PlayersOnlineRecord, bool: InTrainingZone[MAX_PLAYERS],
	bool: KvieciaTarnyba[MAX_PLAYERS], AntiAntiBan[MAX_PLAYERS], ZoneNoGunLic, GreitiMatuoja[MAX_PLAYERS], bool: Vartai[30], bool: Tazer[MAX_PLAYERS], Spark[MAX_PLAYERS],
	bool: Tazed[MAX_PLAYERS], Pelnas[11], HouseID[MAX_PLAYERS], ChoosedPlayer[MAX_PLAYERS], HouseCost[MAX_PLAYERS],
	bool: Ribotuvas[MAX_PLAYERS], Float: g_fSpeedCap[MAX_PLAYERS] = {0.0, ...}, RadijosPavadinimas[MAX_VEHICLES][19], RadijosURL[MAX_VEHICLES][87], Zone[MAX_ZONES], Warns[MAX_PLAYERS],
	bool: IsPlayerInZone[MAX_PLAYERS], keleivis[MAX_PLAYERS], Float: PickupIDs[2000][3], PModels[2000], bool: BE_Play_Check[MAX_PLAYERS], bool: Skaicevimas,
	PlayerText: TimeDateTD[MAX_PLAYERS][2], bool: zVarzybos = false, zVarzybuPrizas, bool: TuriIskvietima[MAX_PLAYERS], Text3D: tUztvara[MAX_PLAYERS],
	KiekSugavo[MAX_PLAYERS], /*Masiniukas, */Rangiukas[ 20 ], Idukas, Vardukas[ MAX_PLAYER_NAME ], ViskasDuX, SkaitymoLaikas[MAX_PLAYERS],
	Float:AC_oldPos[MAX_PLAYERS][3], AC_oldPlayerState[MAX_PLAYERS], CanCheckABX[MAX_PLAYERS], bool:CanCheckAirBreak[MAX_PLAYERS], NeedCheckTuningAB[MAX_PLAYERS], AntiF4[MAX_PLAYERS],
	BusDriversVehicle[7], bool: BusDriversCityBlueberry[MAX_PLAYERS], bool: BusDriversCityFortCarson[MAX_PLAYERS], bool: BusDriversCityElQuebrados[MAX_PLAYERS], bool: BusDriversCityDillimore[MAX_PLAYERS],
	bool: BusDriversCityMontgomery[MAX_PLAYERS], bool: BusDriversCityLasPayasdas[MAX_PLAYERS], bool: BusDriversCityPalominoCreek[MAX_PLAYERS], SafetyZoneID[3], PardavimoZona,
	HowMuchZonesIs = 0, ArasMasina[21], bool: ArTurgausMasina[MAX_VEHICLES], KraunamTurgu[28], SaugomTurgu[28], ParodosMasina[8], NuomosKaina[MAX_VEHICLES],
	/*Text: MasinuSalonas[MAX_PLAYERS][14],*/ bool: IskraunaMasinaP[MAX_PLAYERS], IskraunamMasina[MAX_PLAYERS], KraunamMasina[MAX_PLAYERS], KelintasApmokymas[MAX_PLAYERS],
	bool: KraunaMasinaP[MAX_PLAYERS], FuelTimer[MAX_PLAYERS], PasirinktasZaidejas[MAX_PLAYERS], MasinosKainaEx[MAX_PLAYERS], Float: KiekIpyle[MAX_PLAYERS], IpyleSuma[MAX_PLAYERS],
	HowMuchEntrancesIs = 0, NoCheckEntrancePickup[MAX_PLAYERS], /*LigoninesStogas,*/ LigoninesID, /*PolicijosStogas, PolicijosGalas,*/ PlayerText: EnterExitTextdraw[MAX_PLAYERS]   = INVALID_PLAYER_TEXT_DRAW,
	PlayerText: TextDrawSlotUse  [MAX_TEXTDRAWS_IN_SERVER] = INVALID_PLAYER_TEXT_DRAW, Text: AlkioTD[MAX_PLAYERS], ArasVartai[3],
	ItariamasZaidejas[MAX_PLAYERS], LeduPardavejas[2], HotDoguPardavejas[10], KurjeriuSlagbaumas, KMAVartai, bool: LaikPasleptas[MAX_PLAYERS], Text3D: BusDriversText[7],
	Ugnis[MAX_PLAYERS], UgniesProc[MAX_PLAYERS], Float: GaisroPos[MAX_PLAYERS][3], bool: HoldingKey[MAX_PLAYERS], /*PolicijosSlagbaumas,*/ VersloKaina[MAX_PLAYERS], VersloID[MAX_PLAYERS],
	highestid = INVALID_PLAYER_ID, bool: TuriGaisra[MAX_PLAYERS], VykstaGrobimas = -1, KaGrobia = 0, GrobimoLaikas = 0, KadaGrobe = 0, Botas[49], KasaEx[MAX_PLAYERS],
	highestidM = INVALID_PLAYER_ID, bool: mVarzybos = false, mVarzybuPrizas, Float: KiekIskases[MAX_PLAYERS], MedikuSlagbaumas, TaksiZenklas[MAX_PLAYERS],
	bool: ArTaksi[MAX_VEHICLES], PasikrovimoSlagbaumas, vKrovinys[MAX_VEHICLES], vKrovinioVerte[MAX_VEHICLES], vKrovinioAtlygis[MAX_VEHICLES], KaroZona,
	Float: vK_Pos[MAX_VEHICLES][3], DegalineID[5], garageID[MAX_PLAYERS], EventMasinos[41], ArasZenklas[6], ArasTekstas[6], KurjTekstas[9], KurjTekstas1[9], RandomScreenShowNumber[MAX_PLAYERS], SlagbaumMirki
;
new bool: Lektuvas = false, Lektuvas1[20], Lektuvas2[22], Lektuvas3[30], KoksLektuvas;
new GangClothesShopSkins[300], GangTotalClothesShopSkins, GangClothesShopSkinPrices[sizeof(ClothesShopSkins)];
new KokiaGaujaValdo[MAX_PLAYERS];
new pGarageID[MAX_PLAYERS], nGarageID[MAX_PLAYERS];
new GarazoVartai[13];
new NamuGarazoVartai[2];
new Geltontaskiai = 0, Zaltaskiai = 0, Roundlaikis = 0;
new gPointss = 0, zPoints = 0, rTime = 0;
new MechanikuMasina[15];
new
	Float: Pos[MAX_PLAYERS][3],
	bool: playerInfo[MAX_PLAYERS][2],
	bool: Spawned[MAX_PLAYERS],
	spectateInfo[MAX_PLAYERS][5]
;

new Dazasvydis[MAX_PLAYERS];
new GerGauja;

new /*KiekIvygde,*/ bool: SandelisP = false;
new PlayerTelphoneInbox[MAX_PLAYERS][MAX_INBOX_SENT_SLOTS][800];

//new DarbuBotai[10];

enum FishingSystem
{
	Fishing,
	FishingColor,
	FishingExperience,
	FishingLevel,
	FishWeight,

	Float: FishingProgress
}

new FS[MAX_PLAYERS][FishingSystem];
new FishingTimer[MAX_PLAYERS];
new FishingUpdateTimer[MAX_PLAYERS];

enum CreditHouseData
{
	_cHouseID,
	_cHouseOwner[MAX_PLAYER_NAME + 1],
	_cHouseTimeLeft,
	_cHouseChest,
	_cHousePrice,
	_cHouseDrugs1,
	_cHouseDrugs2,
	_cHouseDrugs3,
	_cHouseDrugs4,
	_cHousePickup,

	Text3D:	_cHouseText,
	Float: 	_cHouseEnterPos[3],
	Float: 	_cHouseExitPos[3],
	Float: 	_cHouseGaragePos[6],

	bool: 	_cHouseLocked
}

new CHD[MAX_CREDIT_HOUSES][CreditHouseData];

enum AdminHelpSystem
{
	HelpsForToday,
	HelpsForWeek,
	HelpsInAll,
	HelpingPlayer,

	bool: AskedForHelp
}

new bool: HudasPasleptas[MAX_PLAYERS];
new AHS[MAX_PLAYERS][AdminHelpSystem];

new bool:swimming[MAX_PLAYERS];

new PlayerText:transporto_salonas_p[MAX_PLAYERS][3];
new Text:transporto_salonas_g[15];

new Text:hudas_g[6];
new PlayerText:hudas_p[MAX_PLAYERS][3];
new PlayerText:sumustinis[MAX_PLAYERS][1];

new Text:spidometras_g[8];
new PlayerText:spidometras_p[MAX_PLAYERS][8];

new Text:MetroCity_logo_g[4];

new Text:kuro_pilimas_g[6];
new PlayerText:kuro_pilimas_p[MAX_PLAYERS][3];

new Text:saugi_zona_g[6];

new Text:login_register_g[10];

new Text:lyties_pasirinkimas_g[8];
new PlayerText:lyties_pasirinkimas_p[MAX_PLAYERS][2];

forward OnPlayerStartSwimming(playerid);
forward OnPlayerStopSwimming(playerid);
forward IsPlayerSwimming(playerid);

new Float:RandomSpawn[][6] =
{
    {-1963.1669,149.0626,26.3148},
    {-1963.1669,149.0626,26.3148},
    {-1963.1669,149.0626,26.3148},
    {-1963.1669,149.0626,26.3148},
    {-1963.1669,149.0626,26.3148}
};

new
	PlayerBar: FishingBar[MAX_PLAYERS] 		= {INVALID_PLAYER_BAR_ID, ...},
	PlayerBar: IskasenuBar[MAX_PLAYERS] 	= {INVALID_PLAYER_BAR_ID, ...}
;

/*new DealersDocksWeedPrice;
new DealersDocksExstaziPrice;
new DealersDocksCocainePrice;
new DealersDocksHeroinPrice;
new VielosKaina;

new DealersDocksHaveWeed;
new DealersDocksHaveExstazi;
new DealersDocksHaveCocaine;
new DealersDocksHaveHeroin;
new VieluKiekis;*/

new Laikrodziai, Fotikai, Navigacijos;

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ)
{
    new Float:TGTDistance;

    TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

    new Float:tmpX, Float:tmpY, Float:tmpZ;

    tmpX = FrX * TGTDistance + CamX;
    tmpY = FrY * TGTDistance + CamY;
    tmpZ = FrZ * TGTDistance + CamZ;

    return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

/*new Reidas[12];
new ReidoPickup[2];
new Text3D: ReidoText;*/

new SportinesMasinos[][] =
{
	{402, 	150000}, 	// Buffalo
	{411, 	370000},	// Infernus
	{415, 	110000}, 	// Cheetah
	{429, 	130000}, 	// Banshee
	{451, 	220000}, 	// Turismo
	{475, 	65000}, 	// Sabre
	{477, 	54000}, 	// ZR-350
	{496, 	45000}, 	// Blista
	{506, 	65000}, 	// Super GT
	{541, 	230000}, 	// Bullet
	{558, 	38000}, 	// Uranus
	{559, 	55000}, 	// Jester
	{560, 	190000}, 	// Sultan
	{562, 	230000}, 	// Elegy
	{565, 	48000}, 	// Flash
	{587, 	32000}, 	// Euros
	{603, 	36000},		// Alpha
	{482, 	58000}, 	// Burrito
	{579, 	133000}, 	// Huntley
	{589, 	31000}, 	// Club
	{555, 	35000}  	// Windsor
};

new Motociklai[][] =
{
	{461, 	65000}, 	// PCJ-600
	{462, 	2500},		// Faggio
	{463, 	78000}, 	// Freeway
	{468, 	40000}, 	// Sanchez
	{471, 	15000}, 	// Quad
	{521, 	110000}, 	// FCR-900
	{522, 	290000}, 	// NRG-500
	{581, 	80000}, 	// BF-400
	{586, 	35000} 		// Wayfarer
};

new Laivai[][] =
{
	{446, 	180000}, 	// Squallo
	{452, 	245000},	// Speeder
	{453, 	156000}, 	// Reefer
	{454, 	170000}, 	// Tropic
	{472, 	68000}, 	// Coastguard
	{473, 	45000}, 	// Dinghy
	{484, 	52000}, 	// Marquis
	{493, 	160000}, 	// Jetmax
	{595, 	64000} 		// Launch
};

new Float: RandomAtstatymas[][] =
{
	{-2355.5962,-113.3344,35.0849,359.8657},
	{-2350.4783,-113.1159,35.0849,0.3883},
	{-2345.0137,-112.4134,35.0845,359.4324},
	{-2340.4688,-112.9738,35.0848,3.0689}
};

new Float: RandomMotocikluSpawn[][] =
{
	{-1989.6771,275.6798,35.8989,270.0000},
	{-1989.8596,271.5236,35.8989,270.0000},
	{-1990.3446,267.4057,35.8989,270.0000},
	{-1990.5229,263.1932,35.8989,270.0000}
};

new Float: RandomSalonoSpawn[][] =
{
	{-1989.6771,275.6798,35.8989,270.0000},
	{-1989.8596,271.5236,35.8989,270.0000},
	{-1990.3446,267.4057,35.8989,270.0000},
	{-1990.5229,263.1932,35.8989,270.0000}
};

new Float: RandomLaivuSpawn[][] =
{
	{-2954.5491, 494.2160, 0.5657, 0.0000},
	{-2970.5522, 495.2376, 0.4854, 0.0000}
};

new Float: RandomTurgausSpawn[][] =
{
	{-2491.2869,383.7184,27.6409,54.8059},
	{-2494.0920,379.7404,27.6409,54.8059},
	{-2496.6638,375.0491,27.6409,54.8059},
	{-2498.5750,370.7797,27.6347,61.0636},
	{-2500.9604,366.3829,27.6406,61.5655},
	{-2503.1096,362.0354,27.6387,62.4677},
	{-2505.2981,357.2850,27.6367,62.0386}
};

new Float: RandomSpawnToHospital[][] =
{
	{-868.5062,875.6349,575.2287,0.5334},
	{-868.5062,875.6349,575.2287,0.5334}
};

static const gVehicleColors[] =
{
    0x000000AA, 0xF5F5F5AA, 0x2A77A1AA, 0x840410AA, 0x263739AA, 0x86446EAA, 0xD78E10AA, 0x4C75B7AA, 0xBDBEC6AA, 0x5E7072AA,
    0x46597AAA, 0x656A79AA, 0x5D7E8DAA, 0x58595AAA, 0xD6DAD6AA, 0x9CA1A3AA, 0x335F3FAA, 0x730E1AAA, 0x7B0A2AAA, 0x9F9D94AA,
    0x3B4E78AA, 0x732E3EAA, 0x691E3BAA, 0x96918CAA, 0x515459AA, 0x3F3E45AA, 0xA5A9A7AA, 0x635C5AAA, 0x3D4A68AA, 0x979592AA,
    0x421F21AA, 0x5F272BAA, 0x8494ABAA, 0x767B7CAA, 0x646464AA, 0x5A5752AA, 0x252527AA, 0x2D3A35AA, 0x93A396AA, 0x6D7A88AA,
    0x221918AA, 0x6F675FAA, 0x7C1C2AAA, 0x5F0A15AA, 0x193826AA, 0x5D1B20AA, 0x9D9872AA, 0x7A7560AA, 0x989586AA, 0xADB0B0AA,
    0x848988AA, 0x304F45AA, 0x4D6268AA, 0x162248AA, 0x272F4BAA, 0x7D6256AA, 0x9EA4ABAA, 0x9C8D71AA, 0x6D1822AA, 0x4E6881AA,
    0x9C9C98AA, 0x917347AA, 0x661C26AA, 0x949D9FAA, 0xA4A7A5AA, 0x8E8C46AA, 0x341A1EAA, 0x6A7A8CAA, 0xAAAD8EAA, 0xAB988FAA,
    0x851F2EAA, 0x6F8297AA, 0x585853AA, 0x9AA790AA, 0x601A23AA, 0x20202CAA, 0xA4A096AA, 0xAA9D84AA, 0x78222BAA, 0x0E316DAA,
    0x722A3FAA, 0x7B715EAA, 0x741D28AA, 0x1E2E32AA, 0x4D322FAA, 0x7C1B44AA, 0x2E5B20AA, 0x395A83AA, 0x6D2837AA, 0xA7A28FAA,
    0xAFB1B1AA, 0x364155AA, 0x6D6C6EAA, 0x0F6A89AA, 0x204B6BAA, 0x2B3E57AA, 0x9B9F9DAA, 0x6C8495AA, 0x4D8495AA, 0xAE9B7FAA,
    0x406C8FAA, 0x1F253BAA, 0xAB9276AA, 0x134573AA, 0x96816CAA, 0x64686AAA, 0x105082AA, 0xA19983AA, 0x385694AA, 0x525661AA,
    0x7F6956AA, 0x8C929AAA, 0x596E87AA, 0x473532AA, 0x44624FAA, 0x730A27AA, 0x223457AA, 0x640D1BAA, 0xA3ADC6AA, 0x695853AA,
    0x9B8B80AA, 0x620B1CAA, 0x5B5D5EAA, 0x624428AA, 0x731827AA, 0x1B376DAA, 0xEC6AAEAA, 0x000000AA, 0x177517AA, 0x210606AA,
    0x125478AA, 0x452A0DAA, 0x571E1EAA, 0x010701AA, 0x25225AAA, 0x2C89AAAA, 0x8A4DBDAA, 0x35963AAA, 0xB7B7B7AA, 0x464C8DAA,
    0x84888CAA, 0x817867AA, 0x817A26AA, 0x6A506FAA, 0x583E6FAA, 0x8CB972AA, 0x824F78AA, 0x6D276AAA, 0x1E1D13AA, 0x1E1306AA,
    0x1F2518AA, 0x2C4531AA, 0x1E4C99AA, 0x2E5F43AA, 0x1E9948AA, 0x1E9999AA, 0x999976AA, 0x7C8499AA, 0x992E1EAA, 0x2C1E08AA,
    0x142407AA, 0x993E4DAA, 0x1E4C99AA, 0x198181AA, 0x1A292AAA, 0x16616FAA, 0x1B6687AA, 0x6C3F99AA, 0x481A0EAA, 0x7A7399AA,
    0x746D99AA, 0x53387EAA, 0x222407AA, 0x3E190CAA, 0x46210EAA, 0x991E1EAA, 0x8D4C8DAA, 0x805B80AA, 0x7B3E7EAA, 0x3C1737AA,
    0x733517AA, 0x781818AA, 0x83341AAA, 0x8E2F1CAA, 0x7E3E53AA, 0x7C6D7CAA, 0x020C02AA, 0x072407AA, 0x163012AA, 0x16301BAA,
    0x642B4FAA, 0x368452AA, 0x999590AA, 0x818D96AA, 0x99991EAA, 0x7F994CAA, 0x839292AA, 0x788222AA, 0x2B3C99AA, 0x3A3A0BAA,
    0x8A794EAA, 0x0E1F49AA, 0x15371CAA, 0x15273AAA, 0x375775AA, 0x060820AA, 0x071326AA, 0x20394BAA, 0x2C5089AA, 0x15426CAA,
    0x103250AA, 0x241663AA, 0x692015AA, 0x8C8D94AA, 0x516013AA, 0x090F02AA, 0x8C573AAA, 0x52888EAA, 0x995C52AA, 0x99581EAA,
    0x993A63AA, 0x998F4EAA, 0x99311EAA, 0x0D1842AA, 0x521E1EAA, 0x42420DAA, 0x4C991EAA, 0x082A1DAA, 0x96821DAA, 0x197F19AA,
    0x3B141FAA, 0x745217AA, 0x893F8DAA, 0x7E1A6CAA, 0x0B370BAA, 0x27450DAA, 0x071F24AA, 0x784573AA, 0x8A653AAA, 0x732617AA,
    0x319490AA, 0x56941DAA, 0x59163DAA, 0x1B8A2FAA, 0x38160BAA, 0x041804AA, 0x355D8EAA, 0x2E3F5BAA, 0x561A28AA, 0x4E0E27AA,
    0x706C67AA, 0x3B3E42AA, 0x2E2D33AA, 0x7B7E7DAA, 0x4A4442AA, 0x28344EAA
};

enum GarageData
{
	GarageID,
	GarageOwner[MAX_PLAYER_NAME],
	GarageTimeLeft,

	Text3D: GarageText,
	Float: 	GaragePos[3]
}

new GI[MAX_GARAGES][GarageData];

enum GangZonesSystemData
{
	gZoneID,
	gZoneOwner,
	gZoneFlashing,
	gZoneTimeLeft,
	gZoneYield,

	Float: gMin_X,
	Float: gMin_Y,
	Float: gMax_X,
	Float: gMax_Y
};

new GangZonesSystem[MAX_ZONES_IN_SERVER][GangZonesSystemData];
new HowMuchGangZonesIs    = 0;

enum PropertyData
{
    bool: pCreated,
    bool: pBuyed,
    bool: pPelnas,

    pTitle[64],
    pOwner[24],
    pBuyDate[32],
    pPickup,
    pEarning,
    pPrice,
    pProfit,

    Float: pPos_X,
    Float: pPos_Y,
    Float: pPos_Z,

    Text3D: pText
};

new PropertyInfo[MAX_PROPERTYS][PropertyData];

enum EntranceSystemData
{
	EntranceTitle[64],
	Float: EntranceEnterPos[3],
	Float: EntranceInteriorPos[3],
	EntranceInteriorID,
	EntranceVirtualWorld
};

new EntranceSystem[MAX_ENTRANCES][EntranceSystemData];

enum r_GangSystem
{
	gTitle		[24],
	gLeader		[24],
	gDate 		[32],

	gPickup,
	gChest,
	gPoints,
	gSkin,
	Ginklai1,
	Ginklai2,
	Ginklai3,
	Narkai1,
	Narkai2,
	Narkai3,
	Narkai4,

	bool: gClosed,
	bool: gVirve,
	bool: gTele,
	bool: gIsodinti,
	bool: gKauke,
	bool: gKliutis,

	Float: 		G_Pos[3],
	Text3D:		gLabel
}

new GangInfo[MAX_GANGS][r_GangSystem];

enum AntiCheatSystemData
{
	CanCheckPlayer,
	Float: pCurrentPos[3],
	pWeaponsID[13],
	pWeaponsAmmo[13],
	pNoCheckWeapons,
	pNoCheckAirbreak,
	pLastTickCheck,
	pTextSpam,
	pCommandSpam,
	bool: PlayerShooting
}

new AntiCheatSystem[MAX_PLAYERS][AntiCheatSystemData];

enum E_AC_WEAPONS
{
	ac_WeaponId,
	ac_Ammo
};
new ac_Weapons[MAX_PLAYERS][13][E_AC_WEAPONS];
new ac_LastWeapon[MAX_PLAYERS];
new ac_SkipCheck[MAX_PLAYERS];
new Float:ac_VehicleHealth[MAX_VEHICLES];

enum TextDrawsSystemData
{
	PlayerText: TextDrawSlotID,
	TextDrawSystemColor,
	TextDrawSystemBoxColor
};

new TextDrawsSystem[PlayerText: MAX_TEXTDRAWS_IN_SERVER][TextDrawsSystemData];

enum PickupsData
{
	//DarbuInfo,
	IseitiIsDazasvydzio[2],
	PradetiDazasvydi,
	PolicijosIsidarbinimas,
	MedikuIsidarbinimas,
	TaxiIsidarbinimas,
	KurjeriuIsidarbinimas,
	MechanikuIsidarbinimas,
	FuristuIsidarbinimas,

	GaisrininkuIsidarbinimas,
	PicuIsidarbinimas,
	ValytojuIsidarbinimas,
	AutobusininkuIsidarbinimas,

	TreniruociuZona,
	AkiniuPirkimas,
	DrabuziuPirkimas,
	GaujosDrabuziuPirkimas,
	AlgosAtsiemimas,
	LietuvosSpauda[5],
	BankoValdymas,
	Theory,
	PizzaDelivery,
	CashMachine[5],
	ElektronikosPard[2],
	MobilePhoneShop,
	CluckinBell[4],
	BarPickup[5],
	DrugsPickup[4],
	GunsPickup[3],
	SalmoPirkimas,
	NascarPickup,
	SveikatosPazymejimas,
	KalejimoPickup[2],
	PolicijosGinklai,
	ArasGinklai,
	//MasinuSalonas[2],
	BaudosSusimokejimas,
	IspirkosMokejimas,
	Paremimas,
	Loterija,
	//FuristuPasikrovimas,
	MasinosAtsiemimas,
	DyleriuIsidarbinimas,
	//DyleriuSandeliukas,
	TADujos[2],
	TransportoSalonas,
	MotocikluSalonas,
	LaivuSalonas,
	Registracija,
	GreitasIsejimas,
	LeduPickup[2],
	HotdogPickup[5],
	FastFoodPickup[3],
	MaistoParduotuve[2],
	GinkluParduotuve,
	ZvejuTurgus,
	Atstatymas,
	lAtstatymas,
	MetroCityTurgusMetalas,
	MetroCityTurgusZuvis,
	BurgerShot[3],
	Picerija[3],
	MetroCityStebuklai,
	KasyklosInfo,
	TaksiLic,
	sKuras[5],
	sKuras1[5],
	Apmokymai,
	NewbieHeal,
	HPHeal,
	GarazoPirkimas,
	teleauto
	/*ChristmasHatPickup,
	ChristmasPickup,
	SantaClausPickup,
	ChristmasPrizePickup*/
}

new PickupsInfo[PickupsData];

enum KauliukoSistema
{
	KS_giveplayerid,
	KS_money,
	KS_time,
	KS_playedtime,
	KS_firstplayer,
	KS_secondplayer
}

new KS[MAX_PLAYERS][KauliukoSistema];

enum HouseInt1
{
	Int,
	Float:IntX,
	Float:IntY,
	Float:IntZ
};

new hInterior1[4][HouseInt1] =
{
	{2, 266.50, 304.90, 999.15},
	{1, 243.72, 304.91, 999.15},
	{11, 2283.04, -1140.28, 1050.90},
	{5, 2233.64, -1115.26, 1050.88}
};

enum HouseInt2
{
	Int,
	Float:IntX,
	Float:IntY,
	Float:IntZ
};

new hInterior2[9][HouseInt2] =
{
	{8, -42.59, 1405.47, 1084.43},
	{15, 328.05, 1477.73, 1084.44},
	{1, 223.20, 1287.08, 1082.14},
	{6, 2308.77, -1212.94, 1049.02},
	{1, 2218.40, -1076.18, 1050.48},
	{9, 260.85, 1237.24, 1084.26},
	{6, 2196.85, -1204.25, 1049.02},
	{10, 2270.38, -1210.35, 1047.56},
	{2, 2237.59, -1081.64, 1049.02}
};

enum HouseInt3
{
	Int,
	Float:IntX,
	Float:IntY,
	Float:IntZ
};

new hInterior3[4][HouseInt3] =
{
	{3, 235.34, 1186.68, 1080.26},
	{9, 2317.89, -1026.76, 1050.22},
	{3, 2495.98, -1692.08, 1014.74},
	{8, 2365.31, -1135.60, 1050.88}
};

enum PirmasisLektuvas
{
	ArIeskota,
	Float: IeskotiX,
	Float: IeskotiY,
	Float: IeskotiZ
};

new PirmasLektuvas[12][PirmasisLektuvas] =
{
	{0, -1001.4487,-1626.8055,76.3672},
	{0, -1000.3214,-1623.0927,76.3672},
	{0, -1001.1779,-1636.1112,76.3672},
	{0, -990.1745,-1626.5012,76.3672},
	{0, -991.2067,-1623.7894,76.3672},
	{0, -989.0193,-1623.7897,76.3672},
	{0, -987.3029,-1625.2013,76.3672},
	{0, -986.6185,-1627.2642,76.9749},
	{0, -983.3774,-1618.8009,76.3672},
	{0, -985.6923,-1616.9542,76.3672},
	{0, -988.0832,-1618.0005,76.3672},
	{0, -985.9118,-1619.6641,76.3672}
};

enum AntrasisLektuvas
{
	ArIeskota,
	Float: IeskotiX,
	Float: IeskotiY,
	Float: IeskotiZ
};

new AntrasLektuvas[14][AntrasisLektuvas] =
{
	{0, 2354.9309,-794.8016,129.3060},
	{0, 2349.6128,-788.9095,129.4525},
	{0, 2350.9309,-782.9027,129.7319},
	{0, 2347.3040,-784.4378,129.5970},
	{0, 2343.9731,-782.9830,129.5140},
	{0, 2345.3381,-781.7271,129.5995},
	{0, 2331.3293,-805.1727,127.6063},
	{0, 2333.5708,-806.4706,127.7040},
	{0, 2336.0208,-805.6885,127.9758},
	{0, 2333.7378,-803.7512,127.9224},
	{0, 2338.6853,-790.2758,129.1539},
	{0, 2340.8350,-791.6061,129.1689},
	{0, 2343.3926,-790.1285,129.2808},
	{0, 2341.0825,-788.8938,129.2884}
};

enum TreciasisLektuvas
{
	ArIeskota,
	Float: IeskotiX,
	Float: IeskotiY,
	Float: IeskotiZ
};

new TreciasLektuvas[17][TreciasisLektuvas] =
{
	{0, -1334.0532,2518.0750,87.0469},
	{0, -1338.4027,2521.3672,87.0469},
	{0, -1340.7734,2519.9475,87.0552},
	{0, -1338.4235,2518.6543,87.0469},
	{0, -1343.6315,2526.5710,87.0496},
	{0, -1345.9305,2527.9077,87.0636},
	{0, -1345.5070,2525.2012,87.0724},
	{0, -1348.3367,2526.5671,87.0910},
	{0, -1354.4465,2523.8271,87.0686},
	{0, -1352.3812,2519.9460,86.7944},
	{0, -1343.1907,2511.9277,86.8138},
	{0, -1341.5065,2506.5134,86.8681},
	{0, -1348.9664,2506.3752,86.6275},
	{0, -1355.6996,2502.0332,87.6592},
	{0, -1358.1024,2500.7454,87.7337},
	{0, -1360.4071,2502.0588,87.8052},
	{0, -1358.0944,2503.4578,87.7335}
};

enum HouseData
{
	bool:hCreated,
	bool:Locked,
	bool:Buyed,
	Owner[21],
	Text3D:House3D,
	HousePickup,
	Float:IntX,
	Float:IntY,
	Float:IntZ,
	Float:IntAngle,
	Float:ExitX,
	Float:ExitY,
	Float:ExitZ,
	Float:ExitAngle,
	Money,
	hInt,
	htVW,
	Cost,
	hType,
	bool: IsGarageUsed
}

new HouseInfo[MAX_HOUSES][HouseData];

/*enum garageinfo
{
	Float: inPos1,
	Float: inPos2,
	Float: inPos3,
	Float: inPos4,
	Float: outPos1,
	Float: outPos2,
	Float: outPos3,
	Float: outPos4,
	gID
}

new garage[2][garageinfo] =
{
	{-2722.5205,915.8099,67.3208,90.000, 	1341.3799,-1549.7461,10037.0439,0.000, 4}, // Namo nr: 5
	{-2721.2988,976.8289,54.1922,00.00, 	1341.3799,-1549.7461,10037.0439,0.000, 5} // Namo nr: 6
};*/

enum pItem
{
	KadaZaide,
	Stafke,
	IeskojoLekt,
	DarboCMD[5],
	Kauliukas,
	rasestab,
	bool:pSARVUS,
	bool:pHEAL,
	bool:pPAZ,
	bool: bakelis,
	Float: DarboCP[3],
	bool: banded,
	bool: pickup,
	bool: ikalintas,
	bool: bilietas,
	bool: leanvited[150],
	bool: cuffed,
	bool: uniformd,
	bool: pila,
	bool: Mteises,
	bool: teises,
	bool: FTeises,
	bool: Dirzas,
	bool: beglys,
	bool: pAlga,
	bool: SusikuresKorta,
	bool: gLicenzija,
	bool: DeleteAcc,
	bool: suautopilotu,
	bool: IvygdeEvent,
	rkaina[2],
	rid[7],
	rkiekis[2],
	spdata[30],
	Float:spos[3],
	AdminLaikas,
	AlgosLaikas,
	AlgosKiekis,
	pHealthCheck,
	AdminLevel,
	alga,
	stazasteisesaugos,
	stazaskurj,
	stazasmediku,
	stazastaxi,
	stazasfuristu,
	stazasmechaniku,
	stazaspaprastodarbo,
	GreicioBalai,
	rangas,
	ispejimai,
	dispejimai,
	AdminWarns,
	prisikroves,
	uzsisakedviracius,
	uzsisakebaldus,
	uzsisakebuittech,
	uzsisakeanglis,
	uzsisakezvyra,
	uzsisakegunus,
	uzsisakenarkus,
	uzsisakezole,
	bool: teorija,
	bool: Apraktika,
	bool: Bpraktika,
	bool: PadejesKliuti,
	KliutisObject,
	Text3D: KliutisTekstas,
	CorrectTheoryAnswers,
	laikrodis,
	pradirbo,
	prazaide,
	masina,
	banke,
	Kokainas,
	Ekstazi,
	Heroinas,
	Weed,
	specialybe,
	kalejimo_laikas,
	authstate,
	lytis,
	drabuziai,
	uniforma,
	lektuvas,
	plead,
	pinigai,
	pCashCheck,
	Muted,
	BanLaikas,
	PlayerName[MAX_PLAYER_NAME],
	PlayerIP[16],
	vVehColor,
	vVeh,
	vPressed,
	bool: TransportoSlotas,
	Transportas1,
	Transportas2,
	Transportas3,
	CanTakeCar,
	CarCost,
	Float: PlayerHealth,
	Float: PlayerArmour,
	FloodTime,
	FloodWarns,
	uztvara,
	//Nuskriaude,
	FakeKill,
	ParaseAdminams,
	ParaseVipams,
	ParaseDyrikams,
	ParaseDyrikas,
	ParaseAdminas,
	ParaseVipas,
	ParaseSkelbima,
	ParasePavaduotojam,
	NaudojoTazeri,
	medicinospazyma,
	sGyvybiuKaina,
	sArmoroKaina,
	sPazymosKaina,
	sPicosKaina,
	bool: mNusipirktiCar,
	bool: mNusipirktiNama,
	bool: mNusipirktiVersla,
	bool: misTeises,
	bool: mMTeises,
	bool: mFTeises,
	bool: mGLicenzija,
	bool: mUzsidirbt100k,
	bool: mUzsidirbt500k,
	bool: mUzsidirbt1m,
	bool: mTureti300k,
	bool: mTureti900k,
	bool: mTureti5m,
	bool: mButKalejme,
	bool: mButDarbe,
	bool: mButGaujoje,
	bool: mTuret1000xp,
	bool: mTuret10000xp,
	bool: mTuret50000xp,
	bool: mdSuimtZmogu,
	bool: mdDuotBauda,
	bool: mdAtimtTeises,
	bool: mdPatikrintiZmogu,
	bool: mdFixCar,
	bool: mdPiltDegalus,
	bool: mdPaveztZmogu,
	bool: mdNuveztKrovini,
	bool: mdParduotiSveikPaz,
	bool: mdPagydytiZmogu,
	bool: arKaroZonoje,
	ungurys,
	karosas,
	karpis,
	karsis,
	lydeka,
	bool: meskere,
	masalas,
	bool: valas,
	bool: zvejoja,
	bool: kasa,
	kiekistrauke,
	kiekiskase,
	bool: laikastraukti,
	baninolaikui,
	baninopaprastai,
	bool: AFK_Stat,
	Text3D: AFK_Label[MAX_PLAYERS],
	EgzaminoCP,
	AikstelesCPA,
	AikstelesCPB,
	bool: Uzbanintas,
	bool: ArEmigruotas,
	AntiHomeKint,
	Salmas,
	bool: IskvietesPolicija,
	bool: IskvietesMedikus,
	bool: IskvietesTaxi,
	bool: Iskvietesmechanikus,
	pavdrk,
	KadaVeze,
	KainaKulku,
	KiekKulku,
	KadaGydes,
	KadaGun,
	PaemePDGinklus,
	DaveRepTaska,
	KiekTuriRepTasku,
	Float: GpsFinishPos[3],
	FondoPinigai,
	ZaidejoIspejimai,
	KelintaMisija,
	DavePriza,
	KadaGydesi,
	SomeoneVariable[11],
	SelectedString[MAX_PLAYER_NAME],
	gMember,
	ParaseGauja,
	ParasePriz,
	Float: GetPos[3],
	GetVW,
	GetInt,
	PasiuleGet,
	UsingDrugs,
	HaveGlassesOn,
	GlassesPriceThenBuy,
	PlayerText: InfoText,
	PasiemeAlga,
	bool: KreditineKortele,
	PasiemeDeagle,
	PasiemeShotgun,
	PasiemeAk47,
	PasiemeHeroina,
	PasiemeKokaina,
	PasiemeZole,
	PasiemeEkstazi,
	MobilePhone,
	Sutartis,
	MobilePhoneNumber,
	TelphoneInUse,
	TelphoneCalling,
	PhoneStatus,
	Float: PhoneMoney,
	Float: TelMokesciai,
	Battery,
	Experience,
	KadaTelinosi,
	DarboRangas,
	GavoZala,
	RaseMapp,
	VisoPrazaide,
	TurgausMasina,
	PasirinktaMasina,
	PasirinktasKuras,
	KokiaDegaline,
	SukurtaMasina,
	JustDie,
	HaveTimeUntilDeath,
	Float: Alkis,
	Ieskomas,
	bool: gps,
	Desra,
	Surelis,
	Sultys,
	Sokoladas,
	Pizza,
	Ledai,
	Duona,
	PardSaskaita,
	KadaUzsiregino[32],
	VairavimoKlaidos,
	Priziuretojas,
	bool: AOD,
	AODtime,
	KaPerka,
	BandoAtristi,
	BandoAtsirakinti,
	Viela,
	dViela,
	Float: Aliuminis,
	Float: Varis,
	Float: Zalvaris,
	Float: Auksas,
	Float: Titanas,
	Float: Sidabras,
	Float: KasPosX,
	Float: KasPosY,
	Float: KasPosZ,
	bool: DirbaTaksi,
	KaKviecia,
	stebuklas1,
	stebuklas2,
	stebuklas3,
	stebuklas4,
	stebuklas5,
	stebuklas6,
	stebuklas7,
	bool: AtsiemePriza,
	KaPasikroves,
	KrovinioVerte,
	KrovinioAtlygis,
	KrovimoLaikas,
	bool: Kraunasi,
	bool: Issikrauna,
	IssikrovimoLaikas,
	bool: TuriTaksiLic,
	LastActive[32],
	GydymoLaikas,
	SiandienPriimta[4],
	SiaSavaitePriimta[4],
	IsVisoPriimta[4],
	Float: AntiAFK[3],
	VezeKrovini,
	Stirna1,
	Stirna2,
	Stirna3,
	Stirna4,
	Stirna5,
	HouseChestIDs    [MAX_CHEST_SLOTS + 1],
	cHouseChestIDs    [MAX_CHEST_SLOTS + 1],
	SelectedChestItemID,
	Login,
	VehicleTrunkIDs  [MAX_TRUNK_SLOTS + 1],
	Velkamas,
	KokiGinkla
}

new PI[MAX_PLAYERS][pItem];
new HouseChest[MAX_HOUSES][MAX_CHEST_SLOTS][2];
new CreditHouseChest[MAX_HOUSES][MAX_CHEST_SLOTS][2];
new VehicleTrunkInfo[MAX_VEHICLES][MAX_TRUNK_SLOTS][2];
new SelectedTrunkVehicleID[MAX_PLAYERS];

enum hiItem
{
	hiInt,
	Float:hiExi_X,
	Float:hiExi_Y,
	Float:hiExi_Z,
	Float:hiExi_A,
	IntKaina
};

enum VehicleData
{
	vSavininkas[MAX_PLAYER_NAME],
	vTune[13],
	vColor[2],
	vPaintjob,
	vNupirkta,
	vKuroTipas,
	vKaina,
	vNumeriai[14],
	vKadaNupirktas[32],
	vTaisyta,
	vTA,
	KasPriekaboje,
	KiekPriekaboje,
	ikrauta,
	bool:IsInGarage,
	Draudimas,

	Float: vKuras,
	Float: vLastPos[4],
	Float: vRida,
	Float: vSanaudos,
	Float: vBakas,
	Float: vDujuLikutis,
	Float: vDujuBakas,
	Float: T_Poss[3],
	Float: Vanduo,

	bool: Pasibaiges,
	bool: Parase,
	bool: vUzraktas,
	bool: vSprogusi,
	bool: vDujos,
	bool: vIjungta,
	bool: vNuoma,

	Text3D: t_text
}

new VehicleInfo[MAX_VEHICLES][VehicleData];

enum TurgausData
{
	tKiekis,
	tKaina,

	Float: 	T_Pos[3],
	Text3D: tText
}

new TurgausInfo[MAX_VEHICLES][TurgausData];

enum vsItem
{
	vsModel,
	vsCost,
	vsYear,
	Float:vsPosZ
};

enum kords
{
	Float:minX,
	Float:minY,
	Float:maxX,
	Float:maxY
};

enum titem
{
	taksistas,
	Float:Start[3],
	bool:imti,
}

new TaxiInfo[MAX_PLAYERS][titem];

enum ZonesSystemData
{
	ZoneID,
	ZoneColor,
	ZoneTitle[64],

	Float: ZoneMaxX,
  	Float: ZoneMaxY,
  	Float: ZoneMinY,
  	Float: ZoneMinX,
};

new ZonesSystem[MAX_ZONES_IN_SERVER][ZonesSystemData];

enum ePolicininkas
{
	NuoKiekEXP,
	bool: TeisesA,
	bool: TeisesB,
	bool: TeisesC,
	sPazyma
}

new Policininkas[ePolicininkas];

enum eMedikas
{
	NuoKiekEXP,
	bool: TeisesA,
	bool: TeisesB,
	bool: TeisesC,
	sPazyma
}

new Medikas[eMedikas];

enum eKurjeris
{
	NuoKiekEXP,
	bool: TeisesA,
	bool: TeisesB,
	bool: TeisesC,
	sPazyma
}
new Kurjeris[eKurjeris];

enum eTaxi
{
	NuoKiekEXP,
	bool: TeisesA,
	bool: TeisesB,
	bool: TeisesC,
	sPazyma
}
new Taxi[eTaxi];

enum eMechanikas
{
	NuoKiekEXP,
	bool: TeisesA,
	bool: TeisesB,
	bool: TeisesC,
	sPazyma
}

new Mechanikas[eMechanikas];

enum eDyleris
{
	NuoKiekEXP,
	bool: TeisesA,
	bool: TeisesB,
	bool: TeisesC,
	sPazyma
}

new Dyleris[eDyleris];

enum eFuristas
{
	NuoKiekEXP,
	bool: TeisesA,
	bool: TeisesB,
	bool: TeisesC,
	sPazyma
}

new Furistas[eFuristas];

new Float: GlassesSkinOffSet[300][7] =
{
	{0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968}, // - 0
	{0.100766, 0.028630, -0.003521, 87.936676, 82.110870, 4.236968}, // - 1
	{0.083712, 0.033132, -0.003521, 87.936676, 82.110870, 4.236968}, // - 2
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 3
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 4
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 5
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 6
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968}, // - 7
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 8
	{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968},  // - 9
	{0.072317, 0.032179, -0.002934, 86.843269, 84.196006, 4.236968}, // - 10
	{0.072317, 0.035465, -0.002201, 86.843269, 84.196006, 4.236968}, // - 11
	{0.072317, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968}, // - 12
	{0.076569, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968}, // - 13
	{0.091310, 0.049169, -0.002201, 86.843269, 84.196006, 4.236968}, // - 14
	{0.073734, 0.006292, -0.002755, 86.843269, 84.196006, 4.236968}, // - 15
	{0.092845, 0.040331, 0.000183, 86.843269, 82.864280, 4.236968},  // - 16
	{0.088241, 0.030184, -0.000157, 86.843269, 82.864280, 4.236968}, // - 17
	{0.061677, 0.029596, -0.007398, 86.843269, 82.864280, 4.236968}, // - 18
	{0.079911, 0.029596, -0.002934, 86.843269, 82.864280, 4.236968}, // - 19
	{0.095079, 0.029596, -0.001718, 85.261871, 86.296562, 4.236968}, // - 20
	{0.093728, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968}, // - 21
	{0.079585, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968}, // - 22
	{0.090786, 0.041737, -0.005263, 85.261871, 81.636192, 4.236968}, // - 23
	{0.085247, 0.026941, -0.000317, 85.261871, 81.636192, 4.236968}, // - 24
	{0.081646, 0.031448, -0.001113, 89.393653, 81.665985, 4.236968}, // - 25
	{0.083700, 0.033814, -0.001960, 86.436462, 81.665985, 4.236968}, // - 26
	{0.092498, 0.037321, -0.001960, 86.436462, 85.568023, 4.236968}, // - 27
	{0.097068, 0.041360, -0.007881, 86.771400, 85.568023, 4.236968}, // - 28
	{0.083456, 0.050595, 0.001011, 86.771400, 77.201461, 4.236968},  // - 29
	{0.076983, 0.047168, -0.006161, 86.771400, 74.329719, 4.236968}, // - 30
	{0.083798, 0.042184, -0.001869, 86.771400, 83.181861, 4.236968}, // - 31
	{0.053021, -0.000587, -0.001869, 86.771400, 66.859710, 4.236968},// - 32
	{0.034386, 0.013324, -0.001869, 86.771400, 80.314460, 4.236968}, // - 33
	{0.104669, 0.037365, -0.001403, 86.771400, 87.178382, 4.236968}, // - 34
	{0.102659, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968}, // - 35
	{0.107638, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968}, // - 36
	{0.107638, 0.035879, -0.000829, 86.771400, 93.020492, 4.236968}, // - 37
	{0.107638, 0.041106, -0.000829, 86.771400, 93.020492, 4.236968}, // - 38
	{0.080326, 0.035634, -0.000829, 86.771400, 93.020492, 4.236968}, // - 39
	{0.080326, 0.027371, -0.000829, 86.771400, 93.020492, 4.236968}, // - 40
	{0.084617, 0.039613, -0.001620, 86.771400, 93.020492, 4.236968}, // - 41
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 42
	{0.040075, 0.025445, -0.000974, 86.771400, 92.964149, 4.236968}, // - 43
	{0.077369, 0.028469, -0.000974, 86.771400, 78.435791, 4.236968}, // - 44
	{0.064145, 0.028684, -0.000974, 86.771400, 84.762802, 4.236968}, // - 45
	{0.091993, 0.056559, -0.000974, 86.771400, 84.762802, 4.236968}, // - 46
	{0.084582, 0.051277, -0.005034, 86.771400, 84.762802, 4.236968}, // - 47
	{0.092182, 0.042095, -0.003533, 86.771400, 84.762802, 4.236968}, // - 48
	{0.086866, 0.032203, -0.001021, 86.771400, 84.762802, 4.236968}, // - 49
	{0.099350, 0.009422, -0.005899, 86.771400, 84.762802, 4.236968}, // - 50
	{0.099350, 0.030598, -0.005899, 86.771400, 84.762802, 4.236968}, // - 51
	{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968}, // - 52
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 53
	{0.079123, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968}, // - 54
	{0.063159, 0.029641, -0.003575, 86.771400, 84.762802, 4.236968}, // - 55
	{0.070293, 0.029641, -0.000570, 86.771400, 84.762802, 4.236968}, // - 56
	{0.111305, 0.045368, -0.000570, 86.771400, 84.458084, 4.236968}, // - 57
	{0.084901, 0.020965, -0.000570, 86.771400, 79.542411, 4.236968}, // - 58
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 59
	{0.090164, 0.044163, -0.004754, 86.771400, 79.542411, 4.236968}, // - 60
	{0.087151, 0.041447, -0.000885, 90.928329, 89.598678, 0.000000}, // - 61
	{0.094350, 0.041447, 0.005717, 90.928329, 89.598678, 0.000000},  // - 62
	{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000}, // - 63
	{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000}, // - 64
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 65
	{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000},  // - 66
	{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000},  // - 67
	{0.087317, 0.039646, -0.004032, 90.928329, 89.598678, 0.000000}, // - 68
	{0.074873, 0.039646, -0.003072, 90.928329, 89.598678, 0.000000}, // - 69
	{0.090391, 0.042364, 0.005494, 90.928329, 89.598678, 0.000000},  // - 70
	{0.090391, 0.022298, -0.001170, 90.928329, 89.598678, 0.000000}, // - 71
	{0.090391, 0.039580, -0.001170, 90.928329, 89.598678, 0.000000}, // - 72
	{0.090391, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000}, // - 73
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 74
	{0.083113, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000}, // - 75
	{0.072957, 0.028956, -0.001170, 90.928329, 89.598678, 0.000000}, // - 76
	{0.069398, 0.039981, -0.001170, 90.928329, 89.598678, 0.000000}, // - 77
	{0.105738, 0.010001, 0.004508, 90.928329, 79.030494, 0.000000},  // - 78
	{0.078264, 0.019668, 0.004508, 90.928329, 79.030494, 0.000000},  // - 79
	{0.087377, 0.022096, -0.001993, 90.928329, 79.030494, 0.000000}, // - 80
	{0.087377, 0.022096, -0.001635, 90.928329, 79.030494, 0.000000}, // - 81
	{0.100623, 0.043063, -0.001635, 90.928329, 87.672645, 0.000000}, // - 82
	{0.092528, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000}, // - 83
	{0.102086, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000}, // - 84
	{0.081954, 0.041672, -0.001635, 90.928329, 87.672645, 0.000000}, // - 85
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 86
	{0.077010, 0.046925, -0.003438, 90.928329, 91.590301, 0.000000}, // - 87
	{0.069952, 0.042635, -0.003438, 90.928329, 86.722587, 0.000000}, // - 88
	{0.093827, 0.019258, -0.003438, 90.928329, 86.722587, 0.000000}, // - 89
	{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000}, // - 90
	{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000}, // - 91
	{0.066464, 0.038135, -0.000843, 90.928329, 86.722587, 0.000000}, // - 92
	{0.066464, 0.038135, -0.001690, 90.928329, 86.722587, 0.000000}, // - 93
	{0.048124, 0.010598, -0.001690, 90.928329, 86.722587, 0.000000}, // - 94
	{0.084997, 0.006773, -0.001690, 90.928329, 86.722587, 0.000000}, // - 95
	{0.100076, 0.026633, -0.001690, 90.928329, 80.020179, 0.000000}, // - 96
	{0.061686, 0.027537, -0.001690, 90.928329, 80.020179, 0.000000}, // - 97
	{0.098318, 0.053993, -0.001690, 90.928329, 89.237678, 0.000000}, // - 98
	{0.098318, 0.033702, -0.001690, 90.928329, 89.237678, 0.000000}, // - 99
	{0.086149, 0.042526, -0.001690, 90.928329, 77.587478, 0.000000}, // - 100
	{0.081864, 0.030555, -0.001690, 90.928329, 78.145759, 0.000000}, // - 101
	{0.081864, 0.047914, -0.005079, 90.928329, 78.145759, 0.000000}, // - 102
	{0.089607, 0.036717, -0.005079, 90.928329, 78.145759, 0.000000}, // - 103
	{0.079655, 0.042021, -0.005079, 90.928329, 78.145759, 0.000000}, // - 104
	{0.091779, 0.037620, -0.005079, 90.928329, 78.145759, 0.000000}, // - 105
	{0.084179, 0.035251, -0.005079, 90.928329, 78.145759, 0.000000}, // - 106
	{0.089387, 0.040297, -0.006006, 90.928329, 78.145759, 0.000000}, // - 107
	{0.081930, 0.030756, 0.001523, 90.928329, 78.145759, 0.000000},  // - 108
	{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000}, // - 109
	{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000}, // - 110
	{0.106601, 0.028021, -0.003537, 90.928329, 90.217376, 0.000000}, // - 111
	{0.096335, 0.015873, -0.003537, 90.928329, 90.217376, 0.000000}, // - 112
	{0.105827, 0.046620, -0.001395, 90.928329, 90.217376, 0.000000}, // - 113
	{0.097520, 0.044296, -0.007286, 90.928329, 90.217376, 0.000000}, // - 114
	{0.097408, 0.043470, -0.007286, 90.928329, 90.217376, 0.000000}, // - 115
	{0.092588, 0.049832, -0.007286, 90.928329, 90.217376, 0.000000}, // - 116
	{0.081444, 0.037602, -0.003125, 90.928329, 90.217376, 0.000000}, // - 117
	{0.078678, 0.037602, -0.001816, 90.928329, 90.217376, 0.000000}, // - 118
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 119
	{0.089214, 0.029291, -0.000784, 90.928329, 84.624763, 0.000000}, // - 120
	{0.086825, 0.033424, -0.000784, 90.928329, 77.233818, 0.000000}, // - 121
	{0.082869, 0.030783, -0.000950, 90.928329, 77.233818, 0.000000}, // - 122
	{0.096117, 0.048957, -0.006245, 90.928329, 87.579650, 0.000000}, // - 123
	{0.103663, 0.040022, 0.000449, 90.928329, 87.579650, 0.000000},  // - 124
	{0.099326, 0.031202, -0.001180, 90.928329, 87.579650, 0.000000}, // - 125
	{0.099326, 0.031132, -0.001180, 90.928329, 87.579650, 0.000000}, // - 126
	{0.099326, 0.039279, -0.001180, 90.928329, 87.579650, 0.000000}, // - 127
	{0.099326, 0.047422, -0.001180, 90.928329, 87.579650, 0.000000}, // - 128
	{0.088817, 0.021210, 0.000730, 90.928329, 87.579650, 0.000000},  // - 129
	{0.025784, 0.028323, 0.000730, 90.928329, 59.394767, 0.000000},  // - 130
	{0.068455, 0.031841, -0.004470, 90.928329, 79.979003, 0.000000}, // - 131
	{0.012930, 0.008392, -0.004470, 90.928329, 72.129173, 0.000000}, // - 132
	{0.102457, 0.032260, -0.003338, 90.928329, 84.534217, 0.000000}, // - 133
	{0.085976, 0.014956, -0.003338, 90.928329, 80.308830, 0.000000}, // - 134
	{0.071574, 0.028186, -0.001588, 90.928329, 80.308830, 0.000000}, // - 135
	{0.085219, 0.016666, -0.000738, 90.928329, 80.308830, 0.000000}, // - 136
	{0.065114, 0.009318, -0.000738, 90.928329, 80.308830, 0.000000}, // - 137
	{0.066890, 0.040024, -0.000738, 90.928329, 87.341934, 0.000000}, // - 138
	{0.072037, 0.036141, -0.000702, 90.928329, 87.341934, 0.000000}, // - 139
	{0.069108, 0.042194, -0.000436, 90.928329, 87.341934, 0.000000}, // - 140
	{0.058717, 0.043547, -0.000436, 90.928329, 87.209770, 0.000000}, // - 141
	{0.104196, 0.039601, -0.005481, 90.928329, 87.209770, 0.000000}, // - 142
	{0.090929, 0.045881, -0.012780, 90.928329, 87.209770, 0.000000}, // - 143
	{0.098291, 0.042464, -0.006952, 90.928329, 83.081665, 0.000000}, // - 144
	{0.080087, 0.030122, 0.000606, 90.928329, 83.081665, 0.000000},  // - 145
	{0.093500, 0.030690, -0.001545, 90.928329, 83.081665, 0.000000}, // - 146
	{0.079566, 0.020138, 0.004838, 90.928329, 73.715591, 0.000000},  // - 147
	{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000}, // - 148
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 149
	{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000}, // - 150
	{0.083426, 0.032359, -0.005717, 90.928329, 88.295433, 0.000000}, // - 151
	{0.072349, 0.019623, -0.000747, 90.928329, 82.624351, 0.000000}, // - 152
	{0.075065, 0.015351, 0.006545, 90.928329, 71.041442, 0.000000},  // - 153
	{0.062227, 0.029731, -0.004938, 90.928329, 84.602760, 0.000000}, // - 154
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 155
	{0.079936, 0.049000, -0.000304, 90.928329, 82.926010, 0.000000}, // - 156
	{0.067550, 0.035686, -0.000017, 90.928329, 82.926010, 0.000000}, // - 157
	{0.090676, 0.039383, -0.001726, 90.928329, 88.667900, 0.000000}, // - 158
	{0.090676, 0.039383, -0.003532, 90.928329, 88.667900, 0.000000}, // - 159
	{0.098662, 0.017441, -0.001589, 90.928329, 88.667900, 0.000000}, // - 160
	{0.105388, 0.038409, 0.003155, 90.928329, 88.667900, 0.000000},  // - 161
	{0.097415, 0.036904, -0.000525, 90.928329, 88.667900, 0.000000}, // - 162
	{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000}, // - 163
	{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000}, // - 164
	{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000},  // - 165
	{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000},  // - 166
	{0.095996, 0.038787, 0.000484, 90.928329, 84.315711, 0.000000},  // - 167
	{0.089094, 0.034001, -0.006451, 90.928329, 84.315711, 0.000000}, // - 168
	{0.075700, 0.028082, -0.006451, 90.928329, 84.315711, 0.000000}, // - 169
	{0.093751, 0.041968, -0.005545, 90.928329, 84.315711, 0.000000}, // - 170
	{0.090124, 0.031055, -0.000505, 90.928329, 84.315711, 0.000000}, // - 171
	{0.066033, 0.032915, -0.002713, 90.928329, 84.315711, 0.000000}, // - 172
	{0.088287, 0.045350, -0.005384, 90.928329, 84.315711, 0.000000}, // - 173
	{0.087750, 0.042129, -0.005384, 90.928329, 84.315711, 0.000000}, // - 174
	{0.092384, 0.039294, -0.005384, 90.928329, 84.315711, 0.000000}, // - 175
	{0.097661, 0.039065, -0.006344, 90.928329, 80.736480, 0.000000}, // - 176
	{0.097114, 0.039641, -0.006692, 90.928329, 80.736480, 0.000000}, // - 177
	{0.069354, 0.039641, -0.000474, 90.928329, 80.736480, 0.000000}, // - 178
	{0.091414, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000}, // - 179
	{0.094914, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000}, // - 180
	{0.117232, 0.033217, -0.001099, 90.928329, 82.396362, 0.000000}, // - 181
	{0.082569, 0.032748, -0.003248, 90.928329, 87.394371, 0.000000}, // - 182
	{0.095527, 0.027237, -0.001960, 90.928329, 86.443649, 0.000000}, // - 183
	{0.095527, 0.040994, -0.006878, 90.928329, 86.443649, 0.000000}, // - 184
	{0.085663, 0.030601, -0.002345, 90.928329, 81.496513, 0.000000}, // - 185
	{0.085663, 0.030601, -0.001015, 90.928329, 81.496513, 0.000000}, // - 186
	{0.076527, 0.027211, 0.008500, 90.928329, 74.401092, 0.000000},  // - 187
	{0.096669, 0.032578, 0.001662, 90.928329, 83.502502, 0.000000},  // - 188
	{0.098753, 0.032129, -0.001659, 90.928329, 90.153724, 0.000000}, // - 189
	{0.092821, 0.035572, -0.001659, 90.928329, 90.153724, 0.000000}, // - 190
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000}, // - 191
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000}, // - 192
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000}, // - 193
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000}, // - 194
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000}, // - 195
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000}, // - 196
	{0.100630, 0.020568, -0.001132, 90.928329, 90.153724, 0.000000}, // - 197
	{0.077905, 0.028523, 0.000000, 89.675476, 89.270309, 0.000000},  // - 198
	{0.099095, 0.022463, 0.000000, 89.675476, 89.270309, 0.000000},  // - 199
	{0.103182, 0.031106, 0.000000, 89.675476, 89.270309, 0.000000},  // - 200
	{0.078426, 0.038546, 0.000000, 89.675476, 89.270309, 0.000000},  // - 201
	{0.101092, 0.035797, -0.002997, 89.675476, 82.081153, 0.000000}, // - 202
	{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000}, // - 203
	{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000}, // - 204
	{0.092969, 0.027782, -0.002959, 89.675476, 84.463294, 0.000000}, // - 205
	{0.105109, 0.036128, -0.000471, 89.675476, 84.463294, 0.000000}, // - 206
	{0.066892, 0.024410, -0.002792, 89.675476, 84.463294, 0.000000}, // - 207
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 208
	{0.084046, 0.013608, -0.002792, 89.675476, 81.667831, 0.000000}, // - 209
	{0.084046, 0.013608, -0.001034, 89.675476, 81.667831, 0.000000}, // - 210
	{0.067610, 0.033777, -0.001034, 89.675476, 85.214485, 0.000000}, // - 211
	{0.094159, 0.020717, 0.000715, 89.675476, 85.214485, 0.000000},  // - 212
	{0.098744, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000}, // - 213
	{0.068755, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000}, // - 214
	{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000}, // - 215
	{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000}, // - 216
	{0.095765, 0.030034, -0.001770, 89.675476, 85.214485, 0.000000}, // - 217
	{0.085486, 0.039427, -0.003311, 89.675476, 85.214485, 0.000000}, // - 218
	{0.068874, 0.027850, -0.001021, 89.675476, 85.214485, 0.000000}, // - 219
	{0.052931, 0.050390, -0.002062, 89.675476, 88.113647, 0.000000}, // - 220
	{0.094479, 0.034432, 0.000875, 89.675476, 83.572830, 0.000000},  // - 221
	{0.094479, 0.034432, -0.000596, 89.675476, 83.572830, 0.000000}, // - 222
	{0.094479, 0.062073, -0.003098, 89.675476, 83.572830, 0.000000}, // - 223
	{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000}, // - 224
	{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000}, // - 225
	{0.072095, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000}, // - 226
	{0.110619, 0.043037, -0.001466, 89.675476, 86.927627, 0.000000}, // - 227
	{0.099446, 0.050772, -0.001466, 89.675476, 85.103805, 0.000000}, // - 228
	{0.078635, 0.023680, -0.000275, 89.675476, 73.445220, 0.000000}, // - 229
	{0.043357, 0.028726, -0.000275, 89.675476, 73.445220, 0.000000}, // - 230
	{0.092488, 0.049972, -0.000275, 89.675476, 88.981941, 0.000000}, // - 231
	{0.092488, 0.016739, -0.000275, 89.675476, 88.981941, 0.000000}, // - 232
	{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000}, // - 233
	{0.082745, 0.004209, -0.002878, 89.675476, 88.981941, 0.000000}, // - 234
	{0.057909, 0.021331, -0.002878, 89.675476, 88.981941, 0.000000}, // - 235
	{0.079016, 0.021331, -0.000419, 89.675476, 77.678733, 0.000000}, // - 236
	{0.074572, 0.021331, -0.000419, 89.675476, 84.527442, 0.000000}, // - 237
	{0.074572, 0.038346, -0.001500, 89.675476, 84.527442, 0.000000}, // - 238
	{0.111645, 0.011549, 0.006237, 89.675476, 84.527442, 0.000000},  // - 239
	{0.090766, 0.044221, -0.000423, 89.675476, 89.461883, 0.000000}, // - 240
	{0.069491, 0.049021, -0.000423, 89.675476, 89.461883, 0.000000}, // - 241
	{0.059706, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000}, // - 242
	{0.065242, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000}, // - 243
	{0.065242, 0.051077, -0.001103, 89.675476, 89.461883, 0.000000}, // - 244
	{0.082393, 0.038233, 0.000410, 89.675476, 89.461883, 0.000000},  // - 245
	{0.079338, 0.044859, -0.002535, 89.675476, 89.461883, 0.000000}, // - 246
	{0.101566, 0.037019, 0.000750, 89.675476, 83.514060, 0.000000},  // - 247
	{0.091887, 0.047776, -0.000040, 89.675476, 83.514060, 0.000000}, // - 248
	{0.089745, 0.044044, 0.004071, 89.675476, 83.514060, 0.000000},  // - 249
	{0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000}, // - 250
	{0.072282, 0.044044, -0.001468, 89.675476, 90.444763, 0.000000}, // - 251
	{0.095764, 0.034224, -0.000264, 89.675476, 82.959915, 0.000000}, // - 252
	{0.087454, 0.026208, -0.000264, 89.675476, 82.959915, 0.000000}, // - 253
	{0.099198, 0.037362, -0.000264, 89.675476, 82.959915, 0.000000}, // - 254
	{0.070845, 0.019943, 0.003505, 89.675476, 73.529716, 0.000000},  // - 255
	{0.065373, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000}, // - 256
	{0.070077, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000}, // - 257
	{0.089536, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000},  // - 258
	{0.084822, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000},  // - 259
	{0.093009, 0.031491, -0.001568, 89.675476, 83.002151, 0.000000}, // - 260
	{0.093009, 0.015023, -0.001477, 89.675476, 83.002151, 0.000000}, // - 261
	{0.076580, 0.039782, -0.001477, 89.675476, 88.620780, 0.000000}, // - 262
	{0.076580, 0.028967, -0.001477, 89.675476, 88.620780, 0.000000}, // - 263
	{0.075424, 0.043059, -0.001477, 89.675476, 88.620780, 0.000000}, // - 264
	{0.089655, 0.021726, -0.001477, 89.675476, 88.620780, 0.000000}, // - 265
	{0.096792, 0.014114, -0.003062, 89.675476, 85.166038, 0.000000}, // - 266
	{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000}, // - 267
	{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000}, // - 268
	{0.102252, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000}, // - 269
	{0.102252, 0.024989, 0.000529, 89.675476, 85.166038, 0.000000},  // - 270
	{0.096134, 0.025462, 0.000529, 89.675476, 79.225112, 0.000000},  // - 271
	{0.099226, 0.032663, 0.000529, 89.675476, 79.225112, 0.000000},  // - 272
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 273
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000}, // - 274
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000}, // - 275
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000}, // - 276
	{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000}, // - 277
	{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000}, // - 278
	{0.087652, 0.059379, -0.000201, 89.675476, 88.636062, 0.000000}, // - 279
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000}, // - 280
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000}, // - 281
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000}, // - 282
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000}, // - 283
	{0.090877, 0.053674, 0.009879, 89.675476, 88.636062, 0.000000},  // - 284
	{0.104320, 0.041487, 0.008021, 89.675476, 88.636062, 0.000000},  // - 285
	{0.087062, 0.021779, -0.003307, 89.675476, 88.636062, 0.000000}, // - 286
	{0.073173, 0.048856, 0.005337, 89.675476, 92.561180, 0.000000},  // - 287
	{0.090294, 0.027592, -0.003497, 89.675476, 92.561180, 0.000000}, // - 288
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968},                                   // - 289
	{0.086562, 0.042698, -0.000612, 89.675476, 92.561180, 0.000000}, // - 290
	{0.096768, 0.039233, -0.000612, 89.675476, 83.550270, 0.000000}, // - 291
	{0.079939, 0.020731, -0.005162, 89.675476, 83.550270, 0.000000}, // - 292
	{0.097107, 0.027826, -0.005162, 89.675476, 88.505996, 0.000000}, // - 293
	{0.097107, 0.037636, 0.000618, 89.675476, 88.505996, 0.000000},  // - 294
	{0.079985, 0.035006, -0.000826, 89.675476, 87.533462, 0.000000}, // - 295
	{0.088445, 0.024209, -0.002076, 89.675476, 73.285072, 0.000000}, // - 296
	{0.094039, 0.035411, 0.000490, 89.675476, 84.277572, 0.000000},  // - 297
	{0.099553, 0.024683, -0.002919, 89.675476, 84.277572, 0.000000}, // - 298
	{0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000}  // - 299
};

enum FirstAdminLevel
{
	Bausme[64],
	bLaikas
}

new FAL[29][FirstAdminLevel] =
{
	{ ""COL_ADMIN"- Uþtildymas", 										0  }, // 0
	{ "Administracijos nariø áþeidinëjimai", 							30 }, // 1
	{ "Necenzûriniø þodþiø vartojimas masyviai", 						30 }, // 2
	{ "Flood/spam (4 þinutës ið eilës)", 								15 }, // 3
	{ "Blogas /admin naudojimas", 										20 }, // 4
	{ "Blogas vieðujø praneðimø naudojimas", 							30 }, // 5
	{ " ", 																0  }, // 6
	{ ""COL_ADMIN"- Ákalinimas", 										0  }, // 7
	{ "Ðaudymas á þaidëjus mieste", 									20 }, // 8
	{ "Ðaudymas á þaidëjus nuo transp. priemonës stogo", 				40 }, // 9
	{ "Eventø trukdymas", 												30 }, // 10
	{ "Atrankø trukdymas", 												30 }, // 11
	{ "Darbo veiklø trukdymas", 										20 }, // 12
	{ "Tyèinis K.E.T. nesilaikymas", 									20 }, // 13
	{ "Tyèinis ESC spaudimas esant gaudomam teisësaugos", 				60 }, // 14
	{ "Tyèinis ESC spaudimas esant surakintam/suriðtam", 				80 }, // 15
	{ "Atsijungimas nuo þaidimo gaudant teisësaugai", 					120 }, // 16
	{ "Ðaudymas á dirbantá administratoriø (AOD on)", 					100 }, // 16
	{ " ", 																0  }, // 17
	{ ""COL_ADMIN"- Iðmetimas", 										0  }, // 18
	{ "AFK netinkamoje vietoje", 										0  }, // 19
	{ "Netinkamas Vardas_Pavardë", 										0  }, // 20
	{ "Neáraðyta prieþastis", 											0  }, // 21
	{ " ", 																0    }, // 22
	{ ""COL_ADMIN"- Laikinas uþblokavimas", 							0    }, // 23
	{ "Netinkamas Vardas_Pavardë (3 kartai)", 							60   }, // 24
	{ "Admin/VIP komandø piktnaudþiavimas", 							180  }, // 25
	{ "Þaidëjø apgavystës", 											1440 }, // 26
	{ "Átarimø dëjimas uþ niekà", 										300  }  // 27
};

enum SecondAdminLevel
{
	Bausme[64],
	bLaikas
}

new SAL[29][SecondAdminLevel] =
{
	{ ""COL_ADMIN"- Uþtildymas", 										0  }, // 0
	{ "Administracijos nariø áþeidinëjimai", 							30 }, // 1
	{ "Necenzûriniø þodþiø vartojimas masyviai", 						30 }, // 2
	{ "Flood/spam (4 þinutës ið eilës)", 								15 }, // 3
	{ "Blogas /admin naudojimas", 										20 }, // 4
	{ "Blogas vieðujø praneðimø naudojimas", 							30 }, // 5
	{ " ", 																0  }, // 6
	{ ""COL_ADMIN"- Ákalinimas", 										0  }, // 7
	{ "Ðaudymas á þaidëjus mieste", 									20 }, // 8
	{ "Ðaudymas á þaidëjus nuo transp. priemonës stogo", 				40 }, // 9
	{ "Eventø trukdymas", 												30 }, // 10
	{ "Atrankø trukdymas", 												30 }, // 11
	{ "Darbo veiklø trukdymas", 										20 }, // 12
	{ "Tyèinis K.E.T. nesilaikymas", 									20 }, // 13
	{ "Tyèinis ESC spaudimas esant gaudomam teisësaugos", 				60 }, // 14
	{ "Tyèinis ESC spaudimas esant surakintam/suriðtam", 				80 }, // 15
	{ "Atsijungimas nuo þaidimo gaudant teisësaugai", 					120 }, // 16
	{ "Ðaudymas á dirbantá administratoriø (AOD on)", 					100 }, // 16
	{ " ", 																0  }, // 17
	{ ""COL_ADMIN"- Iðmetimas", 										0  }, // 18
	{ "AFK netinkamoje vietoje", 										0  }, // 19
	{ "Netinkamas Vardas_Pavardë", 										0  }, // 20
	{ "Neáraðyta prieþastis", 											0  }, // 21
	{ " ", 																0    }, // 22
	{ ""COL_ADMIN"- Laikinas uþblokavimas", 							0    }, // 23
	{ "Netinkamas Vardas_Pavardë (3 kartai)", 							60   }, // 24
	{ "Admin/VIP komandø piktnaudþiavimas", 							180  }, // 25
	{ "Þaidëjø apgavystës", 											1440 }, // 26
	{ "Átarimø dëjimas uþ niekà", 										300  }  // 27
};

enum ThirdAdminLevel
{
	Bausme[64],
	bLaikas
}

new TAL[36][ThirdAdminLevel] =
{
	{ ""COL_ADMIN"- Uþtildymas", 										0  }, // 0
	{ "Administracijos nariø áþeidinëjimai", 							30 }, // 1
	{ "Necenzûriniø þodþiø vartojimas masyviai", 						30 }, // 2
	{ "Flood/spam (4 þinutës ið eilës)", 								15 }, // 3
	{ "Blogas /admin naudojimas", 										20 }, // 4
	{ "Blogas vieðujø praneðimø naudojimas", 							30 }, // 5
	{ " ", 																0  }, // 6
	{ ""COL_ADMIN"- Ákalinimas", 										0  }, // 7
	{ "Ðaudymas á þaidëjus mieste", 									20 }, // 8
	{ "Ðaudymas á þaidëjus nuo transp. priemonës stogo", 				40 }, // 9
	{ "Eventø trukdymas", 												30 }, // 10
	{ "Atrankø trukdymas", 												30 }, // 11
	{ "Darbo veiklø trukdymas", 										20 }, // 12
	{ "Tyèinis K.E.T. nesilaikymas", 									20 }, // 13
	{ "Tyèinis ESC spaudimas esant gaudomam teisësaugos", 				60 }, // 14
	{ "Tyèinis ESC spaudimas esant surakintam/suriðtam", 				80 }, // 15
	{ "Atsijungimas nuo þaidimo gaudant teisësaugai", 					120 }, // 16
	{ "Ðaudymas á dirbantá administratoriø (AOD on)", 					100 }, // 16
	{ " ", 																0  }, // 17
	{ ""COL_ADMIN"- Iðmetimas", 										0  }, // 18
	{ "AFK netinkamoje vietoje", 										0  }, // 19
	{ "Netinkamas Vardas_Pavardë", 										0  }, // 20
	{ "Neáraðyta prieþastis", 											0  }, // 21
	{ " ", 																0    }, // 22
	{ ""COL_ADMIN"- Laikinas uþblokavimas", 							0    }, // 23
	{ "Netinkamas Vardas_Pavardë (3 kartai)", 							60   }, // 24
	{ "Admin/VIP komandø piktnaudþiavimas", 							180  }, // 25
	{ "Þaidëjø apgavystës", 											1440 }, // 26
	{ "Átarimø dëjimas uþ niekà", 										300  }, // 27
	{ " ", 																0    }, // 28
	{ ""COL_ADMIN"- Uþblokavimas", 										0    }, // 29
	{ "Asmeninio turto pardavinëjimas uþ tikrus pinigus", 				0    }, // 30
	{ "Kito projekto reklamavimas", 									0    }, // 31
	{ "Neleistinø programø naudojimas", 								0    }, // 32
	{ "Serverio klaidø iðnaudojimas", 									0    }, // 33
	{ "Kenkimas serveriui", 											0    }  // 34
};

enum furistups
{
	Name0[45],
	Price1,
	Price2
};

new FuristuPasikrovimas[10][furistups] =
{
	{ "{ffffff} - Legalûs kroviniai", 			0,			0  		},
	{ "Policijos ginklai", 						8200,		9840  	},
	{ "Spec. bûrio pajëgø ARAS ginklai", 		8500,		10200  	},
	{ "Ginklø parduotuvës ginklai",				5650,		6780  	},
	{ "Automobiliø dalys",						3200,		3840  	},
	{ "Alkoholiniai gërimai",					2900,		3480  	},
	{ " ", 										0,			0  		},
	{ "{ffffff} - Nelegalûs kroviniai", 		0,			0 		},
	{ "Narkotikai", 							21500,		25800 	},
	{ "Ginklai", 								19000,		22800 	}
};

enum kurjeriups
{
	Name0[32],
	Price1,
	Price2
};

new KurjeriuPasikrovimas[6][kurjeriups] =
{
	{ "El. prekës", 			6500,		9750  }, // ribota
	{ "Maisto prekës", 			3600,		5400  },
	{ "Drabuþiai",	 			2680,		4020  },
	{ "Alkoholiniai gërimai", 	1800,		2700  },
	{ "Automobiliø dalys", 		2580,		5160  },
	{ "Vaistai", 				6800,		10200 }
};

new FamousGpsPlaces[36][2][64] =
{
	{ "Bankas",                       					"-2766.2805,375.5397,6.3347"    }, // perkelta
	{ "Ligoninë",                     					"-2652.7051,639.9321,14.4529"   }, // perkelta
	{ "Policijos departamentas",      					"-1605.6272,710.4329,13.8672"   }, // perkelta
	{ "Spec. bûrio pajëgø ARAS bûstinë",      		"-1523.3680,483.1744,7.1797"    }, // perkelta
	{ "Vairavimo mokykla",            					"-2031.6600,-99.4903,35.2940"   }, // perkelta
	{ "Transp. priemoniø salonas",   					"-1956.2773,300.2258,35.4687"   }, // perkelta
	{ "Transp. priemoniø turgus",   					"-2486.9312,369.0085,35.1212"   }, // perkelta
	{ "Motociklø salonas",   							"-1950.9963,259.0511,41.0534"   }, // perkelta
	{ "Laivø parduotuvë",   							"-2903.5002,441.3209,5.0919"    }, // perkelta
	{ "Þvejybos vieta",   								"-2431.2834,1386.6304,7.1875"   }, // perkelta
	{ "Vyriausybë",   									"-2712.7358,-338.4510,7.2649"   }, // perkelta
	{ "Kazino Caligula's",   							"-1754.2122,963.8302,24.8906"   }, // perkelta
	{ "Ginklø parduotuvë",   							"-2625.9045,208.2361,4.8125"    }, // perkelta
	{ "El. parduotuvë",   								"-1967.5056,453.3782,35.1709"   }, // perkelta
	{ "Skelbimø centras",   							"-2521.1899, -624.9377, 132.783"}, // perkelta
	{ "Paprastø drabuþiø parduotuvë",   				"-1967.3547,438.3632,35.1709" 	}, // perkelta
	{ "Gaujos drabuþiø parduotuvë",   					"-2097.6675,89.1650,35.3203" 	}, // perkelta
	{ "Bokso salë Cobra",   							"-2270.1648,-155.9468,35.3203"  }, // perkelta
	{ "Naktinis klubas",								"-2624.6199, 1412.4114, 7.0938" }, // perkelta
	{ "Loterija",										"-1919.5098,576.5657,35.2413"   }, // perkelta
	{ "AFK zona",										"-2581.0393,309.9592,5.1856"	}, // perkelta
	{ "MetroCity.lt Garaþas",								"-2323.9590,-88.6216,35.3315"	}, // perkelta
	{ "MetroCity.lt Turgus",								"-2426.0303,262.2621,35.1719"	}, // perkelta
	{ "Aukojimo fondas",								"-2056.8772,454.7200,35.1709"	}, // perkelta
	{ "Metalo kasykla",									"-2908.5657,672.6467,5.7292"	}, // perkelta
	{ "7 uliunø Stebuklai",							    "-2078.0012,1419.1678,7.1007"	}, // perkelta
	{ "Transporto pardavimo zona",						"-2496.4800,405.4026,27.7819"   }, // perkelta
	{ "Licenzijø centras",								"-1828.7118,1400.8462,7.1875"   }, // perkelta
	{ "KMA",											"-1892.8441,-1662.9823,21.7500"  }, // perkelta
	{ "Laivø atstatymas",								"-2985.6343,469.6664,6.4299"  	}, // perkelta
	{ "X Faktorius",									"-2109.6646,-445.7106,38.7344"  },
	{ "Vieðbutis",										"-2426.0652,337.9403,36.9922"  	},
	{ "Nuomojami garaþai",								"-2592.1082,662.6223,28.0033"  	},
	{ "Daþasvydis",										"-2456.1487,503.9107,30.0781"  	},
	{ "Laivø degalinë",									"-1767.7035,-188.1039,1.9604"  	},
	{ "Geriausios gaujos statula",						"-1917.0110,881.8594,35.4141"  	}
};
new UzkandinesRestoranai[13][2][64] =
{
	{ "Uþkandinë Burger Shot",                       	"-2355.9619,1008.1473,50.8984"  },
	{ "Uþkandinë Burger Shot",                     	"-2336.8367,-166.7432,35.5756"  },
	{ "Uþkandinë Burger Shot",                     	"-1912.2773,827.9753,35.2181"   },
	//{ "Uþkandinë Cluckin Bell",      					"-1972.2321,95.4998,27.6950"    },
	{ "Uþkandinë Cluckin Bell",            			"-2671.5986,258.4459,4.6328"    },
	{ "Uþkandinë Cluckin Bell",   					"-1816.5332,618.3926,35.1719"   },
	{ "Uþkandinë Cluckin Bell",   					"-2255.0740,542.0226,35.3708"   },
	{ "Picerija The Well Stacked Pizza",   			"-1721.1998,1359.7131,7.1853"   },
	{ "Picerija The Well Stacked Pizza",   			"-1905.2576,443.7498,35.1709"   },
	{ "Picerija The Well Stacked Pizza",   			"-1808.5455,945.7303,24.8906"   },
	{ "Maisto Parduotuvë",   							"-2442.6538,755.3444,35.1719"   },
	{ "Maisto Parduotuvë",   							"-1967.3960,421.9390,35.1709"   },
	{ "Baras Misty's",								"-2242.4773,-88.1821,35.3203"   },
	{ "Baras Gant Bridge",							"-2524.2893,1216.1974,37.5964"  }
};

#define MAX_BALDU 3

enum BalduData
{
	bPav[64],
	bID,
	Float: bPosX,
	Float: bPosY,
	Float: bPosZ,
	Float: bPosRX,
	Float: bPosRY,
	Float: bPosRZ,
	bKaina
};

new Baldai[MAX_BALDU][BalduData] =
{
	// Pavadinimas, baldo ID, Pozicija, Kaina
	{ "Fotelis", 	1724, 		-2261.81787, 536.05743, 34.00983,   0.00000, 0.00000, 0.00000, 		500 },
	{ "Sofa", 		1726, 		-2263.47339, 532.67963, 34.01620,   0.00000, 0.00000, 90.00000, 	800 },
	{ "Këdë", 		1811, 		-2261.53247, 531.42511, 34.58600,   0.00000, 0.00000, 270.00000, 	100 }
};

static const MaxPassengers[27] =
{
	0x10331113, 0x11311131, 0x11331313, 0x80133301,
	0x1381F110, 0x10311103, 0x10001F10, 0x11113311,
	0x13113311, 0x31101100, 0x30001301, 0x11031311,
	0x11111331, 0x10013111, 0x01131100, 0x11111110,
	0x11100031, 0x11130221, 0x33113311, 0x11111101,
	0x33101133, 0x101001F0, 0x03133111, 0xFF11113F,
	0x13330111, 0xFF131111, 0x0000FF3F
};

new VehicleNames[212][] =
{
	{"Landstalker"}, {"Bravura"}, {"Buffalo"}, {"Linerunner"}, {"Perrenial"}, {"Sentinel"}, {"Dumper"}, {"Firetruck"}, {"Trashmaster"}, {"Stretch"}, {"Manana"}, {"Infernus"}, {"Voodoo"}, {"Pony"}, {"Mule"}, {"Cheetah"}, {"Ambulance"}, {"Leviathan"}, {"Moonbeam"}, {"Esperanto"}, {"Taxi"}, {"Washington"}, {"Bobcat"}, {"Mr Whoopee"}, {"BF Injection"}, {"Hunter"}, {"Premier"},
    {"Enforcer"}, {"Securicar"}, {"Banshee"}, {"Predator"}, {"Bus"}, {"Rhino"}, {"Barracks"}, {"Hotknife"}, {"Trailer 1"}, {"Previon"}, {"Coach"}, {"Cabbie"}, {"Stallion"}, {"Rumpo"}, {"RC Bandit"}, {"Romero"}, {"Packer"}, {"Monster"}, {"Admiral"}, {"Squalo"}, {"Seasparrow"}, {"Pizzaboy"}, {"Tram"}, {"Trailer 2"}, {"Turismo"}, {"Speeder"}, {"Reefer"}, {"Tropic"}, {"Flatbed"},
    {"Yankee"}, {"Caddy"}, {"Solair"}, {"Berkley's RC Van"}, {"Skimmer"}, {"PCJ-600"}, {"Faggio"}, {"Freeway"}, {"RC Baron"}, {"RC Raider"}, {"Glendale"}, {"Oceanic"}, {"Sanchez"}, {"Sparrow"}, {"Patriot"}, {"Quad"}, {"Coastguard"}, {"Dinghy"}, {"Hermes"}, {"Sabre"}, {"Rustler"}, {"ZR-350"}, {"Walton"}, {"Regina"}, {"Comet"}, {"BMX"}, {"Burrito"}, {"Camper"}, {"Marquis"},
    {"Baggage"}, {"Dozer"}, {"Maverick"}, {"News Chopper"}, {"Rancher"}, {"FBI Rancher"}, {"Virgo"}, {"Greenwood"}, {"Jetmax"}, {"Hotring"}, {"Sandking"}, {"Blista"}, {"Police Maverick"}, {"Boxville"}, {"Benson"}, {"Mesa"}, {"RC Goblin"}, {"Hotring Racer A"}, {"Hotring Racer B"}, {"Bloodring Banger"}, {"Rancher"}, {"Super GT"}, {"Elegant"}, {"Journey"}, {"Bike"},
    {"Mountain Bike"}, {"Beagle"}, {"Cropdust"}, {"Stunt"}, {"Tanker"}, {"Roadtrain"}, {"Nebula"}, {"Majestic"}, {"Buccaneer"}, {"Shamal"}, {"Hydra"}, {"FCR-900"}, {"NRG-500"}, {"HPV1000"}, {"Cement Truck"}, {"Tow Truck"}, {"Fortune"}, {"Cadrona"}, {"FBI Truck"}, {"Willard"}, {"Forklift"}, {"Tractor"}, {"Combine"}, {"Feltzer"}, {"Remington"}, {"Slamvan"}, {"Blade"}, {"Freight"},
    {"Streak"}, {"Vortex"}, {"Vincent"}, {"Bullet"}, {"Clover"}, {"Sadler"}, {"Firetruck LA"}, {"Hustler"}, {"Intruder"}, {"Primo"}, {"Cargobob"}, {"Tampa"}, {"Sunrise"}, {"Merit"}, {"Utility"}, {"Nevada"}, {"Yosemite"}, {"Windsor"}, {"Monster A"}, {"Monster B"}, {"Uranus"}, {"Jester"}, {"Sultan"}, {"Stratum"}, {"Elegy"}, {"Raindance"}, {"RC Tiger"}, {"Flash"}, {"Tahoma"}, {"Savanna"},
    {"Bandito"}, {"Freight Flat"}, {"Streak Carriage"}, {"Kart"}, {"Mower"}, {"Duneride"}, {"Sweeper"}, {"Broadway"}, {"Tornado"}, {"AT-400"}, {"DFT-30"}, {"Huntley"}, {"Stafford"}, {"BF-400"}, {"Newsvan"}, {"Tug"}, {"Trailer 3"}, {"Emperor"}, {"Wayfarer"}, {"Euros"}, {"Hotdog"}, {"Club"}, {"Freight Carriage"}, {"Trailer 3"}, {"Andromada"}, {"Dodo"}, {"RC Cam"}, {"Launch"}, {"Police Car (LSPD)"},
    {"Police Car (SFPD)"}, {"Police Car (LVPD)"}, {"Police Ranger"}, {"Picador"}, {"S.W.A.T. Van"}, {"Alpha"}, {"Phoenix"}, {"Glendale"}, {"Sadler"}, {"Luggage Trailer A"}, {"Luggage Trailer B"}, {"Stair Trailer"}, {"Boxville"}, {"Farm Plow"}, {"Utility Trailer"}
};

new Letters[26][] =
{
	"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
	"N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"
};

new Float: ZoneCords[MAX_ZONES][kords] =
{
	{-2054.3064, 79.4714, -1917.7390, 218.5012}, 	// Stotis
	{-2711.1877, 578.7722, -2602.0669, 644.1699}, 	// Ligoninë
	{-2096.6392, -104.8045, -2015.3768, -77.7190}	// Vairavimo mokykla
};

new const BE_Bad_Vehs[] =
{
	460, 464, 476, 511, 512, 513, 519, 520, 539, 553, 577, 592, 593, // planes
	417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563 // heli
};

main()
{
	print("\n\n\n\n\n\n\n\n\n\n\n\n\n    ------------------------");
	print("      San Fierro Gyvenimas ");
	print("      Tinklapis: www.MetroCity.lt");
	print("    ------------------------\n\n\n\n\n\n\n\n");
	WasteDeAMXersTime();
	printf("Originaliø objektø skaicius: %s", konvertuoti_pinigus(CountOriginalObjects()));
	printf("CreateDynamicObject skaicius: %s", konvertuoti_pinigus(CountDynamicObjects()));
}

public OnGameModeInit()
{
    Profiler_Start();
	SendRconCommand("mapname San-Fierro");

	new versionstr[25];
	format(versionstr, sizeof(versionstr), "%s", ServerVersion);
	SetGameModeText(versionstr);
	
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, VISIBLE_ITEMS);

	if(GetMaxPlayers() > MAX_PLAYERS)
	{
		print("GetMaxPlayers > MAX_PLAYERS, padidinkite MAX_PLAYERS skaiciu.");
		SendRconCommand("exit");
		return 1;
	}

	mysql_debug(true); // true - Debug'as ijungtas.
	mysql_connect(MySQL_HOST, MySQL_USER, MySQL_DATA, MySQL_PASS);
	if(mysql_ping() >= 1) print("Prisijungeme prie MySQL sekmingai!");
	else SendRconCommand("exit");

	for(new pick; pick < MAX_PICKUPS; pick++) DestroyPickup(pick);
	
	
	EnableStuntBonusForAll		(false);
	SetNameTagDrawDistance		(15);
	//SetWorldTime 				(23);
	AllignMaxPlayers			();
	DisableInteriorEnterExits	();
	ManualVehicleEngineAndLights();
	ShowPlayerMarkers			(0);
	LoadSpawns					();
	LoadGarages 				();
	loadmaps                    ();				
	LoadVehicles				(); print("1\n");
 	Load3dtext                  ();
//	LoadObjects					(); print("2\n");
	Geltontaskiai = CreateDynamicObject(19482, -2612.155761, 2601.914550, -91.761283, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
	//SetDynamicObjectMaterialText(Geltontaskiai, 0, "Geltonuju taskai: 500", 80, "Ariel", 20, 1, 0xFFFFFFFB, 0x00000000, 1);
	Zaltaskiai = CreateDynamicObject(19482, -2612.155761, 2601.914550, -93.191291, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
	//SetDynamicObjectMaterialText(Zaltaskiai, 0, "Zaliuju taskai: 500", 80, "Ariel", 20, 1, 0xFFFFFFFB, 0x00000000, 1);
	Roundlaikis = CreateDynamicObject(19482, -2612.155761, 2601.914550, -92.461303, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
	GerGauja = CreateDynamicObject(19482,-1920.984,884.801,34.665,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);

	KraunamServerioInfo();
	print("3\n");
	KraunamRekordoInfo();
	print("4\n");
	CreateHouses();
	print("5\n");
	KraunamSandelius();
	print("6\n");
	LoadPropertys();
	print("Properties loaded!");
	LoadGangs					();
	print("8\n");
	//ChangeGoodsPrices2 			(); print("9\n");
	//KraunamNarkotikusGinklus 	(); print("10\n");
	LoadTurgus					(); 
	print("11\n");
	LoadAllGangZones  			();
	//LOAD_POFKA					();
	KraunamPolicijosInfo(); print("12\n");
	KraunamMedikuInfo(); print("13\n");
	KraunamKurjeriuInfo(); print("14\n");
	KraunamMedikuInfo(); print("15\n");
	KraunamDyleriuInfo(); print("16\n");
	KraunamFuristuInfo(); print("17\n");
	LoadCreditHouses(); print("18\n");
	KraunamTaxiInfo(); print("13\n");
	
	SetTimer("CheckGun", 1000, true);

	new GerGaujaString[64];
	
	for(new gauja = 0; gauja < MAX_GANGS; gauja ++)
	{
		if(GangInfo[gauja][gPoints] > GangInfo[KokeGauja][gPoints]) KokeGauja = gauja;
	}

	format(GerGaujaString, sizeof(GerGaujaString), "%s", GangInfo[KokeGauja][gTitle]);
	SetDynamicObjectMaterialText(GerGauja, 0, GerGaujaString, 80, "Calibri", 22, 1, 0xFF700000, 0x00000000, 0);

	GrobimoLaikas = 0;

	new CountSkins;
	for(new i = 0; i < sizeof(ClothesShopSkins) - 1; i ++)
	{
		if(CheckForInvalidSkinID(i))
		{
			CountSkins ++;

			ClothesShopSkins[CountSkins - 1] = i;
		}
	}

	TotalClothesShopSkins = CountSkins;

	for(new i = 0; i < TotalClothesShopSkins; i ++)
	{
		ClothesShopSkinPrices[i] = 300 + random(200);
	}

	mysql_free_result();

	new GangCountSkins;
	for(new i = 0; i < sizeof(GangClothesShopSkins) - 1; i ++)
	{
		if(!CheckForInvalidGangSkinID(i))
		{
			GangCountSkins ++;

			GangClothesShopSkins[GangCountSkins - 1] = i;
		}
	}

	GangTotalClothesShopSkins = GangCountSkins;

	for(new i = 0; i < GangTotalClothesShopSkins; i ++)
	{
		GangClothesShopSkinPrices[i] = 1000 + random(1000);
	}

	print("19\n");
	
	kliutis_g[0] = TextDrawCreate(165.600036, 188.133331, "box");
	TextDrawLetterSize(kliutis_g[0], 0.000000, 9.215943);
	TextDrawTextSize(kliutis_g[0], 479.436950, 0.000000);
	TextDrawAlignment(kliutis_g[0], 1);
	TextDrawColor(kliutis_g[0], -1);
	TextDrawUseBox(kliutis_g[0], 1);
	TextDrawBoxColor(kliutis_g[0], 185273343);
	TextDrawSetShadow(kliutis_g[0], 0);
	TextDrawSetOutline(kliutis_g[0], 0);
	TextDrawBackgroundColor(kliutis_g[0], 255);
	TextDrawFont(kliutis_g[0], 1);
	TextDrawSetProportional(kliutis_g[0], 1);
	TextDrawSetShadow(kliutis_g[0], 0);

	kliutis_g[1] = TextDrawCreate(166.796478, 204.283233, "box");
	TextDrawLetterSize(kliutis_g[1], 0.000000, 7.169998);
	TextDrawTextSize(kliutis_g[1], 478.359375, 0.000000);
	TextDrawAlignment(kliutis_g[1], 1);
	TextDrawColor(kliutis_g[1], -1);
	TextDrawUseBox(kliutis_g[1], 1);
	TextDrawBoxColor(kliutis_g[1], 421075455);
	TextDrawSetShadow(kliutis_g[1], 0);
	TextDrawSetOutline(kliutis_g[1], 0);
	TextDrawBackgroundColor(kliutis_g[1], 255);
	TextDrawFont(kliutis_g[1], 1);
	TextDrawSetProportional(kliutis_g[1], 1);
	TextDrawSetShadow(kliutis_g[1], 0);

	kliutis_g[2] = TextDrawCreate(168.597503, 188.711181, "TEISESAUGOS KLIUTIS");
	TextDrawLetterSize(kliutis_g[2], 0.166999, 0.946666);
	TextDrawAlignment(kliutis_g[2], 1);
	TextDrawColor(kliutis_g[2], -1061109505);
	TextDrawSetShadow(kliutis_g[2], 0);
	TextDrawSetOutline(kliutis_g[2], 0);
	TextDrawBackgroundColor(kliutis_g[2], 255);
	TextDrawFont(kliutis_g[2], 2);
	TextDrawSetProportional(kliutis_g[2], 1);
	TextDrawSetShadow(kliutis_g[2], 0);

	kliutis_g[3] = TextDrawCreate(165.997589, 203.933380, "");
	TextDrawLetterSize(kliutis_g[3], 0.000000, 0.000000);
	TextDrawTextSize(kliutis_g[3], 77.000000, 65.779953);
	TextDrawAlignment(kliutis_g[3], 1);
	TextDrawColor(kliutis_g[3], -1);
	TextDrawSetShadow(kliutis_g[3], 0);
	TextDrawSetOutline(kliutis_g[3], 0);
	TextDrawBackgroundColor(kliutis_g[3], 185273343);
	TextDrawFont(kliutis_g[3], 5);
	TextDrawSetProportional(kliutis_g[3], 0);
	TextDrawSetShadow(kliutis_g[3], 0);
	TextDrawSetSelectable(kliutis_g[3], true);
	TextDrawSetPreviewModel(kliutis_g[3], 978);
	TextDrawSetPreviewRot(kliutis_g[3], -50.000000, 0.000000, -160.000000, 1.000000);

	kliutis_g[4] = TextDrawCreate(244.902404, 203.933380, "");
	TextDrawLetterSize(kliutis_g[4], 0.000000, 0.000000);
	TextDrawTextSize(kliutis_g[4], 77.000000, 65.779953);
	TextDrawAlignment(kliutis_g[4], 1);
	TextDrawColor(kliutis_g[4], -1);
	TextDrawSetShadow(kliutis_g[4], 0);
	TextDrawSetOutline(kliutis_g[4], 0);
	TextDrawBackgroundColor(kliutis_g[4], 185273343);
	TextDrawFont(kliutis_g[4], 5);
	TextDrawSetProportional(kliutis_g[4], 0);
	TextDrawSetShadow(kliutis_g[4], 0);
	TextDrawSetSelectable(kliutis_g[4], true);
	TextDrawSetPreviewModel(kliutis_g[4], 1237);
	TextDrawSetPreviewRot(kliutis_g[4], -50.000000, 0.000000, -160.000000, 1.000000);

	kliutis_g[5] = TextDrawCreate(323.297821, 203.999938, "");
	TextDrawLetterSize(kliutis_g[5], 0.000000, 0.000000);
	TextDrawTextSize(kliutis_g[5], 77.000000, 65.779953);
	TextDrawAlignment(kliutis_g[5], 1);
	TextDrawColor(kliutis_g[5], -1);
	TextDrawSetShadow(kliutis_g[5], 0);
	TextDrawSetOutline(kliutis_g[5], 0);
	TextDrawBackgroundColor(kliutis_g[5], 185273343);
	TextDrawFont(kliutis_g[5], 5);
	TextDrawSetProportional(kliutis_g[5], 0);
	TextDrawSetShadow(kliutis_g[5], 0);
	TextDrawSetSelectable(kliutis_g[5], true);
	TextDrawSetPreviewModel(kliutis_g[5], 1422);
	TextDrawSetPreviewRot(kliutis_g[5], 0.000000, 0.000000, 50.000000, 2.000000);

	kliutis_g[6] = TextDrawCreate(401.911987, 203.933380, "");
	TextDrawLetterSize(kliutis_g[6], 0.000000, 0.000000);
	TextDrawTextSize(kliutis_g[6], 77.000000, 65.779953);
	TextDrawAlignment(kliutis_g[6], 1);
	TextDrawColor(kliutis_g[6], -1);
	TextDrawSetShadow(kliutis_g[6], 0);
	TextDrawSetOutline(kliutis_g[6], 0);
	TextDrawBackgroundColor(kliutis_g[6], 185273343);
	TextDrawFont(kliutis_g[6], 5);
	TextDrawSetProportional(kliutis_g[6], 0);
	TextDrawSetShadow(kliutis_g[6], 0);
	TextDrawSetSelectable(kliutis_g[6], true);
	TextDrawSetPreviewModel(kliutis_g[6], 1424);
	TextDrawSetPreviewRot(kliutis_g[6], -50.000000, 0.000000, -160.000000, 1.000000);

    gang_zone_g[0] = TextDrawCreate(153.000000, 376.944549, "box");
	TextDrawLetterSize(gang_zone_g[0], 0.000000, 0.950001);
	TextDrawTextSize(gang_zone_g[0], 306.000000, 0.000000);
	TextDrawAlignment(gang_zone_g[0], 1);
	TextDrawColor(gang_zone_g[0], -1);
	TextDrawUseBox(gang_zone_g[0], 1);
	TextDrawBoxColor(gang_zone_g[0], 120);
	TextDrawSetShadow(gang_zone_g[0], 0);
	TextDrawSetOutline(gang_zone_g[0], 0);
	TextDrawBackgroundColor(gang_zone_g[0], 255);
	TextDrawFont(gang_zone_g[0], 1);
	TextDrawSetProportional(gang_zone_g[0], 1);
	TextDrawSetShadow(gang_zone_g[0], 0);

	gang_zone_g[1] = TextDrawCreate(149.699981, 354.289031, "");
	TextDrawLetterSize(gang_zone_g[1], 0.000000, 0.000000);
	TextDrawTextSize(gang_zone_g[1], 23.000000, 26.000000);
	TextDrawAlignment(gang_zone_g[1], 1);
	TextDrawColor(gang_zone_g[1], -1);
	TextDrawSetShadow(gang_zone_g[1], 0);
	TextDrawSetOutline(gang_zone_g[1], 0);
	TextDrawBackgroundColor(gang_zone_g[1], 0);
	TextDrawFont(gang_zone_g[1], 5);
	TextDrawSetProportional(gang_zone_g[1], 0);
	TextDrawSetShadow(gang_zone_g[1], 0);
	TextDrawSetPreviewModel(gang_zone_g[1], 1254);
	TextDrawSetPreviewRot(gang_zone_g[1], 0.000000, 0.000000, 0.000000, 1.000000);

	gang_zone_g[2] = TextDrawCreate(135.000000, 364.722442, "");
	TextDrawLetterSize(gang_zone_g[2], 0.000000, 0.000000);
	TextDrawTextSize(gang_zone_g[2], 30.000000, 34.000000);
	TextDrawAlignment(gang_zone_g[2], 1);
	TextDrawColor(gang_zone_g[2], -1);
	TextDrawSetShadow(gang_zone_g[2], 0);
	TextDrawSetOutline(gang_zone_g[2], 0);
	TextDrawBackgroundColor(gang_zone_g[2], 0);
	TextDrawFont(gang_zone_g[2], 5);
	TextDrawSetProportional(gang_zone_g[2], 0);
	TextDrawSetShadow(gang_zone_g[2], 0);
	TextDrawSetPreviewModel(gang_zone_g[2], 1254);
	TextDrawSetPreviewRot(gang_zone_g[2], 0.000000, 0.000000, 0.000000, 1.000000);

	lyties_pasirinkimas_g[0] = TextDrawCreate(216.500000, 127.155517, "box");
	TextDrawLetterSize(lyties_pasirinkimas_g[0], 0.000000, 16.400009);
	TextDrawTextSize(lyties_pasirinkimas_g[0], 430.000000, 0.000000);
	TextDrawAlignment(lyties_pasirinkimas_g[0], 1);
	TextDrawColor(lyties_pasirinkimas_g[0], -1);
	TextDrawUseBox(lyties_pasirinkimas_g[0], 1);
	TextDrawBoxColor(lyties_pasirinkimas_g[0], 303174399);
	TextDrawSetShadow(lyties_pasirinkimas_g[0], 0);
	TextDrawSetOutline(lyties_pasirinkimas_g[0], 0);
	TextDrawBackgroundColor(lyties_pasirinkimas_g[0], 252645375);
	TextDrawFont(lyties_pasirinkimas_g[0], 1);
	TextDrawSetProportional(lyties_pasirinkimas_g[0], 1);
	TextDrawSetShadow(lyties_pasirinkimas_g[0], 0);

	lyties_pasirinkimas_g[1] = TextDrawCreate(218.999847, 144.277740, "box");
	TextDrawLetterSize(lyties_pasirinkimas_g[1], 0.000000, 14.116017);
	TextDrawTextSize(lyties_pasirinkimas_g[1], 427.000000, 0.000000);
	TextDrawAlignment(lyties_pasirinkimas_g[1], 1);
	TextDrawColor(lyties_pasirinkimas_g[1], -1);
	TextDrawUseBox(lyties_pasirinkimas_g[1], 1);
	TextDrawBoxColor(lyties_pasirinkimas_g[1], 421075455);
	TextDrawSetShadow(lyties_pasirinkimas_g[1], 0);
	TextDrawSetOutline(lyties_pasirinkimas_g[1], 0);
	TextDrawBackgroundColor(lyties_pasirinkimas_g[1], 255);
	TextDrawFont(lyties_pasirinkimas_g[1], 1);
	TextDrawSetProportional(lyties_pasirinkimas_g[1], 1);
	TextDrawSetShadow(lyties_pasirinkimas_g[1], 0);

	lyties_pasirinkimas_g[2] = TextDrawCreate(218.000000, 127.299957, "Pasirinkite lyti....");
	TextDrawLetterSize(lyties_pasirinkimas_g[2], 0.166000, 1.021332);
	TextDrawAlignment(lyties_pasirinkimas_g[2], 1);
	TextDrawColor(lyties_pasirinkimas_g[2], -1061109505);
	TextDrawSetShadow(lyties_pasirinkimas_g[2], 0);
	TextDrawSetOutline(lyties_pasirinkimas_g[2], 0);
	TextDrawBackgroundColor(lyties_pasirinkimas_g[2], 255);
	TextDrawFont(lyties_pasirinkimas_g[2], 2);
	TextDrawSetProportional(lyties_pasirinkimas_g[2], 1);
	TextDrawSetShadow(lyties_pasirinkimas_g[2], 0);

	lyties_pasirinkimas_g[3] = TextDrawCreate(223.500000, 253.455795, "box");
	TextDrawLetterSize(lyties_pasirinkimas_g[3], 0.000000, 1.450001);
	TextDrawTextSize(lyties_pasirinkimas_g[3], 320.261230, 0.000000);
	TextDrawAlignment(lyties_pasirinkimas_g[3], 1);
	TextDrawColor(lyties_pasirinkimas_g[3], -1);
	TextDrawUseBox(lyties_pasirinkimas_g[3], 1);
	TextDrawBoxColor(lyties_pasirinkimas_g[3], 252645375);
	TextDrawSetShadow(lyties_pasirinkimas_g[3], 0);
	TextDrawSetOutline(lyties_pasirinkimas_g[3], 0);
	TextDrawBackgroundColor(lyties_pasirinkimas_g[3], 255);
	TextDrawFont(lyties_pasirinkimas_g[3], 1);
	TextDrawSetProportional(lyties_pasirinkimas_g[3], 1);
	TextDrawSetShadow(lyties_pasirinkimas_g[3], 0);

	lyties_pasirinkimas_g[4] = TextDrawCreate(326.006256, 253.455795, "box");
	TextDrawLetterSize(lyties_pasirinkimas_g[4], 0.000000, 1.450001);
	TextDrawTextSize(lyties_pasirinkimas_g[4], 422.767486, 0.000000);
	TextDrawAlignment(lyties_pasirinkimas_g[4], 1);
	TextDrawColor(lyties_pasirinkimas_g[4], -1);
	TextDrawUseBox(lyties_pasirinkimas_g[4], 1);
	TextDrawBoxColor(lyties_pasirinkimas_g[4], 252645375);
	TextDrawSetShadow(lyties_pasirinkimas_g[4], 0);
	TextDrawSetOutline(lyties_pasirinkimas_g[4], 0);
	TextDrawBackgroundColor(lyties_pasirinkimas_g[4], 255);
	TextDrawFont(lyties_pasirinkimas_g[4], 1);
	TextDrawSetProportional(lyties_pasirinkimas_g[4], 1);
	TextDrawSetShadow(lyties_pasirinkimas_g[4], 0);

	lyties_pasirinkimas_g[5] = TextDrawCreate(225.100097, 255.155899, "box");
	TextDrawLetterSize(lyties_pasirinkimas_g[5], 0.000000, 1.049983);
	TextDrawTextSize(lyties_pasirinkimas_g[5], 319.238769, 0.000000);
	TextDrawAlignment(lyties_pasirinkimas_g[5], 1);
	TextDrawColor(lyties_pasirinkimas_g[5], -1);
	TextDrawUseBox(lyties_pasirinkimas_g[5], 1);
	TextDrawBoxColor(lyties_pasirinkimas_g[5], 932211656);
	TextDrawSetShadow(lyties_pasirinkimas_g[5], 0);
	TextDrawSetOutline(lyties_pasirinkimas_g[5], 0);
	TextDrawBackgroundColor(lyties_pasirinkimas_g[5], 255);
	TextDrawFont(lyties_pasirinkimas_g[5], 1);
	TextDrawSetProportional(lyties_pasirinkimas_g[5], 1);
	TextDrawSetShadow(lyties_pasirinkimas_g[5], 0);

	lyties_pasirinkimas_g[6] = TextDrawCreate(327.206329, 255.155899, "box");
	TextDrawLetterSize(lyties_pasirinkimas_g[6], 0.000000, 1.049983);
	TextDrawTextSize(lyties_pasirinkimas_g[6], 421.345001, 0.000000);
	TextDrawAlignment(lyties_pasirinkimas_g[6], 1);
	TextDrawColor(lyties_pasirinkimas_g[6], -1);
	TextDrawUseBox(lyties_pasirinkimas_g[6], 1);
	TextDrawBoxColor(lyties_pasirinkimas_g[6], -951757825);
	TextDrawSetShadow(lyties_pasirinkimas_g[6], 0);
	TextDrawSetOutline(lyties_pasirinkimas_g[6], 0);
	TextDrawBackgroundColor(lyties_pasirinkimas_g[6], 255);
	TextDrawFont(lyties_pasirinkimas_g[6], 1);
	TextDrawSetProportional(lyties_pasirinkimas_g[6], 1);
	TextDrawSetShadow(lyties_pasirinkimas_g[6], 0);

	lyties_pasirinkimas_g[7] = TextDrawCreate(260.500000, 254.088928, "Vyras_________________________________moteris");
	TextDrawLetterSize(lyties_pasirinkimas_g[7], 0.187500, 1.083554);
	TextDrawAlignment(lyties_pasirinkimas_g[7], 1);
	TextDrawColor(lyties_pasirinkimas_g[7], -1061109505);
	TextDrawSetShadow(lyties_pasirinkimas_g[7], 0);
	TextDrawSetOutline(lyties_pasirinkimas_g[7], 0);
	TextDrawBackgroundColor(lyties_pasirinkimas_g[7], 255);
	TextDrawFont(lyties_pasirinkimas_g[7], 2);
	TextDrawSetProportional(lyties_pasirinkimas_g[7], 1);
	TextDrawSetShadow(lyties_pasirinkimas_g[7], 0);

	login_register_g[0] = TextDrawCreate(-68.000000, 303.244445, "box");
	TextDrawLetterSize(login_register_g[0], 0.000000, 23.950000);
	TextDrawTextSize(login_register_g[0], 1046.000000, 0.000000);
	TextDrawAlignment(login_register_g[0], 1);
	TextDrawColor(login_register_g[0], -1);
	TextDrawUseBox(login_register_g[0], 1);
	TextDrawBoxColor(login_register_g[0], 90);
	TextDrawSetShadow(login_register_g[0], 0);
	TextDrawSetOutline(login_register_g[0], 0);
	TextDrawBackgroundColor(login_register_g[0], 255);
	TextDrawFont(login_register_g[0], 1);
	TextDrawSetProportional(login_register_g[0], 1);
	TextDrawSetShadow(login_register_g[0], 0);

	login_register_g[1] = TextDrawCreate(-63.000000, 332.488952, "box");
	TextDrawLetterSize(login_register_g[1], 0.000000, 19.900001);
	TextDrawTextSize(login_register_g[1], 909.000000, 0.000000);
	TextDrawAlignment(login_register_g[1], 1);
	TextDrawColor(login_register_g[1], -1);
	TextDrawUseBox(login_register_g[1], 1);
	TextDrawBoxColor(login_register_g[1], 303174399);
	TextDrawSetShadow(login_register_g[1], 0);
	TextDrawSetOutline(login_register_g[1], 0);
	TextDrawBackgroundColor(login_register_g[1], 255);
	TextDrawFont(login_register_g[1], 1);
	TextDrawSetProportional(login_register_g[1], 1);
	TextDrawSetShadow(login_register_g[1], 0);

	login_register_g[4] = TextDrawCreate(363.205322, 313.944488, "praleisk savo laika su mumis!");
	TextDrawLetterSize(login_register_g[4], 0.226000, 1.039999);
	TextDrawAlignment(login_register_g[4], 1);
	TextDrawColor(login_register_g[4], -1061109505);
	TextDrawSetShadow(login_register_g[4], 0);
	TextDrawSetOutline(login_register_g[4], 0);
	TextDrawBackgroundColor(login_register_g[4], 255);
	TextDrawFont(login_register_g[4], 2);
	TextDrawSetProportional(login_register_g[4], 1);
	TextDrawSetShadow(login_register_g[4], 0);

	login_register_g[5] = TextDrawCreate(178.099945, 361.733428, "box");
	TextDrawLetterSize(login_register_g[5], 0.000000, 3.099999);
	TextDrawTextSize(login_register_g[5], 451.101898, 0.000000);
	TextDrawAlignment(login_register_g[5], 1);
	TextDrawColor(login_register_g[5], -1);
	TextDrawUseBox(login_register_g[5], 1);
	TextDrawBoxColor(login_register_g[5], 252645375);
	TextDrawSetShadow(login_register_g[5], 0);
	TextDrawSetOutline(login_register_g[5], 0);
	TextDrawBackgroundColor(login_register_g[5], 255);
	TextDrawFont(login_register_g[5], 1);
	TextDrawSetProportional(login_register_g[5], 1);
	TextDrawSetShadow(login_register_g[5], 0);

	login_register_g[6] = TextDrawCreate(178.499877, 363.344421, "LD_SPAC:white");// prisijungti paspaudimas
	TextDrawLetterSize(login_register_g[6], 0.000000, 0.000000);
	TextDrawTextSize(login_register_g[6], 135.000000, 24.449987);
	TextDrawAlignment(login_register_g[6], 1);
	TextDrawColor(login_register_g[6], 762794495);
	TextDrawSetShadow(login_register_g[6], 0);
	TextDrawSetOutline(login_register_g[6], 0);
	TextDrawBackgroundColor(login_register_g[6], 255);
	TextDrawFont(login_register_g[6], 4);
	TextDrawSetProportional(login_register_g[6], 0);
	TextDrawSetShadow(login_register_g[6], 0);
	TextDrawSetSelectable(login_register_g[6], true);

	login_register_g[7] = TextDrawCreate(315.508239, 363.344421, "LD_SPAC:white");/// registruotis paspaudimas
	TextDrawLetterSize(login_register_g[7], 0.000000, 0.000000);
	TextDrawTextSize(login_register_g[7], 135.000000, 24.449987);
	TextDrawAlignment(login_register_g[7], 1);
	TextDrawColor(login_register_g[7], 1605946568);
	TextDrawSetShadow(login_register_g[7], 0);
	TextDrawSetOutline(login_register_g[7], 0);
	TextDrawBackgroundColor(login_register_g[7], 255);
	TextDrawFont(login_register_g[7], 4);
	TextDrawSetProportional(login_register_g[7], 0);
	TextDrawSetShadow(login_register_g[7], 0);
	TextDrawSetSelectable(login_register_g[7], true);

	login_register_g[8] = TextDrawCreate(220.100280, 369.200073, "PRISIJUNGTI____________________________________REGISTRUOTIS");
	TextDrawLetterSize(login_register_g[8], 0.201000, 1.214221);
	TextDrawAlignment(login_register_g[8], 1);
	TextDrawColor(login_register_g[8], -1061109505);
	TextDrawSetShadow(login_register_g[8], 0);
	TextDrawSetOutline(login_register_g[8], 0);
	TextDrawBackgroundColor(login_register_g[8], 255);
	TextDrawFont(login_register_g[8], 2);
	TextDrawSetProportional(login_register_g[8], 1);
	TextDrawSetShadow(login_register_g[8], 0);

	login_register_g[9] = TextDrawCreate(-54.500000, -50.800041, "box");
	TextDrawLetterSize(login_register_g[9], 0.000000, 19.900001);
	TextDrawTextSize(login_register_g[9], 923.000000, 0.000000);
	TextDrawAlignment(login_register_g[9], 1);
	TextDrawColor(login_register_g[9], -1);
	TextDrawUseBox(login_register_g[9], 1);
	TextDrawBoxColor(login_register_g[9], 303174399);
	TextDrawSetShadow(login_register_g[9], 0);
	TextDrawSetOutline(login_register_g[9], 0);
	TextDrawBackgroundColor(login_register_g[9], 255);
	TextDrawFont(login_register_g[9], 1);
	TextDrawSetProportional(login_register_g[9], 1);
	TextDrawSetShadow(login_register_g[9], 0);

	saugi_zona_g[0] = TextDrawCreate(-17.700000, 162.877838, "box");
	TextDrawLetterSize(saugi_zona_g[0], 0.000000, 2.900000);
	TextDrawTextSize(saugi_zona_g[0], 102.800003, 0.000000);
	TextDrawAlignment(saugi_zona_g[0], 1);
	TextDrawColor(saugi_zona_g[0], -1);
	TextDrawUseBox(saugi_zona_g[0], 1);
	TextDrawBoxColor(saugi_zona_g[0], 748787967);
	TextDrawSetShadow(saugi_zona_g[0], 0);
	TextDrawSetOutline(saugi_zona_g[0], 0);
	TextDrawBackgroundColor(saugi_zona_g[0], 255);
	TextDrawFont(saugi_zona_g[0], 1);
	TextDrawSetProportional(saugi_zona_g[0], 1);
	TextDrawSetShadow(saugi_zona_g[0], 0);

	saugi_zona_g[1] = TextDrawCreate(-6.500000, 165.111145, "box");
	TextDrawLetterSize(saugi_zona_g[1], 0.000000, 2.700000);
	TextDrawTextSize(saugi_zona_g[1], 103.000000, 0.000000);
	TextDrawAlignment(saugi_zona_g[1], 1);
	TextDrawColor(saugi_zona_g[1], -1);
	TextDrawUseBox(saugi_zona_g[1], 1);
	TextDrawBoxColor(saugi_zona_g[1], 252645375);
	TextDrawSetShadow(saugi_zona_g[1], 0);
	TextDrawSetOutline(saugi_zona_g[1], 0);
	TextDrawBackgroundColor(saugi_zona_g[1], 255);
	TextDrawFont(saugi_zona_g[1], 1);
	TextDrawSetProportional(saugi_zona_g[1], 1);
	TextDrawSetShadow(saugi_zona_g[1], 0);

	saugi_zona_g[2] = TextDrawCreate(9.399990, 170.544647, "hud:radar_girlfriend");
	TextDrawLetterSize(saugi_zona_g[2], 0.000000, 0.000000);
	TextDrawTextSize(saugi_zona_g[2], 10.000000, 11.000000);
	TextDrawAlignment(saugi_zona_g[2], 1);
	TextDrawColor(saugi_zona_g[2], -1);
	TextDrawSetShadow(saugi_zona_g[2], 0);
	TextDrawSetOutline(saugi_zona_g[2], 0);
	TextDrawBackgroundColor(saugi_zona_g[2], 255);
	TextDrawFont(saugi_zona_g[2], 4);
	TextDrawSetProportional(saugi_zona_g[2], 0);
	TextDrawSetShadow(saugi_zona_g[2], 0);

	saugi_zona_g[3] = TextDrawCreate(2.600001, 162.133544, "LD_BEAT:cring");
	TextDrawLetterSize(saugi_zona_g[3], 0.000000, 0.000000);
	TextDrawTextSize(saugi_zona_g[3], 24.000000, 27.000000);
	TextDrawAlignment(saugi_zona_g[3], 1);
	TextDrawColor(saugi_zona_g[3], -1523963137);
	TextDrawSetShadow(saugi_zona_g[3], 0);
	TextDrawSetOutline(saugi_zona_g[3], 0);
	TextDrawBackgroundColor(saugi_zona_g[3], 255);
	TextDrawFont(saugi_zona_g[3], 4);
	TextDrawSetProportional(saugi_zona_g[3], 0);
	TextDrawSetShadow(saugi_zona_g[3], 0);

	saugi_zona_g[4] = TextDrawCreate(26.999992, 169.555389, "Saugi zona");
	TextDrawLetterSize(saugi_zona_g[4], 0.341500, 1.133333);
	TextDrawAlignment(saugi_zona_g[4], 1);
	TextDrawColor(saugi_zona_g[4], 748787967);
	TextDrawSetShadow(saugi_zona_g[4], 0);
	TextDrawSetOutline(saugi_zona_g[4], 1);
	TextDrawBackgroundColor(saugi_zona_g[4], 252645375);
	TextDrawFont(saugi_zona_g[4], 3);
	TextDrawSetProportional(saugi_zona_g[4], 1);
	TextDrawSetShadow(saugi_zona_g[4], 0);

	saugi_zona_g[5] = TextDrawCreate(37.200057, 181.266693, "Esate saugus!");
	TextDrawLetterSize(saugi_zona_g[5], 0.124500, 0.722666);
	TextDrawAlignment(saugi_zona_g[5], 1);
	TextDrawColor(saugi_zona_g[5], -1);
	TextDrawSetShadow(saugi_zona_g[5], 0);
	TextDrawSetOutline(saugi_zona_g[5], 0);
	TextDrawBackgroundColor(saugi_zona_g[5], 255);
	TextDrawFont(saugi_zona_g[5], 2);
	TextDrawSetProportional(saugi_zona_g[5], 1);
	TextDrawSetShadow(saugi_zona_g[5], 0);

	kuro_pilimas_g[0] = TextDrawCreate(244.000000, 131.511062, "box");
	TextDrawLetterSize(kuro_pilimas_g[0], 0.000000, 14.482016);
	TextDrawTextSize(kuro_pilimas_g[0], 352.108154, 0.000000);
	TextDrawAlignment(kuro_pilimas_g[0], 1);
	TextDrawColor(kuro_pilimas_g[0], -1);
	TextDrawUseBox(kuro_pilimas_g[0], 1);
	TextDrawBoxColor(kuro_pilimas_g[0], 1179015679);
	TextDrawSetShadow(kuro_pilimas_g[0], 0);
	TextDrawSetOutline(kuro_pilimas_g[0], 0);
	TextDrawBackgroundColor(kuro_pilimas_g[0], 255);
	TextDrawFont(kuro_pilimas_g[0], 1);
	TextDrawSetProportional(kuro_pilimas_g[0], 1);
	TextDrawSetShadow(kuro_pilimas_g[0], 0);

	kuro_pilimas_g[1] = TextDrawCreate(222.500000, 110.199996, "ld_pool:ball");
	TextDrawLetterSize(kuro_pilimas_g[1], 0.000000, 0.000000);
	TextDrawTextSize(kuro_pilimas_g[1], 35.000000, 41.000000);
	TextDrawAlignment(kuro_pilimas_g[1], 1);
	TextDrawColor(kuro_pilimas_g[1], 1179015679);
	TextDrawSetShadow(kuro_pilimas_g[1], 0);
	TextDrawSetOutline(kuro_pilimas_g[1], 0);
	TextDrawBackgroundColor(kuro_pilimas_g[1], 255);
	TextDrawFont(kuro_pilimas_g[1], 4);
	TextDrawSetProportional(kuro_pilimas_g[1], 0);
	TextDrawSetShadow(kuro_pilimas_g[1], 0);

	kuro_pilimas_g[2] = TextDrawCreate(265.500000, 144.577728, "box");
	TextDrawLetterSize(kuro_pilimas_g[2], 0.000000, 1.400000);
	TextDrawTextSize(kuro_pilimas_g[2], 352.000000, 0.000000);
	TextDrawAlignment(kuro_pilimas_g[2], 1);
	TextDrawColor(kuro_pilimas_g[2], -1);
	TextDrawUseBox(kuro_pilimas_g[2], 1);
	TextDrawBoxColor(kuro_pilimas_g[2], 1891236351);
	TextDrawSetShadow(kuro_pilimas_g[2], 0);
	TextDrawSetOutline(kuro_pilimas_g[2], 0);
	TextDrawBackgroundColor(kuro_pilimas_g[2], 255);
	TextDrawFont(kuro_pilimas_g[2], 1);
	TextDrawSetProportional(kuro_pilimas_g[2], 1);
	TextDrawSetShadow(kuro_pilimas_g[2], 0);

	kuro_pilimas_g[3] = TextDrawCreate(274.000000, 145.199951, "Kuro pilimas");
	TextDrawLetterSize(kuro_pilimas_g[3], 0.213500, 1.095998);
	TextDrawAlignment(kuro_pilimas_g[3], 1);
	TextDrawColor(kuro_pilimas_g[3], -1);
	TextDrawSetShadow(kuro_pilimas_g[3], 0);
	TextDrawSetOutline(kuro_pilimas_g[3], 0);
	TextDrawBackgroundColor(kuro_pilimas_g[3], 255);
	TextDrawFont(kuro_pilimas_g[3], 2);
	TextDrawSetProportional(kuro_pilimas_g[3], 1);
	TextDrawSetShadow(kuro_pilimas_g[3], 0);

	kuro_pilimas_g[4] = TextDrawCreate(270.200042, 237.911132, "box");
	TextDrawLetterSize(kuro_pilimas_g[4], 0.000000, 1.699999);
	TextDrawTextSize(kuro_pilimas_g[4], 326.700042, 0.000000);
	TextDrawAlignment(kuro_pilimas_g[4], 1);
	TextDrawColor(kuro_pilimas_g[4], -1);
	TextDrawUseBox(kuro_pilimas_g[4], 1);
	TextDrawBoxColor(kuro_pilimas_g[4], 1263232767);
	TextDrawSetShadow(kuro_pilimas_g[4], 0);
	TextDrawSetOutline(kuro_pilimas_g[4], 0);
	TextDrawBackgroundColor(kuro_pilimas_g[4], 255);
	TextDrawFont(kuro_pilimas_g[4], 1);
	TextDrawSetProportional(kuro_pilimas_g[4], 1);
	TextDrawSetShadow(kuro_pilimas_g[4], 0);

	kuro_pilimas_g[5] = TextDrawCreate(284.500000, 239.155563, "BAIGTI");
	TextDrawLetterSize(kuro_pilimas_g[5], 0.198000, 1.176888);
	TextDrawAlignment(kuro_pilimas_g[5], 1);
	TextDrawColor(kuro_pilimas_g[5], -1);
	TextDrawSetShadow(kuro_pilimas_g[5], 0);
	TextDrawSetOutline(kuro_pilimas_g[5], 0);
	TextDrawBackgroundColor(kuro_pilimas_g[5], 255);
	TextDrawFont(kuro_pilimas_g[5], 2);
	TextDrawSetProportional(kuro_pilimas_g[5], 1);
	TextDrawSetShadow(kuro_pilimas_g[5], 0);

	MetroCity_logo_g[0] = TextDrawCreate(51.500000, 306.300689, "");
	TextDrawLetterSize(MetroCity_logo_g[0], 0.454499, 1.817777);
	TextDrawAlignment(MetroCity_logo_g[0], 1);
	TextDrawColor(MetroCity_logo_g[0], -26275073);
	TextDrawSetShadow(MetroCity_logo_g[0], 0);
	TextDrawSetOutline(MetroCity_logo_g[0], 1);
	TextDrawBackgroundColor(MetroCity_logo_g[0], 255);
	TextDrawFont(MetroCity_logo_g[0], 3);
	TextDrawSetProportional(MetroCity_logo_g[0], 1);
	TextDrawSetShadow(MetroCity_logo_g[0], 0);

	MetroCity_logo_g[1] = TextDrawCreate(115.700019, 305.700622, "");
	TextDrawLetterSize(MetroCity_logo_g[1], 0.230000, 1.344887);
	TextDrawAlignment(MetroCity_logo_g[1], 1);
	TextDrawColor(MetroCity_logo_g[1], -26275073);
	TextDrawSetShadow(MetroCity_logo_g[1], 0);
	TextDrawSetOutline(MetroCity_logo_g[1], 1);
	TextDrawBackgroundColor(MetroCity_logo_g[1], 255);
	TextDrawFont(MetroCity_logo_g[1], 2);
	TextDrawSetProportional(MetroCity_logo_g[1], 1);
	TextDrawSetShadow(MetroCity_logo_g[1], 0);

	MetroCity_logo_g[2] = TextDrawCreate(31.500000, 321.288940, "");
	TextDrawLetterSize(MetroCity_logo_g[2], 11.121997, 0.604444);
	TextDrawAlignment(MetroCity_logo_g[2], 1);
	TextDrawColor(MetroCity_logo_g[2], -1);
	TextDrawSetShadow(MetroCity_logo_g[2], 0);
	TextDrawSetOutline(MetroCity_logo_g[2], 0);
	TextDrawBackgroundColor(MetroCity_logo_g[2], 255);
	TextDrawFont(MetroCity_logo_g[2], 1);
	TextDrawSetProportional(MetroCity_logo_g[2], 1);
	TextDrawSetShadow(MetroCity_logo_g[2], 0);

	MetroCity_logo_g[3] = TextDrawCreate(74.499992, 327.755554, "www.MetroCity.lt");
	TextDrawLetterSize(MetroCity_logo_g[3], 0.235498, 1.133332);
	TextDrawAlignment(MetroCity_logo_g[3], 1);
	TextDrawColor(MetroCity_logo_g[3], -1061109505);
	TextDrawSetShadow(MetroCity_logo_g[3], 0);
	TextDrawSetOutline(MetroCity_logo_g[3], 0);
	TextDrawBackgroundColor(MetroCity_logo_g[3], 255);
	TextDrawFont(MetroCity_logo_g[3], 2);
	TextDrawSetProportional(MetroCity_logo_g[3], 1);
	TextDrawSetShadow(MetroCity_logo_g[3], 0);

	/*MetroCity_logo_g[4] = TextDrawCreate(-12.500000, 253.311126, "");////// nuo èia kalëdos prasideda
	TextDrawLetterSize(MetroCity_logo_g[4], 0.000000, 0.000000);
	TextDrawTextSize(MetroCity_logo_g[4], 90.000000, 90.000000);
	TextDrawAlignment(MetroCity_logo_g[4], 1);
	TextDrawColor(MetroCity_logo_g[4], -1);
	TextDrawSetShadow(MetroCity_logo_g[4], 0);
	TextDrawSetOutline(MetroCity_logo_g[4], 0);
	TextDrawBackgroundColor(MetroCity_logo_g[4], 0);
	TextDrawFont(MetroCity_logo_g[4], 5);
	TextDrawSetProportional(MetroCity_logo_g[4], 0);
	TextDrawSetShadow(MetroCity_logo_g[4], 0);
	TextDrawSetPreviewModel(MetroCity_logo_g[4], 19076);
	TextDrawSetPreviewRot(MetroCity_logo_g[4], 0.000000, 0.000000, 0.000000, 1.000000);

	MetroCity_logo_g[5] = TextDrawCreate(14.500000, 321.755706, "");
	TextDrawLetterSize(MetroCity_logo_g[5], 0.000000, 0.000000);
	TextDrawTextSize(MetroCity_logo_g[5], 17.000000, 18.000000);
	TextDrawAlignment(MetroCity_logo_g[5], 1);
	TextDrawColor(MetroCity_logo_g[5], -1);
	TextDrawSetShadow(MetroCity_logo_g[5], 0);
	TextDrawSetOutline(MetroCity_logo_g[5], 0);
	TextDrawBackgroundColor(MetroCity_logo_g[5], 0);
	TextDrawFont(MetroCity_logo_g[5], 5);
	TextDrawSetProportional(MetroCity_logo_g[5], 0);
	TextDrawSetShadow(MetroCity_logo_g[5], 0);
	TextDrawSetPreviewModel(MetroCity_logo_g[5], 19054);
	TextDrawSetPreviewRot(MetroCity_logo_g[5], -40.000000, 0.000000, 0.000000, 1.000000);

	MetroCity_logo_g[6] = TextDrawCreate(125.000000, 307.444580, "");
	TextDrawLetterSize(MetroCity_logo_g[6], 0.000000, 0.000000);
	TextDrawTextSize(MetroCity_logo_g[6], 17.000000, 18.000000);
	TextDrawAlignment(MetroCity_logo_g[6], 1);
	TextDrawColor(MetroCity_logo_g[6], -1);
	TextDrawSetShadow(MetroCity_logo_g[6], 0);
	TextDrawSetOutline(MetroCity_logo_g[6], 0);
	TextDrawBackgroundColor(MetroCity_logo_g[6], 0);
	TextDrawFont(MetroCity_logo_g[6], 5);
	TextDrawSetProportional(MetroCity_logo_g[6], 0);
	TextDrawSetShadow(MetroCity_logo_g[6], 0);
	TextDrawSetPreviewModel(MetroCity_logo_g[6], 19054);
	TextDrawSetPreviewRot(MetroCity_logo_g[6], -40.000000, 0.000000, 0.000000, 1.000000);

	MetroCity_logo_g[7] = TextDrawCreate(37.500000, 325.489044, "");
	TextDrawLetterSize(MetroCity_logo_g[7], 0.000000, 0.000000);
	TextDrawTextSize(MetroCityð_logo_g[7], 18.000000, 17.000000);
	TextDrawAlignment(MetroCity_logo_g[7], 1);
	TextDrawColor(MetroCity_logo_g[7], -1);
	TextDrawSetShadow(MetroCity_logo_g[7], 0);
	TextDrawSetOutline(MetroCity_logo_g[7], 0);
	TextDrawBackgroundColor(MetroCity_logo_g[7], 0);
	TextDrawFont(MetroCity_logo_g[7], 5);
	TextDrawSetProportional(MetroCity_logo_g[7], 0);
	TextDrawSetShadow(MetroCity_logo_g[7], 0);
	TextDrawSetPreviewModel(MetroCity_logo_g[7], 19058);
	TextDrawSetPreviewRot(MetroCity_logo_g[7], -40.000000, 0.000000, 0.000000, 1.000000);

	MetroCity_logo_g[8] = TextDrawCreate(23.000000, 325.489044, "");
	TextDrawLetterSize(MetroCity_logo_g[8], 0.000000, 0.000000);
	TextDrawTextSize(MetroCity_logo_g[8], 20.000000, 24.000000);
	TextDrawAlignment(MetroCity_logo_g[8], 1);
	TextDrawColor(MetroCity_logo_g[8], -1);
	TextDrawSetShadow(MetroCity_logo_g[8], 0);
	TextDrawSetOutline(MetroCity_logo_g[8], 0);
	TextDrawBackgroundColor(MetroCity_logo_g[8], 0);
	TextDrawFont(MetroCity_logo_g[8], 5);
	TextDrawSetProportional(MetroCity_logo_g[8], 0);
	TextDrawSetShadow(MetroCity_logo_g[8], 0);
	TextDrawSetPreviewModel(MetroCity_logo_g[8], 19057);
	TextDrawSetPreviewRot(MetroCity_logo_g[8], -40.000000, 0.000000, 0.000000, 1.000000);*/

	spidometras_g[0] = TextDrawCreate(456.000000, 401.189392, "box");
	TextDrawLetterSize(spidometras_g[0], 0.000000, 3.315011);
	TextDrawTextSize(spidometras_g[0], 629.000000, 0.000000);
	TextDrawAlignment(spidometras_g[0], 1);
	TextDrawColor(spidometras_g[0], -1);
	TextDrawUseBox(spidometras_g[0], 1);
	TextDrawBoxColor(spidometras_g[0], 842151935);
	TextDrawSetShadow(spidometras_g[0], 0);
	TextDrawSetOutline(spidometras_g[0], 0);
	TextDrawBackgroundColor(spidometras_g[0], 255);
	TextDrawFont(spidometras_g[0], 1);
	TextDrawSetProportional(spidometras_g[0], 1);
	TextDrawSetShadow(spidometras_g[0], 0);

	spidometras_g[1] = TextDrawCreate(456.000000, 399.589294, "box");
	TextDrawLetterSize(spidometras_g[1], 0.000000, 1.699094);
	TextDrawTextSize(spidometras_g[1], 629.000000, 0.000000);
	TextDrawAlignment(spidometras_g[1], 1);
	TextDrawColor(spidometras_g[1], -1);
	TextDrawUseBox(spidometras_g[1], 1);
	TextDrawBoxColor(spidometras_g[1], 673721855);
	TextDrawSetShadow(spidometras_g[1], 0);
	TextDrawSetOutline(spidometras_g[1], 0);
	TextDrawBackgroundColor(spidometras_g[1], 255);
	TextDrawFont(spidometras_g[1], 1);
	TextDrawSetProportional(spidometras_g[1], 1);
	TextDrawSetShadow(spidometras_g[1], 0);

	spidometras_g[2] = TextDrawCreate(457.800109, 402.289459, "degalu baro bg");
	TextDrawLetterSize(spidometras_g[2], 0.000000, 1.069092);
	TextDrawTextSize(spidometras_g[2], 626.759887, 0.000000);
	TextDrawAlignment(spidometras_g[2], 1);
	TextDrawColor(spidometras_g[2], -1);
	TextDrawUseBox(spidometras_g[2], 1);
	TextDrawBoxColor(spidometras_g[2], 1148681110);
	TextDrawSetShadow(spidometras_g[2], 0);
	TextDrawSetOutline(spidometras_g[2], 0);
	TextDrawBackgroundColor(spidometras_g[2], 255);
	TextDrawFont(spidometras_g[2], 1);
	TextDrawSetProportional(spidometras_g[2], 1);
	TextDrawSetShadow(spidometras_g[2], 0);

	spidometras_g[3] = TextDrawCreate(490.000122, 374.655700, "KM/H");
	TextDrawLetterSize(spidometras_g[3], 0.169498, 0.965331);
	TextDrawAlignment(spidometras_g[3], 1);
	TextDrawColor(spidometras_g[3], -1);
	TextDrawSetShadow(spidometras_g[3], 1);
	TextDrawSetOutline(spidometras_g[3], 0);
	TextDrawBackgroundColor(spidometras_g[3], 255);
	TextDrawFont(spidometras_g[3], 2);
	TextDrawSetProportional(spidometras_g[3], 1);
	TextDrawSetShadow(spidometras_g[3], 1);

	spidometras_g[4] = TextDrawCreate(458.199951, 418.188171, "hud:radar_dateDisco");
	TextDrawLetterSize(spidometras_g[4], 0.000000, 0.000000);
	TextDrawTextSize(spidometras_g[4], 11.000000, 12.000000);
	TextDrawAlignment(spidometras_g[4], 1);
	TextDrawColor(spidometras_g[4], -1);
	TextDrawSetShadow(spidometras_g[4], 0);
	TextDrawSetOutline(spidometras_g[4], 0);
	TextDrawBackgroundColor(spidometras_g[4], 255);
	TextDrawFont(spidometras_g[4], 4);
	TextDrawSetProportional(spidometras_g[4], 0);
	TextDrawSetShadow(spidometras_g[4], 0);

	spidometras_g[5] = TextDrawCreate(589.384338, 418.188171, "hud:radar_girlfriend");
	TextDrawLetterSize(spidometras_g[5], 0.000000, 0.000000);
	TextDrawTextSize(spidometras_g[5], 11.000000, 12.000000);
	TextDrawAlignment(spidometras_g[5], 1);
	TextDrawColor(spidometras_g[5], -1);
	TextDrawSetShadow(spidometras_g[5], 0);
	TextDrawSetOutline(spidometras_g[5], 0);
	TextDrawBackgroundColor(spidometras_g[5], 255);
	TextDrawFont(spidometras_g[5], 4);
	TextDrawSetProportional(spidometras_g[5], 0);
	TextDrawSetShadow(spidometras_g[5], 0);

	spidometras_g[6] = TextDrawCreate(422.799987, 436.166656, "duju bg");
	TextDrawLetterSize(spidometras_g[6], 0.000000, -4.611878);
	TextDrawTextSize(spidometras_g[6], 447.800109, 0.000000);
	TextDrawAlignment(spidometras_g[6], 1);
	TextDrawColor(spidometras_g[6], -1);
	TextDrawUseBox(spidometras_g[6], 1);
	TextDrawBoxColor(spidometras_g[6], 673721855);
	TextDrawSetShadow(spidometras_g[6], 0);
	TextDrawSetOutline(spidometras_g[6], 0);
	TextDrawBackgroundColor(spidometras_g[6], 255);
	TextDrawFont(spidometras_g[6], 1);
	TextDrawSetProportional(spidometras_g[6], 1);
	TextDrawSetShadow(spidometras_g[6], 0);

	spidometras_g[7] = TextDrawCreate(424.500091, 434.166534, "duju bg zalias");
	TextDrawLetterSize(spidometras_g[7], 0.000000, -4.182891);
	TextDrawTextSize(spidometras_g[7], 446.140136, 0.000000);
	TextDrawAlignment(spidometras_g[7], 1);
	TextDrawColor(spidometras_g[7], -1);
	TextDrawUseBox(spidometras_g[7], 1);
	TextDrawBoxColor(spidometras_g[7], 1034386120);
	TextDrawSetShadow(spidometras_g[7], 0);
	TextDrawSetOutline(spidometras_g[7], 0);
	TextDrawBackgroundColor(spidometras_g[7], 255);
	TextDrawFont(spidometras_g[7], 1);
	TextDrawSetProportional(spidometras_g[7], 1);
	TextDrawSetShadow(spidometras_g[7], 0);

	zvejybos_td_g[0] = TextDrawCreate(254.235260, 126.000000, "box");
	TextDrawLetterSize(zvejybos_td_g[0], 0.000000, 19.976478);
	TextDrawTextSize(zvejybos_td_g[0], 378.000000, 0.000000);
	TextDrawAlignment(zvejybos_td_g[0], 1);
	TextDrawColor(zvejybos_td_g[0], -1);
	TextDrawUseBox(zvejybos_td_g[0], 1);
	TextDrawBoxColor(zvejybos_td_g[0], 255);
	TextDrawSetShadow(zvejybos_td_g[0], 0);
	TextDrawSetOutline(zvejybos_td_g[0], 0);
	TextDrawBackgroundColor(zvejybos_td_g[0], 255);
	TextDrawFont(zvejybos_td_g[0], 1);
	TextDrawSetProportional(zvejybos_td_g[0], 1);
	TextDrawSetShadow(zvejybos_td_g[0], 0);

	zvejybos_td_g[1] = TextDrawCreate(255.647247, 290.733459, "box");
	TextDrawLetterSize(zvejybos_td_g[1], 0.000000, 1.529409);
	TextDrawTextSize(zvejybos_td_g[1], 376.909912, 0.000000);
	TextDrawAlignment(zvejybos_td_g[1], 1);
	TextDrawColor(zvejybos_td_g[1], -1424484250);
	TextDrawUseBox(zvejybos_td_g[1], 1);
	TextDrawBoxColor(zvejybos_td_g[1], 452919347);
	TextDrawSetShadow(zvejybos_td_g[1], 0);
	TextDrawSetOutline(zvejybos_td_g[1], 0);
	TextDrawBackgroundColor(zvejybos_td_g[1], 255);
	TextDrawFont(zvejybos_td_g[1], 1);
	TextDrawSetProportional(zvejybos_td_g[1], 1);
	TextDrawSetShadow(zvejybos_td_g[1], 0);

	zvejybos_td_g[2] = TextDrawCreate(255.817596, 154.933288, "box");
	TextDrawLetterSize(zvejybos_td_g[2], 0.000000, 6.776693);
	TextDrawTextSize(zvejybos_td_g[2], 313.628051, 0.000000);
	TextDrawAlignment(zvejybos_td_g[2], 1);
	TextDrawColor(zvejybos_td_g[2], -1);
	TextDrawUseBox(zvejybos_td_g[2], 1);
	TextDrawBoxColor(zvejybos_td_g[2], 371635711);
	TextDrawSetShadow(zvejybos_td_g[2], 0);
	TextDrawSetOutline(zvejybos_td_g[2], 0);
	TextDrawBackgroundColor(zvejybos_td_g[2], 255);
	TextDrawFont(zvejybos_td_g[2], 1);
	TextDrawSetProportional(zvejybos_td_g[2], 1);
	TextDrawSetShadow(zvejybos_td_g[2], 0);

	zvejybos_td_g[3] = TextDrawCreate(318.876434, 154.933364, "box");
	TextDrawLetterSize(zvejybos_td_g[3], 0.000000, 6.780635);
	TextDrawTextSize(zvejybos_td_g[3], 376.829833, 0.000000);
	TextDrawAlignment(zvejybos_td_g[3], 1);
	TextDrawColor(zvejybos_td_g[3], -1);
	TextDrawUseBox(zvejybos_td_g[3], 1);
	TextDrawBoxColor(zvejybos_td_g[3], -2817793);
	TextDrawSetShadow(zvejybos_td_g[3], 0);
	TextDrawSetOutline(zvejybos_td_g[3], 0);
	TextDrawBackgroundColor(zvejybos_td_g[3], 255);
	TextDrawFont(zvejybos_td_g[3], 1);
	TextDrawSetProportional(zvejybos_td_g[3], 1);
	TextDrawSetShadow(zvejybos_td_g[3], 0);

	zvejybos_td_g[4] = TextDrawCreate(255.817504, 222.816772, "box");
	TextDrawLetterSize(zvejybos_td_g[4], 0.000000, 6.751575);
	TextDrawTextSize(zvejybos_td_g[4], 313.530517, 0.000000);
	TextDrawAlignment(zvejybos_td_g[4], 1);
	TextDrawColor(zvejybos_td_g[4], -1);
	TextDrawUseBox(zvejybos_td_g[4], 1);
	TextDrawBoxColor(zvejybos_td_g[4], -520093441);
	TextDrawSetShadow(zvejybos_td_g[4], 0);
	TextDrawSetOutline(zvejybos_td_g[4], 0);
	TextDrawBackgroundColor(zvejybos_td_g[4], 255);
	TextDrawFont(zvejybos_td_g[4], 1);
	TextDrawSetProportional(zvejybos_td_g[4], 1);
	TextDrawSetShadow(zvejybos_td_g[4], 0);

	zvejybos_td_g[5] = TextDrawCreate(318.876403, 222.816802, "box");
	TextDrawLetterSize(zvejybos_td_g[5], 0.000000, 6.751576);
	TextDrawTextSize(zvejybos_td_g[5], 376.659667, 0.000000);
	TextDrawAlignment(zvejybos_td_g[5], 1);
	TextDrawColor(zvejybos_td_g[5], -1);
	TextDrawUseBox(zvejybos_td_g[5], 1);
	TextDrawBoxColor(zvejybos_td_g[5], 144507135);
	TextDrawSetShadow(zvejybos_td_g[5], 0);
	TextDrawSetOutline(zvejybos_td_g[5], 0);
	TextDrawBackgroundColor(zvejybos_td_g[5], 255);
	TextDrawFont(zvejybos_td_g[5], 1);
	TextDrawSetProportional(zvejybos_td_g[5], 1);
	TextDrawSetShadow(zvejybos_td_g[5], 0);

	hudas_g[0] = TextDrawCreate(493.700012, 80.488868, "box");
	TextDrawLetterSize(hudas_g[0], 0.000000, 2.649998);
	TextDrawTextSize(hudas_g[0], 608.199951, 0.000000);
	TextDrawAlignment(hudas_g[0], 1);
	TextDrawColor(hudas_g[0], -1);
	TextDrawUseBox(hudas_g[0], 1);
	TextDrawBoxColor(hudas_g[0], -262065921);
	TextDrawSetShadow(hudas_g[0], 0);
	TextDrawSetOutline(hudas_g[0], 0);
	TextDrawBackgroundColor(hudas_g[0], 255);
	TextDrawFont(hudas_g[0], 1);
	TextDrawSetProportional(hudas_g[0], 1);
	TextDrawSetShadow(hudas_g[0], 0);

	hudas_g[1] = TextDrawCreate(493.700012, 82.188842, "box");
	TextDrawLetterSize(hudas_g[1], 0.000000, 2.277025);
	TextDrawTextSize(hudas_g[1], 608.199951, 0.000000);
	TextDrawAlignment(hudas_g[1], 1);
	TextDrawColor(hudas_g[1], -1);
	TextDrawUseBox(hudas_g[1], 1);
	TextDrawBoxColor(hudas_g[1], 421075455);
	TextDrawSetShadow(hudas_g[1], 0);
	TextDrawSetOutline(hudas_g[1], 0);
	TextDrawBackgroundColor(hudas_g[1], 255);
	TextDrawFont(hudas_g[1], 1);
	TextDrawSetProportional(hudas_g[1], 1);
	TextDrawSetShadow(hudas_g[1], 0);

	hudas_g[2] = TextDrawCreate(492.999969, 80.244430, "box");
	TextDrawLetterSize(hudas_g[2], 0.000000, 0.823002);
	TextDrawTextSize(hudas_g[2], 609.000000, 0.000000);
	TextDrawAlignment(hudas_g[2], 1);
	TextDrawColor(hudas_g[2], -1);
	TextDrawUseBox(hudas_g[2], 1);
	TextDrawBoxColor(hudas_g[2], 673721855);
	TextDrawSetShadow(hudas_g[2], 0);
	TextDrawSetOutline(hudas_g[2], 0);
	TextDrawBackgroundColor(hudas_g[2], 255);
	TextDrawFont(hudas_g[2], 1);
	TextDrawSetProportional(hudas_g[2], 1);
	TextDrawSetShadow(hudas_g[2], 0);

	hudas_g[3] = TextDrawCreate(494.400054, 81.622177, "alkio bg");
	TextDrawLetterSize(hudas_g[3], 0.000000, 0.474003);
	TextDrawTextSize(hudas_g[3], 607.800048, 0.000000);
	TextDrawAlignment(hudas_g[3], 1);
	TextDrawColor(hudas_g[3], -1);
	TextDrawUseBox(hudas_g[3], 1);
	TextDrawBoxColor(hudas_g[3], -1229419320);
	TextDrawSetShadow(hudas_g[3], 0);
	TextDrawSetOutline(hudas_g[3], 0);
	TextDrawBackgroundColor(hudas_g[3], 255);
	TextDrawFont(hudas_g[3], 1);
	TextDrawSetProportional(hudas_g[3], 1);
	TextDrawSetShadow(hudas_g[3], 0);

	hudas_g[4] = TextDrawCreate(621.500000, 102.733276, "");
	TextDrawLetterSize(hudas_g[4], 0.000000, 0.000000);
	TextDrawTextSize(hudas_g[4], -42.000000, 33.000000);
	TextDrawAlignment(hudas_g[4], 1);
	TextDrawColor(hudas_g[4], -1);
	TextDrawSetShadow(hudas_g[4], 0);
	TextDrawSetOutline(hudas_g[4], 0);
	TextDrawBackgroundColor(hudas_g[4], 0);
	TextDrawFont(hudas_g[4], 5);
	TextDrawSetProportional(hudas_g[4], 0);
	TextDrawSetShadow(hudas_g[4], 0);
	TextDrawSetPreviewModel(hudas_g[4], 1212);
	TextDrawSetPreviewRot(hudas_g[4], 90.000000, 50.000000, -90.000000, 1.000000);

	hudas_g[5] = TextDrawCreate(546.299926, 79.888847, "HUD:radar_burgerShot");
	TextDrawLetterSize(hudas_g[5], 0.000000, 0.000000);
	TextDrawTextSize(hudas_g[5], 8.000000, 8.000000);
	TextDrawAlignment(hudas_g[5], 1);
	TextDrawColor(hudas_g[5], -1);
	TextDrawSetShadow(hudas_g[5], 0);
	TextDrawSetOutline(hudas_g[5], 0);
	TextDrawBackgroundColor(hudas_g[5], 255);
	TextDrawFont(hudas_g[5], 4);
	TextDrawSetProportional(hudas_g[5], 0);
	TextDrawSetShadow(hudas_g[5], 0);

	print("20\n");

	DegalineID[0]	= CreateDynamicCube(-2016.4594,183.6585,20.6866,-2060.0417,118.5954,35.7657);
	DegalineID[1] 	= CreateDynamicCube(-2452.7131,948.7167,40.3016,-2400.2336,997.2889,50.2969);
	DegalineID[2] 	= CreateDynamicCircle(-1684.4974,413.3958,55.0);
	DegalineID[3] 	= CreateDynamicCube(-1771.3073,-202.1524,-100.00,-1749.4960,-163.5675,200.00);
	DegalineID[4] 	= CreateDynamicCircle(-80.5229,-1172.5299,55.0);

	//Kalejimas 		= CreateDynamicCube(-280.2262,1183.9617,-1000.5938,-361.3495,1103.5865,1000.7459);

	KaroZona 		= CreateDynamicCube(-727.45, 1000.47, -100, -648.75, 895.70, 200);

	//LeduPardavejas[0] 		= CreateActor(264, -2286.6082,146.9473,35.3125,314.2600); 	SetActorInvulnerable(LeduPardavejas[0], true);
	//LeduPardavejas[0] 		= CreateActor(264, -1983.2971,171.8939,27.6875,86.8202); 	SetActorInvulnerable(LeduPardavejas[0], true);
	//LeduPardavejas[1] 		= CreateActor(264, -2384.7585,-584.4057,132.1172,266.4204); SetActorInvulnerable(LeduPardavejas[1], true);
	//HotDoguPardavejas[0] 	= CreateActor(168, -1998.4816,172.3351,27.6875,300.7328); 	SetActorInvulnerable(HotDoguPardavejas[0], true);
	HotDoguPardavejas[1] 	= CreateActor(168, -2516.6299,-16.2416,25.6172,301.6084); 	SetActorInvulnerable(HotDoguPardavejas[1], true);
	HotDoguPardavejas[2] 	= CreateActor(168, -2692.1990,385.4088,4.3750,224.5258); 	SetActorInvulnerable(HotDoguPardavejas[2], true);
	HotDoguPardavejas[3] 	= CreateActor(168, -2150.9888,-436.2601,35.3430,45.3817); 	SetActorInvulnerable(HotDoguPardavejas[3], true); // greitas maistas
	HotDoguPardavejas[4] 	= CreateActor(168, -2145.6023,-425.2049,35.3359,64.1818); 	SetActorInvulnerable(HotDoguPardavejas[4], true);
	HotDoguPardavejas[5] 	= CreateActor(168, -2093.7156,-397.3450,35.5313,38.7781); 	SetActorInvulnerable(HotDoguPardavejas[5], true);
	HotDoguPardavejas[6] 	= CreateActor(168, -2036.3505,-397.7895,35.5313,7.7343); 	SetActorInvulnerable(HotDoguPardavejas[6], true);
	//HotDoguPardavejas[7] 	= CreateActor(168, -2014.8729,153.8312,27.6875,271.3753); 	SetActorInvulnerable(HotDoguPardavejas[7], true); // greitas maistas
	//HotDoguPardavejas[8] 	= CreateActor(168, -1993.2911,210.7586,27.6866,88.8288); 	SetActorInvulnerable(HotDoguPardavejas[8], true);
	HotDoguPardavejas[9] 	= CreateActor(168, -2674.7810,633.3792,14.4529,176.2495); 	SetActorInvulnerable(HotDoguPardavejas[9], true);

	Botas[0] 				= CreateActor(59, 790.5335,-1049.9612,-5.9366,193.2879); 	SetActorInvulnerable(Botas[0], true); // Aukojimo fondas
	Botas[1] 				= CreateActor(46, -2032.5309,-409.8280,2.2260,239.6252); 	SetActorInvulnerable(Botas[1], true); // El. parduotuvë
	Botas[2] 				= CreateActor(250, -27.5818,-91.6318,1003.5469,0.3047); 	SetActorInvulnerable(Botas[2], true); // Parduotuvë
	Botas[3] 				= CreateActor(250, -27.5818,-91.6318,1003.5469,0.3047); 	SetActorInvulnerable(Botas[3], true); // Parduotuvë
	Botas[4] 				= CreateActor(147, 1094.9764,1277.9775,-11.4176,210.6642); 	SetActorInvulnerable(Botas[4], true); // VM
	Botas[5] 				= CreateActor(187, -1950.9066,257.1566,41.5694,357.8398); 	SetActorInvulnerable(Botas[5], true); // Motociklo pirkimas
	Botas[6] 				= CreateActor(17, -1946.7262,257.3602,41.5694,357.8398); 	SetActorInvulnerable(Botas[6], true); // Ðalmo pirkimas
	Botas[7] 				= CreateActor(141, -1953.7412,300.1701,34.8967,82.1040); 	SetActorInvulnerable(Botas[7], true); // Automobiliø pirkimas
	Botas[8] 				= CreateActor(66, 494.8954,-77.4619,998.7578,359.9153); 	SetActorInvulnerable(Botas[8], true); // Baras
	Botas[9] 				= CreateActor(147, -1834.2743,-600.9774,-28.6716,266.3425); SetActorInvulnerable(Botas[9], true); // Bankas
	//Botas[10] 				= CreateActor(147, -1954.5275,136.4685,27.7186,270.9633); 	SetActorInvulnerable(Botas[10], true); // PD
	Botas[11] 				= CreateActor(66, -223.3077,1405.0229,27.7734,87.1610); 	SetActorInvulnerable(Botas[11], true); // Baras
	Botas[12] 				= CreateActor(179, 312.3989,-167.7665,999.5938,359.9069); 	SetActorInvulnerable(Botas[12], true); // Ginklø parduotuvë
	Botas[13] 				= CreateActor(187, 359.7139,173.6387,1008.3893,267.1730); 	SetActorInvulnerable(Botas[13], true); // Vyriausybë
	Botas[14] 				= CreateActor(66, 501.8304,-18.7600,1000.6719,87.6957); 	SetActorInvulnerable(Botas[14], true); // Naktinis klubas
	Botas[15] 				= CreateActor(211, 209.5917,-98.7054,1005.2578,179.4811); 	SetActorInvulnerable(Botas[15], true); // Drabuþiø parduotuvë
	Botas[16] 				= CreateActor(217, 206.8987,-98.7053,1005.2578,178.8544); 	SetActorInvulnerable(Botas[16], true); // Drabuþiø parduotuvë
	Botas[17] 				= CreateActor(187, -145.3290,-206.3896,-14.00,206.1604); 	SetActorInvulnerable(Botas[17], true); // Transporto registracija
	Botas[18] 				= CreateActor(147, -149.4020,-209.6677,-16.1606,269.6469); 	SetActorInvulnerable(Botas[18], true); // Transporto atstatymas
	Botas[19] 				= CreateActor(167, 368.7816,-4.4919,1001.8516,177.9335); 	SetActorInvulnerable(Botas[19], true); // Cluckin Bell
	Botas[20] 				= CreateActor(167, 368.7816,-4.4919,1001.8516,177.9335); 	SetActorInvulnerable(Botas[20], true); // Cluckin Bell
	Botas[21] 				= CreateActor(167, 368.7816,-4.4919,1001.8516,177.9335); 	SetActorInvulnerable(Botas[21], true); // Cluckin Bell
	Botas[22] 				= CreateActor(205, 375.7986,-65.8483,1001.5078,178.9656); 	SetActorInvulnerable(Botas[22], true); // Burger Shot
	Botas[23] 				= CreateActor(205, 375.7986,-65.8483,1001.5078,178.9656); 	SetActorInvulnerable(Botas[23], true); // Burger Shot
	Botas[24] 				= CreateActor(155, 373.4510,-117.2777,1001.4995,183.2556); 	SetActorInvulnerable(Botas[24], true); // Picerija
	Botas[25] 				= CreateActor(308, 1077.8348,2295.3955,-54.1766,269.6234); 	SetActorInvulnerable(Botas[25], true); // Ligoninë
	Botas[26] 				= CreateActor(155, 373.4510,-117.2777,1001.4995,183.2556); 	SetActorInvulnerable(Botas[26], true); // Picerija
	Botas[27] 				= CreateActor(167, 368.7816,-4.4919,1001.8516,177.9335); 	SetActorInvulnerable(Botas[27], true); // Cluckin Bell
	Botas[28] 				= CreateActor(205, 375.7986,-65.8483,1001.5078,178.9656); 	SetActorInvulnerable(Botas[28], true); // Burger Shot
	Botas[29] 				= CreateActor(155, 373.4510,-117.2777,1001.4995,183.2556); 	SetActorInvulnerable(Botas[29], true); // Picerija
	Botas[30] 				= CreateActor(229, -2472.5420,252.6729,35.1719,359.4268); 	SetActorInvulnerable(Botas[30], true); // Metalo supirkimas
	Botas[31] 				= CreateActor(1, -2443.4080,252.4669,35.1719,356.8968); 	SetActorInvulnerable(Botas[31], true); // Þuvies supirkimas
	Botas[32] 				= CreateActor(14, -1854.9495,-973.0153,-4.9061,359.5314); 	SetActorInvulnerable(Botas[32], true); // Degalinë
	Botas[33] 				= CreateActor(14, -1854.9495,-973.0153,-4.9061,359.5314); 	SetActorInvulnerable(Botas[33], true); // Degalinë
	Botas[34] 				= CreateActor(14, -1854.9495,-973.0153,-4.9061,359.5314); 	SetActorInvulnerable(Botas[34], true); // Degalinë
	Botas[35] 				= CreateActor(87, 485.3023,-2.2127,1003.3828,178.7678); 	SetActorInvulnerable(Botas[35], true); // Striptizo ðokëja
	Botas[36] 				= CreateActor(246, 487.4851,-2.0425,1003.3828,180.4795); 	SetActorInvulnerable(Botas[36], true); // Striptizo ðokëja
	Botas[37] 				= CreateActor(257, 489.9552,-2.0078,1003.3828,182.9860); 	SetActorInvulnerable(Botas[37], true); // Striptizo ðokëja
	Botas[38] 				= CreateActor(276, 1077.8141,2289.7380,-54.1766,270.7087); 	SetActorInvulnerable(Botas[38], true); // Ligoninë
	Botas[39] 				= CreateActor(217, -2079.2891,86.0545,35.3905,89.8648); 	SetActorInvulnerable(Botas[39], true); // Drabuþiø parduotuvë
	Botas[40] 				= CreateActor(14, -1854.9495,-973.0153,-4.9061,359.5314); 	SetActorInvulnerable(Botas[40], true); // Degalinë
	Botas[41] 				= CreateActor(14, -1854.9495,-973.0153,-4.9061,359.5314); 	SetActorInvulnerable(Botas[41], true); // Degalinë

	//DarbuBotai[0] = CreateActor(50, -2181.4160,1062.2466,80.0530,180.00); 	SetActorInvulnerable(DarbuBotai[0], true); // Mechanikai
	//ApplyActorAnimation(DarbuBotai[0], "COP_AMBIENT", "Coplook_loop", 4.000000, 1, 0, 0, 0, 0);

	SetActorVirtualWorld(Botas[19], CLUCKIN1); SetActorVirtualWorld(Botas[20], CLUCKIN2); SetActorVirtualWorld(Botas[21], CLUCKIN3); SetActorVirtualWorld(Botas[21], CLUCKIN4);
	SetActorVirtualWorld(Botas[22], BURGER1); SetActorVirtualWorld(Botas[23], BURGER2); SetActorVirtualWorld(Botas[28], BURGER3);
	SetActorVirtualWorld(Botas[24], PICERIJA1); SetActorVirtualWorld(Botas[26], PICERIJA2); SetActorVirtualWorld(Botas[26], PICERIJA3);
	SetActorVirtualWorld(Botas[2], MAISTO_PARDUOTUVE1); SetActorVirtualWorld(Botas[3], MAISTO_PARDUOTUVE2);
	SetActorVirtualWorld(Botas[33], STOTIES_DEGALINE); SetActorVirtualWorld(Botas[34], VIDUTINE_DEGALINE); SetActorVirtualWorld(Botas[35], DIDELE_DEGALINE); SetActorVirtualWorld(Botas[41], DIDELE_DEGALINE1);
	SetActorVirtualWorld(Botas[42], DIDELE_DEGALINE2);

	ApplyActorAnimation(Botas[0], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[1], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[4], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[5], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[6], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[7], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[9], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[17], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[18], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[25], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[32], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[33], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[34], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[35], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[39], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[40], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[10], "COP_AMBIENT", "Coplook_loop", 4.000000, 1, 0, 0, 0, 0);
	ApplyActorAnimation(Botas[41], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[42], "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	/*ApplyActorAnimation(Botas[36], "LAPDAN1", "LAPDAN_D", 4.000000, 1, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[37], "LAPDAN2", "LAPDAN_D", 4.000000, 1, 1, 1, 1, -1);
	ApplyActorAnimation(Botas[38], "LAPDAN3", "LAPDAN_D", 4.000000, 1, 1, 1, 1, -1);*/

	GamblingMachine = CreateObject(2325, 2236.6172, 1600.9479, 1000.6591 ,   0.00, 0.00, -90.00);
    for(new i = 0; i < sizeof(BanditLocs); i++)
    {
        GambleLabel[i] = Create3DTextLabel("{ffffff} Kazino Caligula's\n{ffffff}Norëdami pradëti sukti, raðykite {FFAF00} /sukti{ffffff}!", 0xFFFFFFFF, BanditLocs[i][0], BanditLocs[i][1], BanditLocs[i][2], 4.0, 0, 0);
    	CreatePickup(1212, 1, BanditLocs[i][0], BanditLocs[i][1], BanditLocs[i][2]);
    }

	BCategoryLicensePrice		= 500 + random(500);
	ACategoryLicensePrice		= 300 + random(200);
	CCategoryLicensePrice		= 300 + random(200);
	TheoryLicensePrice			= 100 + random(100);
	iPhonePrice 				= 1000 + random(500);
	SamsungPrice 				= 600 + random(600);
	NokiaPrice 					= 400 + random(500);
	SonyPrice 					= 500 + random(300);
	AlcatelPrice 				= 400 + random(200);
	HTCPrice 					= 500 + random(700);
	DefaultContractPrice		= 5 + random(5);
	AbonentContractPrice		= 50 + random(50);

	print("21\n");

	print("22\n");

	ZoneNoGunLic = GangZoneCreate(-1701, 863, -1629, 906);

	SukuriameMatuoklius(-1587.04651, 455.08087, 6.17790,   0.00000, 0.00000, -45.00000);
	SukuriameMatuoklius(-2012.12048, 231.69223, 27.47608,   0.00000, 0.00000, 0.00000);
	SukuriameMatuoklius(-2012.89014, -59.91755, 34.16014,   0.00000, 0.00000, 0.00000);
	SukuriameMatuoklius(-2265.38794, -33.64073, 34.29243,   0.00000, 0.00000, 0.00000);
	SukuriameMatuoklius(-2294.61084, 573.75916, 34.16080,   0.00000, 0.00000, 90.00000);
	SukuriameMatuoklius(-2359.18359, 1385.09766, 6.24980,   0.00000, 0.00000, 90.00000);

	transporto_salonas_g[0] = TextDrawCreate(246.000000, -12.222228, "box");
	TextDrawLetterSize(transporto_salonas_g[0], 0.000000, 7.050000);
	TextDrawTextSize(transporto_salonas_g[0], 671.000000, 0.000000);
	TextDrawAlignment(transporto_salonas_g[0], 1);
	TextDrawColor(transporto_salonas_g[0], -1);
	TextDrawUseBox(transporto_salonas_g[0], 1);
	TextDrawBoxColor(transporto_salonas_g[0], 589505535);
	TextDrawSetShadow(transporto_salonas_g[0], 0);
	TextDrawSetOutline(transporto_salonas_g[0], 0);
	TextDrawBackgroundColor(transporto_salonas_g[0], 255);
	TextDrawFont(transporto_salonas_g[0], 1);
	TextDrawSetProportional(transporto_salonas_g[0], 1);
	TextDrawSetShadow(transporto_salonas_g[0], 0);

	transporto_salonas_g[1] = TextDrawCreate(483.000000, -10.977782, "box");
	TextDrawLetterSize(transporto_salonas_g[1], 0.000000, 27.500003);
	TextDrawTextSize(transporto_salonas_g[1], 699.000000, 0.000000);
	TextDrawAlignment(transporto_salonas_g[1], 1);
	TextDrawColor(transporto_salonas_g[1], -1);
	TextDrawUseBox(transporto_salonas_g[1], 1);
	TextDrawBoxColor(transporto_salonas_g[1], 589505535);
	TextDrawSetShadow(transporto_salonas_g[1], 0);
	TextDrawSetOutline(transporto_salonas_g[1], 0);
	TextDrawBackgroundColor(transporto_salonas_g[1], 255);
	TextDrawFont(transporto_salonas_g[1], 1);
	TextDrawSetProportional(transporto_salonas_g[1], 1);
	TextDrawSetShadow(transporto_salonas_g[1], 0);

	transporto_salonas_g[2] = TextDrawCreate(249.500000, -17.200006, "box");
	TextDrawLetterSize(transporto_salonas_g[2], 0.000000, 7.050000);
	TextDrawTextSize(transporto_salonas_g[2], 684.000000, 0.000000);
	TextDrawAlignment(transporto_salonas_g[2], 1);
	TextDrawColor(transporto_salonas_g[2], -1);
	TextDrawUseBox(transporto_salonas_g[2], 1);
	TextDrawBoxColor(transporto_salonas_g[2], 842150655);
	TextDrawSetShadow(transporto_salonas_g[2], 0);
	TextDrawSetOutline(transporto_salonas_g[2], 0);
	TextDrawBackgroundColor(transporto_salonas_g[2], 255);
	TextDrawFont(transporto_salonas_g[2], 1);
	TextDrawSetProportional(transporto_salonas_g[2], 1);
	TextDrawSetShadow(transporto_salonas_g[2], 0);

	transporto_salonas_g[3] = TextDrawCreate(486.500000, 54.977767, "box");
	TextDrawLetterSize(transporto_salonas_g[3], 0.000000, 19.749996);
	TextDrawTextSize(transporto_salonas_g[3], 660.000000, 0.000000);
	TextDrawAlignment(transporto_salonas_g[3], 1);
	TextDrawColor(transporto_salonas_g[3], -1);
	TextDrawUseBox(transporto_salonas_g[3], 1);
	TextDrawBoxColor(transporto_salonas_g[3], 842150655);
	TextDrawSetShadow(transporto_salonas_g[3], 0);
	TextDrawSetOutline(transporto_salonas_g[3], 0);
	TextDrawBackgroundColor(transporto_salonas_g[3], 255);
	TextDrawFont(transporto_salonas_g[3], 1);
	TextDrawSetProportional(transporto_salonas_g[3], 1);
	TextDrawSetShadow(transporto_salonas_g[3], 0);

	transporto_salonas_g[4] = TextDrawCreate(299.000000, 13.288866, "masinu parduotuve");
	TextDrawLetterSize(transporto_salonas_g[4], 0.474000, 1.985777);
	TextDrawAlignment(transporto_salonas_g[4], 1);
	TextDrawColor(transporto_salonas_g[4], -1061109505);
	TextDrawSetShadow(transporto_salonas_g[4], 0);
	TextDrawSetOutline(transporto_salonas_g[4], 1);
	TextDrawBackgroundColor(transporto_salonas_g[4], 255);
	TextDrawFont(transporto_salonas_g[4], 3);
	TextDrawSetProportional(transporto_salonas_g[4], 1);
	TextDrawSetShadow(transporto_salonas_g[4], 0);

	transporto_salonas_g[5] = TextDrawCreate(341.000000, 30.711090, "isigykite savo svajonu transporto priemone!");
	TextDrawLetterSize(transporto_salonas_g[5], 0.160499, 1.002665);
	TextDrawAlignment(transporto_salonas_g[5], 1);
	TextDrawColor(transporto_salonas_g[5], -1);
	TextDrawSetShadow(transporto_salonas_g[5], 0);
	TextDrawSetOutline(transporto_salonas_g[5], 0);
	TextDrawBackgroundColor(transporto_salonas_g[5], 255);
	TextDrawFont(transporto_salonas_g[5], 2);
	TextDrawSetProportional(transporto_salonas_g[5], 1);
	TextDrawSetShadow(transporto_salonas_g[5], 0);

	transporto_salonas_g[6] = TextDrawCreate(465.000000, 6.911116, "hud:radar_impound");
	TextDrawLetterSize(transporto_salonas_g[6], 0.000000, 0.000000);
	TextDrawTextSize(transporto_salonas_g[6], 22.000000, 21.000000);
	TextDrawAlignment(transporto_salonas_g[6], 1);
	TextDrawColor(transporto_salonas_g[6], -1);
	TextDrawSetShadow(transporto_salonas_g[6], 0);
	TextDrawSetOutline(transporto_salonas_g[6], 0);
	TextDrawBackgroundColor(transporto_salonas_g[6], 255);
	TextDrawFont(transporto_salonas_g[6], 4);
	TextDrawSetProportional(transporto_salonas_g[6], 0);
	TextDrawSetShadow(transporto_salonas_g[6], 0);

	transporto_salonas_g[7] = TextDrawCreate(489.500000, 59.333320, "box");
	TextDrawLetterSize(transporto_salonas_g[7], 0.000000, 1.350002);
	TextDrawTextSize(transporto_salonas_g[7], 634.260253, 0.000000);
	TextDrawAlignment(transporto_salonas_g[7], 1);
	TextDrawColor(transporto_salonas_g[7], -1);
	TextDrawUseBox(transporto_salonas_g[7], 1);
	TextDrawBoxColor(transporto_salonas_g[7], 589505535);
	TextDrawSetShadow(transporto_salonas_g[7], 0);
	TextDrawSetOutline(transporto_salonas_g[7], 0);
	TextDrawBackgroundColor(transporto_salonas_g[7], 255);
	TextDrawFont(transporto_salonas_g[7], 1);
	TextDrawSetProportional(transporto_salonas_g[7], 1);
	TextDrawSetShadow(transporto_salonas_g[7], 0);

	transporto_salonas_g[8] = TextDrawCreate(515.000000, 59.333236, "transporto informacija");
	TextDrawLetterSize(transporto_salonas_g[8], 0.175999, 1.108443);
	TextDrawAlignment(transporto_salonas_g[8], 1);
	TextDrawColor(transporto_salonas_g[8], -1061109505);
	TextDrawSetShadow(transporto_salonas_g[8], 0);
	TextDrawSetOutline(transporto_salonas_g[8], 0);
	TextDrawBackgroundColor(transporto_salonas_g[8], 255);
	TextDrawFont(transporto_salonas_g[8], 2);
	TextDrawSetProportional(transporto_salonas_g[8], 1);
	TextDrawSetShadow(transporto_salonas_g[8], 0);

	transporto_salonas_g[9] = TextDrawCreate(595.500000, 5.822222, "ISEITI (~R~ESC~W~)");
	TextDrawLetterSize(transporto_salonas_g[9], 0.167499, 1.183109);
	TextDrawAlignment(transporto_salonas_g[9], 1);
	TextDrawColor(transporto_salonas_g[9], -1);
	TextDrawSetShadow(transporto_salonas_g[9], 0);
	TextDrawSetOutline(transporto_salonas_g[9], 0);
	TextDrawBackgroundColor(transporto_salonas_g[9], 255);
	TextDrawFont(transporto_salonas_g[9], 2);
	TextDrawSetProportional(transporto_salonas_g[9], 1);
	TextDrawSetShadow(transporto_salonas_g[9], 0);

	transporto_salonas_g[10] = TextDrawCreate(486.000000, 159.511154, "box");
	TextDrawLetterSize(transporto_salonas_g[10], 0.000000, 3.450001);
	TextDrawTextSize(transporto_salonas_g[10], 930.000000, 0.000000);
	TextDrawAlignment(transporto_salonas_g[10], 1);
	TextDrawColor(transporto_salonas_g[10], -1);
	TextDrawUseBox(transporto_salonas_g[10], 1);
	TextDrawBoxColor(transporto_salonas_g[10], 589505535);
	TextDrawSetShadow(transporto_salonas_g[10], 0);
	TextDrawSetOutline(transporto_salonas_g[10], 0);
	TextDrawBackgroundColor(transporto_salonas_g[10], 255);
	TextDrawFont(transporto_salonas_g[10], 1);
	TextDrawSetProportional(transporto_salonas_g[10], 1);
	TextDrawSetShadow(transporto_salonas_g[10], 0);

	transporto_salonas_g[11] = TextDrawCreate(565.500000, 170.733612, "KEISTI_TRANSPORTA");
	TextDrawLetterSize(transporto_salonas_g[11], 0.178999, 1.033776);
	TextDrawAlignment(transporto_salonas_g[11], 2);
	TextDrawColor(transporto_salonas_g[11], -1);
	TextDrawSetShadow(transporto_salonas_g[11], 0);
	TextDrawSetOutline(transporto_salonas_g[11], 1);
	TextDrawBackgroundColor(transporto_salonas_g[11], 255);
	TextDrawFont(transporto_salonas_g[11], 2);
	TextDrawSetProportional(transporto_salonas_g[11], 1);
	TextDrawSetShadow(transporto_salonas_g[11], 0);

	transporto_salonas_g[12] = TextDrawCreate(532.199951, 203.777633, "box");
	TextDrawLetterSize(transporto_salonas_g[12], 0.000000, 2.099997);
	TextDrawTextSize(transporto_salonas_g[12], 599.199951, 0.000000);
	TextDrawAlignment(transporto_salonas_g[12], 1);
	TextDrawColor(transporto_salonas_g[12], -1);
	TextDrawUseBox(transporto_salonas_g[12], 1);
	TextDrawBoxColor(transporto_salonas_g[12], 589505535);
	TextDrawSetShadow(transporto_salonas_g[12], 0);
	TextDrawSetOutline(transporto_salonas_g[12], 0);
	TextDrawBackgroundColor(transporto_salonas_g[12], 255);
	TextDrawFont(transporto_salonas_g[12], 1);
	TextDrawSetProportional(transporto_salonas_g[12], 1);
	TextDrawSetShadow(transporto_salonas_g[12], 0);

	transporto_salonas_g[13] = TextDrawCreate(531.899902, 203.233367, "LD_SPAC:white");//paspaudimas pirkti
	TextDrawLetterSize(transporto_salonas_g[13], 0.000000, 0.000000);
	TextDrawTextSize(transporto_salonas_g[13], 67.529899, 19.409986);
	TextDrawAlignment(transporto_salonas_g[13], 1);
	TextDrawColor(transporto_salonas_g[13], 1350321663);
	TextDrawSetShadow(transporto_salonas_g[13], 0);
	TextDrawSetOutline(transporto_salonas_g[13], 0);
	TextDrawBackgroundColor(transporto_salonas_g[13], 255);
	TextDrawFont(transporto_salonas_g[13], 4);
	TextDrawSetProportional(transporto_salonas_g[13], 0);
	TextDrawSetShadow(transporto_salonas_g[13], 0);
	TextDrawSetSelectable(transporto_salonas_g[13], true);

	transporto_salonas_g[14] = TextDrawCreate(547.799804, 205.899963, "Pirkti");
	TextDrawLetterSize(transporto_salonas_g[14], 0.345999, 1.307554);
	TextDrawAlignment(transporto_salonas_g[14], 1);
	TextDrawColor(transporto_salonas_g[14], -1061109505);
	TextDrawSetShadow(transporto_salonas_g[14], 0);
	TextDrawSetOutline(transporto_salonas_g[14], 1);
	TextDrawBackgroundColor(transporto_salonas_g[14], 255);
	TextDrawFont(transporto_salonas_g[14], 3);
	TextDrawSetProportional(transporto_salonas_g[14], 1);
	TextDrawSetShadow(transporto_salonas_g[14], 0);

	for(new p = 0; p < MAX_PLAYERS; p ++)
	{
		KalejimoLaikoTd[p] = TextDrawCreate(240.000000, 384.000000, "LIKO SEDETI: ~g~00~w~:~g~00~w~:~g~00");
		TextDrawBackgroundColor(KalejimoLaikoTd[p], 255);
		TextDrawFont(KalejimoLaikoTd[p], 2);
		TextDrawLetterSize(KalejimoLaikoTd[p], 0.500000, 2.000000);
		TextDrawColor(KalejimoLaikoTd[p], -1);
		TextDrawSetOutline(KalejimoLaikoTd[p], 0);
		TextDrawSetProportional(KalejimoLaikoTd[p], 1);
		TextDrawSetShadow(KalejimoLaikoTd[p], 1);
		TextDrawSetSelectable(KalejimoLaikoTd[p], 0);
	}

	print("23\n");

	for(new v = 0, size = GetVehiclePoolSize(); v <= size; v++)
	{
		if(GetVehicleModel(v) < 400) continue;

		RadijosPavadinimas[v][0] = '\0';
		RadijosURL        [v][0] = '\0';

		if(!IsABike(v))
		{
			SetVehicleParamsEx(v, false, false, false, false, false, false, false);
		}
		else
		{
			SetVehicleParamsEx(v, true, false, false, false, false, false, false);
		}

		SetVehicleFuelInfo(v);
		ac_SetVehicleToRespawn(v);

		format(VehicleInfo[v][vSavininkas], 21, "-");
		format(VehicleInfo[v][vNumeriai], 14, "%s", CreateLtuNumberPlate());
		SetVehicleNumberPlate(v, VehicleInfo[v][vNumeriai]);

		for(new tune = 0; tune < 13; tune ++) 	VehicleInfo[v][vTune][tune] 	= 0;
		for(new color = 0; color < 2; color ++) VehicleInfo[v][vColor][color] 	= 0;

		VehicleInfo[v][vPaintjob] 	= -1;
		VehicleInfo[v][vUzraktas] 	= false;
		VehicleInfo[v][vNupirkta] 	= false;

		if(VehicleInfo[v][vNuoma])
		{
			SetVehicleNumberPlate(v, "{FFAF00}NUOMA");
		}

		if(ArTurgausMasina[v])
		{
			new KoksKuras[64];

			switch(VehicleInfo[v][vKuroTipas])
			{
				case BENZINAS: 	KoksKuras = "Benzinas";
				case DYZELIS: 	KoksKuras = "Dyzelis";
			}

			new model = GetVehicleModel(v);

			switch(model)
			{
				case 401: TurgausInfo[v][tKiekis] = KraunamTurgu[0];
				case 404: TurgausInfo[v][tKiekis] = KraunamTurgu[1];
				case 410: TurgausInfo[v][tKiekis] = KraunamTurgu[2];
				case 412: TurgausInfo[v][tKiekis] = KraunamTurgu[3];
				case 419: TurgausInfo[v][tKiekis] = KraunamTurgu[4];
				case 436: TurgausInfo[v][tKiekis] = KraunamTurgu[5];
				case 439: TurgausInfo[v][tKiekis] = KraunamTurgu[6];
				case 445: TurgausInfo[v][tKiekis] = KraunamTurgu[7];
				case 458: TurgausInfo[v][tKiekis] = KraunamTurgu[8];
				case 466: TurgausInfo[v][tKiekis] = KraunamTurgu[9];
				case 467: TurgausInfo[v][tKiekis] = KraunamTurgu[10];
				case 479: TurgausInfo[v][tKiekis] = KraunamTurgu[11];
				case 480: TurgausInfo[v][tKiekis] = KraunamTurgu[12];
				case 491: TurgausInfo[v][tKiekis] = KraunamTurgu[13];
				case 492: TurgausInfo[v][tKiekis] = KraunamTurgu[14];
				case 507: TurgausInfo[v][tKiekis] = KraunamTurgu[15];
				case 516: TurgausInfo[v][tKiekis] = KraunamTurgu[16];
				case 517: TurgausInfo[v][tKiekis] = KraunamTurgu[17];
				case 518: TurgausInfo[v][tKiekis] = KraunamTurgu[18];
				case 526: TurgausInfo[v][tKiekis] = KraunamTurgu[19];
				case 580: TurgausInfo[v][tKiekis] = KraunamTurgu[20];
				case 529: TurgausInfo[v][tKiekis] = KraunamTurgu[21];
				case 533: TurgausInfo[v][tKiekis] = KraunamTurgu[22];
				case 534: TurgausInfo[v][tKiekis] = KraunamTurgu[23];
				case 536: TurgausInfo[v][tKiekis] = KraunamTurgu[24];
				case 542: TurgausInfo[v][tKiekis] = KraunamTurgu[25];
				case 575: TurgausInfo[v][tKiekis] = KraunamTurgu[26];
				case 576: TurgausInfo[v][tKiekis] = KraunamTurgu[27];
				// Nepamirðti pridëti krovimo jeigu prisidës maðinø.
			}

			//TurgausInfo[v][tKiekis] = 5 + random(10);

			new str[300];
			format(str, sizeof(str), "{ffffff}Pavadinimas: {FFAF00}%s\n{ffffff}Kaina: {FFAF00}$%s\n{ffffff}Kuro tipas: {ffffff} %s\n{ffffff}Kuro sànaudos: {FFAF00}%.2f L/10 KM\n{ffffff}Bako tûris: {FFAF00}%.2f L\n{ffffff}Turimas kiekis: {FFAF00}%d",
			VehicleNames[GetVehicleModel(v) - 400], konvertuoti_pinigus(TurgausInfo[v][tKaina]), KoksKuras, VehicleInfo[v][vSanaudos], VehicleInfo[v][vBakas], TurgausInfo[v][tKiekis]);
			TurgausInfo[v][tText] = CreateDynamic3DTextLabel(str, -1, TurgausInfo[v][T_Pos][0], TurgausInfo[v][T_Pos][1], TurgausInfo[v][T_Pos][2] + 0.5, 6.0);
			//Attach3DTextLabelToVehicle(Text3D: TurgausInfo[v][tText], v, 0, 0, 0);

			SetVehicleNumberPlate(v, "{FFAF00}TURGUS");
		}
	}

	print("24\n");

	for(new z = 0; z < MAX_ZONES; z++)
	{
		Zone[z] = GangZoneCreate(ZoneCords[z][minX], ZoneCords[z][minY], ZoneCords[z][maxX], ZoneCords[z][maxY]);
		GangZoneShowForAll(Zone[z], ZONE_COLOR);
	}

	SetTimer("SpeedoTimer", 				100, true);
	SetTimer("ServerioPranesimai", 			1000 * 60 * 3, true);
	SetTimer("settime",						1000, true);
	SetTimer("BadEngine", 					1000, true);
	SetTimer("Sekundinis", 					1000, true);
	SetTimer("Sekundinis2", 				15000, true);
	SetTimer("Zaidimas", 					60000, true);
	SetTimer("MatuojaGreiti", 				1000, true);
	SetTimer("AFKTikrinimoTimeris", 		1000, true);
	SetTimer("ChangeGoodsPrices",  			60000 * 15,   true);
	SetTimer("RandomVeiksmas",  			60000 * 60,   true);
	SetTimer("xReactionTest", 				60000 * 5, true);
	SetTimer("ac_AntiCheatTimer", 			500, false);

	print("25\n");

	return 1;
}

f_public: RandomVeiksmas()
{
	RandomLektuvas();

	/*switch(random(3))
	{
		case 0: RandomLektuvas();
		case 1: RandomFishing();
		case 2: RandomKasyklaa();
	}*/

	return 1;
}

stock RandomLektuvas()
{
	if(Lektuvas == false)
	{
		KoksLektuvas = random(3);

		switch(KoksLektuvas)
		{
			case 0:
			{
				Lektuvas1[0] = CreateObject(3269, -997.26031, -1624.87109, 75.30760,   0.00000, 0.00000, 0.00000);
				Lektuvas1[1] = CreateObject(2991, -985.73389, -1618.31116, 75.88320,   0.00000, 0.00000, 0.00000);
				Lektuvas1[2] = CreateObject(2819, -987.48077, -1611.92700, 75.36304,   0.00000, 0.00000, 0.00000);
				Lektuvas1[3] = CreateObject(2819, -1004.37457, -1611.91125, 75.36375,   0.00000, 0.00000, 0.20100);
				Lektuvas1[4] = CreateObject(2843, -1000.39111, -1627.20032, 75.36170,   0.00000, 0.00000, 0.00000);
				Lektuvas1[5] = CreateObject(789, -975.53973, -1615.38623, 88.60734,   0.00000, 0.00000, 0.00000);
				Lektuvas1[6] = CreateObject(789, -1020.92059, -1630.94495, 88.52630,   0.00000, 0.00000, 180.00000);
				Lektuvas1[7] = CreateObject(2991, -1002.97601, -1625.45288, 75.88320,   0.00000, 0.00000, 0.00000);
				Lektuvas1[8] = CreateObject(1230, -986.78717, -1627.40967, 75.71110,   0.00000, 0.00000, 0.00000);
				Lektuvas1[9] = CreateObject(1299, -986.07275, -1623.54443, 75.74210,   0.00000, 0.00000, 0.00000);
				Lektuvas1[10] = CreateObject(1299, -1001.33167, -1622.24194, 75.74210,   0.00000, 0.00000, 0.00000);
				Lektuvas1[11] = CreateObject(1438, -1000.25305, -1636.18298, 75.36337,   0.00000, 0.00000, 0.00000);
				Lektuvas1[12] = CreateObject(854, -1000.50385, -1632.13489, 75.35711,   0.00000, 0.00000, 0.00000);
				Lektuvas1[13] = CreateObject(2852, -999.62378, -1629.17944, 75.36424,   0.00000, 0.00000, 0.00000);
				Lektuvas1[14] = CreateObject(2852, -990.08038, -1622.31995, 75.36424,   0.00000, 0.00000, 0.00000);
				Lektuvas1[15] = CreateObject(2852, -993.62744, -1610.45642, 75.36424,   0.00000, 0.00000, 0.00000);
				Lektuvas1[16] = CreateObject(1438, -1003.93927, -1627.89624, 75.36337,   0.00000, 0.00000, 0.00000);
				Lektuvas1[17] = CreateObject(1438, -992.26337, -1620.06360, 75.36337,   0.00000, 0.00000, 0.00000);
				Lektuvas1[18] = CreateObject(2991, -989.66113, -1625.14648, 75.88320,   0.00000, 0.00000, 0.00000);
				Lektuvas1[19] = CreateObject(2819, -1004.13208, -1611.25488, 75.36375,   0.00000, 0.00000, 0.20100);

				for(new textid = 0; textid < 12; textid ++)
				{
					FirstLektuvoText[textid] = CreateDynamic3DTextLabel("{ffffff} Lëktuvo nuolauþø apieðkojimas\n{ffffff}Norëdami apieðkoti ðià vietà, raðykite {FFAF00} /ieskoti",
					-1, PirmasLektuvas[textid][IeskotiX], PirmasLektuvas[textid][IeskotiY], PirmasLektuvas[textid][IeskotiZ], 2);
				}

				SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
				SendClientMessageToAll(-1, "{ffffff}Kaþkur {FFAF00}Flint County {ffffff}teritorijoje, prie {FFAF00}Leafy Hollow {ffffff}kaimelio nukrito lëktuvas!");
				SendClientMessageToAll(-1, "{ffffff}Kaip þinoma, jame buvo gabenami nelegalûs ginklai, narkotikai bei pinigai ir viskas liko ten.");
				SendClientMessageToAll(-1, "{ffffff}Todël jeigu norite kaþkà gauti jau skubëkite ten, nes galbût kaþkas kitas apieðkos visas vietas!");
				SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
			}

			case 1:
			{
				Lektuvas2[0] = CreateObject(3269, 2336.55493, -791.18512, 127.12660,   0.00000, -5.00000, 0.00000);
				Lektuvas2[1] = CreateObject(789, 2321.59937, -800.83038, 139.33086,   0.00000, 0.00000, 0.00000);
				Lektuvas2[2] = CreateObject(789, 2358.18506, -782.99194, 141.89281,   0.00000, 0.00000, 180.00000);
				Lektuvas2[3] = CreateObject(647, 2316.90796, -756.22882, 131.72353,   0.00000, 0.00000, 0.00000);
				Lektuvas2[4] = CreateObject(647, 2313.60547, -782.66595, 128.22340,   0.00000, 0.00000, 0.00000);
				Lektuvas2[5] = CreateObject(647, 2348.86133, -802.33191, 128.99930,   0.00000, 0.00000, 0.00000);
				Lektuvas2[6] = CreateObject(647, 2362.56177, -794.84186, 129.60538,   0.00000, 0.00000, 0.00000);
				Lektuvas2[7] = CreateObject(1438, 2354.94580, -796.17438, 128.24309,   0.00000, 0.00000, 0.00000);
				Lektuvas2[8] = CreateObject(1438, 2350.50464, -782.58112, 128.55219,   0.00000, 0.00000, 0.00000);
				Lektuvas2[9] = CreateObject(1299, 2350.37427, -789.46918, 128.71350,   0.00000, 0.00000, 0.00000);
				Lektuvas2[10] = CreateObject(2991, 2333.69873, -805.11450, 127.19940,   0.00000, -4.00000, 0.00000);
				Lektuvas2[11] = CreateObject(2991, 2341.03540, -790.25385, 128.63756,   0.00000, 0.00000, 0.00000);
				Lektuvas2[12] = CreateObject(2991, 2346.31982, -783.08459, 129.03828,   0.00000, 0.00000, 0.00000);
				Lektuvas2[13] = CreateObject(2853, 2350.24683, -794.34418, 128.23048,   0.00000, 0.00000, 0.00000);
				Lektuvas2[14] = CreateObject(2852, 2349.37305, -790.11328, 128.39604,   0.00000, 0.00000, 0.00000);
				Lektuvas2[15] = CreateObject(2852, 2343.22339, -787.37115, 128.39754,   0.00000, 0.00000, 0.00000);
				Lektuvas2[16] = CreateObject(2852, 2333.24023, -798.53168, 127.27727,   0.00000, 0.00000, 0.00000);
				Lektuvas2[17] = CreateObject(2852, 2324.52686, -789.18793, 127.01944,   0.00000, 0.00000, 0.00000);
				Lektuvas2[18] = CreateObject(2852, 2331.79590, -774.59076, 127.98811,   0.00000, 0.00000, 0.00000);
				Lektuvas2[19] = CreateObject(2852, 2340.09644, -785.39111, 128.28947,   0.00000, 0.00000, 0.00000);
				Lektuvas2[20] = CreateObject(2819, 2349.84912, -798.76917, 127.97571,   0.00000, 0.00000, 0.00000);
				Lektuvas2[21] = CreateObject(2819, 2334.44507, -800.71082, 127.21774,   0.00000, 0.00000, 0.00000);

				for(new textid = 0; textid < 14; textid ++)
				{
					SecondLektuvoText[textid] = CreateDynamic3DTextLabel("{ffffff} Lëktuvo nuolauþø apieðkojimas\n{ffffff}Norëdami apieðkoti ðià vietà, raðykite {FFAF00} /ieskoti",
					-1, AntrasLektuvas[textid][IeskotiX], AntrasLektuvas[textid][IeskotiY], AntrasLektuvas[textid][IeskotiZ], 2);
				}

				SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
				SendClientMessageToAll(-1, "{ffffff}Kaþkur {FFAF00}Los Santos {ffffff}teritorijoje, prie {FFAF00}Las Colinas {ffffff}rajono nukrito lëktuvas!");
				SendClientMessageToAll(-1, "{ffffff}Kaip þinoma, jame buvo gabenami nelegalûs ginklai, narkotikai bei pinigai ir viskas liko ten.");
				SendClientMessageToAll(-1, "{ffffff}Todël jeigu norite kaþkà gauti jau skubëkite ten, nes galbût kaþkas kitas apieðkos visas vietas!");
				SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
			}

			case 2:
			{
				Lektuvas3[0] = CreateObject(3269, -1346.43494, 2507.18579, 85.67490,   0.00000, 0.00000, 0.00000);
				Lektuvas3[1] = CreateObject(647, -1335.76526, 2493.65259, 87.41039,   0.00000, 0.00000, 0.00000);
				Lektuvas3[2] = CreateObject(647, -1340.66724, 2533.95752, 87.41039,   0.00000, 0.00000, 0.00000);
				Lektuvas3[3] = CreateObject(647, -1365.80505, 2510.13721, 87.41039,   0.00000, 0.00000, 0.00000);
				Lektuvas3[4] = CreateObject(647, -1338.61865, 2509.73315, 87.41039,   0.00000, 0.00000, 0.00000);
				Lektuvas3[5] = CreateObject(647, -1358.23425, 2525.51416, 87.41039,   0.00000, 0.00000, 0.00000);
				Lektuvas3[6] = CreateObject(647, -1350.93091, 2503.47681, 87.41039,   0.00000, 0.00000, 0.00000);
				Lektuvas3[7] = CreateObject(1438, -1335.69250, 2499.39355, 86.02866,   0.00000, 0.00000, 0.00000);
				Lektuvas3[8] = CreateObject(1438, -1340.48047, 2506.41724, 86.02866,   0.00000, 0.00000, 0.00000);
				Lektuvas3[9] = CreateObject(1438, -1360.46094, 2515.60645, 86.02866,   0.00000, 0.00000, 0.00000);
				Lektuvas3[10] = CreateObject(1438, -1351.74939, 2520.52441, 86.02866,   0.00000, 0.00000, 0.00000);
				Lektuvas3[11] = CreateObject(1438, -1349.68164, 2506.94434, 86.02866,   0.00000, 0.00000, 0.00000);
				Lektuvas3[12] = CreateObject(1299, -1335.95471, 2517.49683, 86.43087,   0.00000, 0.00000, 0.00000);
				Lektuvas3[13] = CreateObject(1299, -1353.66345, 2523.31689, 86.43087,   0.00000, 0.00000, 0.00000);
				Lektuvas3[14] = CreateObject(1299, -1361.09619, 2518.46899, 86.43087,   0.00000, 0.00000, 0.00000);
				Lektuvas3[15] = CreateObject(1299, -1342.41638, 2511.27246, 86.43087,   0.00000, 0.00000, 0.00000);
				Lektuvas3[16] = CreateObject(714, -1353.08838, 2495.76685, 85.93708,   0.00000, 0.00000, 0.00000);
				Lektuvas3[17] = CreateObject(789, -1345.48389, 2532.61279, 99.55980,   0.00000, 0.00000, 0.00000);
				Lektuvas3[18] = CreateObject(2852, -1361.88159, 2505.88379, 86.84992,   0.00000, 0.00000, 0.00000);
				Lektuvas3[19] = CreateObject(2852, -1356.94250, 2518.33618, 85.39432,   0.00000, 0.00000, 0.00000);
				Lektuvas3[20] = CreateObject(2852, -1350.80579, 2523.50220, 86.13239,   0.00000, 0.00000, 0.00000);
				Lektuvas3[21] = CreateObject(2852, -1343.30688, 2524.60083, 86.05833,   0.00000, 0.00000, 0.00000);
				Lektuvas3[22] = CreateObject(2852, -1335.18420, 2511.45215, 86.04500,   0.00000, 0.00000, 0.00000);
				Lektuvas3[23] = CreateObject(2819, -1336.07544, 2512.89771, 86.04328,   0.00000, 0.00000, 0.00000);
				Lektuvas3[24] = CreateObject(2819, -1350.73071, 2517.40430, 85.66230,   0.00000, 0.00000, 0.00000);
				Lektuvas3[25] = CreateObject(2843, -1349.02258, 2527.44287, 86.09643,   0.00000, 0.00000, 0.00000);
				Lektuvas3[26] = CreateObject(2843, -1339.63000, 2527.02051, 86.04586,   0.00000, 0.00000, 0.00000);
				Lektuvas3[27] = CreateObject(2991, -1358.05652, 2502.09961, 87.13727,   0.00000, 0.00000, 0.00000);
				Lektuvas3[28] = CreateObject(2991, -1338.42358, 2520.00684, 86.56081,   0.00000, 0.00000, 0.00000);
				Lektuvas3[29] = CreateObject(2991, -1345.98828, 2526.55054, 86.38493,   0.00000, 0.00000, 0.00000);

				for(new textid = 0; textid < 17; textid ++)
				{
					ThirdLektuvoText[textid] = CreateDynamic3DTextLabel("{ffffff} Lëktuvo nuolauþø apieðkojimas\n{ffffff}Norëdami apieðkoti ðià vietà, raðykite {FFAF00} /ieskoti",
					-1, TreciasLektuvas[textid][IeskotiX], TreciasLektuvas[textid][IeskotiY], TreciasLektuvas[textid][IeskotiZ], 2);
				}

				SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
				SendClientMessageToAll(-1, "{ffffff}Kaþkur {FFAF00}Tierra Robada {ffffff}teritorijoje, prie {FFAF00}El Quebrados {ffffff}kaimelio nukrito lëktuvas!");
				SendClientMessageToAll(-1, "{ffffff}Kaip þinoma, jame buvo gabenami nelegalûs ginklai, narkotikai bei pinigai ir viskas liko ten.");
				SendClientMessageToAll(-1, "{ffffff}Todël jeigu norite kaþkà gauti jau skubëkite ten, nes galbût kaþkas kitas apieðkos visas vietas!");
				SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
			}
		}

		Lektuvas = true;

		SetTimer("LektuvaiAtstatom", 60000 * 7, false);
	}

	return 1;
}

f_public: LektuvaiAtstatom()
{
	if(Lektuvas == true)
	{
		switch(KoksLektuvas)
		{
			case 0:
			{
				for(new objectid = 0; objectid < 20; objectid ++) 	DestroyObject(Lektuvas1[objectid]);
				for(new textid = 0; textid < 12; textid ++) 		DestroyDynamic3DTextLabel(FirstLektuvoText[textid]);
				for(new textid = 0; textid < 12; textid ++) 		PirmasLektuvas[textid][ArIeskota] = 0;
			}

			case 1:
			{
				for(new objectid = 0; objectid < 22; objectid ++) 	DestroyObject(Lektuvas2[objectid]);
				for(new textid = 0; textid < 14; textid ++) 		DestroyDynamic3DTextLabel(SecondLektuvoText[textid]);
				for(new textid = 0; textid < 14; textid ++) 		AntrasLektuvas[textid][ArIeskota] = 0;
			}

			case 2:
			{
				for(new objectid = 0; objectid < 30; objectid ++) 	DestroyObject(Lektuvas3[objectid]);
				for(new textid = 0; textid < 17; textid ++) 		DestroyDynamic3DTextLabel(ThirdLektuvoText[textid]);
				for(new textid = 0; textid < 17; textid ++) 		TreciasLektuvas[textid][ArIeskota] = 0;
			}
		}

		Lektuvas 		= false;
		KoksLektuvas 	= -1;
	}

	return 1;
}

stock StopFishing(playerid)
{
	HideFishingTextDraws 	(playerid);
	KillTimer				(FishingTimer[playerid]);
	KillTimer				(FishingUpdateTimer[playerid]);
	TogglePlayerControllable(playerid, true);
	ClearAnimations 		(playerid);

	FS[playerid][Fishing] 			= 0;
	FS[playerid][FishingColor] 		= -1;
	FS[playerid][FishingProgress] 	= 0.0;

	return 1;
}

stock UpdateFishingBar(playerid)
{
	if(FS[playerid][Fishing] == 1)
	{
		if(FS[playerid][FishingProgress] > 100.0)
		{
			FS[playerid][FishingProgress] = 100.0;
		}
		else if(FS[playerid][FishingProgress] < 0.0)
		{
			FS[playerid][FishingProgress] = 0.0;
		}

		new Float: Progress = (253.000000 + (FS[playerid][FishingProgress] * 1.23799804));

		PlayerTextDrawTextSize 	(playerid, zvejybos_td_p[playerid][4], Progress, 0.000000);
		PlayerTextDrawHide 		(playerid, zvejybos_td_p[playerid][4]);
		PlayerTextDrawShow 		(playerid, zvejybos_td_p[playerid][4]);

		new String[128];

		format(String, sizeof(String), "%.2f%", FS[playerid][FishingProgress]);
		PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][5], String);
	}
}

stock SetRandomColor(playerid)
{
	if(FS[playerid][Fishing] == 1)
	{
		switch(random(4))
		{
			case 0: FS[playerid][FishingColor] = GELTONAS_MYGTUKAS;
			case 1: FS[playerid][FishingColor] = ZALIAS_MYGTUKAS;
			case 2: FS[playerid][FishingColor] = MELYNAS_MYGTUKAS;
			case 3: FS[playerid][FishingColor] = RAUDONAS_MYGTUKAS;
		}

		switch(FS[playerid][FishingColor])
		{
			case GELTONAS_MYGTUKAS:
			{
				switch(random(4))
				{
					case 0: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~r~geltona ~w~mygtuka");
					case 1: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~g~geltona ~w~mygtuka");
					case 2: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~b~geltona ~w~mygtuka");
					case 3: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~y~geltona ~w~mygtuka");
				}
			}

			case ZALIAS_MYGTUKAS:
			{
				switch(random(4))
				{
					case 0: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~r~zalia ~w~mygtuka");
					case 1: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~g~zalia ~w~mygtuka");
					case 2: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~b~zalia ~w~mygtuka");
					case 3: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~y~zalia ~w~mygtuka");
				}
			}

			case MELYNAS_MYGTUKAS:
			{
				switch(random(4))
				{
					case 0: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~r~melyna ~w~mygtuka");
					case 1: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~g~melyna ~w~mygtuka");
					case 2: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~b~melyna ~w~mygtuka");
					case 3: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~y~melyna ~w~mygtuka");
				}
			}

			case RAUDONAS_MYGTUKAS:
			{
				switch(random(4))
				{
					case 0: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~r~raudona ~w~mygtuka");
					case 1: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~g~raudona ~w~mygtuka");
					case 2: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~b~raudona ~w~mygtuka");
					case 3: PlayerTextDrawSetString(playerid, zvejybos_td_p[playerid][6], "~w~spausk ~y~raudona ~w~mygtuka");
				}
			}
		}
	}

	return 1;
}

f_public: StartFishing(playerid)
{
	if(FS[playerid][Fishing] == 1)
	{
		FS[playerid][FishingProgress] = 0.0;

		ShowFishingTextDraws(playerid);
		UpdateFishingBar 	(playerid);
		SetRandomColor 		(playerid);

		FishingUpdateTimer[playerid] = SetTimerEx("UpdateFishing", 1000, false, "d", playerid);
	}

	return 1;
}

f_public: UpdateFishing(playerid)
{
	if(FS[playerid][Fishing] == 1)
	{
		if(FS[playerid][FishingProgress] < 100.0)
		{
			FishingUpdateTimer[playerid] 	= SetTimerEx("UpdateFishing", 1000, false, "d", playerid);
			FS[playerid][FishingProgress] 	-= 5.0 + randomfloat(3.0);

			UpdateFishingBar(playerid);
		}
		else
		{
			CatchFishByLevel 	(playerid);
			UpdateFishingBar 	(playerid);
			StopFishing 		(playerid);
			HideFishingTextDraws(playerid);
		}
	}

	return 1;
}

stock CheckForLevelUp(playerid)
{
	switch(FS[playerid][FishingLevel])
	{
		case 1: 
		{
			if(FS[playerid][FishingExperience] >= FirstFishingLevel)
			{
				FS[playerid][FishingExperience] = 0;
				FS[playerid][FishingLevel] 		++;

				SendClientMessage(playerid, -1, "{ffffff} ÞVEJYBA {ffffff}Sveikiname, pasiekëte {FFAF00}2 {ffffff}þvejybos lygá!");
			}
		}

		case 2: 
		{
			if(FS[playerid][FishingExperience] >= SecondFishingLevel)
			{
				FS[playerid][FishingExperience] = 0;
				FS[playerid][FishingLevel] 		++;

				SendClientMessage(playerid, -1, "{ffffff} ÞVEJYBA {ffffff}Sveikiname, pasiekëte {FFAF00}3 {ffffff}þvejybos lygá!");
			}
		}

		case 3: 
		{
			if(FS[playerid][FishingExperience] >= ThirdFishingLevel)
			{
				FS[playerid][FishingExperience] = 0;
				FS[playerid][FishingLevel] 		++;

				SendClientMessage(playerid, -1, "{ffffff} ÞVEJYBA {ffffff}Sveikiname, pasiekëte {FFAF00}4 {ffffff}þvejybos lygá!");
			}
		}

		case 4: 
		{
			if(FS[playerid][FishingExperience] >= FourthFishingLevel)
			{
				FS[playerid][FishingExperience] = 0;
				FS[playerid][FishingLevel] 		++;

				SendClientMessage(playerid, -1, "{ffffff} ÞVEJYBA {ffffff}Sveikiname, pasiekëte {FFAF00}5 {ffffff}þvejybos lygá!");
			}
		}
	}

	return 1;
}

stock CatchFishByLevel(playerid)
{
	switch(FS[playerid][FishingLevel])
	{
		case 1: 
		{
			FS[playerid][FishWeight] 		= 2 + random(2);
			FS[playerid][FishingExperience] += FS[playerid][FishWeight];
		}

		case 2: 
		{
			FS[playerid][FishWeight] 		= 4 + random(4);
			FS[playerid][FishingExperience] += FS[playerid][FishWeight];
		}

		case 3: 
		{
			FS[playerid][FishWeight] 		= 6 + random(6);
			FS[playerid][FishingExperience] += FS[playerid][FishWeight];
		}

		case 4: 
		{
			FS[playerid][FishWeight] 		= 8 + random(8);
			FS[playerid][FishingExperience] += FS[playerid][FishWeight];
		}

		case 5: 
		{
			FS[playerid][FishWeight] 		= 10 + random(10);
			FS[playerid][FishingExperience] += FS[playerid][FishWeight];
		}
	}

	SetRandomFish 	(playerid);
	CheckForLevelUp	(playerid);

	return 1;
}

stock SetRandomFish(playerid)
{
	new str[128];

	switch(random(7))
	{
		case 0:
		{
			format(str, sizeof(str), "{ffffff} ÞVEJYBA {ffffff}Pagavote ungurá, kuris svërë {FFAF00}%d {ffffff}KG!", FS[playerid][FishWeight]);
			SendClientMessage(playerid, -1, str);

			PI[playerid][ungurys] += FS[playerid][FishWeight];

			if(zVarzybos)
			{
				KiekSugavo[playerid] += FS[playerid][FishWeight];

				format(str, sizeof(str), "~g~Viso per varzybas pagavai ~y~%d ~g~KG zuvies", KiekSugavo[playerid]);
				ShowInfoText(playerid, str, 3000, false);
			}
		}

		case 1:
		{
			format(str, sizeof(str), "{ffffff} ÞVEJYBA {ffffff}Pagavote karosà, kuris svërë {FFAF00}%d {ffffff}KG!", FS[playerid][FishWeight]);
			SendClientMessage(playerid, -1, str);

			PI[playerid][karosas] += FS[playerid][FishWeight];

			if(zVarzybos)
			{
				KiekSugavo[playerid] += FS[playerid][FishWeight];

				format(str, sizeof(str), "~g~Viso per varzybas pagavai ~y~%d ~g~KG zuvies", KiekSugavo[playerid]);
				ShowInfoText(playerid, str, 3000, false);
			}
		}

		case 2:
		{
			format(str, sizeof(str), "{ffffff} ÞVEJYBA {ffffff}Pagavote karpá, kuris svërë {FFAF00}%d {ffffff}KG!", FS[playerid][FishWeight]);
			SendClientMessage(playerid, -1, str);

			PI[playerid][karpis] += FS[playerid][FishWeight];

			if(zVarzybos)
			{
				KiekSugavo[playerid] += FS[playerid][FishWeight];

				format(str, sizeof(str), "~g~Viso per varzybas pagavai ~y~%d ~g~KG zuvies", KiekSugavo[playerid]);
				ShowInfoText(playerid, str, 3000, false);
			}
		}

		case 3:
		{
			format(str, sizeof(str), "{ffffff} ÞVEJYBA {ffffff}Pagavote karðá, kuris svërë {FFAF00}%d {ffffff}KG!", FS[playerid][FishWeight]);
			SendClientMessage(playerid, -1, str);

			PI[playerid][karsis] += FS[playerid][FishWeight];

			if(zVarzybos)
			{
				KiekSugavo[playerid] += FS[playerid][FishWeight];

				format(str, sizeof(str), "~g~Viso per varzybas pagavai ~y~%d ~g~KG zuvies", KiekSugavo[playerid]);
				ShowInfoText(playerid, str, 3000, false);
			}
		}

		case 4:
		{
			format(str, sizeof(str), "{ffffff} ÞVEJYBA {ffffff}Pagavote lydekà, kuri svërë {FFAF00}%d {ffffff}KG!", FS[playerid][FishWeight]);
			SendClientMessage(playerid, -1, str);

			PI[playerid][lydeka] += FS[playerid][FishWeight];

			if(zVarzybos)
			{
				KiekSugavo[playerid] += FS[playerid][FishWeight];

				format(str, sizeof(str), "~g~Viso per varzybas pagavai ~y~%d ~g~KG zuvies", KiekSugavo[playerid]);
				ShowInfoText(playerid, str, 3000, false);
			}
		}

		case 5..6:
		{
			FS[playerid][FishingExperience] -= FS[playerid][FishWeight];
			FS[playerid][FishWeight] 		= 0;

			SendClientMessage(playerid, -1, "{ffffff} ÞVEJYBA {ffffff}Dëja, taèiau ðá kartà nieko nepagavote!");
		}
	}

	return 1;
}

stock AddCreditHouse(cHouseID)
{
	new Query[80];

	format(Query, sizeof(Query), "INSERT INTO `credithouses` (ID) VALUES ('%d')", cHouseID); 	mysql_query(Query);

	ClearCreditHouseVariables(cHouseID);

	return 1;
}

stock LoadCreditHouses()
{
	new Query[128], String[250];

	for(new cHouseID = 0; cHouseID < MAX_CREDIT_HOUSES; cHouseID ++)
	{
		format(Query, sizeof(Query), "SELECT * FROM `credithouses` WHERE `ID` = '%d'", cHouseID);
		mysql_query(Query);

		mysql_store_result();

		if(mysql_retrieve_row())
		{
			if(mysql_num_rows())
			{
				mysql_fetch_field_row(Query, "Owner"); 			format(CHD[cHouseID][_cHouseOwner], 25, "%s", Query);

				mysql_fetch_field_row(Query, "EnterX"); 		CHD[cHouseID][_cHouseEnterPos][0] 	= floatstr(Query);
				mysql_fetch_field_row(Query, "EnterY"); 		CHD[cHouseID][_cHouseEnterPos][1] 	= floatstr(Query);
				mysql_fetch_field_row(Query, "EnterZ"); 		CHD[cHouseID][_cHouseEnterPos][2] 	= floatstr(Query);
				mysql_fetch_field_row(Query, "ExitX"); 			CHD[cHouseID][_cHouseExitPos][0] 	= floatstr(Query);
				mysql_fetch_field_row(Query, "ExitY"); 			CHD[cHouseID][_cHouseExitPos][1] 	= floatstr(Query);
				mysql_fetch_field_row(Query, "ExitZ"); 			CHD[cHouseID][_cHouseExitPos][2] 	= floatstr(Query);
				mysql_fetch_field_row(Query, "GarageX"); 		CHD[cHouseID][_cHouseGaragePos][0] 	= floatstr(Query);
				mysql_fetch_field_row(Query, "GarageY"); 		CHD[cHouseID][_cHouseGaragePos][1] 	= floatstr(Query);
				mysql_fetch_field_row(Query, "GarageZ"); 		CHD[cHouseID][_cHouseGaragePos][2] 	= floatstr(Query);

				mysql_fetch_field_row(Query, "TimeLeft"); 		CHD[cHouseID][_cHouseTimeLeft] 		= strval(Query);
				mysql_fetch_field_row(Query, "Money"); 			CHD[cHouseID][_cHouseChest] 		= strval(Query);
				mysql_fetch_field_row(Query, "Drugs1"); 		CHD[cHouseID][_cHouseDrugs1] 		= strval(Query);
				mysql_fetch_field_row(Query, "Drugs2"); 		CHD[cHouseID][_cHouseDrugs2] 		= strval(Query);
				mysql_fetch_field_row(Query, "Drugs3"); 		CHD[cHouseID][_cHouseDrugs3] 		= strval(Query);
				mysql_fetch_field_row(Query, "Drugs4"); 		CHD[cHouseID][_cHouseDrugs4] 		= strval(Query);
				mysql_fetch_field_row(Query, "Locked"); 		CHD[cHouseID][_cHouseLocked] 		= !!strval(Query);
				mysql_fetch_field_row(Query, "Price"); 			CHD[cHouseID][_cHousePrice] 		= strval(Query);

				if(!strcmp("Nera", CHD[cHouseID][_cHouseOwner], true))
				{
					format(String, sizeof(String), "{ffffff}Kreditinis namas\n\nNumeris: {4C7CFF}%d\n{ffffff}Kaina: {4C7CFF}%d {ffffff}kreditø\n\nNorëdami pirkti namà: {4C7CFF}/pirktinama",
					cHouseID + 1, CHD[cHouseID][_cHousePrice]);
				}
				else
				{
					if(CHD[cHouseID][_cHouseTimeLeft] > gettime())
					{
						format(String, sizeof(String), "{ffffff}Kreditinis namas\n\nNumeris: {4C7CFF}%d\n{ffffff}Savininkas: {4C7CFF}%s\n{ffffff}Galioja iki: {4C7CFF}%s\n\n{ffffff}Norëdami uþeiti á namà spauskite {4C7CFF}ENTER",
						cHouseID + 1, CHD[cHouseID][_cHouseOwner], TimestampToDate(CHD[cHouseID][_cHouseTimeLeft]));
					}
					else
					{
						format(CHD[cHouseID][_cHouseOwner], 25, "Nera", Query);
						format(String, sizeof(String), "{ffffff}Kreditinis namas\n\nNumeris: {4C7CFF}%d\n{ffffff}Kaina: {4C7CFF}%d {ffffff}kreditø\n\nNorëdami pirkti namà: {4C7CFF}/pirktinama",
						cHouseID + 1, CHD[cHouseID][_cHousePrice]);
					}
				}

				CHD[cHouseID][_cHouseText] 		= CreateDynamic3DTextLabel(String, -1, CHD[cHouseID][_cHouseEnterPos][0], CHD[cHouseID][_cHouseEnterPos][1], CHD[cHouseID][_cHouseEnterPos][2], 10);
				CHD[cHouseID][_cHousePickup] 	= CreatePickup(1273, 1, CHD[cHouseID][_cHouseEnterPos][0], CHD[cHouseID][_cHouseEnterPos][1], CHD[cHouseID][_cHouseEnterPos][2], 0);
			}
		}
		mysql_free_result();
	}

	return 1;
}

stock SaveCreditHouse(cHouseID)
{
	new Query[100];

	format(Query, sizeof(Query), "UPDATE `credithouses` SET `Owner` = '%s' WHERE `ID` = '%d'", CHD[cHouseID][_cHouseOwner], cHouseID); 			mysql_query(Query);
	format(Query, sizeof(Query), "UPDATE `credithouses` SET `TimeLeft` = '%d' WHERE `ID` = '%d'", CHD[cHouseID][_cHouseTimeLeft], cHouseID); 	mysql_query(Query);
	format(Query, sizeof(Query), "UPDATE `credithouses` SET `Money` = '%d' WHERE `ID` = '%d'", CHD[cHouseID][_cHouseChest], cHouseID); 			mysql_query(Query);
	format(Query, sizeof(Query), "UPDATE `credithouses` SET `Drugs1` = '%d' WHERE `ID` = '%d'", CHD[cHouseID][_cHouseDrugs1], cHouseID); 		mysql_query(Query);
	format(Query, sizeof(Query), "UPDATE `credithouses` SET `Drugs2` = '%d' WHERE `ID` = '%d'", CHD[cHouseID][_cHouseDrugs2], cHouseID); 		mysql_query(Query);
	format(Query, sizeof(Query), "UPDATE `credithouses` SET `Drugs3` = '%d' WHERE `ID` = '%d'", CHD[cHouseID][_cHouseDrugs3], cHouseID); 		mysql_query(Query);
	format(Query, sizeof(Query), "UPDATE `credithouses` SET `Drugs4` = '%d' WHERE `ID` = '%d'", CHD[cHouseID][_cHouseDrugs4], cHouseID); 		mysql_query(Query);
	format(Query, sizeof(Query), "UPDATE `credithouses` SET `Locked` = '%d' WHERE `ID` = '%d'", CHD[cHouseID][_cHouseLocked], cHouseID); 		mysql_query(Query);
	format(Query, sizeof(Query), "UPDATE `credithouses` SET `EnterX` = '%.4f' WHERE `ID` = '%d'", CHD[cHouseID][_cHouseEnterPos][0], cHouseID); mysql_query(Query);
	format(Query, sizeof(Query), "UPDATE `credithouses` SET `EnterY` = '%.4f' WHERE `ID` = '%d'", CHD[cHouseID][_cHouseEnterPos][1], cHouseID); mysql_query(Query);
	format(Query, sizeof(Query), "UPDATE `credithouses` SET `EnterZ` = '%.4f' WHERE `ID` = '%d'", CHD[cHouseID][_cHouseEnterPos][2], cHouseID); mysql_query(Query);
	format(Query, sizeof(Query), "UPDATE `credithouses` SET `ExitX` = '%.4f' WHERE `ID` = '%d'", CHD[cHouseID][_cHouseExitPos][0], cHouseID); 	mysql_query(Query);
	format(Query, sizeof(Query), "UPDATE `credithouses` SET `ExitY` = '%.4f' WHERE `ID` = '%d'", CHD[cHouseID][_cHouseExitPos][1], cHouseID); 	mysql_query(Query);
	format(Query, sizeof(Query), "UPDATE `credithouses` SET `ExitZ` = '%.4f' WHERE `ID` = '%d'", CHD[cHouseID][_cHouseExitPos][2], cHouseID); 	mysql_query(Query);
	format(Query, sizeof(Query), "UPDATE `credithouses` SET `Price` = '%d' WHERE `ID` = '%d'", CHD[cHouseID][_cHousePrice], cHouseID); 			mysql_query(Query);

	new Querys[35], Queryz[(sizeof(Querys) * (MAX_CHEST_SLOTS * 2)) - 200];

	format(Querys, sizeof(Querys), "UPDATE `credithouses` SET ");
	strcat(Queryz, Querys);

	for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
	{
	    if(i == 0)
	    {
	        format(Querys, sizeof(Querys), "`ChestItemID_%d` = '%d', ", i, CreditHouseChest[cHouseID][i][ItemID]);
	    	strcat(Query, Querys);
	    }
	    else
	    {
	    	format(Querys, sizeof(Querys), ", `ChestItemID_%d` = '%d', ", i, CreditHouseChest[cHouseID][i][ItemID]);
	    	strcat(Query, Querys);
	    }

	    format(Querys, sizeof(Querys), "`ChestItemAmmount_%d` = '%d'", i, CreditHouseChest[cHouseID][i][ItemAmmount]);
	    strcat(Query, Querys);
	}

	format(Querys, sizeof(Querys), " WHERE `ID` = '%d'", cHouseID);
	strcat(Queryz, Querys);

	mysql_query(Queryz);

	return 1;
}

stock ClearCreditHouseVariables(cHouseID)
{
	format(CHD[cHouseID][_cHouseOwner], 5, "Nera");

	CHD[cHouseID][_cHouseTimeLeft] 	= 0;
	CHD[cHouseID][_cHouseChest] 	= 0;
	CHD[cHouseID][_cHouseDrugs1] 	= 0;
	CHD[cHouseID][_cHouseDrugs2] 	= 0;
	CHD[cHouseID][_cHouseDrugs3] 	= 0;
	CHD[cHouseID][_cHouseDrugs4] 	= 0;
	CHD[cHouseID][_cHouseLocked] 	= true;

	for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
	{
	    CreditHouseChest[cHouseID][i][ItemID]		= 0;
		CreditHouseChest[cHouseID][i][ItemAmmount]	= 0;
	}

	SaveCreditHouse 		(cHouseID);
	UpdateCreditHouseLabel 	(cHouseID);

	return 1;
}

stock UpdateCreditHouseLabel(cHouseID)
{
	new String[250];

	if(!strcmp("Nera", CHD[cHouseID][_cHouseOwner], true)) // Nëra savininko
	{
		format(String, sizeof(String), "{ffffff}Kreditinis namas\n\nNumeris: {4C7CFF}%d\n{ffffff}Kaina: {4C7CFF}%d {ffffff}kreditø\n\nNorëdami pirkti namà: {4C7CFF}/pirktinama",
		cHouseID + 1, CHD[cHouseID][_cHousePrice]);
	}
	else
	{
		format(String, sizeof(String), "{ffffff}Kreditinis namas\n\nNumeris: {4C7CFF}%d\n{ffffff}Savininkas: {4C7CFF}%s\n{ffffff}Galioja iki: {4C7CFF}%s\n\n{ffffff}Norëdami uþeiti á namà spauskite {4C7CFF}ENTER",
		cHouseID + 1, CHD[cHouseID][_cHouseOwner], TimestampToDate(CHD[cHouseID][_cHouseTimeLeft]));
	}

	UpdateDynamic3DTextLabelText(CHD[cHouseID][_cHouseText], -1, String);

	return 1;
}

stock SetVehicleFuelInfo(vehicleid)
{
	new String[5];
	switch(GetVehicleCategory(vehicleid))
	{
		case SPORT_VEHICLES:
		{
			VehicleInfo[vehicleid][vBakas]		= 50.0 + randomfloat(30.0);
			VehicleInfo[vehicleid][vKuroTipas] 	= BENZINAS;

			format(String, sizeof(String), "%d.%d", 1 + random(2), 1 + random(5));
	    	VehicleInfo[vehicleid][vSanaudos] = floatstr(String);

	    	VehicleInfo[vehicleid][vKuras] = 30.0 + randomfloat(20.0);
		}

		case BIKES:
		{
			VehicleInfo[vehicleid][vBakas]		= 15.0 + randomfloat(15.0);
			VehicleInfo[vehicleid][vKuroTipas] 	= BENZINAS;

			format(String, sizeof(String), "%d.%d", 0 + random(2), 1 + random(6));
	    	VehicleInfo[vehicleid][vSanaudos] = floatstr(String);

	    	VehicleInfo[vehicleid][vKuras] = 15.0 + randomfloat(10.0);
		}

		case NORMAL_VEHICLES:
		{
			VehicleInfo[vehicleid][vBakas]		= 50.0 + randomfloat(30.0);
			VehicleInfo[vehicleid][vKuroTipas] 	= random(2);

			format(String, sizeof(String), "%d.%d", 1 + random(2), 1 + random(4));
	    	VehicleInfo[vehicleid][vSanaudos] = floatstr(String);

	    	VehicleInfo[vehicleid][vKuras] = 35.0 + randomfloat(20.0);
		}

		case HEAVY_VEHICLES:
		{
			VehicleInfo[vehicleid][vBakas]		= 80.0 + randomfloat(70.0);
			VehicleInfo[vehicleid][vKuroTipas] 	= DYZELIS;

			format(String, sizeof(String), "%d.%d", 2 + random(4), 1 + random(6));
	    	VehicleInfo[vehicleid][vSanaudos] = floatstr(String);

	    	VehicleInfo[vehicleid][vKuras] = 50.0 + randomfloat(20.0);
		}

		case AIRPLANE:
		{
			VehicleInfo[vehicleid][vBakas]		= 300.0 + randomfloat(100.0);
			VehicleInfo[vehicleid][vKuroTipas] 	= BENZINAS;

			format(String, sizeof(String), "%d.%d", 2 + random(4), 1 + random(6));
	    	VehicleInfo[vehicleid][vSanaudos] = floatstr(String);

	    	VehicleInfo[vehicleid][vKuras] = VehicleInfo[vehicleid][vBakas];
		}

		case BOATS:
		{
			VehicleInfo[vehicleid][vBakas]		= 40.0 + randomfloat(20.0);
			VehicleInfo[vehicleid][vKuroTipas] 	= DYZELIS;

			format(String, sizeof(String), "%d.%d", 1 + random(2), 1 + random(4));
	    	VehicleInfo[vehicleid][vSanaudos] = floatstr(String);

	    	VehicleInfo[vehicleid][vKuras] = VehicleInfo[vehicleid][vBakas];
		}
	}

	if(FuristuMasina[0] <= vehicleid <= FuristuMasina[sizeof(FuristuMasina) - 1])
	{
		VehicleInfo[vehicleid][vKuras] = VehicleInfo[vehicleid][vBakas];
	}

	if(KurjeriuMasina[0] <= vehicleid <= KurjeriuMasina[sizeof(KurjeriuMasina) - 1])
	{
		VehicleInfo[vehicleid][vKuras] = VehicleInfo[vehicleid][vBakas];
	}
}

f_public: GaunamGaisra(p)
{
	if(PI[p][specialybe] != GAISRAI) return 0;

	if(TuriGaisra[p]) return 0;

	if(IsPlayerInAnyVehicle(p))
	{
		if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
		{
			if(GetVehicleModel(GetPlayerVehicleID(p)) == 407)
			{
				new RandomHouse;

				for(new house; house < MAX_HOUSES; house ++)
				{
					if(HouseInfo[house][hCreated]) RandomHouse = random(house);
				}

				Ugnis[p] = CreateDynamicObject(18691, HouseInfo[RandomHouse][ExitX], HouseInfo[RandomHouse][ExitY], HouseInfo[RandomHouse][ExitZ] - 2, 0.0, 0.0, 0.0);
				SetPlayerMapIcon(p, 99, HouseInfo[RandomHouse][ExitX], HouseInfo[RandomHouse][ExitY], HouseInfo[RandomHouse][ExitZ], 56, 0, MAPICON_GLOBAL);

				UgniesProc[p] = 100;
				TuriGaisra[p] = true;

				GaisroPos[p][0] = HouseInfo[RandomHouse][ExitX];
				GaisroPos[p][1] = HouseInfo[RandomHouse][ExitY];
				GaisroPos[p][2] = HouseInfo[RandomHouse][ExitZ];

				SendClientMessage(p, -1, "{ffffff} Gavome iðkvietimà, kad dega namas, skubiai vaþiuokite á paþymëtà vietà!");
			}
		}
	}

	return 1;
}

f_public: GaunamIskvietima(p)
{
	new String[128];
	if(PI[p][specialybe] != MEDIKAI) return 0;

	if(TuriIskvietima[p]) return 0;

	if(IsPlayerInAnyVehicle(p))
	{
		if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(p);

			if(MedikuMasina[0] <= vehicleid <= MedikuMasina[sizeof(MedikuMasina) - 1])
			{
				new RandomHouse;

				for(new house; house < MAX_HOUSES; house ++)
				{
					if(HouseInfo[house][hCreated]) RandomHouse = random(house);
				}

				PI[p][DarboCP][0] = HouseInfo[RandomHouse][ExitX];
				PI[p][DarboCP][1] = HouseInfo[RandomHouse][ExitY];
				PI[p][DarboCP][2] = HouseInfo[RandomHouse][ExitZ];

				SetPlayerMapIcon(p, 99, HouseInfo[RandomHouse][ExitX], HouseInfo[RandomHouse][ExitY], HouseInfo[RandomHouse][ExitZ], 56, 0, MAPICON_GLOBAL);

				//SetPlayerCheckpointEx(p, 41, HouseInfo[RandomHouse][ExitX], HouseInfo[RandomHouse][ExitY], HouseInfo[RandomHouse][ExitZ], 0);

				TuriIskvietima[p] = true;

				format(String, 128, "{ffffff} Gavome iðkvietimà, kad namo nr. {FFAF00}%d {ffffff}gyventojas kvieèia medicinos pagalbà!", RandomHouse + 1);
				SendClientMessage(p, -1, String);

				SendClientMessage(p, -1, "{ffffff} Skubiai vaþiuokite á paþymëtà vietà ir padëkite jam!");
			}
		}
	}

	return 1;
}

f_public: KeyCheck(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new keys, ud, lr;

		GetPlayerKeys(playerid, keys, ud, lr);

		if(keys & KEY_FIRE)
		{
			SetTimerEx("KeyCheck", 1000, 0, "i", playerid);

			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 407)
   			{
				if(IsPlayerAimingAtEx(playerid, GaisroPos[playerid][0], GaisroPos[playerid][1], GaisroPos[playerid][2], 7.0))
				{
					if(TuriGaisra[playerid])
					{
					    if(UgniesProc[playerid] > 0)
						{
			   				UgniesProc[playerid] -= 5 + random(8);

			   				GameTextForPlayer(playerid, "~G~Gesinate gaisra...", 2000, 4);
		   				}
		   				else
		   				{
							DestroyDynamicObject 		(Ugnis[playerid]);
							RemovePlayerMapIcon 		(playerid, 99);

							TuriGaisra[playerid] 		= false;

							new RandomMoney 			= 30 + random(10);
							GivePlayerMoneyA(playerid, RandomMoney);

							new str[128];

		 					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai uþgesinote gaisrà!");

		 					format(str, 128, "{ffffff} Uþ uþgesintà gaisrà gavote {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(RandomMoney));
        					SendClientMessage(playerid, -1, str);
		   				}
		   			}
				}
			}

			return 0;
		}
	}

	HoldingKey[playerid] = false;

	return 0;
}

f_public: VehicleHasDriver(vehicleid)
{
	for(new i = 0, size = GetPlayerPoolSize(); i <= size; i++)
	{
		if(GetPlayerVehicleID(i) == vehicleid && GetPlayerState(i) == PLAYER_STATE_DRIVER) return 1;
	}
	return 0;
}

stock RandomFishing()
{
	new String[216];

	if(!zVarzybos)
	{
		zVarzybos 		= true;
		zVarzybuPrizas 	= 10000 + random(5000);

		SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
		SendClientMessageToAll(-1, "{ffffff}Norime praneðti, kad dabar prasidëjo þvejybos varþybos kuriø tikslas sugauti daugiausiai KG þuvies!");
		format(String, sizeof(String), "{ffffff}Varþybos truks {FFAF00}15 {ffffff}minuèiø, daugiausiai per ðá laikà KG þuvies sugavæs þaidëjas gaus {FFAF00}$%s{ffffff}.",
		konvertuoti_pinigus(zVarzybuPrizas));
		SendClientMessageToAll(-1, String);
		SendClientMessageToAll(-1, "{ffffff}Þvejybvietæ surasti galitæ paraðæ: {FFAF00}/gps > Kitos vietovës > Þvejybvietë{ffffff}!");
		SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");

		SetTimer("StabdomZvejybosVarzybas",	60000 * 15, false);
	}

	return 1;
}

f_public: StabdomZvejybosVarzybas()
{
	new String[128];

	if(zVarzybos)
	{
		zVarzybos = false;

		for(new i = 0; i < MAX_PLAYERS; i ++)
		{
		    if(KiekSugavo[i] > KiekSugavo[highestid])
		    {
		        highestid = i;
		    }
		}

	    if(highestid != INVALID_PLAYER_ID)
	    {
	    	if(KiekSugavo[highestid] > 0)
	    	{
	    		SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
				format(String, sizeof(String), "{ffffff}Þvejybos varþybos pasibaigë! Jas laimëjo {FFAF00}%s{ffffff}.", GetPlayerNameEx(highestid));
				SendClientMessageToAll(-1, String);
				format(String, sizeof(String), "{ffffff}Jis viso sugavo {FFAF00}%s {ffffff}KG þuvies ir laimëjo {FFAF00}$%s{ffffff}!",
				konvertuoti_pinigus(KiekSugavo[highestid]), konvertuoti_pinigus(zVarzybuPrizas));
				SendClientMessageToAll(-1, String);
				SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");

				GivePlayerMoneyA(highestid, zVarzybuPrizas);
			}
			else
			{
				printf("Badabum 1\n");
				SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
				SendClientMessageToAll(-1, "{ffffff}Þvejybos varþybos pasibaigë! Jø nelaimëjo niekas.");
				SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
			}
		}
		else
		{
			printf("Badabum 2\n");
			SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
			SendClientMessageToAll(-1, "{ffffff}Þvejybos varþybos pasibaigë! Jø nelaimëjo niekas.");
			SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
		}

		for(new p = 0; p < MAX_PLAYERS; p ++)
	    {
	        KiekSugavo[p] = 0;
	    }
	}

	return 1;
}

stock RandomKasyklaa()
{
	new String[216];

	if(!mVarzybos)
	{
		mVarzybos 		= true;
		mVarzybuPrizas 	= 10000 + random(5000);

		SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
		SendClientMessageToAll(-1, "{ffffff}Norime praneðti, kad dabar prasidëjo metalo kasimo varþybos kuriø tikslas iðkasti daugiausiai metalo!");
		format(String, sizeof(String), "{ffffff}Varþybos truks {FFAF00}15 {ffffff}minuèiø, daugiausiai per ðá laikà metalo iðkasæs þaidëjas gaus {FFAF00}$%s{ffffff}.",
		konvertuoti_pinigus(zVarzybuPrizas));
		SendClientMessageToAll(-1, String);
		SendClientMessageToAll(-1, "{ffffff}Metalo kasyklà surasti galitæ paraðæ: {FFAF00}/gps > Kitos vietovës > Metalo kasykla{ffffff}!");
		SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");

		SetTimer("StabdomKasimoVarzybas",	60000 * 15, false);
	}

	return 1;
}

f_public: StabdomKasimoVarzybas()
{
	new String[128];

	if(mVarzybos)
	{
		mVarzybos = false;

		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
		   	if(KiekIskases[i] > KiekIskases[highestidM])
		   	{
		   		highestidM = i;
		   	}
		}

	    if(highestidM != INVALID_PLAYER_ID)
	    {
	    	if(KiekIskases[highestidM] > 0)
	    	{
			    SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
				format(String, sizeof(String), "{ffffff}Metalo kasimo varþybos pasibaigë! Jas laimëjo {FFAF00}%s{ffffff}.", GetPlayerNameEx(highestid));
				SendClientMessageToAll(-1, String);
				format(String, sizeof(String), "{ffffff}Jis viso iðkasë {FFAF00}%s {ffffff}KG metalo ir laimëjo {FFAF00}$%s{ffffff}!",
				konvertuoti_pinigus(KiekSugavo[highestid]), konvertuoti_pinigus(zVarzybuPrizas));
				SendClientMessageToAll(-1, String);
				SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");

				GivePlayerMoneyA(highestidM, mVarzybuPrizas);
			}
			else
			{
				printf("Badabum 3\n");
				SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
				SendClientMessageToAll(-1, "{ffffff}Metalo kasimo varþybos pasibaigë! Jø nelaimëjo niekas.");
				SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
			}
		}
		else
		{
			printf("Badabum 4\n");
			SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
			SendClientMessageToAll(-1, "{ffffff}Metalo kasimo varþybos pasibaigë! Jø nelaimëjo niekas.");
			SendClientMessageToAll(-1, "{ffffff}_____________________________________________________________________________________________");
		}

		for(new p = 0; p < MAX_PLAYERS; p ++)
	    {
	        KiekIskases[p] = 0;
	    }
	}

	return 1;
}

stock ShowPlayerRandomCamera(playerid, cameraid)
{
	switch(cameraid)
	{
	    case 1:
	    {
	    	new rand = random(sizeof(RandomSpawn));
			AC_SetPlayerPos(playerid, RandomSpawn[rand][0], RandomSpawn[rand][1],RandomSpawn[rand][2]);
	    	SetPlayerFacingAngle (playerid, 90.00);
	    	SetPlayerCameraPos   (playerid, -2008.9723,180.6441,26.6815);
			SetPlayerCameraLookAt(playerid, -1998.107910, 172.186584, 28.115579);
		}
	}

	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid)) return 1;

	if(AntiF4[playerid] == 0)
	{
		/*AC_SetPlayerPos         (playerid, -1960.9819,137.9992,27.6873);
		SetPlayerFacingAngle 	(playerid, 90.0000);
		InterpolateCameraPos 	(playerid, -2048.852050, 61.871482, 65.774162, -2484.020751, -737.562927, 235.583496, 20000);
		InterpolateCameraLookAt (playerid, -2051.202148, 57.554496, 66.691139, -2486.370849, -741.879943, 236.500473, 20000);*/

		Prisijunges[playerid] = false;

		/*new lQuery[65];

		format(lQuery, sizeof(lQuery), "SELECT * FROM `players` WHERE `Vardas` = '%s'", GetPlayerNameEx(playerid));
		mysql_query(lQuery);

		mysql_store_result();

		if(mysql_num_rows())
		{
			PrisijungimoLangas(playerid);
		}
		else
		{
			RegistracijosLangas(playerid);
		}

		mysql_free_result();*/

		ShowLoginTextdraws 		(playerid);
		TogglePlayerSpectating 	(playerid, 1);
		ShowPlayerRandomCamera 	(playerid, 1);
	}
	else
	{
		IsmestiZaideja(playerid, 100);
	}

	return 1;
}

stock GetNearest(playerid, type, Float:distance)
{
	new ret;
	switch(type)
	{
		case OBJECT:
		{
			ret = GetNearest_Object(playerid, distance);
		}
		case PLAYER:
		{
			ret = GetNearest_Player(playerid, distance);
		}
		case VEHICLE:
		{
			ret = GetNearest_Vehicle(playerid, distance);
		}
		case DYNAMIC_OBJECT:
		{
			ret = GetNearest_DynObject(playerid, distance);
		}
	}
	return ret;
}

stock GetNearest_Object(playerid, Float:distance)
{
	new
		Float:xX,
		Float:yY,
		Float:zZ,
		retElement = -1
	;
    for(new i = 0; i < MAX_OBJECTS; i++)
    {
		if(!IsValidObject(i)) continue;
        GetObjectPos(i, xX, yY, zZ);
        new Float:odist = GetPlayerDistanceFromPoint(playerid, xX, yY, zZ);
		if (retElement == -1)
        {
            retElement = i;
            distance = odist;
        }
		else if (odist < distance)
        {
            retElement = i;
            distance = odist;
        }
    }
    return retElement;
}

stock GetNearest_Player(playerid, Float:distance)
{
	new
		Float:xX,
		Float:yY,
		Float:zZ,
		retElement = -1
	;
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
		if((i == playerid) || (i == INVALID_PLAYER_ID)) continue;
        GetPlayerPos(i, xX, yY, zZ);
        new Float:odist = GetPlayerDistanceFromPoint(playerid, xX, yY, zZ);
		if (retElement == -1)
        {
            retElement = i;
            distance = odist;
        }
		else if (odist < distance)
        {
            retElement = i;
            distance = odist;
        }
    }
    return retElement;
}

stock GetNearest_Vehicle(playerid, Float:distance)
{
	new
		Float:xX,
		Float:yY,
		Float:zZ,
		retElement = -1
	;
    for(new i = 0, size = GetVehiclePoolSize(); i <= size; i++)
    {
        GetVehiclePos(i, xX, yY, zZ);
        new Float:odist = GetPlayerDistanceFromPoint(playerid, xX, yY, zZ);
		if (retElement == -1)
        {
            retElement = i;
            distance = odist;
        }
		else if (odist < distance)
        {
            retElement = i;
            distance = odist;
        }
    }
    return retElement;
}

stock GetNearest_DynObject(playerid, Float:distance)
{
	new
		Float:xX,
		Float:yY,
		Float:zZ,
		retElement = -1
	;
    for(new i = 0; i < CountDynamicObjects(); i++)
    {
        GetDynamicObjectPos(i, xX, yY, zZ);
        new Float:odist = GetPlayerDistanceFromPoint(playerid, xX, yY, zZ);
		if (retElement == -1)
        {
            retElement = i;
            distance = odist;
        }
		else if (odist < distance)
        {
            retElement = i;
            distance = odist;
        }
    }
    return retElement;
}

stock fix_SetActorPos(actorid, Float: x, Float: y, Float: z, Float: a)
{
	SetActorPos 		(actorid, x, y, z);
	SetActorFacingAngle (actorid, a);

	return 1;
}

stock LoadFurniture()
{
	new String[256];

	for(new i = 0; i < MAX_BALDU; i++)
    {
    	CreateDynamicObject(Baldai[i][bID], Baldai[i][bPosX], Baldai[i][bPosY], Baldai[i][bPosZ],   Baldai[i][bPosRX], Baldai[i][bPosRY], Baldai[i][bPosRZ]);

    	format(String, sizeof(String), "{ffffff} %s\n{ffffff}Modelis: {FFAF00}%d\n{ffffff}Kaina: {FFAF00}$%s", Baldai[i][bPav], Baldai[i][bID], konvertuoti_pinigus(Baldai[i][bKaina]));
	    Create3DTextLabel(String, -1, Baldai[i][bPosX], Baldai[i][bPosY], Baldai[i][bPosZ], 10, 0, 0);
   	}

	return 1;
}

CMD:mturgus(playerid, params[])
{
    	for(new v = 1, j = GetVehiclePoolSize(); v <= j; v++)
	{
		if(ArTurgausMasina[v])
		{
			new model = GetVehicleModel(v);

			switch(model)
			{
				case 401: TurgausInfo[v][tKiekis] = 2;
				case 404: TurgausInfo[v][tKiekis] = 2;
				case 410: TurgausInfo[v][tKiekis] = 2;
				case 412: TurgausInfo[v][tKiekis] = 2;
				case 419: TurgausInfo[v][tKiekis] = 2;
				case 436: TurgausInfo[v][tKiekis] = 2;
				case 439: TurgausInfo[v][tKiekis] = 2;
				case 445: TurgausInfo[v][tKiekis] = 2;
				case 458: TurgausInfo[v][tKiekis] = 2;
				case 466: TurgausInfo[v][tKiekis] = 2;
				case 467: TurgausInfo[v][tKiekis] = 2;
				case 479: TurgausInfo[v][tKiekis] = 2;
				case 480: TurgausInfo[v][tKiekis] = 2;
				case 491: TurgausInfo[v][tKiekis] = 2;
				case 492: TurgausInfo[v][tKiekis] = 2;
				case 507: TurgausInfo[v][tKiekis] = 2;
				case 516: TurgausInfo[v][tKiekis] = 2;
				case 517: TurgausInfo[v][tKiekis] = 2;
				case 518: TurgausInfo[v][tKiekis] = 2;
				case 526: TurgausInfo[v][tKiekis] = 2;
				case 580: TurgausInfo[v][tKiekis] = 2;
				case 529: TurgausInfo[v][tKiekis] = 2;
				case 533: TurgausInfo[v][tKiekis] = 2;
				case 534: TurgausInfo[v][tKiekis] = 2;
				case 536: TurgausInfo[v][tKiekis] = 2;
				case 542: TurgausInfo[v][tKiekis] = 2;
				case 575: TurgausInfo[v][tKiekis] = 2;
				case 576: TurgausInfo[v][tKiekis] = 2;
				// Nepamirðti pridëti krovimo jeigu prisidës maðinø.
			}
		}
	}
	return 1;
}

CMD:dget(playerid, params[])
{
	new giveplayerid, Float: Player_Pos[3], String[216];
	new darbas = GetJobFromFaction(PI[playerid][plead]);

	if(PI[playerid][plead] < 1) return 0;

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /dget <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(PI[giveplayerid][specialybe] != darbas) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nedirba jûsø darbe!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðio veiksmo panaudoti negalite!");

	if(GetPlayerVirtualWorld(playerid) > 0) return SendClientMessage(playerid, -1, "{ffffff} Negalite atiteliportuoti þaidëjo pas save kai esate namuose!");

	if(PI[giveplayerid][ikalintas]) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra kalëjime!");

	if(PI[playerid][kalejimo_laikas] > 0) return SendClientMessage(playerid, -1, "{ffffff} Jus esate kalëjime!");

	if(PI[giveplayerid][Kraunasi] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu ðios þaidëjo atiteliportuoti negalima!");

	if(PI[giveplayerid][Issikrauna] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu ðios þaidëjo atiteliportuoti negalima!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[giveplayerid][PasiuleGet] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas jau turi pasiûlymà atsiteliportavimui!");

	if(PI[giveplayerid][beglys] == true) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra begliø sàraðe!");

	if(SelectedSkin[giveplayerid] > -1) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra drabuþiø parduotuvëje!");

	if(SelectedGangSkin[giveplayerid] > -1) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra drabuþiø parduotuvëje!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	if(Dazasvydis[giveplayerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas daþasvydyje!");

	PI[giveplayerid][PasiuleGet] = gettime() + 20;

	GetPlayerPos         (playerid, Player_Pos[0], Player_Pos[1], Player_Pos[2]);
	GetPlayerVirtualWorld(playerid);

	PI[giveplayerid][GetPos][0] = Player_Pos[0];
	PI[giveplayerid][GetPos][1] = Player_Pos[1];
	PI[giveplayerid][GetPos][2] = Player_Pos[2];
	PI[giveplayerid][GetVW]     = GetPlayerVirtualWorld(playerid);
	PI[giveplayerid][GetInt]    = GetPlayerInterior(playerid);

	format(String, sizeof(String), "{ffffff} Direktorius {FFAF00}%s {ffffff}siûlo jums get pas já. Pasiûlymas galios {FFAF00}20{ffffff} sec!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);

	SendClientMessage(giveplayerid, -1, "{ffffff} Jeigu sutinkate teleportuotis, raðykite {FFAF00} /sutinku{ffffff}, jei ne - {FFAF00} /nesutinku{ffffff}!");

	return 1;
}

CMD:dto(playerid, params[])
{
	new giveplayerid, Float: Player_Pos[3];
	new darbas = GetJobFromFaction(PI[playerid][plead]);

	if(PI[playerid][plead] < 1) return 0;

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /to <vardas_pavardë/id>");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðio veiksmo panaudoti negalite!");
	
	if(PI[giveplayerid][specialybe] != darbas) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nedirba jûsø darbe!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[playerid][Kraunasi] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu ðios komandos naudoti negalima!");

	if(PI[playerid][Issikrauna] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu ðios komandos naudoti negalima!");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(PI[playerid][AdminLevel] < LEVEL_OWNER)
	{
		if(PI[playerid][beglys] == true) return SendClientMessage(playerid, -1, "{ffffff} Jus esate begliø sàraðe!");
	}

	if(PI[playerid][kalejimo_laikas] > 0) return SendClientMessage(playerid, -1, "{ffffff} Jus esate kalëjime!");

	if(PI[playerid][JustDie] > 0) return SendClientMessage(playerid, -1, "{ffffff} Jus dar negalite teleportuotis, nes esate gydomas!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	if(Dazasvydis[giveplayerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas daþasvydyje!");

	if(PI[playerid][AdminLevel] >= LEVEL_OWNER)
	{
		GetPlayerPos         (giveplayerid, Player_Pos[0], Player_Pos[1], Player_Pos[2]);
		AC_SetPlayerPos      (playerid,     Player_Pos[0], Player_Pos[1], Player_Pos[2]);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior    (playerid, GetPlayerInterior(giveplayerid));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));

		new String[128];
		format(String, 128, "Panaudojau komandà:\n{FFAF00} /to %s", GetPlayerNameEx(giveplayerid));
		SetPlayerChatBubble (playerid, String, 0xFFFFFFFF, 15.0, 5000);

		SelectedCreditHouseID[playerid] = -1;
	}
	else
	{
		if(PI[giveplayerid][AdminLevel] >= LEVEL_OWNER) return SendClientMessage(playerid, -1, "{ffffff} Pas savininkus teleportuotis draudþiama!");

		GetPlayerPos         (giveplayerid, Player_Pos[0], Player_Pos[1], Player_Pos[2]);
		AC_SetPlayerPos      (playerid,     Player_Pos[0], Player_Pos[1], Player_Pos[2]);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior    (playerid, GetPlayerInterior(giveplayerid));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));

		new String[128];
		format(String, 128, "Panaudojau komandà:\n{FFAF00} /to %s", GetPlayerNameEx(giveplayerid));
		SetPlayerChatBubble (playerid, String, 0xFFFFFFFF, 15.0, 5000);

		SelectedCreditHouseID[playerid] = -1;
	}

	return 1;
}

CMD:tpdarbas(playerid, params[])
{
	if(PI[playerid][plead] < 1 || PI[playerid][pavdrk] < 1 || PI[playerid][AdminLevel] == LEVEL_VIP || PI[playerid][AdminLevel] == LEVEL_FIRST || PI[playerid][AdminLevel] == LEVEL_SECOND || PI[playerid][AdminLevel] == LEVEL_THIRD || PI[playerid][AdminLevel] == LEVEL_OWNER)
	{
		switch(PI[playerid][specialybe])
		{
		    case 1: // PD
		    {
		        if(GetPlayerMoneyA(playerid) < 500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

		        AC_SetPlayerPos(playerid, -1617.2687,678.0411,7.1844);
		        GivePlayerMoneyA(playerid, -500);

		        SendClientMessage(playerid, -1, "{ccff66} TP.DARBAS {ffffff} Atsiteleportavote á darbo bazæ uþ $500.");
		    }
		    case 2: // MEDIKAI
		    {
		        if(GetPlayerMoneyA(playerid) < 500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

		        AC_SetPlayerPos(playerid, -2614.7195,597.7535,14.4621);
		        GivePlayerMoneyA(playerid, -500);

		        SendClientMessage(playerid, -1, "{ccff66} TP.DARBAS {ffffff} Atsiteleportavote á darbo bazæ uþ $500.");
		    }
		    case 3: // KURJERIAI
		    {
		        if(GetPlayerMoneyA(playerid) < 500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

		        AC_SetPlayerPos(playerid, -2678.5264,203.3821,4.3280);
		        GivePlayerMoneyA(playerid, -500);

		        SendClientMessage(playerid, -1, "{ccff66} TP.DARBAS {ffffff} Atsiteleportavote á darbo bazæ uþ $500.");
		    }
		    case 4: // MECHANIKAI
		    {
		        if(GetPlayerMoneyA(playerid) < 500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

		        AC_SetPlayerPos(playerid, -2628.5864,-19.2778,4.1694);
		        GivePlayerMoneyA(playerid, -500);

		        SendClientMessage(playerid, -1, "{ccff66} TP.DARBAS {ffffff} Atsiteleportavote á darbo bazæ uþ $500.");
		    }
		    case 5: // ARAS
		    {
		        if(GetPlayerMoneyA(playerid) < 500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

		        AC_SetPlayerPos(playerid, -1489.9606,463.2856,7.1875);
		        GivePlayerMoneyA(playerid, -500);

		        SendClientMessage(playerid, -1, "{ccff66} TP.DARBAS {ffffff} Atsiteleportavote á darbo bazæ uþ $500.");
		    }
		    case 11: // FURISTAI
		    {
		        if(GetPlayerMoneyA(playerid) < 500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

		        AC_SetPlayerPos(playerid, -2146.3206,-179.0134,35.3203);
		        GivePlayerMoneyA(playerid, -500);

		        SendClientMessage(playerid, -1, "{ccff66} TP.DARBAS {ffffff} Atsiteleportavote á darbo bazæ uþ $500.");
		    }
		}
	}
	return 1;
}
CMD:bpirkti(playerid)
{
	new String[128];

	for(new i = 0; i < MAX_BALDU; i++)
    {
    	if(IsPlayerInRangeOfPoint(playerid, 2.0, Baldai[i][bPosX], Baldai[i][bPosY], Baldai[i][bPosZ]))
    	{
    		format(String, 128, "Tu stovi prie %s baldo.", Baldai[i][bPav]);
    		SendClientMessage(playerid, -1, String);
    	}
    	else
    	{
    		SendClientMessage(playerid, -1, "Tu ne stovi prie baldo.");
    	}
   	}

	return 1;
}

stock CreateZone(Float: MinX, Float: MinY, Float: MaxX, Float: MaxY, bool: ShowZone = false)
{
    HowMuchZonesIs++;

	if(ShowZone)
	{
		ZonesSystem[HowMuchZonesIs - 1][ZoneID] = GangZoneCreate(MinX, MinY, MaxX, MaxY); //- Sukuriam gaujos zona!
	}

  	ZonesSystem[HowMuchZonesIs - 1][ZoneMinX]  = MinX;
  	ZonesSystem[HowMuchZonesIs - 1][ZoneMinY]  = MinY;
  	ZonesSystem[HowMuchZonesIs - 1][ZoneMaxX]  = MaxX;
  	ZonesSystem[HowMuchZonesIs - 1][ZoneMaxY]  = MaxY;

  	return HowMuchZonesIs - 1;
}

stock IsPlayerInZoneEx(playerid, GZoneID)
{
	new Float: P_Pos[3]; GetPlayerPos(playerid, P_Pos[0], P_Pos[1], P_Pos[2]);

  	if(P_Pos[0] >= ZonesSystem[GZoneID][ZoneMinX] && P_Pos[0] <= ZonesSystem[GZoneID][ZoneMaxX] && P_Pos[1] >= ZonesSystem[GZoneID][ZoneMinY] && P_Pos[1] <= ZonesSystem[GZoneID][ZoneMaxY]) return 1;

  	return 0;
}

stock IsVehicleInZone(vehicleid, GZoneID)
{
	new Float: P_Pos[3]; GetVehiclePos(vehicleid, P_Pos[0], P_Pos[1], P_Pos[2]);

  	if(P_Pos[0] >= ZonesSystem[GZoneID][ZoneMinX] && P_Pos[0] <= ZonesSystem[GZoneID][ZoneMaxX] && P_Pos[1] >= ZonesSystem[GZoneID][ZoneMinY] && P_Pos[1] <= ZonesSystem[GZoneID][ZoneMaxY]) return 1;

  	return 0;
}

stock SendMessageToGangMembers(GangID, tekstas[])
{
	for(new p = 0, size = GetPlayerPoolSize(); p <= size; p ++)
	{
		if(PI[p][gMember] == GangID)
		{
		    SendClientMessage(p, -1, tekstas);
		}
	}

	return 1;
}

stock GangMember(playerid)
{
	for(new Gang; Gang < MAX_GANGS; Gang ++)
	{
	    if(PI[playerid][gMember] == Gang) return Gang;
	}

    return -1;
}

stock SaveGang(GangID)
{
	new Query[128];

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `gLeader` = '%s' WHERE `ID` = '%d'", GangInfo[GangID][gLeader], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `gTitle` = '%s' WHERE `ID` = '%d'", GangInfo[GangID][gTitle], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `gPos_X` = '%.4f', `gPos_Y` = '%.4f', `gPos_Z` = '%.4f' WHERE `ID` = '%d'", GangInfo[GangID][G_Pos][0], GangInfo[GangID][G_Pos][1], GangInfo[GangID][G_Pos][2], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `gChest` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][gChest], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `gPoints` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][gPoints], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `gClosed` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][gClosed], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `gTele` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][gTele], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `gVirve` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][gVirve], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `gIsodinti` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][gIsodinti], GangID);
	mysql_query(Query);
	
	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `gKauke` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][gKauke], GangID);
	mysql_query(Query);
	
	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `gKliutis` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][gKliutis], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `gSkin` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][gSkin], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `gDate` = '%s' WHERE `ID` = '%d'", GangInfo[GangID][gDate], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `Ginklai1` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][Ginklai1], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `Ginklai2` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][Ginklai2], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `Ginklai3` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][Ginklai3], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `Narkai1` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][Narkai1], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `Narkai2` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][Narkai2], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `Narkai3` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][Narkai3], GangID);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `gaujuinfo` SET `Narkai4` = '%d' WHERE `ID` = '%d'", GangInfo[GangID][Narkai4], GangID);
	mysql_query(Query);

	return 1;
}

stock LoadGarages()
{
	new Query[128], String[250];

	for(new garageid = 0; garageid < MAX_GARAGES; garageid ++)
	{
		format(Query, sizeof(Query), "SELECT * FROM `garazai` WHERE `GarageID` = '%d'", garageid);
		mysql_query(Query);

		mysql_store_result();

		if(mysql_retrieve_row())
		{
			if(mysql_num_rows())
			{
				mysql_fetch_field_row(Query, "GarageOwner"); 		format(GI[garageid][GarageOwner], 25, "%s", Query);

				mysql_fetch_field_row(Query, "GaragePosX"); 		GI[garageid][GaragePos][0] 	= floatstr(Query);
				mysql_fetch_field_row(Query, "GaragePosY"); 		GI[garageid][GaragePos][1] 	= floatstr(Query);
				mysql_fetch_field_row(Query, "GaragePosZ"); 		GI[garageid][GaragePos][2] 	= floatstr(Query);

				mysql_fetch_field_row(Query, "GarageTimeLeft"); 	GI[garageid][GarageTimeLeft] = strval(Query);

				if(!strcmp("Nera", GI[garageid][GarageOwner], true))
				{
					format(String, sizeof(String), "Garaþo nr: {FFAF00}%d\n{ffffff}Garaþo nuomininkas: {FFAF00}%s", garageid + 1, GI[garageid][GarageOwner]);
				}
				else
				{
					if(GI[garageid][GarageTimeLeft] > gettime())
					{
						format(String, sizeof(String), "Garaþo nr: {FFAF00}%d\n{ffffff}Garaþo nuomininkas: {FFAF00}%s\n{ffffff}Garaþas iðnuomotas iki: {FFAF00}%s\n{ffffff}Vartø valdymas: {FFAF00}ALT{ffffff} mygtukas",
						garageid + 1, GI[garageid][GarageOwner], TimestampToDate(GI[garageid][GarageTimeLeft]));
					}
					else
					{
						format(GI[garageid][GarageOwner], 25, "Nera", Query);
						format(String, sizeof(String), "Garaþo nr: {FFAF00}%d\n{ffffff}Garaþo nuomininkas: {FFAF00}%s", garageid + 1, GI[garageid][GarageOwner]);
					}
				}

				GI[garageid][GarageText] = CreateDynamic3DTextLabel(String, -1, GI[garageid][GaragePos][0], GI[garageid][GaragePos][1], GI[garageid][GaragePos][2] - 1, 15.0);
			}
		}
		mysql_free_result();
	}

	return 1;
}

stock UpdateGarageLabel(garageid)
{
	new String[250];

	if(!strcmp("Nera", GI[garageid][GarageOwner], true))
	{
		format(String, sizeof(String), "Garaþo nr: {FFAF00}%d\n{ffffff}Garaþo nuomininkas: {FFAF00}%s", garageid + 1, GI[garageid][GarageOwner]);
	}
	else
	{
		format(String, sizeof(String), "Garaþo nr: {FFAF00}%d\n{ffffff}Garaþo nuomininkas: {FFAF00}%s\n{ffffff}Garaþas iðnuomotas iki: {FFAF00}%s\n{ffffff}Vartø valdymas: {FFAF00}ALT{ffffff} mygtukas",
		garageid + 1, GI[garageid][GarageOwner], TimestampToDate(GI[garageid][GarageTimeLeft]));
	}

	UpdateDynamic3DTextLabelText(GI[garageid][GarageText], -1, String);

	return 1;
}

stock LoadGangs()
{
	new Query[128], String[300];

	for(new Gang; Gang < MAX_GANGS; Gang ++)
	{
		format(Query, sizeof(Query), "SELECT * FROM `gaujuinfo` WHERE `ID` = '%d'", Gang);
		mysql_query(Query);

		mysql_store_result();

		if(mysql_retrieve_row())
		{
			if(mysql_num_rows())
			{
				mysql_fetch_field_row(Query, "gLeader"); 		format(GangInfo[Gang][gLeader], 24, "%s", Query);
				mysql_fetch_field_row(Query, "gTitle"); 		format(GangInfo[Gang][gTitle], 	24, "%s", Query);
				mysql_fetch_field_row(Query, "gDate"); 			format(GangInfo[Gang][gDate], 	32, "%s", Query);

				mysql_fetch_field_row(Query, "gPos_X"); 		GangInfo[Gang][G_Pos][0] 	= floatstr(Query);
				mysql_fetch_field_row(Query, "gPos_Y"); 		GangInfo[Gang][G_Pos][1] 	= floatstr(Query);
				mysql_fetch_field_row(Query, "gPos_Z"); 		GangInfo[Gang][G_Pos][2] 	= floatstr(Query);
				mysql_fetch_field_row(Query, "gChest"); 		GangInfo[Gang][gChest] 		= strval(Query);
				mysql_fetch_field_row(Query, "gPoints"); 		GangInfo[Gang][gPoints] 	= strval(Query);
				mysql_fetch_field_row(Query, "gClosed"); 		GangInfo[Gang][gClosed] 	= !!strval(Query);
				mysql_fetch_field_row(Query, "gSkin"); 			GangInfo[Gang][gSkin] 		= strval(Query);
				mysql_fetch_field_row(Query, "Ginklai1"); 		GangInfo[Gang][Ginklai1] 	= strval(Query);
				mysql_fetch_field_row(Query, "Ginklai2"); 		GangInfo[Gang][Ginklai2] 	= strval(Query);
				mysql_fetch_field_row(Query, "Ginklai3"); 		GangInfo[Gang][Ginklai3] 	= strval(Query);
				mysql_fetch_field_row(Query, "Narkai1"); 		GangInfo[Gang][Narkai1] 	= strval(Query);
				mysql_fetch_field_row(Query, "Narkai2"); 		GangInfo[Gang][Narkai2] 	= strval(Query);
				mysql_fetch_field_row(Query, "Narkai3"); 		GangInfo[Gang][Narkai3] 	= strval(Query);
				mysql_fetch_field_row(Query, "Narkai4"); 		GangInfo[Gang][Narkai4] 	= strval(Query);

				mysql_fetch_field_row(Query, "gVirve"); 		GangInfo[Gang][gVirve] 		= !!strval(Query);
				mysql_fetch_field_row(Query, "gIsodinti"); 		GangInfo[Gang][gIsodinti] 	= !!strval(Query);
				mysql_fetch_field_row(Query, "gTele"); 			GangInfo[Gang][gTele] 		= !!strval(Query);
				mysql_fetch_field_row(Query, "gKauke"); 		GangInfo[Gang][gKauke] 		= !!strval(Query);
				mysql_fetch_field_row(Query, "gKliutis"); 		GangInfo[Gang][gKliutis] 	= !!strval(Query);

				format(String, sizeof(String), "{ffffff} Gaujos {FFAF00}%s {ffffff} (ID: {FFAF00}%d{ffffff} ) bustinë\nGaujos lyderis: {FFAF00}%s\n{ffffff} Gaujos taðkai: {FFAF00}%d\n \n{ffffff} Gaujø komandos: {FFAF00} /gkomandos",
				GangInfo[Gang][gTitle], Gang, GangInfo[Gang][gLeader], GangInfo[Gang][gPoints]);

				GangInfo[Gang][gLabel] 	= CreateDynamic3DTextLabel	(String, -1, 	GangInfo[Gang][G_Pos][0], GangInfo[Gang][G_Pos][1], GangInfo[Gang][G_Pos][2], 10.0);
				GangInfo[Gang][gPickup]	= CreatePickup				(1254, 1, 		GangInfo[Gang][G_Pos][0], GangInfo[Gang][G_Pos][1], GangInfo[Gang][G_Pos][2]);
			}
		}
		mysql_free_result();
	}

	return 1;
}

stock UpdateGangLabel(GangID)
{
	new String[300];

	format(String, sizeof(String), "{ffffff} Gaujos {FFAF00}%s {ffffff} (ID: {FFAF00}%d{ffffff} ) bustinë\nGaujos lyderis: {FFAF00}%s\n{ffffff} Gaujos taðkai: {FFAF00}%d\n \n{ffffff} Gaujø komandos: {FFAF00} /gkomandos",
	GangInfo[GangID][gTitle], GangID, GangInfo[GangID][gLeader], GangInfo[GangID][gPoints]);
	UpdateDynamic3DTextLabelText(GangInfo[GangID][gLabel], -1, String);
}

stock ClearAntiCheatVariables(playerid)
{
	AntiCheatSystem[playerid][pTextSpam] = 0;
	AntiCheatSystem[playerid][pCommandSpam] = 0;
	AntiCheatSystem[playerid][CanCheckPlayer] = 0;
	AntiCheatSystem[playerid][pCurrentPos][0] = 0.0;
	AntiCheatSystem[playerid][pCurrentPos][1] = 0.0;
	AntiCheatSystem[playerid][pCurrentPos][2] = 0.0;
	for(new Slot = 0; Slot < 12; Slot ++)
	{
		AntiCheatSystem[playerid][pWeaponsID][Slot] = 0;
		AntiCheatSystem[playerid][pWeaponsAmmo][Slot] = 0;
	}
	AntiCheatSystem[playerid][pNoCheckWeapons] = 0;
	AntiCheatSystem[playerid][pNoCheckAirbreak] = 0;
	AntiCheatSystem[playerid][pLastTickCheck] = 0;
	AntiCheatSystem[playerid][pTextSpam] = 0;
	AntiCheatSystem[playerid][pCommandSpam] = 0;
	AntiCheatSystem[playerid][PlayerShooting] = false;
	return 1;
}

stock PlayerText: CreateInfoText(playerid, tekstas[])
{
	new PlayerText: InfoTextdraw;

	InfoTextdraw = CreatePlayerTextDraw(playerid, 13, 150, tekstas);

	PlayerTextDrawUseBox         (playerid, InfoTextdraw, 1);
	PlayerTextDrawBoxColor       (playerid, InfoTextdraw, 0x00000099);
	PlayerTextDrawTextSize       (playerid, InfoTextdraw, 159, 81);
	PlayerTextDrawAlignment      (playerid, InfoTextdraw, 0);
	PlayerTextDrawBackgroundColor(playerid, InfoTextdraw, 0x000000ff);
	PlayerTextDrawFont           (playerid, InfoTextdraw, 1);
	PlayerTextDrawLetterSize     (playerid, InfoTextdraw, 0.33, 1);
	PlayerTextDrawColor          (playerid, InfoTextdraw, 0xffffffff);
	PlayerTextDrawSetOutline     (playerid, InfoTextdraw, 1);
	PlayerTextDrawSetProportional(playerid, InfoTextdraw, 1);
	PlayerTextDrawSetShadow      (playerid, InfoTextdraw, 1);

	return(InfoTextdraw);
}

stock ShowInfoText(playerid, tekstas[], ShowTime, bool: WithSound)
{
	if(PI[playerid][InfoText] == INVALID_PLAYER_TEXT_DRAW)
	{
		PI[playerid][InfoText] = CreateInfoText(playerid, tekstas);

		PlayerTextDrawShow(playerid, PI[playerid][InfoText]);

		SetTimerEx("HideInfoText", ShowTime, false, "i", playerid);
	}
	else
	{
		HideInfoText(playerid);
		PI[playerid][InfoText] = CreateInfoText(playerid, tekstas);

		PlayerTextDrawShow(playerid, PI[playerid][InfoText]);

		SetTimerEx("HideInfoText", ShowTime, false, "i", playerid);
	}

	if(WithSound) { PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0); }
	return 1;
}

stock CheckForInvalidSkinID(SkinID)
{
	switch(SkinID)
	{
		/*case 0, 267, 274, 171, 8, 28, 125, 124, 117, 280, 275, 240, 42, 21, 111, 126, 118, 281, 276, 187, 50, 30, 272, 127, 120, 282, 249, 112, 286, 201, 155, 53, 16, 11, 15, 277, 172:
		{
			return 0;
		}*/

		case 0, 280, 281, 282, 283, 284, 286, 287, 288, 300..311, 125, 126, 127, 128, 133, 24, 25, 273,
		274, 275, 276, 270, 50, 268, 8, 285, 294, 165, 155, 201, 74, 16, 53, 279, 15, 11, 277, 278, 265,
		266, 267, /* GAUJOS SKINAI */ 105, 106, 107, 102, 103, 104, 114, 115, 116, 108, 109, 110, 121, 122, 123, 173, 174, 175,
		117, 118, 120, 247, 248, 254, 111, 112, 113, 124 /* GAUJOS SKINAI */:
		{
			return 0;
		}
	}

	return 1;
}

stock CheckForInvalidGangSkinID(SkinID)
{
	switch(SkinID)
	{
		case 105, 106, 107, 102, 103, 104, 114, 115, 116, 108, 109, 110, 121, 122, 123, 173, 174, 175,
		117, 118, 120, 247, 248, 254, 111, 112, 113, 124:
		{
			return 0;
		}
	}

	return 1;
}

stock PrisijungimoLangas(playerid)
{
	new String[400];

	format(String, sizeof(String), "{ffffff} Mielas (-a) %s, {FFAF00}www.MetroCity.lt {ffffff}administracija dþiaugiasi matyti jus ðiame serveryje dar kartà!\nNorëdami prisijungti prie jûsø paskyros, áveskite \
	slaptaþodá, kurá naudojote registracijos metu!\n\n\t\t\t\t\tSëkmës þaidime!",
	GetPlayerNameEx(playerid));
	ShowPlayerDialogEx(playerid, PrisijungimoDialogas, DIALOG_STYLE_PASSWORD, "Prisijungimas prie paskyros", String, "Jungtis", "");

	return 1;
}

stock RegistracijosLangas(playerid)
{
	new String[400];

	format(String, sizeof(String), "{ffffff} Mielas (-a) %s, {FFAF00}www.MetroCity.lt {ffffff}administracija sveikina jus prisijungus á saulëtø pakranèiø miestà!\nNorëdami uþregistruoti savo paskyrà, \
	áveskite slaptaþodá, kuri naudosite kaskart prisijungiant!\n\n\t\t\t\t\t\tSëkmës!",
	GetPlayerNameEx(playerid));
	ShowPlayerDialogEx(playerid, RegistracijosDialogas, DIALOG_STYLE_PASSWORD, "Paskyros registracija", String, "Tæsti", "");

	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;

	if(Logged[playerid] == false)
	{
		SendClientMessage(playerid, -1, "{ffffff} Pirmiausiai turite uþsiregistruoti arba prisijungti!");

		return 0;
	}

	return 1;
}

public OnPlayerConnect(playerid)
{
    PI[playerid][Apraktika] = true;
	PI[playerid][Bpraktika] = true;
	
	if(IsPlayerNPC(playerid)) 		return 1;
	if(InvalidNickKick(playerid)) 	return 1;

	trinam						(playerid);
	Clear 						(playerid);
	ClearAntiCheatVariables		(playerid);
	ClearBusDriversVariables	(playerid);
	ac_Reset(playerid);
	j_GetPlayerName 			(playerid);
	j_GetPlayerIp 				(playerid);
	//RemoveObjectsForPlayer		(playerid);
	CheckIP 					(GetPlayerIpEx(playerid));
	ClearChat 					(playerid, 8);
	DestroyPlayerProgressBar	(playerid, FishingBar[playerid]);		FishingBar[playerid] 	= INVALID_PLAYER_BAR_ID;
	DestroyPlayerProgressBar	(playerid, IskasenuBar[playerid]);		IskasenuBar[playerid] 	= INVALID_PLAYER_BAR_ID;
	KillTimer					(KraunamMasina[playerid]);
	KillTimer					(IskraunamMasina[playerid]);
	KillTimer					(FuelTimer[playerid]);
	KillTimer					(UzkiboEx[playerid]);
	KillTimer					(ZvejojaEx[playerid]);
	KillTimer					(KasaEx[playerid]);
	CheckPlayersOnlineRecord	();
	CreatePlayerMapIcons    	(playerid);
	CreateTextDraws				(playerid);
	HideHungryHood 				(playerid);
	FixTimeForPlayer			(playerid);
	//REMOVE_POFKA				(playerid);
	KillTimer					(FishingTimer[playerid]);
	KillTimer				(FishingUpdateTimer[playerid]);

	for(new s = 0; s < 15; s ++)	TextDrawHideForPlayer(playerid, transporto_salonas_g[s]);
	for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, transporto_salonas_p[playerid][s]);
	for(new s = 0; s < 8; s ++)		TextDrawHideForPlayer(playerid, spidometras_g[s]);
	for(new s = 0; s < 8; s ++)		PlayerTextDrawHide(playerid, spidometras_p[playerid][s]);
	for(new s = 0; s < 4; s ++) 	TextDrawHideForPlayer(playerid, MetroCity_logo_g[s]);
	for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
	for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);
	for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, saugi_zona_g[s]);

	for(new z = 0; z < MAX_ZONES; z ++) GangZoneShowForPlayer(playerid, Zone[z], ZONE_COLOR);

	SendClientMessage 	(playerid, -1, "{ffffff} Sveikas atvykæs á {FFAF00}www.MetroCity.lt {ffffff}projektà, malonaus þaidimo!");
	ClearChat 			(playerid, 2);

	if(ViskasDuX)
	{
		SendClientMessage 	(playerid, -1, "{ffffff} Ðá savaitgalá vyksta akcija {FFAF00}BONUS savaitgalis{ffffff}!");
		SendClientMessage 	(playerid, -1, "{ffffff} Todël siûlome nepraleisti puikios galimybës viskà gauti 2 kartus daugiau nei áprastai!");
		ClearChat 			(playerid, 2);
	}

	new ConnIP[16];
	GetPlayerIp(playerid,ConnIP,16);
	new compare_IP[16];
	new number_IP = 0;
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
		if(IsPlayerConnected(i))
		{
			GetPlayerIp(i,compare_IP,16);
			if(!strcmp(compare_IP,ConnIP)) number_IP++;
		}
	}
	if((GetTickCount() - Join_Stamp) < Time_Limit)
	{
		exceed=1;
	}
	else
	{
		exceed=0;
		if(strcmp(ban_s, ConnIP, false) == 0 && exceed == 1 )
		{
			Same_IP++;
			if(Same_IP > SAME_IP_CONNECT)
			{
				Ban(playerid);
				Same_IP=0;
			}
		}
		else
		{
			Same_IP=0;
		}
		if(number_IP > IP_LIMIT)
		{
			Kick(playerid);
			GetStampIP(playerid);
		}
	}

	pCPID[playerid] = -1;

	for(new cp; cp < MAX_PLAYER_CPS; cp++)
	{
		pCPPosX[playerid][cp] = 0.0;
		pCPPosY[playerid][cp] = 0.0;
		pCPPosZ[playerid][cp] = 0.0;
		pCPSize[playerid][cp] = 0.0;
		pCPShow[playerid][cp] = false;
	}

	return 1;
}

stock GetSquareDistance (Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2)
{
	x1 -= x2;
	y1 -= y2;
	z1 -= z2;
	x1 *= x1;
	y1 *= y1;
	z1 *= z1;
	return floatround (x1 + y1 + z1);
}

stock IsPlayerInArea(playerid, Float: max_x, Float: min_x, Float: max_y, Float: min_y)
{
	new Float: X, Float: Y, Float: Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(X <= max_x && X >= min_x && Y <= max_y && Y >= min_y) return 1;
	return 0;
}

/*stock LoahouseInteriors()
{
	new kiek = sizeof(hInterior), str[50];
	strcat(IntList, "{ffffff}");
	for(new c; c < kiek; c++)
	{
		format(str, 50, "%d lygio remontas\t{FFAF00}$%s\n", c + 1, konvertuoti_pinigus(hInterior[c][Price]));
		strcat(IntList, str);
	}
	return 1;
}*/

public OnPlayerDisconnect(playerid,reason)
{
	switch(reason)
	{
		case 0..2:
		{
			if(Prisijunges[playerid])
			{
				//Naikinam taimerius
				KillTimer(ZvejojaEx[playerid]);
				KillTimer(KasaEx[playerid]);
				KillTimer(UzkiboEx[playerid]);
				DestroyPlayerProgressBar	(playerid, FishingBar[playerid]);		FishingBar[playerid] 	= INVALID_PLAYER_BAR_ID;
				DestroyPlayerProgressBar	(playerid, IskasenuBar[playerid]);		IskasenuBar[playerid] 	= INVALID_PLAYER_BAR_ID;

				TextDrawHideForPlayer 	(playerid, AlkioTD[playerid]);
				DestroyDynamicObject 		(Ugnis[playerid]);
				KillTimer(IskraunamviskaisfurosEx[playerid]);
				KillTimer(KraunamdviraciusEx[playerid]);
				KillTimer(KraunambaldusEx[playerid]);
				KillTimer(KraunambuittechEx[playerid]);
				KillTimer(KraunamanglisEx[playerid]);
				KillTimer(KraunamzvyraEx[playerid]);
				KillTimer(KraunamgunusEx[playerid]);
				KillTimer(KraunamnarkusEx[playerid]);
				KillTimer(KraunamzoleEx[playerid]);
				KillTimer(nuomaTimer[playerid]);
				KillTimer 			(KraunamMasina[playerid]);
				KillTimer 			(IskraunamMasina[playerid]);
				KillTimer			(FuelTimer[playerid]);
				KillTimer			(FishingTimer[playerid]);
				KillTimer				(FishingUpdateTimer[playerid]);
				//Nulinam kintamuosius
				AntiAntiBan[playerid] = false;
				CanCheckABX[playerid] = true;
				NeedCheckTuningAB [playerid] = 0;
				//Saugojimai
				SavePlayerVehicle1(playerid, true);
				SavePlayerVehicle2(playerid, true);
				SavePlayerVehicle3(playerid, true);
				SavePlayerData(playerid);

				if(ChoosedPlayer[playerid] != INVALID_PLAYER_ID)
				{
					if(ChoosedPlayer[ChoosedPlayer[playerid]] == playerid) ChoosedPlayer[ChoosedPlayer[playerid]] = INVALID_PLAYER_ID;
				}

				new Gang = GangMember(playerid), String[216];

				if(Gang != -1)
				{
					if(!strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME))
					{
						if(VykstaGrobimas == Gang)
						{
							new str[70];

							switch(KaGrobia)
							{
								case GROBIA_PD: 		str = "policijos departamento";
								case GROBIA_SALONA:		str = "drabuþiø parduotuvës";
								case GROBIA_VYRIAUSYBE: str = "vyriausybës";
								case GROBIA_HOTEL: 		str = "vieðbuèio";
							}

							VykstaGrobimas 	= -1;
							KaGrobia 		= 0;
							GrobimoLaikas 	= 0;

							format(String, sizeof(String), "{FFAF00}[GROBIMAS]: {ffffff}Gaujos {FFAF00}%s {ffffff}lyderis atsijungë, todël {ffffff} %s {ffffff}grobimas atðaukiamas!", GangInfo[Gang][gTitle], str);
							SendClientMessageToAll(-1, String);
						}
					}
				}

				//Kitas ðûdas
				ChoosedPlayer[playerid] = -1;
				if(PI[playerid][AFK_Label] != Text3D:INVALID_3DTEXT_ID) Delete3DTextLabel(PI[playerid][AFK_Label]);
				for(new p, size = GetPlayerPoolSize(); p <= size; p++)
				{
					if(IsPlayerNPC(p) || !IsPlayerConnected(p)) continue;

					if(SekamasZaidejas[p] !=1)
					{
						SekamasZaidejas[playerid] = -1;
						DisablePlayerCheckpointEx(playerid, 21);
					}
					if(PI[p][CanTakeCar] == playerid)
					{
						PI[p][CanTakeCar] = -1;
						PI[p][CarCost] = -1;
					}
				}
				if(PI[playerid][uztvara] != INVALID_OBJECT_ID)
				{
					Delete3DTextLabel(tUztvara[playerid]);
					DestroyDynamicObject(PI[playerid][uztvara]);
					PI[playerid][uztvara] = INVALID_OBJECT_ID;
				}

				for(new z = 0; z < MAX_ZONES; z++) GangZoneHideForPlayer(playerid, Zone[z]);
				//TextDrawHideForPlayer(playerid, Text);

				for(new i, size = GetPlayerPoolSize(); i <= size; i++)
		        {
		            if(!IsPlayerConnected(i) || PI[i][AdminLevel] == LEVEL_NONE) continue;

					if(spectateInfo[i][0] == playerid)
					{
					    SendClientMessage 	(i, -1, ""COL_ERROR" {ffffff}Stebimas þaidëjas atsijungë!");
					    StopSpectating 		(i);

						return 1;
					}
		        }
			}
		}
	}

	if(reason == 0)
	{
		if(PI[playerid][cuffed])
		{
			Surakinti(playerid, true);

			new String[128];
			format(String, sizeof(String), "UPDATE `players` SET `Surakintas` = '0' WHERE `Vardas` = '%s'", GetPlayerNameEx(playerid));
			mysql_query(String);
		}
	}

	if(PI[playerid][DeleteAcc])
	{
		new dQuery[70];
		format(dQuery, sizeof(dQuery), "DELETE FROM `players` WHERE Vardas = '%s'", GetPlayerNameEx(playerid));
		mysql_query(dQuery);
	}

	Prisijunges[playerid] = false;
	ac_ResetPlayerWeapons(playerid);
	Clear(playerid);
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    if(vehicleid != INVALID_VEHICLE_ID)
    {
    	if(VehicleInfo[vehicleid][vTaisyta] < gettime())
    	{
    		VehicleInfo[vehicleid][vTaisyta] = gettime() + 30;
    	}
    }

    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	//PI[damagedid][Nuskriaude] = playerid;
	switch(Dazasvydis[playerid])
	{
		case ZALIAS:
		{
			if(Dazasvydis[damagedid] == ZALIAS)
			{
				SendClientMessage(playerid, -1, "{24F34A} DAÞASVYDIS  {ffffff}Neðaudyk á saviðkius!");
				UzsaldytiZaideja(playerid, 1000);

				return 1;
			}
		}

		case GELTONAS:
		{
			if(Dazasvydis[damagedid] == GELTONAS)
			{
				SendClientMessage(playerid, -1, "{24F34A} DAÞASVYDIS  {ffffff}Neðaudyk á saviðkius!");
				UzsaldytiZaideja(playerid, 1000);

				return 1;
			}
		}
	}

	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if(issuerid != INVALID_PLAYER_ID)
	{
		printf("%dspec, %d tazer, %dwp", PI[issuerid][specialybe], Tazer[issuerid], GetPlayerWeapon(issuerid));
		if(PI[issuerid][specialybe] == 1 || PI[issuerid][specialybe] == 5)
		{
			if(Tazer[issuerid] && GetPlayerWeapon(issuerid) == TAZE_WEAPON)
			{
				new Float:health;
				GetPlayerHealth(playerid,health);
				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x, y, z);
				if(IsPlayerInRangeOfPoint(issuerid, 7.0, x, y, z) && !Tazed[playerid] && !PlayerInZone(playerid, -1126.9591,-759.0683, -974.1170,-588.6785))
				{
					ApplyAnimation(issuerid, "COLT45", "colt45_reload", 4.1,0, 0, 0, 1, 1);
					
					ClearAnimations(playerid);
					ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
					Spark[playerid] = CreateObject(TAZE_SPARK, x, y, z-3, 0, 0, 0);
					SetTimerEx("DestroySpark", TAZE_DESTROY, 0, "i", playerid);
					SetTimerEx("TazedRemove", TAZE_TIMER, 0, "i", playerid);
					Tazed[playerid] = true;
					PI[issuerid][NaudojoTazeri] = gettime() + 20;
					SetPlayerHealthEx(playerid, health + amount);

					new String[128];

					format(String, sizeof(String), "{ffffff} Jus su tazeriu paðovë {FFAF00}%s{ffffff}!", GetPlayerNameEx(issuerid));
					SendClientMessage(playerid, -1, String);
				}
			}
		}

		if(PI[playerid][AFK_Stat]) return 0;
		if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5)
		{
			if(IsPlayerInZone[playerid] == true)
			{
				new Float:phealt; GetPlayerHealth(playerid, phealt);
				new Float:ihhealt; GetPlayerHealth(issuerid, ihhealt);
				SetPlayerHealthEx(playerid, phealt + amount);
				SetPlayerHealthEx(issuerid, ihhealt - amount);

				Warns[issuerid] += 1;

				new msg[110];

				format(msg, sizeof(msg), "{ffffff} Gavote áspëjimà uþ ðaudymà/muðimàsi saugioje zonoje (%d/%d)!", Warns[issuerid], MAX_WARNS);
				SendClientMessage(issuerid, -1, msg);

				UzsaldytiZaideja(issuerid, 2000);

				if(Warns[issuerid] >= MAX_WARNS)
				{
					SendClientMessage 	(issuerid, -1, "{ffffff} Jus iðmestas uþ ðaudymà/muðimàsi saugioje zonoje!");
					IsmestiZaideja 		(issuerid, 100);
				}
			}
		}

		if(PI[playerid][GavoZala] < gettime())
		{
			PI[playerid][GavoZala] = gettime() + 30;
		}

		switch(PI[playerid][specialybe])
		{
			case 1, 5:
			{
				//new str[128];
				new Float:phealt; GetPlayerHealth(playerid, phealt);
				new Float:NewHealth = phealt - amount;
				if(IsPlayerAttachedObjectSlotUsed(playerid, POLICEARMOUR_ATTACH_SLOT))
				{
					new Float:arm; 		GetPlayerArmour(playerid, arm);

					if(arm < 1.0)
					{
						SetPlayerHealthEx(playerid, NewHealth + (amount/3));
					}

					//format(str, sizeof(str), "SU LIEMENE: turejo %.2f HP | nueme %.2f HP | prisidejo %.2f | dabar turi %.2f.", phealt, amount, amount/3, NewHealth + (amount / 3));
					//SendClientMessageToAll(-1, str);
				}
				/*else
				{
					format(str, sizeof(str), "BE LIEMENES: turejo %.2f HP | nueme %.2f HP | prisidejo 0.00 HP | dabar turi %.2f.", phealt, amount, NewHealth);
					SendClientMessageToAll(-1, str);
				}*/
			}
		}
	}

	return 1;
}

public OnPlayerSpawn(playerid)
{
	PI[playerid][pHealthCheck] 	= gettime() + 5;
	AntiAntiBan[playerid] 			 	= true;
	CanCheckAirBreak[playerid] 			= false;
	Spawned[playerid] 					= false;

	if(IsPlayerNPC(playerid)) return 1;
	
	UzsaldytiZaideja		(playerid, 3500);
	GameTextForPlayer(playerid, "~h~KRAUNAMAS SERVERIS", 1500, 5);

	for(new s = 0; s < 4; s++) TextDrawShowForPlayer(playerid, MetroCity_logo_g[s]);

	GangZoneShowForPlayer	(playerid, ZoneNoGunLic, 0xB4B5B7FF);
	StopAudioStreamForPlayer(playerid);
	SetPlayerSkillLevel     (playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel     (playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
	ClearAnims              (playerid);
	HideGenderTextdraws 	(playerid);
	FixTimeForPlayer 		(playerid);

	Prisijunges[playerid] = true;

	for(new z = 0; z < HowMuchGangZonesIs; z ++)
	{
		//Zone[z] = GangZoneCreate(ZoneCords[z][minX], ZoneCords[z][minY], ZoneCords[z][maxX], ZoneCords[z][maxY]);

		switch(GangZonesSystem[z][gZoneOwner])
		{
			case 1:
			{
				GangZoneShowForAll(GangZonesSystem[z][gZoneID], GANG_ZONE_COLOR_ID_1);
			}

			case 2:
			{
				GangZoneShowForAll(GangZonesSystem[z][gZoneID], GANG_ZONE_COLOR_ID_2);
			}

			case 3:
			{
				GangZoneShowForAll(GangZonesSystem[z][gZoneID], GANG_ZONE_COLOR_ID_3);
			}

			default:
			{
				GangZoneShowForAll(GangZonesSystem[z][gZoneID], 0xFC3A3A96);
			}
		}

		//printf("zona %d uzkrauta, savininkas: %d\n", GangZonesSystem[z][gZoneID], GangZonesSystem[z][gZoneOwner]);
	}

	switch(PI[playerid][authstate])
	{
		case 1:
		{
			PI[playerid][authstate] = 3;

			if(PI[playerid][lytis] == 0) // Vyras
			{
				switch(random(3))
				{
					case 0: PI[playerid][drabuziai] = 98;
					case 1: PI[playerid][drabuziai] = 60;
					case 2: PI[playerid][drabuziai] = 188;
				}
			}
			else if(PI[playerid][lytis] == 1) // Moteris
			{
				switch(random(3))
				{
					case 0: PI[playerid][drabuziai] = 55;
					case 1: PI[playerid][drabuziai] = 193;
					case 2: PI[playerid][drabuziai] = 216;
				}
			}

			new String[128];

			format(String, sizeof(String), "{ffffff} Serveryje uþsiregistravo naujas þaidëjas - {FFAF00}%s(%i){ffffff}!", GetPlayerNameEx(playerid), playerid);
			SendMessageToAdmins(String);

			//PI[playerid][DeleteAcc] = false;

			format(PI[playerid][KadaUzsiregino], 32, "%s", GetDateEx());

			/*SendClientMessage(playerid, -1, " ");
			SendClientMessage(playerid, -1, "{FFFF00}SUN{FFFFFF}SIDE.{FFFF00}LT{ffffff}: Projekto administracija sveikina jus uþsiregistravus ðiame serveryje!");
			SendClientMessage(playerid, -1, "{FFFF00}SUN{FFFFFF}SIDE.{FFFF00}LT{ffffff}: Norint uþsidirbti daugiau pinigø arba patirties taðkø, vykdykite misijas - {FFAF00} /misija{ffffff}!");
			SendClientMessage(playerid, -1, "{FFFF00}SUN{FFFFFF}SIDE.{FFFF00}LT{ffffff}: Jeigu kils neaiðkumø ir norësite kaþko paklausti, kreipkites á administratorius - {FFAF00} /admin{ffffff}!");
			SendClientMessage(playerid, -1, " ");*/

			//AC_SetPlayerPos      (playerid, -1980.7416,138.5684,27.6880);
			//SetPlayerFacingAngle (playerid, 91.0455);
			GivePlayerMoneyA     (playerid, 8000);
			GivePlayerExperience (playerid, 100);
			//SetCameraBehindPlayer(playerid);
			SetPlayerColor       (playerid, PLAYCOL_HIDDEN);
			SetPlayerSkin		 (playerid, PI[playerid][drabuziai]);
			Sotumas				 (playerid, 100);
			SetPlayerHealthEx    (playerid, 100);
			SetPlayerArmourEx    (playerid, 0);
			SetPlayerInterior    (playerid, 0);

			new str[128];

			for(new s = 0; s < 3; s ++) PlayerTextDrawShow(playerid, hudas_p[playerid][s]);
			for(new s = 0; s < 5; s ++)	TextDrawShowForPlayer(playerid, hudas_g[s]);

			PlayerTextDrawShow(playerid, sumustinis[playerid][0]);

			new Float: Progress = (496.161132 + (PI[playerid][Alkis] * 1.11638916));
			PlayerTextDrawTextSize(playerid, hudas_p[playerid][0], Progress, 0.000000);

			format(str, sizeof(str), "~y~[]~w~ ITARIMO LYGIS:~R~ %d", PI[playerid][Ieskomas]);
			PlayerTextDrawSetString(playerid, hudas_p[playerid][1], str);

			format(str, sizeof(str),  "~w~$~g~%s", konvertuoti_pinigus(GetPlayerMoneyA(playerid)));
			PlayerTextDrawSetString(playerid, hudas_p[playerid][2], str);

			PlayerTextDrawHide(playerid, hudas_p[playerid][0]);
			PlayerTextDrawShow(playerid, hudas_p[playerid][0]);

			StartTutorial(playerid);
		}

		case 2:
		{
			LoadPlayerData      (playerid);
			LoadPlayerVehicle1  (playerid);
			LoadPlayerVehicle2  (playerid);
			LoadPlayerVehicle3  (playerid);

			BaigesiAdmin        (playerid);
			SetPlayerArmedWeapon(playerid, 0);

			new String[500], Stringas[500];

			if(PI[playerid][BanLaikas] > gettime())
			{
				format(String, sizeof(String), "{ffffff}Jûsø vartotojas yra laikinai uþblokuotas. Laikas: {FFAF00}%s\n \n", ConvertSeconds(PI[playerid][BanLaikas] - gettime()));
				strcat(Stringas, String);
				strcat(String, "{ffffff}Norint atsiblokuoti, spauskite mygtukà 'Atsiblokuoti'.\n");
				format(String, sizeof(String), "{ffffff}Atsiblokavimo kaina: {FFAF00}100 {ffffff}kred. Jus turite {FFAF00}%d {ffffff}kred.", HowMuchHaveCredits(GetPlayerNameEx(playerid)));
				strcat(Stringas, String);
				ShowPlayerDialogEx(playerid, TimeUnbanDialog, DIALOG_STYLE_MSGBOX, "Uþblokuotas", String, "Atsiblokuoti", "Iðeiti");
			}

			switch(PI[playerid][AdminLevel])
			{
				case LEVEL_VIP:
				{
					SetPlayerColor(playerid, PLAYCOL_HIDDEN);
				}

				case LEVEL_FIRST..LEVEL_THIRD:
				{
					SetPlayerColor(playerid, PLAYCOL_HIDDEN);

					format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}prisijungë!", GetPlayerNameEx(playerid));
					SendClientMessageToAll(-1, String);
				}

				case LEVEL_OWNER:
				{
					SetPlayerColor(playerid, PLAYCOL_HIDDEN);

					format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}prisijungë!", GetPlayerNameEx(playerid));
					SendClientMessageToAll(-1, String);
				}

				default:
				{
					SetPlayerColor(playerid, PLAYCOL_HIDDEN);
				}
			}

			switch(PI[playerid][AdminLevel])
			{
				case LEVEL_VIP: 				SendClientMessage(playerid, -1, "{ffffff} Sveikiname sugráþus, VIP nari! Jûsø komandos: {FFAF00} /akomandos{ffffff}.");
				case LEVEL_FIRST..LEVEL_OWNER: 	SendClientMessage(playerid, -1, "{ffffff} Sveikiname sugráþus, administratoriau! Jûsø komandos: {FFAF00} /akomandos{ffffff}.");
			}

			if(PI[playerid][Priziuretojas] > PRIZ_NIEKO)
			{
				SendClientMessage(playerid, -1, "{ffffff} Sveikiname sugráþus, priþiûrëtojau! Jûsø komandos: {FFAF00} /priziuretojas{ffffff}.");
			}

			switch(PI[playerid][specialybe])
			{
				case 1:
				{
					new uQuerry[200], ArIjungtaZin, ZinutesZin;
					mysql_query("SELECT * FROM `dzinutes` WHERE `KokioDarboZinute` = 'Policija'");
					mysql_store_result();
					mysql_retrieve_row();
					mysql_fetch_field_row(uQuerry, "ArIjungtaZinute"); ArIjungtaZin = strval(uQuerry);
					mysql_fetch_field_row(uQuerry, "ZinutesTekstas"); ZinutesZin = strlen(uQuerry);
					if(ArIjungtaZin == 1)
					{
						SendClientMessage(playerid, -1, "{ffffff} Jûsø darbo direktorius paliko ðià þinutæ:");
						format(String, sizeof(String), "{FFAF00}%s", ZinutesZin);
						SendClientMessage(playerid, -1, String);
					}
				}
				case 2:
				{
					new uQuerry[200], ArIjungtaZin, ZinutesZin;
					mysql_query("SELECT * FROM `dzinutes` WHERE `KokioDarboZinute` = 'Medicina'");
					mysql_store_result();
					mysql_retrieve_row();
					mysql_fetch_field_row(uQuerry, "ArIjungtaZinute"); ArIjungtaZin = strval(uQuerry);
					mysql_fetch_field_row(uQuerry, "ZinutesTekstas"); ZinutesZin = strlen(uQuerry);
					if(ArIjungtaZin == 1)
					{
						SendClientMessage(playerid, -1, "{ffffff} Jûsø darbo direktorius paliko ðià þinutæ:");
						format(String, sizeof(String), "{FFAF00}%s", ZinutesZin);
						SendClientMessage(playerid, -1, String);
					}

					SetTimerEx("GaunamIskvietima", 60000 * 1 + random(2), true, "d", playerid);
				}
				case 3:
				{
					new uQuerry[200], ArIjungtaZin, ZinutesZin;
					mysql_query("SELECT * FROM `dzinutes` WHERE `KokioDarboZinute` = 'Kurj'");
					mysql_store_result();
					mysql_retrieve_row();
					mysql_fetch_field_row(uQuerry, "ArIjungtaZinute"); ArIjungtaZin = strval(uQuerry);
					mysql_fetch_field_row(uQuerry, "ZinutesTekstas"); ZinutesZin = strlen(uQuerry);
					if(ArIjungtaZin == 1)
					{
						SendClientMessage(playerid, -1, "{ffffff} Jûsø darbo direktorius paliko ðià þinutæ:");
						format(String, sizeof(String), "{FFAF00}%s", ZinutesZin);
						SendClientMessage(playerid, -1, String);
					}
				}
				case 4:
				{
					new uQuerry[200], ArIjungtaZin, ZinutesZin;
					mysql_query("SELECT * FROM `dzinutes` WHERE `KokioDarboZinute` = 'Mechanika'");
					mysql_store_result();
					mysql_retrieve_row();
					mysql_fetch_field_row(uQuerry, "ArIjungtaZinute"); ArIjungtaZin = strval(uQuerry);
					mysql_fetch_field_row(uQuerry, "ZinutesTekstas"); ZinutesZin = strlen(uQuerry);
					if(ArIjungtaZin == 1)
					{
						SendClientMessage(playerid, -1, "{ffffff} Jûsø darbo direktorius paliko ðià þinutæ:");
						format(String, sizeof(String), "{FFAF00}%s", ZinutesZin);
						SendClientMessage(playerid, -1, String);
					}
				}
				case 5:
		  	    {
		  	        new uQuerry[200], ArIjungtaZin, ZinutesZin;
		  	        mysql_query("SELECT * FROM `dzinutes` WHERE `KokioDarboZinute` = 'Dyleriai'");
		  	        mysql_store_result();
		  	        mysql_retrieve_row();
		  	        mysql_fetch_field_row(uQuerry, "ArIjungtaZinute"); ArIjungtaZin = strval(uQuerry);
					mysql_fetch_field_row(uQuerry, "ZinutesTekstas"); ZinutesZin = strlen(uQuerry);
					if(ArIjungtaZin == 1)
					{
						SendClientMessage(playerid, -1, "{ffffff} Jûsø darbo direktorius paliko ðià þinutæ:");
						format(String, sizeof(String), "{FFAF00}%s", ZinutesZin);
						SendClientMessage(playerid, -1, String);
					}
		  	    }
				case 11:
				{
					new uQuerry[200], ArIjungtaZin, ZinutesZin;
					mysql_query("SELECT * FROM `dzinutes` WHERE `KokioDarboZinute` = 'Furistai'");
					mysql_store_result();
					mysql_retrieve_row();
					mysql_fetch_field_row(uQuerry, "ArIjungtaZinute"); ArIjungtaZin = strval(uQuerry);
					mysql_fetch_field_row(uQuerry, "ZinutesTekstas"); ZinutesZin = strlen(uQuerry);
					if(ArIjungtaZin == 1)
					{
						SendClientMessage(playerid, -1, "{ffffff} Jûsø darbo direktorius paliko ðià þinutæ:");
						format(String, sizeof(String), "{FFAF00}%s", ZinutesZin);
						SendClientMessage(playerid, -1, String);
					}
				}
				case GAISRAI: SetTimerEx("GaunamGaisra", 60000 * 1 + random(2), true, "d", playerid);
			}
		}
	}

	if(Dazasvydis[playerid] != 0)
	{
		SetPlayerHealthEx 	(playerid, 99.0);
		ac_GivePlayerWeapon 		(playerid, 24, 2000);
		ac_GivePlayerWeapon 		(playerid, 29, 2000);
		SetPlayerInterior 	(playerid, 10);
	}

	if(PI[playerid][JustDie] > 0)
	{
		new iRandom = random(sizeof(RandomSpawnToHospital));

	    SetSpawnInfo(playerid, GetPlayerTeam(playerid), 62, RandomSpawnToHospital[iRandom][0], RandomSpawnToHospital[iRandom][1], RandomSpawnToHospital[iRandom][2], RandomSpawnToHospital[iRandom][3], 0, 0, 0, 0, 0, 0);

	    if(PI[playerid][Alkis] < 1.0)
	    {
	    	Sotumas(playerid, 15.0 + randomfloat(20.0));
	    }

	    PI[playerid][HaveTimeUntilDeath] = 30 + random(90);

	    SetTimerEx("UpdatePlayerDeath", 1000, false, "dd", playerid, 30);

		PI[playerid][JustDie] = 1;

		StarPlayerTextDrawUpdate(playerid, 0, 0, 0, 0, 0, USING_LOADING_LOAD);

		if (playerInfo[playerid][1])
		{
	        for(new i, size = GetPlayerPoolSize(); i <= size; i++)
	        {
	            if(!IsPlayerConnected(i) || PI[i][AdminLevel] == LEVEL_NONE) continue;

				if(spectateInfo[i][0] == playerid)
				{
				    SendClientMessage(i, -1, ""COL_ERROR" {ffffff}Stebëjimas sugraþintas!");
					new _player[12];
					format(_player, 12, "%d", playerid);
					pc_cmd_spec(i, _player);

					playerInfo[playerid][1] = false;
				}
			}
		}
	}

	if(PI[playerid][ikalintas])
	{
		MovePlayerToJail(playerid);

		if (playerInfo[playerid][1])
		{
	       	for(new i, size = GetPlayerPoolSize(); i <= size; i++)
	        {
	            if(!IsPlayerConnected(i) || PI[i][AdminLevel] == LEVEL_NONE) continue;

				if(spectateInfo[i][0] == playerid)
				{
				    SendClientMessage(i, -1, ""COL_ERROR" {ffffff}Stebëjimas sugraþintas!");
					new _player[12];
					format(_player, 12, "%d", playerid);
					pc_cmd_spec(i, _player);

					playerInfo[playerid][1] = false;
				}
			}
		}
	}

	if(IsPlayerBanned(playerid)) return 0;

	return 1;
}

stock Sotumas(playerid, Float: sot)
{
	PI[playerid][Alkis] += sot;

	if(PI[playerid][Alkis] > 100.0) PI[playerid][Alkis] = 100.0;

	new Float: Progress = (496.161132 + (PI[playerid][Alkis] * 1.11638916));

	if(HudasPasleptas[playerid] == true)
	{
		PlayerTextDrawTextSize 	(playerid, hudas_p[playerid][0], Progress, 0.000000);
		PlayerTextDrawHide 		(playerid, hudas_p[playerid][0]);
		PlayerTextDrawShow 		(playerid, hudas_p[playerid][0]);
	}

	SetPlayerDrunkLevel(playerid, 0);
}

public OnPlayerDeath(playerid, killerid, reason)
{
	PI[playerid][pHealthCheck] 			= -5;
	AntiF4[playerid] 					= 1;
	NesaPica[playerid] 					= 0;
	PicaCP[playerid] 					= false;
	Spawned[playerid] 					= false;
	PI[playerid][arKaroZonoje] 			= false;
	SelectedCreditHouseID[playerid] = -1;


	ac_ResetPlayerWeapons(playerid, 7);

	if(FS[playerid][Fishing] != 0) StopFishing(playerid);

	KillTimer				(nuomaTimer[playerid]);
	KillTimer				(KraunamMasina[playerid]);
	KillTimer				(IskraunamMasina[playerid]);
	KillTimer				(FuelTimer[playerid]);
	DestroyPlayerProgressBar(playerid, FishingBar[playerid]);		FishingBar[playerid] 	= INVALID_PLAYER_BAR_ID;
	DestroyPlayerProgressBar(playerid, IskasenuBar[playerid]);		IskasenuBar[playerid] 	= INVALID_PLAYER_BAR_ID;
	ExitFromCarShop 		(playerid);

   	for(new s = 0; s < 8; s ++)         TextDrawHideForPlayer(playerid, spidometras_g[s]);
	for(new s = 0; s < 8; s ++)         PlayerTextDrawHide(playerid, spidometras_p[playerid][s]);

    PI[playerid][Dirzas] = false;

    if(TaxiInfo[playerid][imti]) TaxiInfo[playerid][imti] = false;

    if(PI[playerid][DirbaTaksi])
    {
    	new vehicleid = PI[playerid][masina];

    	DestroyObject(TaksiZenklas[playerid]);

		PI[playerid][DirbaTaksi] 	= false;
		ArTaksi[vehicleid]			= false;
    }

    if(killerid == INVALID_PLAYER_ID)
	{
		if(Dazasvydis[playerid] != 0)
		{
			if(GetPlayerInterior(playerid) == 10)
			{
				switch(Dazasvydis[playerid])
				{
					case ZALIAS: 	SetSpawnInfo(playerid, GetPlayerTeam(playerid), ZALIU_SKIN, -2613.5020,2627.5459,-99.0178,269.6237, 0, 0, 0, 0, 0, 0);
					case GELTONAS: 	SetSpawnInfo(playerid, GetPlayerTeam(playerid), GELTONU_SKIN, -2651.4290,2591.8848,-99.0178,88.8287, 0, 0, 0, 0, 0, 0);
				}
			}

			return 1;
		}

	    new iRandom = random(sizeof(RandomSpawnToHospital));

	    SetSpawnInfo(playerid, GetPlayerTeam(playerid), 62, RandomSpawnToHospital[iRandom][0], RandomSpawnToHospital[iRandom][1], RandomSpawnToHospital[iRandom][2], RandomSpawnToHospital[iRandom][3], 0, 0, 0, 0, 0, 0);

	    if(PI[playerid][Alkis] < 1.0)
	    {
	    	Sotumas(playerid, 15.0 + randomfloat(20.0));
	    }

	    PI[playerid][HaveTimeUntilDeath] = 30 + random(90);

	    SetTimerEx("UpdatePlayerDeath", 1000, false, "dd", playerid, 30);

		PI[playerid][JustDie] = 1;

		StarPlayerTextDrawUpdate(playerid, 0, 0, 0, 0, 0, USING_LOADING_LOAD);

		for(new i, size = GetPlayerPoolSize(); i <= size; i++)
        {
            if(!IsPlayerConnected(i) || PI[i][AdminLevel] == LEVEL_NONE) continue;

			if(spectateInfo[i][0] == playerid)
			{
			    SendClientMessage 	(i, -1, ""COL_ERROR" {ffffff}Stebimas þaidëjas mirë! Stebëjimas bus automatiðkai atstatytas keliø sekundþiø bëgyje!");
			    StopSpectating 		(i);

			    spectateInfo[i][0] 		= playerid;
                playerInfo[playerid][1] = true;
			}
        }
	}
	else
	{
		if(Dazasvydis[playerid] != 0)
		{
			if(GetPlayerInterior(playerid) == 10)
			{
				new LabelUpdate[128];

				switch(Dazasvydis[playerid])
				{
					case ZALIAS:
					{
						SetSpawnInfo(playerid, GetPlayerTeam(playerid), ZALIU_SKIN, -2613.5020,2627.5459,-99.0178,269.6237, 0, 0, 0, 0, 0, 0);

						gPointss ++;
					}

					case GELTONAS:
					{
						SetSpawnInfo(playerid, GetPlayerTeam(playerid), GELTONU_SKIN, -2651.4290,2591.8848,-99.0178,88.8287, 0, 0, 0, 0, 0, 0);

						zPoints ++;
					}
				}

				format(LabelUpdate, sizeof(LabelUpdate), "Þaliøjø taðkai: %d", zPoints);
				SetDynamicObjectMaterialText(Zaltaskiai, 0, LabelUpdate, 80, "Ariel", 20, 1, 0xFFFFFFFB, 0x00000000, 1);

				format(LabelUpdate, sizeof(LabelUpdate), "Geltonøjø taðkai: %d", gPointss);
				SetDynamicObjectMaterialText(Geltontaskiai, 0, LabelUpdate, 80, "Ariel", 20, 1, 0xFFFFFFFB, 0x00000000, 1);
			}

			return 1;
		}

		if(!PlayerInZone(playerid, -1701, 863, -1629, 906)) // jeigu ne DM zonoj
		{
			new String[128];

			switch(PI[killerid][specialybe])
			{
				case 1, 5:
				{
					switch(PI[playerid][specialybe])
					{
						case 1, 5:
						{
							new iRandom = random(sizeof(RandomSpawnToHospital));

						    SetSpawnInfo(playerid, GetPlayerTeam(playerid), 62, RandomSpawnToHospital[iRandom][0], RandomSpawnToHospital[iRandom][1], RandomSpawnToHospital[iRandom][2], RandomSpawnToHospital[iRandom][3], 0, 0, 0, 0, 0, 0);

						    if(PI[playerid][Alkis] < 1.0)
						    {
						    	Sotumas(playerid, 15.0 + randomfloat(20.0));
						    }

						    PI[playerid][HaveTimeUntilDeath] = 30 + random(90);

						    SetTimerEx("UpdatePlayerDeath", 1000, false, "dd", playerid, 30);

							PI[playerid][JustDie] = 1;

							StarPlayerTextDrawUpdate(playerid, 0, 0, 0, 0, 0, USING_LOADING_LOAD);

							for(new i, size = GetPlayerPoolSize(); i <= size; i++)
					        {
					            if(!IsPlayerConnected(i) || PI[i][AdminLevel] == LEVEL_NONE) continue;

								if(spectateInfo[i][0] == playerid)
								{
								    SendClientMessage 	(i, -1, ""COL_ERROR" {ffffff}Stebimas þaidëjas mirë! Stebëjimas bus automatiðkai atstatytas keliø sekundþiø bëgyje!");
								    StopSpectating 		(i);

								    spectateInfo[i][0] 		= playerid;
					                playerInfo[playerid][1] = true;
								}
					        }

							return 1;
						}

						default:
						{
							if(PI[playerid][Ieskomas] > 0)
							{
								if(!PlayerInZone(playerid, -1126.9591,-759.0683, -974.1170,-588.6785))
								{
									JailPlayer(playerid, PI[playerid][Ieskomas]);

									for(new i, size = GetPlayerPoolSize(); i <= size; i++)
							        {
							            if(!IsPlayerConnected(i) || PI[i][AdminLevel] == LEVEL_NONE) continue;

										if(spectateInfo[i][0] == playerid)
										{
										    SendClientMessage 	(i, -1, ""COL_ERROR" {ffffff}Stebimas þaidëjas mirë! Stebëjimas bus automatiðkai atstatytas keliø sekundþiø bëgyje!");
										    StopSpectating 		(i);

										    spectateInfo[i][0] 		= playerid;
							                playerInfo[playerid][1] = true;
										}
							        }

									return 1;
								}
							}
						}
					}
				}
			}

			/*if((PI[killerid][specialybe] == 1) && PI[playerid][Ieskomas] > 0)
			{
				if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5)
				{
					if(PI[killerid][uniformd])
					{
						JailPlayer(playerid, PI[playerid][Ieskomas]);

						return 1;
					}
				}
			}*/

			if(PI[killerid][gMember] != -1 && PI[playerid][gMember] != -1)
			{
				GangInfo[PI[killerid][gMember]][gPoints] ++;
				GangInfo[PI[playerid][gMember]][gPoints] --;

				format(String, sizeof(String), "{ffffff} Nuþudëte kitos gaujos nará, jums prisidëjo 1 taðkas. Dabar turite: {FFAF00}%d{ffffff} gaujos taðkø!", GangInfo[PI[killerid][gMember]][gPoints]);
				SendClientMessage(killerid, -1, String);

				format(String, sizeof(String), "{ffffff} Jus nuþudë kitos gaujos narys, jums nuimtas 1 taðkas. Dabar turite: {FFAF00}%d{ffffff} gaujos taðkø!", GangInfo[PI[playerid][gMember]][gPoints]);
				SendClientMessage(playerid, -1, String);

				UpdateGangLabel(PI[killerid][gMember]);
				UpdateGangLabel(PI[playerid][gMember]);

				SaveGang(PI[killerid][gMember]);
				SaveGang(PI[playerid][gMember]);
			}

			if(!PlayerInZone(playerid, -1126.9591,-759.0683, -974.1170,-588.6785) || PlayerInZone(playerid, -1138, -772, -958, -577))
			{
				switch(PI[killerid][specialybe])
				{
					case 1, 5:
					{
						if(!PI[killerid][uniformd])
						{
							GiveStars(killerid, 5 + random(5));
						}
					}

					default:
					{
						GiveStars(killerid, 5 + random(5));
					}
				}
			}

			switch(PI[killerid][AdminLevel])
			{
				case LEVEL_NONE, LEVEL_VIP:
				{
					format(String, sizeof(String), "{ffffff} Jus nuþudë {FFAF00}%s{ffffff}!", GetPlayerNameEx(killerid));
					SendClientMessage(playerid, -1, String);
				}

				default:
				{
					if(PI[killerid][AOD])
					{
						format(String, sizeof(String), "{ffffff} Jus nuþudë administratorius {FFAF00}%s{ffffff} su ájungtu AOD reþimu!", GetPlayerNameEx(killerid));
						SendClientMessage(playerid, -1, String);

						SendClientMessage(playerid, -1, "{ffffff} Jeigu turite nusiskundimø ðio administratoriaus darbu, darykite nuotraukà ir raðykite papeikimà!");
					}
					else
					{
						format(String, sizeof(String), "{ffffff} Jus nuþudë {FFAF00}%s{ffffff}!", GetPlayerNameEx(killerid));
						SendClientMessage(playerid, -1, String);
					}
				}
			}

			format(String, sizeof(String), "{ffffff} Jus nuþudëte {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid));
			SendClientMessage(killerid, -1, String);
		}

		new iRandom = random(sizeof(RandomSpawnToHospital));

	    SetSpawnInfo(playerid, GetPlayerTeam(playerid), 62, RandomSpawnToHospital[iRandom][0], RandomSpawnToHospital[iRandom][1], RandomSpawnToHospital[iRandom][2], RandomSpawnToHospital[iRandom][3], 0, 0, 0, 0, 0, 0);

	    if(PI[playerid][Alkis] < 1.0)
	    {
	    	Sotumas(playerid, 15.0 + randomfloat(20.0));
	    }

	    PI[playerid][HaveTimeUntilDeath] = 30 + random(90);

	    SetTimerEx("UpdatePlayerDeath", 1000, false, "dd", playerid, 30);

		PI[playerid][JustDie] = 1;

		StarPlayerTextDrawUpdate(playerid, 0, 0, 0, 0, 0, USING_LOADING_LOAD);

		for(new i, size = GetPlayerPoolSize(); i <= size; i++)
        {
            if(!IsPlayerConnected(i) || PI[i][AdminLevel] == LEVEL_NONE) continue;

			if(spectateInfo[i][0] == playerid)
			{
			    SendClientMessage 	(i, -1, ""COL_ERROR" {ffffff}Stebimas þaidëjas mirë! Stebëjimas bus automatiðkai atstatytas keliø sekundþiø bëgyje!");
			    StopSpectating 		(i);

			    spectateInfo[i][0] 		= playerid;
                playerInfo[playerid][1] = true;
			}
        }
	}

	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(VehicleInfo[vehicleid][vNupirkta])
	{
		AC_SetVehiclePos 		(vehicleid, VehicleInfo[vehicleid][vLastPos][0], VehicleInfo[vehicleid][vLastPos][1], VehicleInfo[vehicleid][vLastPos][2]);
		AC_SetVehicleZAngle 	(vehicleid, VehicleInfo[vehicleid][vLastPos][3]);
		ChangeVehicleColor 		(vehicleid, VehicleInfo[vehicleid][vColor][0], VehicleInfo[vehicleid][vColor][1]);
		ChangeVehiclePaintjob 	(vehicleid, VehicleInfo[vehicleid][vPaintjob]);

		for(new tune = 0; tune < 13; tune ++)
		{
			if(VehicleInfo[vehicleid][vTune][tune] == 0) continue;

			AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vTune][tune]);
		}

		if(VehicleInfo[vehicleid][vSprogusi])
		{
			SetVehicleVirtualWorld(vehicleid, vehicleid + 1);
		}
		else
		{
			SetVehicleVirtualWorld(vehicleid, 0);
		}

		SetVehicleParamsEx(vehicleid, false, false, false, false, false, false, false);
	}
	else
	{
		if(!IsABike(vehicleid))
		{
			SetVehicleParamsEx(vehicleid, false, false, false, false, false, false, false);
		}
		else
		{
			SetVehicleParamsEx(vehicleid, true, false, false, false, false, false, false);
		}

		VehicleInfo[vehicleid][vDujos]			= false;
		VehicleInfo[vehicleid][vIjungta] 		= false;
		VehicleInfo[vehicleid][vDujuLikutis]	= 0.0;
		VehicleInfo[vehicleid][vDujuBakas]		= 0.0;

		SetVehicleFuelInfo(vehicleid);

		new model = GetVehicleModel(vehicleid);

		if(model == 574)
		{
			VehicleInfo[vehicleid][Vanduo] 		= 30.0;
			VehicleInfo[vehicleid][Pasibaiges] 	= false;
		}

		if(Pizzaboy[0] <= vehicleid <= Pizzaboy[sizeof(Pizzaboy) - 1])
		{
			Pica[vehicleid] = false;
		}

		/*if(vehicleid == KurjeriuMasina[4]) AttachObjectToVehicle(TaksiZenklas[0], KurjeriuMasina[4], 0.019999, -0.070000, 0.934999, -0.000000, 0.000000, -90.000000);
		else if(vehicleid == KurjeriuMasina[5]) AttachObjectToVehicle(TaksiZenklas[1], KurjeriuMasina[5], 0.019999, -0.070000, 0.934999, -0.000000, 0.000000, -90.000000);
		else if(vehicleid == KurjeriuMasina[6]) AttachObjectToVehicle(TaksiZenklas[2], KurjeriuMasina[6], 0.019999, -0.070000, 0.934999, -0.000000, 0.000000, -90.000000);
		else if(vehicleid == KurjeriuMasina[7]) AttachObjectToVehicle(TaksiZenklas[3], KurjeriuMasina[7], 0.019999, -0.070000, 0.934999, -0.000000, 0.000000, -90.000000);*/

		if(ParodosMasina[0] <= vehicleid <= ParodosMasina[sizeof(ParodosMasina) - 1])
		{
			SetVehicleParamsEx		(vehicleid, false, false, false, true, false, false, false);

			/*switch(GetVehicleCategory(vehicleid))
			{
				case BIKES: LinkVehicleToInterior	(vehicleid, 39);
				default: 	LinkVehicleToInterior	(vehicleid, 31);
			}*/
		}

		if(KurjeriuMasina[0] <= vehicleid <= KurjeriuMasina[sizeof(KurjeriuMasina) - 1])
		{
			LinkVehicleToInterior(vehicleid, 48);
		}
		else
		{
			LinkVehicleToInterior(vehicleid, 0);
		}

		if(EventMasinos[0] <= vehicleid <= EventMasinos[sizeof(EventMasinos) - 1])
		{
			SetVehicleParamsEx		(vehicleid, false, false, false, true, false, false, false);
		}

		VehicleInfo[vehicleid][KasPriekaboje] = -1;
		VehicleInfo[vehicleid][KiekPriekaboje] = 0;
	}

	ArTaksi[vehicleid] = false;
	vKrovinys[vehicleid] = -1;
	vKrovinioVerte[vehicleid] = 0;
	vKrovinioAtlygis[vehicleid] = 0;
	vK_Pos[vehicleid][0] = 0.0;
	vK_Pos[vehicleid][1] = 0.0;
	vK_Pos[vehicleid][2] = 0.0;
	ac_VehicleHealth[vehicleid] = 1000.0;
	VehicleInfo[vehicleid][KiekPriekaboje] 	= 0;
	VehicleInfo[vehicleid][KasPriekaboje] 	= -1;

	Delete3DTextLabel(VehicleInfo[vehicleid][t_text]);

	SaveVehicleCurrentPos(vehicleid);

	return 1;
}
public OnVehicleDeath(vehicleid, killerid)
{
	new String[128];

	ArTaksi[vehicleid] = false;
	vKrovinys[vehicleid] = -1;
	vKrovinioVerte[vehicleid] = 0;
	vKrovinioAtlygis[vehicleid] = 0;
	vK_Pos[vehicleid][0] = 0.0;
	vK_Pos[vehicleid][1] = 0.0;
	vK_Pos[vehicleid][2] = 0.0;
	VehicleInfo[vehicleid][KiekPriekaboje] 	= 0;
	VehicleInfo[vehicleid][KasPriekaboje] 	= -1;

	Delete3DTextLabel(VehicleInfo[vehicleid][t_text]);

	if(Pizzaboy[0] <= vehicleid <= Pizzaboy[sizeof(Pizzaboy) - 1])
	{
		Pica[vehicleid] = false;
	}

	for(new i, size = GetPlayerPoolSize(); i <= size; i++)
	{
		new IsLocked[20];

		if(VehicleInfo[vehicleid][vNupirkta] == 1)
		{
			new vOwner = GetPlayeridMid(VehicleInfo[vehicleid][vSavininkas]);

			if(PI[vOwner][Transportas1] == vehicleid)
			{
				VehicleInfo[vehicleid][vSprogusi] = true;

				ac_SetVehicleToRespawn	(vehicleid);
				SavePlayerVehicle1	(vOwner);

				format(String, sizeof(String), "{ffffff} Jûsø transp. priemonë {FFAF00}%s {FFffff}buvo sunaikinta!", VehicleNames[GetVehicleModel(vehicleid) - 400]);
				SendClientMessage(vOwner, -1, String);

				if(killerid != vOwner)
				{
					if(VehicleInfo[vehicleid][vUzraktas]) 	IsLocked = "uþrakinta";
					else  									IsLocked = "atrakinta";

					format(String, sizeof(String), "{ffffff} Sunaikinote þaidëjo {FFAF00}%s {FFffff}transp. priemonæ!", GetPlayerNameEx(vOwner));
					SendClientMessage(killerid, -1, String);

					format(String, sizeof(String), "{ffffff} Galimas kaltininkas: {FFAF00}%s{FFffff}. Transp. priemonë buvo {FFAF00}%s{ffffff}!", GetPlayerNameEx(killerid), IsLocked);
					SendClientMessage(vOwner, -1, String);
				}

				return 1;
			}

			if(PI[vOwner][Transportas2] == vehicleid)
			{
				VehicleInfo[vehicleid][vSprogusi] = true;

				ac_SetVehicleToRespawn	(vehicleid);
				SavePlayerVehicle2	(vOwner);

				format(String, sizeof(String), "{ffffff} Jûsø transp. priemonë {FFAF00}%s {FFffff}buvo sunaikinta!", VehicleNames[GetVehicleModel(vehicleid) - 400]);
				SendClientMessage(vOwner, -1, String);

				if(killerid != vOwner)
				{
					if(VehicleInfo[vehicleid][vUzraktas]) 	IsLocked = "uþrakinta";
					else  									IsLocked = "atrakinta";

					format(String, sizeof(String), "{ffffff} Sunaikinote þaidëjo {FFAF00}%s {FFffff}transp. priemonæ!", GetPlayerNameEx(vOwner));
					SendClientMessage(killerid, -1, String);

					format(String, sizeof(String), "{ffffff} Galimas kaltininkas: {FFAF00}%s{FFffff}. Transp. priemonë buvo {FFAF00}%s{ffffff}!", GetPlayerNameEx(killerid), IsLocked);
					SendClientMessage(vOwner, -1, String);
				}

				return 1;
			}

			if(PI[vOwner][Transportas3] == vehicleid)
			{
				VehicleInfo[vehicleid][vSprogusi] = true;

				ac_SetVehicleToRespawn	(vehicleid);
				SavePlayerVehicle3	(vOwner);

				format(String, sizeof(String), "{ffffff} Jûsø transp. priemonë {FFAF00}%s {FFffff}buvo sunaikinta!", VehicleNames[GetVehicleModel(vehicleid) - 400]);
				SendClientMessage(vOwner, -1, String);

				if(killerid != vOwner)
				{
					if(VehicleInfo[vehicleid][vUzraktas]) 	IsLocked = "uþrakinta";
					else  									IsLocked = "atrakinta";

					format(String, sizeof(String), "{ffffff} Sunaikinote þaidëjo {FFAF00}%s {FFffff}transp. priemonæ!", GetPlayerNameEx(vOwner));
					SendClientMessage(killerid, -1, String);

					format(String, sizeof(String), "{ffffff} Galimas kaltininkas: {FFAF00}%s{FFffff}. Transp. priemonë buvo {FFAF00}%s{ffffff}!", GetPlayerNameEx(killerid), IsLocked);
					SendClientMessage(vOwner, -1, String);
				}

				return 1;
			}
		}
	}

	if(GetVehicleModel(vehicleid) == 519)
	{
		for(new p = 0; p < MAX_PLAYERS; p++)
		{
			if(IsPlayerConnected(p))
			{
				if(PI[p][lektuvas]==vehicleid)
				{
					SetPlayerHealthEx(p,2);
					new Float:lolX, Float:lolY, Float:lolZ, Float:lolA;
					GetVehiclePos(PI[p][lektuvas], lolX, lolY, lolZ);
					GetVehicleZAngle(PI[p][lektuvas], lolA);
					lolX += (5 * floatsin(-floatsub(lolA, 45.0), degrees)),
					lolY += (5 * floatcos(-floatsub(lolA, 45.0), degrees));
					SetPlayerInterior(p, 0);
					AC_SetPlayerPos(p, lolX, lolY, floatsub(lolZ, 0.94));
					SetPlayerFacingAngle(p, lolA);
					SetPlayerVirtualWorld(p,0);
					PI[p][lektuvas]=-1;
				}
			}
		}
	}

	ac_SetVehicleToRespawn(vehicleid);

	VehicleInfo[vehicleid][vRida] = 0.0;
	VehicleInfo[vehicleid][KasPriekaboje] = -1;
	VehicleInfo[vehicleid][KiekPriekaboje] = 0;
	CanCheckVehiclePos[vehicleid] = gettime() + 3;

	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if (playerInfo[playerid][0])
    {
        for(new i, size = GetPlayerPoolSize(); i <= size; i++)
        {
            if(!IsPlayerConnected(i) || PI[i][AdminLevel] == LEVEL_NONE) continue;

            if (spectateInfo[i][0] == playerid)
            {
                SetPlayerInterior(i, GetPlayerInterior(playerid));
                SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
			}
        }
    }

    if(newinteriorid == 17)
    {
    	SetActorPos(Botas[36], 485.3023,-2.2127,1002.3828);
    	SetActorPos(Botas[37], 487.4851,-2.0425,1002.3828);
    	SetActorPos(Botas[38], 489.9552,-2.0078,1002.3828);

    	PreloadActorAnimLib(Botas[36], "STRIP");
		PreloadActorAnimLib(Botas[37], "STRIP");
		PreloadActorAnimLib(Botas[38], "STRIP");

		ApplyActorAnimation(Botas[36], "STRIP", "STR_C2", 4.000000, 1, 1, 1, 1, -1);
		ApplyActorAnimation(Botas[37], "STRIP", "STR_C1", 4.000000, 1, 1, 1, 1, -1);
		ApplyActorAnimation(Botas[38], "STRIP", "STR_B2C", 4.000000, 1, 1, 1, 1, -1);

		PlayAudioStreamForPlayer(playerid, "http://pulseedm.cdnstream1.com:8124/1373_128");
    }

    if(oldinteriorid == 17)
    {
    	StopAudioStreamForPlayer(playerid);
    }

    if(oldinteriorid == 18)
    {
    	switch(PI[playerid][PardSaskaita])
		{
			case 0:
			{

			}

			case 1..100:
			{
				SendClientMessage 	(playerid, -1, "{ffffff} Iðëjote ið parduotuvës nesusimokëjæ uþ prekes. Jums pridëti 5 ieðkomumo lygiai!");
				GiveStars 			(playerid, 5);
			}

			case 101..500:
			{
				SendClientMessage 	(playerid, -1, "{ffffff} Iðëjote ið parduotuvës nesusimokëjæ uþ prekes. Jums pridëta 10 ieðkomumo lygiø!");
				GiveStars 			(playerid, 10);
			}

			case 501..1000:
			{
				SendClientMessage 	(playerid, -1, "{ffffff} Iðëjote ið parduotuvës nesusimokëjæ uþ prekes. Jums pridëti 15 ieðkomumo lygiø!");
				GiveStars 			(playerid, 15);
			}

			case 1001..2000:
			{
				SendClientMessage 	(playerid, -1, "{ffffff} Iðëjote ið parduotuvës nesusimokëjæ uþ prekes. Jums pridëti 25 ieðkomumo lygiai!");
				GiveStars 			(playerid, 25);
			}

			default:
			{
				SendClientMessage 	(playerid, -1, "{ffffff} Iðëjote ið parduotuvës nesusimokëjæ uþ prekes. Jums pridëti 35 ieðkomumo lygiai!");
				GiveStars 			(playerid, 35);
			}
		}

		PI[playerid][PardSaskaita] = 0;
    }

	NeedCheckTuningAB [ playerid ] = 5;

	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(CheckMute(playerid)) return 0;

	new String[156];

	Floodas[playerid] ++;

	SetTimerEx("AtstatomFlooda", 2000, false, "d", playerid);

	if(Floodas[playerid] == 5)
	{
		SendClientMessage(playerid, -1, "{ffffff} Jus buvote iðmestas ið serverio uþ floodinimà!");

		IsmestiZaideja(playerid, 100);
	}
	else if(Floodas[playerid] == 3)
	{
		SendClientMessage(playerid, -1, "{ffffff} Áspëjimas: nefloodinkite, nes bûsite iðmestas ið serverio!");

		return 0;
	}

	if(PI[playerid][TelphoneInUse] != -1 && PI[playerid][TelphoneInUse] != INVALID_PLAYER_ID)
	{
	    if(PI[PI[playerid][TelphoneInUse]][TelphoneInUse] == playerid)
	    {
	        format(String, sizeof(String), "{ffffff} Paðnekovas sako: {FFAF00}%s", text);
	        SendClientMessage(PI[playerid][TelphoneInUse], -1, String);

	        format(String, sizeof(String), "{ffffff} Jus sakote: {FFAF00}%s", text);
	        SendClientMessage(playerid, -1, String);
	    }

	    return 0;
	}

	if(!strcmp(xChars, text, false))
    {
    	switch(xTestBusy)
        {
            case true:
            {
       	 		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}laimëjo reakcijos testà ir gavo {FFAF00}$%s{ffffff}!", GetPlayerNameEx(playerid), konvertuoti_pinigus(xCash));
				SendClientMessageToAll(-1, String);

				GivePlayerMoneyA(playerid, xCash);

				xTestBusy = false;
			}
		}
    }

	if(PI[playerid][AOD])
	{
		format(String, sizeof(String), "{%06x}{FFAF00}[AOD] %s(%d): {ffffff}%s", GetPlayerColor(playerid) >>> 8, GetPlayerNameEx(playerid), playerid, text);
	}
	else
	{
		format(String, sizeof(String), "{%06x}%s(%d): {ffffff}%s", GetPlayerColor(playerid) >>> 8, GetPlayerNameEx(playerid), playerid, text);
	}

	SendDistanceMessage(15.0, playerid, String);

	if(Tazed[playerid]) return 0;

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 0;

	ApplyAnimation(playerid, "PED", "IDLE_chat", 4.1,0, 0, 0, 1, 1);

	SetTimerEx("StabdytiAnim", 1000, false, "i", playerid);

	return 0;
}
 
function xReactionTest()
{
    new
        xLength = 5 + random(5),
        string[128]
    ;

    xCash = 200 + random(300);

    format(xChars, sizeof(xChars), "");
    Loop(x, xLength) format(xChars, sizeof(xChars), "%s%s", xChars, xCharacters[random(sizeof(xCharacters))][0]);

	format(string, sizeof(string), "{ffffff} Pirmas paraðæs {FFAF00}%s {ffffff}laimës {FFAF00}$%s{ffffff}!", xChars, konvertuoti_pinigus(xCash));
	SendClientMessageToAll(-1, string);

	xTestBusy = true;

    return 1;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	printf("[COMMAND]: %s %s %s", GetPlayerNameEx(playerid), cmd, params);

	if(!Prisijunges[playerid]) return 0;

	if(CheckSpam(playerid)) return 0;

	return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(result == -1) SendClientMessage(playerid, -1, "{ffffff} Tokios komandos mûsø serveryje nëra arba ji reikalauja aukðtesnio rango! Jums gali padëti {FFAF00} /komandos{ffffff}.");

	return 1;
}

stock Z_PlayerTextDrawShow(playerid, PlayerText: TextDrawID)
{
    for(new i = 0; i < MAX_TEXTDRAWS_IN_SERVER; i ++)
	{
    	if(TextDrawSlotUse[i] == INVALID_PLAYER_TEXT_DRAW)
    	{
    	    new FinalColor, Red, Green, Blue, Alpha;

	        TextDrawSlotUse[i]                                  = TextDrawID;
	        //TextDrawsSystem[TextDrawSlotUse[i]][TextDrawSlotID] = TextDrawID;

	        //-------------      TextDraw Color      ----
			HexToRGBA        (TextDrawsSystem[TextDrawID][TextDrawSystemColor], Red, Green, Blue, Alpha);
	        FinalColor = RGBA(Red, Green, Blue, 0);

			PlayerTextDrawColor(playerid, TextDrawID, FinalColor);

			//-------------      TextDraw Box Color      ----
			HexToRGBA        (TextDrawsSystem[TextDrawID][TextDrawSystemBoxColor], Red, Green, Blue, Alpha);
	        FinalColor = RGBA(Red, Green, Blue, 0);

			PlayerTextDrawBoxColor(playerid, TextDrawID, FinalColor);

	        PlayerTextDrawShow(playerid, TextDrawID);


	        SetTimerEx("UpdateTextDrawShow", 15, false, "ddddddd", playerid, 1, i, Red, Green, Blue, 0);

	        break;
	    }
	}
}

stock Z_PlayerTextDrawHide(playerid, PlayerText: TextDrawID)
{
	for(new i = 0; i < MAX_TEXTDRAWS_IN_SERVER; i ++)
	{
	    if(TextDrawSlotUse[i] == INVALID_PLAYER_TEXT_DRAW)
    	{
    	    new FinalColor, Red, Green, Blue, Alpha;

	        TextDrawSlotUse[i]                                  = TextDrawID;
	        //TextDrawsSystem[TextDrawSlotUse[i]][TextDrawSlotID] = TextDrawID;

	        //-------------      TextDraw Color      ----
			HexToRGBA          (TextDrawsSystem[TextDrawID][TextDrawSystemColor], Red, Green, Blue, Alpha);
	        FinalColor = RGBA  (Red, Green, Blue, 255);

			PlayerTextDrawColor(playerid, TextDrawID, FinalColor);

			//-------------      TextDraw Box Color      ----
			HexToRGBA             (TextDrawsSystem[TextDrawID][TextDrawSystemBoxColor], Red, Green, Blue, Alpha);
	        FinalColor = RGBA     (Red, Green, Blue, 255);

			PlayerTextDrawBoxColor(playerid, TextDrawID, FinalColor);


	        PlayerTextDrawShow(playerid, TextDrawID);

	        SetTimerEx("UpdateTextDrawShow", 15, false, "ddddddd", playerid, 0, i, Red, Green, Blue, 255);

	        break;
	    }
	}
}

stock StarPlayerTextDrawUpdate(playerid, TextDrawRedColor, TextDrawGreenColor, TextDrawBlueColor, AlphaSet, HiddingTextdraw, TextDrawUsingFor)
{
	if(EnterExitTextdraw[playerid] == INVALID_PLAYER_TEXT_DRAW)
	{
	    new S_TextDrawColor = RGBA(TextDrawRedColor, TextDrawGreenColor, TextDrawBlueColor, AlphaSet);

    	EnterExitTextdraw[playerid] = CreatePlayerTextDraw(playerid, 320.000000, -2.000000, "-");

        PlayerTextDrawBackgroundColor(playerid, EnterExitTextdraw[playerid], S_TextDrawColor);
		PlayerTextDrawColor          (playerid, EnterExitTextdraw[playerid], S_TextDrawColor);
		PlayerTextDrawBoxColor       (playerid, EnterExitTextdraw[playerid], S_TextDrawColor);
		PlayerTextDrawAlignment      (playerid, EnterExitTextdraw[playerid], 2);
		PlayerTextDrawFont           (playerid, EnterExitTextdraw[playerid], 1);
		PlayerTextDrawLetterSize     (playerid, EnterExitTextdraw[playerid], 0.500000, 54.500000);
		PlayerTextDrawSetOutline     (playerid, EnterExitTextdraw[playerid], 0);
		PlayerTextDrawSetProportional(playerid, EnterExitTextdraw[playerid], 1);
		PlayerTextDrawSetShadow      (playerid, EnterExitTextdraw[playerid], 1);
		PlayerTextDrawUseBox         (playerid, EnterExitTextdraw[playerid], 1);
		PlayerTextDrawTextSize       (playerid, EnterExitTextdraw[playerid], 4.000000, 698.000000);

		PlayerTextDrawShow(playerid, EnterExitTextdraw[playerid]);
	}

	UpdatePlayerTextDrawAlpha(playerid, TextDrawRedColor, TextDrawGreenColor, TextDrawBlueColor, AlphaSet, HiddingTextdraw, TextDrawUsingFor);

	return 1;
}

stock RGBA(Red, Green, Blue, Alpha)
{
	return (Red * 16777216) + (Green * 65536) + (Blue * 256) + Alpha;
}

stock HexToRGBA(Color, &Red, &Green, &Blue, &Alpha) //- By Betamaster
{
    Red   = (Color >> 24) & 0xFF;
    Green = (Color >> 16) & 0xFF;
    Blue  = (Color >> 8)  & 0xFF;
    Alpha =  Color        & 0xFF;
}

stock Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
        x1 -= x2;
        y1 -= y2;
        z1 -= z2;
        return floatsqroot((x1 * x1) + (y1 * y1) + (z1 * z1));
}

stock SendDistanceMessage(Float: radius, playerid, message[])
{
	new Float: X, Float: Y, Float: Z;

	GetPlayerPos(playerid, X, Y, Z);

	for(new i, size = GetPlayerPoolSize(); i <= size; i++)
	{
		if(IsPlayerInRangeOfPoint(i, radius, X, Y, Z))
		{
			SendClientMessage(i, -1, message);
		}
	}

	return 1;
}

stock PreloadActorAnimLib(actorid, animlib[]) { return ApplyActorAnimation(actorid, animlib, "null", 0.0, 0, 0, 0, 0, 0); }  



stock ClearAnims(playerid)
{
	ApplyAnimation(playerid, "SWORD", "null", 0.0, 0, 0, 0, 0, 0);
	PreloadAnimLib(playerid, "BOMBER");
	PreloadAnimLib(playerid, "RAPPING");
	PreloadAnimLib(playerid, "SHOP");
	PreloadAnimLib(playerid, "BEACH");
	PreloadAnimLib(playerid, "SMOKING");
	PreloadAnimLib(playerid, "FOOD");
	PreloadAnimLib(playerid, "ON_LOOKERS");
	PreloadAnimLib(playerid, "DEALER");
	PreloadAnimLib(playerid, "CRACK");
	PreloadAnimLib(playerid, "CARRY");
	PreloadAnimLib(playerid, "COP_AMBIENT");
	PreloadAnimLib(playerid, "PARK");
	PreloadAnimLib(playerid, "INT_HOUSE");
	PreloadAnimLib(playerid, "PED");
	PreloadAnimLib(playerid, "MISC");
	PreloadAnimLib(playerid, "OTB");
	PreloadAnimLib(playerid, "BD_Fire");
	PreloadAnimLib(playerid, "BENCHPRESS");
	PreloadAnimLib(playerid, "KISSING");
	PreloadAnimLib(playerid, "BSKTBALL");
	PreloadAnimLib(playerid, "MEDIC");
	PreloadAnimLib(playerid, "SWORD");
	PreloadAnimLib(playerid, "POLICE");
	PreloadAnimLib(playerid, "SUNBATHE");
	PreloadAnimLib(playerid, "FAT");
	PreloadAnimLib(playerid, "WUZI");
	PreloadAnimLib(playerid, "SWEET");
	PreloadAnimLib(playerid, "ROB_BANK");
	PreloadAnimLib(playerid, "GANGS");
	PreloadAnimLib(playerid, "RIOT");
	PreloadAnimLib(playerid, "GYMNASIUM");
	PreloadAnimLib(playerid, "CAR");
	PreloadAnimLib(playerid, "CAR_CHAT");
	PreloadAnimLib(playerid, "GRAVEYARD");
	PreloadAnimLib(playerid, "POOL");
	ClearAnimations(playerid);
}

stock CreatePlayerMapIcons(playerid)
{
	SetPlayerMapIcon(playerid, 1, -2766.2805,375.5397,6.3347, 52, 0, MAPICON_LOCAL); // Bankas ++
	SetPlayerMapIcon(playerid, 2, -2652.7051,639.9321,14.4529, 22, 0, MAPICON_LOCAL); // Ligoninë ++
	SetPlayerMapIcon(playerid, 3, -1721.1998,1359.7131,7.1853, 29, 0, MAPICON_LOCAL); // The Well Stacked Pizza ++
	SetPlayerMapIcon(playerid, 4, -2242.4773,-88.1821,35.3203, 49, 0, MAPICON_LOCAL); // Baras ++
	SetPlayerMapIcon(playerid, 5, -1570.7706,690.1061,7.1797, 30, 0, MAPICON_LOCAL); // Policija ++
	SetPlayerMapIcon(playerid, 6, -1967.3547,438.3632,35.1709, 45, 0, MAPICON_LOCAL); // Drabuþiø parduotuvë ++
	SetPlayerMapIcon(playerid, 7, -2625.9045,208.2361,4.8125, 18, 0, MAPICON_LOCAL); // Ginklø parduotuvë ++
	SetPlayerMapIcon(playerid, 8, -2270.1648,-155.9468,35.3203, 54, 0, MAPICON_LOCAL); // Bokso salë ++
	SetPlayerMapIcon(playerid, 9, -1961.1240,191.7309,27.6940, 47, 0, MAPICON_LOCAL); // Elektronikos parduotuvë
	SetPlayerMapIcon(playerid, 10, -2031.6600,-99.4903,35.2940, 36, 0, MAPICON_LOCAL); // Vairavimo mokykla ++
	SetPlayerMapIcon(playerid, 11, -2412.9097,1447.5670,8.3738, 9, 0, MAPICON_LOCAL); // Þvejybvietë ++
	SetPlayerMapIcon(playerid, 12, -1956.2773,300.2258,35.4687, 55, 0, MAPICON_LOCAL); // Transp. priemoniø salonas ++
	SetPlayerMapIcon(playerid, 13, -2524.2893,1216.1974,37.5964, 49, 0, MAPICON_LOCAL); // Baras ++
	SetPlayerMapIcon(playerid, 14, -2486.9312,369.0085,35.1212, 55, 0, MAPICON_LOCAL); // Transp. priemoniø turgus ++
	//SetPlayerMapIcon(playerid, 15, -2698.5676,-12.0160,4.3281, 27, 0, MAPICON_LOCAL); // Techninës apþiûros centras
	SetPlayerMapIcon(playerid, 16, -2697.8320,-1.8360,4.3281, 27, 0, MAPICON_LOCAL); // Mechanikai ++
	SetPlayerMapIcon(playerid, 17, -1523.3680,483.1744,7.1797, 30, 0, MAPICON_LOCAL); // ARAS ++
	SetPlayerMapIcon(playerid, 18, -2903.5002,441.3209,5.0919, 9, 0, MAPICON_LOCAL); // Laivø parduotuvë ++
	SetPlayerMapIcon(playerid, 19, -1967.5056,453.3782,35.1709, 47, 0, MAPICON_LOCAL); // El. parduotuvë ++
	SetPlayerMapIcon(playerid, 20, -2624.6199, 1412.4114, 7.0938, 48, 0, MAPICON_LOCAL); // Naktinis klubas ++
	SetPlayerMapIcon(playerid, 21, -2343.6960,-84.2480,35.3215, 27, 0, MAPICON_LOCAL); // MetroCity garaþas ++
	SetPlayerMapIcon(playerid, 22, -2426.0303,262.2621,35.1719, 42, 0, MAPICON_LOCAL); // MetroCity turgus ++
	SetPlayerMapIcon(playerid, 23, -2908.5657,672.6467,5.7292, 11, 0, MAPICON_LOCAL); // Metalo kasykla ++
	SetPlayerMapIcon(playerid, 24, -1834.0001,144.7530,15.1172, 20, 0, MAPICON_LOCAL); // Gaisrininkai ++
	SetPlayerMapIcon(playerid, 25, -2684.2119,182.2475,4.3290, 51, 0, MAPICON_LOCAL); // Kurjeriai ++
	SetPlayerMapIcon(playerid, 26, -2127.0735,-79.5948,35.2723, 51, 0, MAPICON_LOCAL); // Fûristai ++
	SetPlayerMapIcon(playerid, 27, -1828.7118,1400.8462,7.1875, 36, 0, MAPICON_LOCAL); // Licenzijø centras ++
	SetPlayerMapIcon(playerid, 28, -1905.2576,443.7498,35.1709, 29, 0, MAPICON_LOCAL); // The Well Stacked Pizza ++
	SetPlayerMapIcon(playerid, 29, -1808.5455,945.7303,24.8906, 29, 0, MAPICON_LOCAL); // The Well Stacked Pizza ++
	SetPlayerMapIcon(playerid, 30, -2355.9619,1008.1473,50.8984, 10, 0, MAPICON_LOCAL); // Burger Shot ++
	SetPlayerMapIcon(playerid, 31, -2336.8367,-166.7432,35.5756, 10, 0, MAPICON_LOCAL); // Burger Shot ++
	SetPlayerMapIcon(playerid, 32, -1912.2773,827.9753,35.2181, 10, 0, MAPICON_LOCAL); // Burger Shot ++
	//SetPlayerMapIcon(playerid, 33, -1972.2321,95.4998,27.6950, 14, 0, MAPICON_LOCAL); // Cluckin Bell ++
	SetPlayerMapIcon(playerid, 34, -2671.5986,258.4459,4.6328, 14, 0, MAPICON_LOCAL); // Cluckin Bell ++
	SetPlayerMapIcon(playerid, 35, -1816.5332,618.3926,35.1719, 14, 0, MAPICON_LOCAL); // Cluckin Bell ++
	SetPlayerMapIcon(playerid, 36, -2255.0740,542.0226,35.3708, 14, 0, MAPICON_LOCAL); // Cluckin Bell ++
	SetPlayerMapIcon(playerid, 37, -2442.6538,755.3444,35.1719, 17, 0, MAPICON_LOCAL); // Maisto parduotuvë ++
	SetPlayerMapIcon(playerid, 38, -1967.3960,421.9390,35.1709, 17, 0, MAPICON_LOCAL); // Maisto parduotuvë ++

	return 1;
}

stock GivePlayerMoneyA(playerid, amount)
{
	//PI[playerid][pCashCheck] = gettime() + 15;

	PI[playerid][pinigai] += amount;

	new Querry[150];

	format(Querry, 150, "UPDATE players SET `MoneyPocket` = '%d' WHERE `Vardas` = '%s'", PI[playerid][pinigai], GetPlayerNameEx(playerid));
	mysql_query(Querry);

	format(Querry, sizeof(Querry),  "~w~$~g~%s", konvertuoti_pinigus(PI[playerid][pinigai]));
	PlayerTextDrawSetString(playerid, hudas_p[playerid][2], Querry);
	//return GivePlayerMoney(playerid, amount);
}

stock SameText(string[], string1[])
{
	if(isnull(string)) return(false);
	if(isnull(string1)) return(false);
	if(!strcmp(string, string1, true)) return (true);
	else return(false);
}

stock RotateObjectEx(objectid, Float: X, Float: Y, Float: Z, Float: RotX, Float: RotY, Float: RotZ, Float: RotSpeed)
{
	if(GateAllreadyRotated[objectid] == 0)
	{
	    GateAllreadyRotated[objectid] = 1;

		return MoveObject(objectid, X, Y, Z + 0.001, RotSpeed, RotX, RotY, RotZ);
	}
	else
	{
	    GateAllreadyRotated[objectid] = 0;

	    return MoveObject(objectid, X, Y, Z - 0.001, RotSpeed, RotX, RotY, RotZ);
	}
}

stock RotateObject(objectid, Float: RotX, Float: RotY, Float: RotZ, Float: RotSpeed)
{
	new Float: ObjectPos[3];

	GetObjectPos(objectid, ObjectPos[0], ObjectPos[1], ObjectPos[2]);

	if(GateAllreadyRotated[objectid] == 0)
	{
	    GateAllreadyRotated[objectid] = 1;

		return MoveObject(objectid, ObjectPos[0], ObjectPos[1], ObjectPos[2] + 0.001, RotSpeed, RotX, RotY, RotZ);
	}
	else
	{
	    GateAllreadyRotated[objectid] = 0;

	    return MoveObject(objectid, ObjectPos[0], ObjectPos[1], ObjectPos[2] - 0.001, RotSpeed, RotX, RotY, RotZ);
	}
}

stock GetWeaponModel(weaponid)
{
	switch(weaponid)
	{
		case 1:      return 331;
		case 2..8:   return weaponid + 331;
		case 9:      return 341;
		case 10..15: return weaponid + 311;
		case 16..18: return weaponid + 326;
		case 22..29: return weaponid + 324;
		case 30, 31: return weaponid + 325;
		case 32:     return 372;
		case 33..45: return weaponid + 324;
		case 46:     return 371;
	}
	return 0;
}

stock ClearBusDriversVariables(playerid)
{
	BusDriversCityBlueberry[playerid]     = false;
	BusDriversCityFortCarson[playerid]    = false;
	BusDriversCityElQuebrados[playerid]   = false;
	BusDriversCityDillimore[playerid]     = false;
	BusDriversCityMontgomery[playerid]    = false;
	BusDriversCityLasPayasdas[playerid]   = false;
	BusDriversCityPalominoCreek[playerid] = false;
	return 1;
}

/*public cD_OnProgressBarEnd(playerid)
{
	if(pDUJU[playerid])
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
		new Float: V_Health; GetVehicleHealth(vehicleid, V_Health);

		if(GetPlayerMoneyA(playerid) < 1000)
		{
			SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
			return 1;
		}

		if(!VehicleInfo[vehicleid][vNupirkta])
		{
			SendClientMessage(playerid, -1, "{ffffff} Ðiai tr. priemonei dujø árangos ámontuoti negalite!");
			return 1;
		}

		new vOwner = GetPlayeridMid(VehicleInfo[vehicleid][vSavininkas]);

		if(VehicleInfo[vehicleid][vDujos])
		{
			SendClientMessage(playerid, -1, "{ffffff} Ðiai tr. priemonei dujø áranga jau ámontuota!");
			return 1;
		}

		if(VehicleInfo[vehicleid][vKuroTipas] == DYZELIS)
		{
			SendClientMessage(playerid, -1, "{ffffff} Dyzeliniams varikliams dujø árangos ámontuoti negalima!");
			return 1;
		}
						
		if(IsAMoto(vehicleid))
		{
			SendClientMessage(playerid, -1, "{ffffff} Ðiai tr. priemonei dujø árangos ámontuoti negalite!");
			return 1;
		}

		VehicleInfo[vehicleid][vDujos] 			= true;
		VehicleInfo[vehicleid][vDujuBakas]		= 50.0 + randomfloat(100.0);
		VehicleInfo[vehicleid][vDujuLikutis] 	= 0.0;

		GivePlayerMoneyA 	(playerid, -1000);
		SendClientMessage 	(playerid, -1, "{ffffff} Dujø áranga sëkmingai ámontuota á tr. priemonæ!");
		SavePlayerVehicle1 	(vOwner);
		SavePlayerVehicle2 	(vOwner);
		SavePlayerVehicle3 	(vOwner);
	    return 1;
	}
	return 1;
}*/

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(PI[playerid][AdminLevel] == LEVEL_OWNER)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			AC_SetVehiclePos(GetPlayerVehicleID(playerid), fX, fY, fZ + 1);
		}
		else
		{
			AC_SetPlayerPos(playerid, fX, fY, fZ + 1);
		}

		SetPlayerInterior    (playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(TaksiMasina[0] <= vehicleid <= TaksiMasina[sizeof(TaksiMasina) - 1] || PI[playerid][DirbaTaksi])
		{
			new TaxiDriver = GetDriver(vehicleid);

			if(TaxiDriver == INVALID_PLAYER_ID) return 1;

			DisableAllPlayerCheckpoints	(TaxiDriver);
			SetPlayerCheckpointEx 		(TaxiDriver, 7, fX, fY, fZ, 2);
			SendClientMessage 			(TaxiDriver, -1, "{ffffff} Þaidëjas vietà nurodë þemëlapyje, ji paþymëta raudonu checkpointu!");
			SendClientMessage 			(playerid, -1, "{ffffff} Sëkmingai paþymëjote vietà!");
		}
	}

	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(clickedid == kliutis_g[3])
	{
	    if(PI[playerid][PadejesKliuti] == true) return SendClientMessage(playerid, -1, "{ffffff} Tu jau esi padëjæs kliûtá");
	    
	    new Float:gPos[4], Str[256];

		GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);
		GetPlayerFacingAngle(playerid, gPos[3]);
	    PI[playerid][PadejesKliuti] = true;

		GameTextForPlayer(playerid, "~g~KLIUTIS SUKURTA", 3000, 3);
		    
  		for(new s = 0; s < 1; s ++) PlayerTextDrawHide(playerid, kliutis_p[playerid][s]);
		for(new s = 0; s < 7; s ++)	TextDrawHideForPlayer(playerid, kliutis_g[s]);
		CancelSelectTextDraw(playerid);

		format(Str, sizeof(Str), "{33cc66} TEISËSAUGA {FFFFFF}\nKliûtá padëjo {33cc66}%s{FFFFFF} ({ffcc00}%s{FFFFFF})", GetPlayerNameEx(playerid), GetDateEx());

		PI[playerid][KliutisTekstas] = Create3DTextLabel(Str, -1, gPos[0], gPos[1], gPos[2], 20.0, GetPlayerVirtualWorld(playerid), 0);
  		PI[playerid][KliutisObject] = CreateDynamicObject(978, gPos[0], gPos[1], gPos[2], 0, 0, gPos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	    return 1;
	}
	
	if(clickedid == kliutis_g[4])
	{
	    if(PI[playerid][PadejesKliuti] == true) return SendClientMessage(playerid, -1, "{ffffff} Tu jau esi padëjæs kliûtá");

     new Float:gPos[4], Str[256];

		GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);
		GetPlayerFacingAngle(playerid, gPos[3]);
	    PI[playerid][PadejesKliuti] = true;

		GameTextForPlayer(playerid, "~g~KLIUTIS SUKURTA", 3000, 3);

  		for(new s = 0; s < 1; s ++) PlayerTextDrawHide(playerid, kliutis_p[playerid][s]);
		for(new s = 0; s < 7; s ++)	TextDrawHideForPlayer(playerid, kliutis_g[s]);
		CancelSelectTextDraw(playerid);

		format(Str, sizeof(Str), "{33cc66} TEISËSAUGA {FFFFFF}\nKliûtá padëjo {33cc66}%s{FFFFFF} ({ffcc00}%s{FFFFFF})", GetPlayerNameEx(playerid), GetDateEx());

		PI[playerid][KliutisTekstas] = Create3DTextLabel(Str, -1, gPos[0], gPos[1], gPos[2], 20.0, GetPlayerVirtualWorld(playerid), 0);
  		PI[playerid][KliutisObject] = CreateDynamicObject(1237, gPos[0], gPos[1], gPos[2], 0, 0, gPos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	    return 1;
	}
	
	if(clickedid == kliutis_g[5])
	{
	    if(PI[playerid][PadejesKliuti] == true) return SendClientMessage(playerid, -1, "{ffffff} Tu jau esi padëjæs kliûtá");

	    new Float:gPos[4], Str[256];

  		GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);
		GetPlayerFacingAngle(playerid, gPos[3]);
	    PI[playerid][PadejesKliuti] = true;

		GameTextForPlayer(playerid, "~g~KLIUTIS SUKURTA", 3000, 3);

  		for(new s = 0; s < 1; s ++) PlayerTextDrawHide(playerid, kliutis_p[playerid][s]);
		for(new s = 0; s < 7; s ++)	TextDrawHideForPlayer(playerid, kliutis_g[s]);
		CancelSelectTextDraw(playerid);

		format(Str, sizeof(Str), "{33cc66} TEISËSAUGA {FFFFFF}\nKliûtá padëjo {33cc66}%s{FFFFFF} ({ffcc00}%s{FFFFFF})", GetPlayerNameEx(playerid), GetDateEx());

		PI[playerid][KliutisTekstas] = Create3DTextLabel(Str, -1, gPos[0], gPos[1], gPos[2], 20.0, GetPlayerVirtualWorld(playerid), 0);
  		PI[playerid][KliutisObject] = CreateDynamicObject(1422, gPos[0], gPos[1], gPos[2], 0, 0, gPos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	    return 1;
	}
	
	if(clickedid == kliutis_g[6])
	{
	    if(PI[playerid][PadejesKliuti] == true) return SendClientMessage(playerid, -1, "{ffffff} Tu jau esi padëjæs kliûtá");

	    new Float:gPos[4], Str[256];

		GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);
		GetPlayerFacingAngle(playerid, gPos[3]);
	    PI[playerid][PadejesKliuti] = true;

		GameTextForPlayer(playerid, "~g~KLIUTIS SUKURTA", 3000, 3);

  		for(new s = 0; s < 1; s ++) PlayerTextDrawHide(playerid, kliutis_p[playerid][s]);
		for(new s = 0; s < 7; s ++)	TextDrawHideForPlayer(playerid, kliutis_g[s]);
		CancelSelectTextDraw(playerid);

		format(Str, sizeof(Str), "{33cc66} TEISËSAUGA {FFFFFF}\nKliûtá padëjo {33cc66}%s{FFFFFF} ({ffcc00}%s{FFFFFF})", GetPlayerNameEx(playerid), GetDateEx());

		PI[playerid][KliutisTekstas] = Create3DTextLabel(Str, -1, gPos[0], gPos[1], gPos[2], 20.0, GetPlayerVirtualWorld(playerid), 0);
  		PI[playerid][KliutisObject] = CreateDynamicObject(1424, gPos[0], gPos[1], gPos[2], 0, 0, gPos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	    return 1;
	}
	
	if(clickedid == login_register_g[6]) // Prisijungti
	{
		new lQuery[86];

		format(lQuery, sizeof(lQuery), "SELECT * FROM `players` WHERE `Vardas` = '%s'", GetPlayerNameEx(playerid));
		mysql_query(lQuery);

		mysql_store_result();

		if(mysql_num_rows())
		{
			PrisijungimoLangas(playerid);
		}
		else
		{
			return SendClientMessage(playerid, -1, "{ffffff} Jûsø vardo duomenø bazëje neradome, todël spauskite Registruotis!");
		}

		mysql_free_result();

		return 1;
	}

	if(clickedid == login_register_g[7]) // Registruotis
	{
		new lQuery[86];

		format(lQuery, sizeof(lQuery), "SELECT * FROM `players` WHERE `Vardas` = '%s'", GetPlayerNameEx(playerid));
		mysql_query(lQuery);

		mysql_store_result();

		if(mysql_num_rows())
		{
			return SendClientMessage(playerid, -1, "{ffffff} Jûsø vardas uþregistruotas mûsø duomenø bazëje, todël spauskite Prisijungti!");
		}
		else
		{
			RegistracijosLangas(playerid);
		}

		mysql_free_result();

		return 1;
	}

	if(clickedid == transporto_salonas_g[13])
	{
		new String[128];
		if(PI[playerid][PasirinktaMasina] != -1)
        {
        	if(PI[playerid][Transportas1] != -1 && PI[playerid][Transportas2] != -1)
        	{
        		if(!PI[playerid][TransportoSlotas])
		        {
        			SendClientMessage	(playerid, -1, "{ffffff} Treèio transporto slotà galite ásigyti paraðæ /paslaugos!");
		        	ExitFromCarShop		(playerid);

		        	return 1;
		        }
		        else
		        {
		        	if(PI[playerid][Transportas3] != -1)
		        	{
		        		SendClientMessage	(playerid, -1, "{ffffff} Jus jau turite 3 transp. priemones!");
		        		ExitFromCarShop		(playerid);

		        		return 1;
		        	}
		        }
        	}

        	new Masina = PI[playerid][PasirinktaMasina], MasinosKaina;

        	switch(PI[playerid][KaPerka])
        	{
        		case 0: return 0;
        		case 1: MasinosKaina = SportinesMasinos[Masina][1];
        		case 2: MasinosKaina = Motociklai[Masina][1];
        		case 3: MasinosKaina = Laivai[Masina][1];
        	}

   	        if(GetPlayerMoneyA(playerid) < MasinosKaina) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

   	        //format(String, sizeof(String), "{ffffff} Nusipirkote {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff}. Transporto valdymas: {ffffff}/transportas{ffffff}.", VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina));
   	        //SendClientMessage(playerid, -1, String);

   	        format(String, sizeof(String), "{ffffff} Nusipirkote {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff}!", VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina));
	   	    SendClientMessage(playerid, -1, String);

	   	    SendClientMessage(playerid, -1, "{ffffff} Transporto valdymas: {FFAF00} /transportas{ffffff}.");

   	        new Colors[2];

   	        Colors[0] = random(126);
   	        Colors[1] = random(126);

   	        if(PI[playerid][Transportas1] == -1)
   	        {
   	        	switch(PI[playerid][KaPerka])
	        	{
	        		case 0: return 0;

	        		case 1:
	        		{
	        			new iRandom = random(sizeof(RandomSalonoSpawn));

	        			PI[playerid][Transportas1] = AC_CreateVehicle(SportinesMasinos[Masina][0], RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}

	        		case 2:
	        		{
	        			new iRandom = random(sizeof(RandomMotocikluSpawn));

	        			PI[playerid][Transportas1] = AC_CreateVehicle(Motociklai[Masina][0], RandomMotocikluSpawn[iRandom][0], RandomMotocikluSpawn[iRandom][1], RandomMotocikluSpawn[iRandom][2], RandomMotocikluSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}

	        		case 3:
	        		{
	        			new iRandom = random(sizeof(RandomLaivuSpawn));

	        			PI[playerid][Transportas1] = AC_CreateVehicle(Laivai[Masina][0], RandomLaivuSpawn[iRandom][0], RandomLaivuSpawn[iRandom][1], RandomLaivuSpawn[iRandom][2], RandomLaivuSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}
	        	}

   	        	new vehicleid = PI[playerid][Transportas1];

   	        	ac_SetVehicleToRespawn(vehicleid);

   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
				format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
				format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

				for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

				VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
				VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
				VehicleInfo[vehicleid][vPaintjob] 	= -1;
				VehicleInfo[vehicleid][vUzraktas] 	= true;
				VehicleInfo[vehicleid][vNupirkta] 	= true;
				VehicleInfo[vehicleid][vRida] 		= 0.0;
				VehicleInfo[vehicleid][vSprogusi]  	= false;
				VehicleInfo[vehicleid][vDujos]		= false;
				VehicleInfo[vehicleid][vIjungta]	= false;
				VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
				VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
				VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
				VehicleInfo[vehicleid][vKaina]		= MasinosKaina;
				VehicleInfo[vehicleid][vTA]			= 0;

				for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
				{
					VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
					VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
				}

				SetVehicleFuelInfo(vehicleid);

				SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
				SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

				SavePlayerVehicle1(playerid);

   	        	GivePlayerMoneyA(playerid, -MasinosKaina);
   	        	ExitFromCarShop	(playerid);

   	        	switch(PI[playerid][KaPerka])
	        	{
	        		case 0: return 0;

	        		case 1, 2:
	        		{
	        			if(PropertyInfo[TR_SALONAS][pBuyed])
						{
							PropertyInfo[TR_SALONAS][pProfit] += floatround(MasinosKaina / 300);
						}
					}

	        		case 3:
	        		{
	        			if(PropertyInfo[LAIVU_SALONAS][pBuyed])
						{
							PropertyInfo[LAIVU_SALONAS][pProfit] += floatround(MasinosKaina / 300);
						}
					}
	        	}

   	        	return 1;
   	        }

   	        if(PI[playerid][Transportas2] == -1)
   	        {
   	        	switch(PI[playerid][KaPerka])
	        	{
	        		case 0: return 0;

	        		case 1:
	        		{
	        			new iRandom = random(sizeof(RandomSalonoSpawn));

	        			PI[playerid][Transportas2] = AC_CreateVehicle(SportinesMasinos[Masina][0], RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}

	        		case 2:
	        		{
	        			new iRandom = random(sizeof(RandomMotocikluSpawn));

	        			PI[playerid][Transportas2] = AC_CreateVehicle(Motociklai[Masina][0], RandomMotocikluSpawn[iRandom][0], RandomMotocikluSpawn[iRandom][1], RandomMotocikluSpawn[iRandom][2], RandomMotocikluSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}

	        		case 3:
	        		{
	        			new iRandom = random(sizeof(RandomLaivuSpawn));

	        			PI[playerid][Transportas2] = AC_CreateVehicle(Laivai[Masina][0], RandomLaivuSpawn[iRandom][0], RandomLaivuSpawn[iRandom][1], RandomLaivuSpawn[iRandom][2], RandomLaivuSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}
	        	}

   	        	new vehicleid = PI[playerid][Transportas2];

   	        	ac_SetVehicleToRespawn(vehicleid);

   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
				format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
				format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

				for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

				VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
				VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
				VehicleInfo[vehicleid][vPaintjob] 	= -1;
				VehicleInfo[vehicleid][vUzraktas] 	= true;
				VehicleInfo[vehicleid][vNupirkta] 	= true;
				VehicleInfo[vehicleid][vRida] 		= 0.0;
				VehicleInfo[vehicleid][vSprogusi]  	= false;
				VehicleInfo[vehicleid][vDujos]		= false;
				VehicleInfo[vehicleid][vIjungta]	= false;
				VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
				VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
				VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
				VehicleInfo[vehicleid][vKaina]		= MasinosKaina;
				VehicleInfo[vehicleid][vTA]			= 0;

				for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
				{
					VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
					VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
				}

				SetVehicleFuelInfo(vehicleid);

				SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
				SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

				SavePlayerVehicle2(playerid);

   	        	GivePlayerMoneyA 		(playerid, -MasinosKaina);
   	        	ExitFromCarShop	(playerid);

   	        	switch(PI[playerid][KaPerka])
	        	{
	        		case 0: return 0;

	        		case 1, 2:
	        		{
	        			if(PropertyInfo[TR_SALONAS][pBuyed])
						{
							PropertyInfo[TR_SALONAS][pProfit] += floatround(MasinosKaina / 300);
						}
					}

	        		case 3:
	        		{
	        			if(PropertyInfo[LAIVU_SALONAS][pBuyed])
						{
							PropertyInfo[LAIVU_SALONAS][pProfit] += floatround(MasinosKaina / 300);
						}
					}
	        	}

   	        	return 1;
   	        }

   	        if(PI[playerid][Transportas3] == -1)
   	        {
   	        	switch(PI[playerid][KaPerka])
	        	{
	        		case 0: return 0;

	        		case 1:
	        		{
	        			new iRandom = random(sizeof(RandomSalonoSpawn));

	        			PI[playerid][Transportas3] = AC_CreateVehicle(SportinesMasinos[Masina][0], RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}

	        		case 2:
	        		{
	        			new iRandom = random(sizeof(RandomMotocikluSpawn));

	        			PI[playerid][Transportas3] = AC_CreateVehicle(Motociklai[Masina][0], RandomMotocikluSpawn[iRandom][0], RandomMotocikluSpawn[iRandom][1], RandomMotocikluSpawn[iRandom][2], RandomMotocikluSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}

	        		case 3:
	        		{
	        			new iRandom = random(sizeof(RandomLaivuSpawn));

	        			PI[playerid][Transportas3] = AC_CreateVehicle(Laivai[Masina][0], RandomLaivuSpawn[iRandom][0], RandomLaivuSpawn[iRandom][1], RandomLaivuSpawn[iRandom][2], RandomLaivuSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}
	        	}

   	        	new vehicleid = PI[playerid][Transportas3];

   	        	ac_SetVehicleToRespawn(vehicleid);

   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
				format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
				format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

				for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

				VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
				VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
				VehicleInfo[vehicleid][vPaintjob] 	= -1;
				VehicleInfo[vehicleid][vUzraktas] 	= true;
				VehicleInfo[vehicleid][vNupirkta] 	= true;
				VehicleInfo[vehicleid][vRida] 		= 0.0;
				VehicleInfo[vehicleid][vSprogusi]  	= false;
				VehicleInfo[vehicleid][vDujos]		= false;
				VehicleInfo[vehicleid][vIjungta]	= false;
				VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
				VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
				VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
				VehicleInfo[vehicleid][vKaina]		= MasinosKaina;
				VehicleInfo[vehicleid][vTA]			= 0;

				for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
				{
					VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
					VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
				}

				SetVehicleFuelInfo(vehicleid);

				SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
				SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

				SavePlayerVehicle3(playerid);

   	        	GivePlayerMoneyA 		(playerid, -MasinosKaina);
   	        	ExitFromCarShop	(playerid);

   	        	switch(PI[playerid][KaPerka])
	        	{
	        		case 0: return 0;

	        		case 1, 2:
	        		{
	        			if(PropertyInfo[TR_SALONAS][pBuyed])
						{
							PropertyInfo[TR_SALONAS][pProfit] += floatround(MasinosKaina / 300);
						}
					}

	        		case 3:
	        		{
	        			if(PropertyInfo[LAIVU_SALONAS][pBuyed])
						{
							PropertyInfo[LAIVU_SALONAS][pProfit] += floatround(MasinosKaina / 300);
						}
					}
	        	}

   	        	return 1;
   	        }
        }

		return 1;
	}

	if(clickedid == Text:INVALID_TEXT_DRAW)
	{
		if(Logged[playerid] == false)
		{
			ShowLoginTextdraws(playerid);

			return 1;
		}

		if(PI[playerid][PasirinktaMasina] != -1)
		{
			ExitFromCarShop(playerid);

			return 1;
		}

		if(PI[playerid][Login] != 1)
		{
			ShowGenderTextdraws(playerid);

			return 1;
		}

		if(FS[playerid][Fishing] == 1)
		{
			StopFishing 		(playerid);
			HideFishingTextDraws(playerid);

			return 1;
		}
	}

	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(playertextid == zvejybos_td_p[playerid][GELTONAS_MYGTUKAS])
	{
		if(FS[playerid][FishingProgress] < 100.0)
		{
			if(FS[playerid][FishingColor] == GELTONAS_MYGTUKAS)
			{
				FS[playerid][FishingProgress] += 10.0 + randomfloat(10.0);
			}
			else
			{
				FS[playerid][FishingProgress] -= 3.0 + randomfloat(2.0);

				SendClientMessage(playerid, -1, "{ffffff} Neteisingai!");
			}

			ApplyAnimation 	(playerid, "SWORD", "sword_block", 4.1, 0, 1, 1, 1, 1, 1);
			UpdateFishingBar(playerid);
			SetRandomColor 	(playerid);
		}

		return 1;
	}

	if(playertextid == zvejybos_td_p[playerid][MELYNAS_MYGTUKAS])
	{
		if(FS[playerid][FishingProgress] < 100.0)
		{
			if(FS[playerid][FishingColor] == MELYNAS_MYGTUKAS)
			{
				FS[playerid][FishingProgress] += 10.0 + randomfloat(10.0);
			}
			else
			{
				FS[playerid][FishingProgress] -= 3.0 + randomfloat(2.0);

				SendClientMessage(playerid, -1, "{ffffff} Neteisingai!");
			}

			ApplyAnimation 	(playerid, "SWORD", "sword_block", 4.1, 0, 1, 1, 1, 1, 1);
			UpdateFishingBar(playerid);
			SetRandomColor 	(playerid);
		}

		return 1;
	}

	if(playertextid == zvejybos_td_p[playerid][ZALIAS_MYGTUKAS])
	{
		if(FS[playerid][FishingProgress] < 100.0)
		{
			if(FS[playerid][FishingColor] == ZALIAS_MYGTUKAS)
			{
				FS[playerid][FishingProgress] += 10.0 + randomfloat(10.0);
			}
			else
			{
				FS[playerid][FishingProgress] -= 3.0 + randomfloat(2.0);

				SendClientMessage(playerid, -1, "{ffffff} Neteisingai!");
			}

			ApplyAnimation 	(playerid, "SWORD", "sword_block", 4.1, 0, 1, 1, 1, 1, 1);
			UpdateFishingBar(playerid);
			SetRandomColor 	(playerid);
		}

		return 1;
	}

	if(playertextid == zvejybos_td_p[playerid][RAUDONAS_MYGTUKAS])
	{
		if(FS[playerid][FishingProgress] < 100.0)
		{
			if(FS[playerid][FishingColor] == RAUDONAS_MYGTUKAS)
			{
				FS[playerid][FishingProgress] += 10.0 + randomfloat(10.0);
			}
			else
			{
				FS[playerid][FishingProgress] -= 3.0 + randomfloat(2.0);

				SendClientMessage(playerid, -1, "{ffffff} Neteisingai!");
			}

			ApplyAnimation 	(playerid, "SWORD", "sword_block", 4.1, 0, 1, 1, 1, 1, 1);
			UpdateFishingBar(playerid);
			SetRandomColor 	(playerid);
		}

		return 1;
	}

	if(playertextid == lyties_pasirinkimas_p[playerid][0])
	{
		PI[playerid][lytis] 	= 0;
		PI[playerid][Login]		= 1;
		PI[playerid][authstate] = 1;
		PI[playerid][DeleteAcc] = true;

		TogglePlayerSpectating 	(playerid, 0);
		SetCameraBehindPlayer	(playerid);
		HideGenderTextdraws 	(playerid);
		SpawnPlayer 			(playerid);
		SendClientMessage 		(playerid, -1, "{ffffff} Pasirinkote {FFAF00}vyriðkà {ffffff}lytá!");
		SendClientMessage 		(playerid, -1, "{ffffff} Dabar turësite praeiti www.MetroCity.lt apmokymus ir galësite þaisti!");

		return 1;
	}

	if(playertextid == lyties_pasirinkimas_p[playerid][1])
	{
		PI[playerid][lytis] 	= 1;
		PI[playerid][Login]		= 1;
		PI[playerid][authstate] = 1;
		PI[playerid][DeleteAcc] = true;

		TogglePlayerSpectating 	(playerid, 0);
		SetCameraBehindPlayer	(playerid);
		HideGenderTextdraws 	(playerid);
		SpawnPlayer 			(playerid);
		SendClientMessage 		(playerid, -1, "{ffffff} Pasirinkote {FFAF00}moteriðkà {ffffff}lytá!");
		SendClientMessage 		(playerid, -1, "{ffffff} Dabar turësite praeiti www.MetroCity.lt apmokymus ir galësite þaisti!");

		return 1;
	}

	if(playertextid == kuro_pilimas_p[playerid][2])
	{
		new String[128];
		switch(PI[playerid][PasirinktasKuras])
		{
			case BENZINAS:
			{
				format(String, sizeof(String), "{ffffff} Nutraukëte kuro pilimà. Ápylëte: {FFAF00}%.1f L{ffffff}, ið viso sumokëti reikia: {FFAF00}$%d!", KiekIpyle[playerid], IpyleSuma[playerid] = 3 * floatround(KiekIpyle[playerid]));
				SendClientMessage(playerid, -1, String);

				SendClientMessage(playerid, -1, "{ffffff} Sumokëti uþ kurà galite áëjus á degalinës vidø!");
			}

			case DYZELIS:
			{
				format(String, sizeof(String), "{ffffff} Nutraukëte kuro pilimà. Ápylëte: {FFAF00}%.1f L{ffffff}, ið viso sumokëti reikia: {FFAF00}$%d!", KiekIpyle[playerid], IpyleSuma[playerid] = 2 * floatround(KiekIpyle[playerid]));
				SendClientMessage(playerid, -1, String);

				SendClientMessage(playerid, -1, "{ffffff} Sumokëti uþ kurà galite áëjus á degalinës vidø!");
			}

			case DUJOS:
			{
				format(String, sizeof(String), "{ffffff} Nutraukëte dujø pilimà. Ápylëte: {FFAF00}%.1f L{ffffff}, ið viso sumokëti reikia: {FFAF00}$%d!", KiekIpyle[playerid], IpyleSuma[playerid] = 2 * floatround(KiekIpyle[playerid]));
				SendClientMessage(playerid, -1, String);

				SendClientMessage(playerid, -1, "{ffffff} Sumokëti uþ kurà galite áëjus á degalinës vidø!");
			}
		}

		CancelSelectTextDraw	(playerid);
		KillTimer				(FuelTimer[playerid]);
		TogglePlayerControllable(playerid, true);

		KiekIpyle[playerid] = 0.0;

		for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
		for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

		return 1;
	}

	if(playertextid == transporto_salonas_p[playerid][1])
	{
		new String[128];

		if(PI[playerid][PasirinktaMasina] != -1)
        {
        	//SelectTextDraw(playerid, 0x336633FF);
            new Masina, MasinosKaina;

			switch(PI[playerid][KaPerka])
        	{
        		case 0: return 0;
        		case 1: Masina = sizeof(SportinesMasinos);
        		case 2: Masina = sizeof(Motociklai);
        		case 3: Masina = sizeof(Laivai);
        	}

            PI[playerid][PasirinktaMasina] --;

            if(PI[playerid][PasirinktaMasina] < 0)
            {
                PI[playerid][PasirinktaMasina] = Masina - 1;
            }

        	if(PI[playerid][SukurtaMasina] != -1)
			{
			    if(VehicleInfo[PI[playerid][SukurtaMasina]][vNupirkta] == 2)
			    {
					SetVehicleVirtualWorld	(PI[playerid][SukurtaMasina], 0);
					DestroyVehicle			(PI[playerid][SukurtaMasina]);

					PI[playerid][SukurtaMasina] = -1;
				}
   			}

		    switch(PI[playerid][KaPerka])
        	{
        		case 0: return 0;
        		case 1: MasinosKaina = SportinesMasinos[PI[playerid][PasirinktaMasina]][1], TextDrawSetString(transporto_salonas_g[4], "masinu salonas");
        		case 2: MasinosKaina = Motociklai[PI[playerid][PasirinktaMasina]][1], TextDrawSetString(transporto_salonas_g[4], "motociklu salonas");
        		case 3: MasinosKaina = Laivai[PI[playerid][PasirinktaMasina]][1], TextDrawSetString(transporto_salonas_g[4], "laivu parduotuve");
        	}

        	switch(PI[playerid][KaPerka])
        	{
        		case 0: return 0;

        		case 1:
        		{
        			PI[playerid][SukurtaMasina] = CreateServerVehicle(SportinesMasinos[PI[playerid][PasirinktaMasina]][0], -1945.6490, 271.0439, 35.5445, 120.2910, random(126), random(126), -1);

        			format(String, sizeof(String), "~r~-~w~ Pavadinimas: ~p~%s~r~ -~n~-~w~ kaina:~g~ $%s~r~ -~n~-~w~ numeris:~y~ %d/%d~r~ -",
					VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina), PI[playerid][PasirinktaMasina] + 1, sizeof(SportinesMasinos));
        		}

        		case 2:
        		{
        			PI[playerid][SukurtaMasina] = CreateServerVehicle(Motociklai[PI[playerid][PasirinktaMasina]][0], -1946.1865, 266.0375, 40.5899, 90.0000, random(126), random(126), -1);

        			format(String, sizeof(String), "~r~-~w~ Pavadinimas: ~p~%s~r~ -~n~-~w~ kaina:~g~ $%s~r~ -~n~-~w~ numeris:~y~ %d/%d~r~ -",
					VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina), PI[playerid][PasirinktaMasina] + 1, sizeof(Motociklai));
        		}

        		case 3:
        		{
        			PI[playerid][SukurtaMasina] = CreateServerVehicle(Laivai[PI[playerid][PasirinktaMasina]][0], -2983.6296, 494.5702, 0.1902, 0.0000, random(126), random(126), -1);

        			format(String, sizeof(String), "~r~-~w~ Pavadinimas: ~p~%s~r~ -~n~-~w~ kaina:~g~ $%s~r~ -~n~-~w~ numeris:~y~ %d/%d~r~ -",
					VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina), PI[playerid][PasirinktaMasina] + 1, sizeof(Laivai));
        		}
        	}

			SetVehicleVirtualWorld(PI[playerid][SukurtaMasina], playerid + 1);
			VehicleInfo[PI[playerid][SukurtaMasina]][vNupirkta] = 2;

			PlayerTextDrawSetString(playerid, transporto_salonas_p[playerid][0], String);
		}

		return 1;
	}

	if(playertextid == transporto_salonas_p[playerid][2])
	{
		new String[128];

		if(PI[playerid][PasirinktaMasina] != -1)
        {
        	//SelectTextDraw(playerid, 0x336633FF);
            new Masina, MasinosKaina;

            switch(PI[playerid][KaPerka])
        	{
        		case 0: return 0;
        		case 1: Masina = sizeof(SportinesMasinos);
        		case 2: Masina = sizeof(Motociklai);
        		case 3: Masina = sizeof(Laivai);
        	}

            PI[playerid][PasirinktaMasina] ++;

            if(PI[playerid][PasirinktaMasina] >= Masina)
            {
                PI[playerid][PasirinktaMasina] = 0;
            }

        	if(PI[playerid][SukurtaMasina] != -1)
			{
			    if(VehicleInfo[PI[playerid][SukurtaMasina]][vNupirkta] == 2)
			    {
					SetVehicleVirtualWorld	(PI[playerid][SukurtaMasina], 0);
					DestroyVehicle			(PI[playerid][SukurtaMasina]);

					PI[playerid][SukurtaMasina] = -1;
				}
   			}

   			switch(PI[playerid][KaPerka])
        	{
        		case 0: return 0;
        		case 1: MasinosKaina = SportinesMasinos[PI[playerid][PasirinktaMasina]][1], TextDrawSetString(transporto_salonas_g[4], "masinu salonas");
        		case 2: MasinosKaina = Motociklai[PI[playerid][PasirinktaMasina]][1], TextDrawSetString(transporto_salonas_g[4], "motociklu salonas");
        		case 3: MasinosKaina = Laivai[PI[playerid][PasirinktaMasina]][1], TextDrawSetString(transporto_salonas_g[4], "laivu parduotuve");
        	}

        	switch(PI[playerid][KaPerka])
        	{
        		case 0: return 0;

        		case 1:
        		{
        			PI[playerid][SukurtaMasina] = CreateServerVehicle(SportinesMasinos[PI[playerid][PasirinktaMasina]][0], -1945.6490, 271.0439, 35.5445, 120.2910, random(126), random(126), -1);

        			format(String, sizeof(String), "~r~-~w~ Pavadinimas: ~p~%s~r~ -~n~-~w~ kaina:~g~ $%s~r~ -~n~-~w~ numeris:~y~ %d/%d~r~ -",
					VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina), PI[playerid][PasirinktaMasina] + 1, sizeof(SportinesMasinos));
        		}

        		case 2:
        		{
        			PI[playerid][SukurtaMasina] = CreateServerVehicle(Motociklai[PI[playerid][PasirinktaMasina]][0], -1946.1865, 266.0375, 40.5899, 90.0000, random(126), random(126), -1);

        			format(String, sizeof(String), "~r~-~w~ Pavadinimas: ~p~%s~r~ -~n~-~w~ kaina:~g~ $%s~r~ -~n~-~w~ numeris:~y~ %d/%d~r~ -",
					VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina), PI[playerid][PasirinktaMasina] + 1, sizeof(Motociklai));
        		}

        		case 3:
        		{
        			PI[playerid][SukurtaMasina] = CreateServerVehicle(Laivai[PI[playerid][PasirinktaMasina]][0], -2983.6296, 494.5702, 0.1902, 0.0000, random(126), random(126), -1);

        			format(String, sizeof(String), "~r~-~w~ Pavadinimas: ~p~%s~r~ -~n~-~w~ kaina:~g~ $%s~r~ -~n~-~w~ numeris:~y~ %d/%d~r~ -",
					VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina), PI[playerid][PasirinktaMasina] + 1, sizeof(Laivai));
        		}
        	}

			SetVehicleVirtualWorld(PI[playerid][SukurtaMasina], playerid + 1);
			VehicleInfo[PI[playerid][SukurtaMasina]][vNupirkta] = 2;

			PlayerTextDrawSetString(playerid, transporto_salonas_p[playerid][0], String);
		}

		return 1;
	}

    return 1;
}

f_public: UpdatePlayerDeath(playerid, interas)
{
	new String[128];

	if(PI[playerid][JustDie] > 0)
	{
		SetPlayerInterior(playerid, interas);

	    PI[playerid][HaveTimeUntilDeath] --;

	    switch(PI[playerid][HaveTimeUntilDeath])
	    {
	        case -1..0:
	        {
				PI[playerid][JustDie]            = 0;
				PI[playerid][HaveTimeUntilDeath] = 0;

				SendClientMessage(playerid, -1, "{ffffff} Jus buvote sëkmingai iðgydytas!");

				if(PI[playerid][uniformd])
			    {
			    	SetPlayerSkin(playerid, PI[playerid][uniforma]);
			    }
			    else
			    {
			    	SetPlayerSkin(playerid, PI[playerid][drabuziai]);
			    }
			}

			default:
			{
			    new MinutesLeft = PI[playerid][HaveTimeUntilDeath] / 60;
		    	new SecondsLeft = PI[playerid][HaveTimeUntilDeath] - MinutesLeft * 60;

				if(MinutesLeft < 0)
				{
				    if(SecondsLeft < 10)
				    {
						format(String, sizeof(String), "~r~Jus gydomas!~n~~w~Liko: ~y~00:0%d ~w~sec", SecondsLeft);
					}
					else
					{
						format(String, sizeof(String), "~r~Jus gydomas!~n~~w~Liko: ~y~00:%d ~w~sec", SecondsLeft);
					}
				}
				else
				{
				    if(SecondsLeft < 10)
				    {
				    	format(String, sizeof(String), "~r~Jus gydomas!~n~~w~Liko: ~y~0%d:0%d ~w~sec", MinutesLeft, SecondsLeft);
					}
					else
					{
						format(String, sizeof(String), "~r~Jus gydomas!~n~~w~Liko: ~y~0%d:%d ~w~sec", MinutesLeft, SecondsLeft);
					}
				}

				GameTextForPlayer 	(playerid, String, 1000, 4);
				SetPlayerHealthEx 	(playerid, 99.0);

				SetTimerEx("UpdatePlayerDeath", 1000, false, "dd", playerid, 30);
			}
	    }
	}

	return 1;
}

f_public: SpeedoTimer()
{
	for(new p, size = GetPlayerPoolSize(); p <= size; p++)
	{
		if(p != INVALID_PLAYER_ID)
		{
			if(IsPlayerNPC(p) || !IsPlayerConnected(p) || !IsPlayerInAnyVehicle(p)) continue;

			if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
			{
				if(!PI[p][AFK_Stat])
				{
					VehicleInfo[GetPlayerVehicleID(p)][vRida] += (floatsqroot(GetPlayerSpeed(p)) * 50) / 100000;

					new model = GetVehicleModel(GetPlayerVehicleID(p));

					if(model == 574)
					{
						if(VehicleInfo[GetPlayerVehicleID(p)][Vanduo] > 1)
						{
							VehicleInfo[GetPlayerVehicleID(p)][Pasibaiges] 	= false;
							VehicleInfo[GetPlayerVehicleID(p)][Parase] 		= false;

							VehicleInfo[GetPlayerVehicleID(p)][Vanduo] -= (floatsqroot(GetPlayerSpeed(p)) * 50) / 15000;

							//Vanduo
							new msg[50];
							new Float: dTurimasKuras = VehicleInfo[GetPlayerVehicleID(p)][Vanduo], Float: dBakoTuris = 30;
							new Float: dSkirtumas 	= -3.410841 / dBakoTuris;

							new Float: dProgress = (-0.772005 + (dTurimasKuras * dSkirtumas));
							PlayerTextDrawLetterSize(p, spidometras_p[p][6], 0.000000, dProgress);

							PlayerTextDrawHide(p, spidometras_p[p][6]);
							PlayerTextDrawShow(p, spidometras_p[p][6]);

							TextDrawShowForPlayer(p, spidometras_g[6]);
							TextDrawShowForPlayer(p, spidometras_g[7]);
							PlayerTextDrawShow(p, spidometras_p[p][7]);

							format(msg, 40, "VAL.~N~SKYSTIS:~n~%.0f/30~Y~L", VehicleInfo[GetPlayerVehicleID(p)][Vanduo]);
							PlayerTextDrawSetString(p, spidometras_p[p][7], msg);
						}
						else
						{
							if(VehicleInfo[GetPlayerVehicleID(p)][Pasibaiges] == false)
							{
								VehicleInfo[GetPlayerVehicleID(p)][Pasibaiges] = true;
							}
						}
					}

					UpdateSpeedo(p);
				}
			}
		}
	}

	return 1;
}

f_public: PakeistiRadija(vehicleid)
{
	new szRadio[49];
	format(szRadio, 49, "» Grojama stotis: {FFB000}%s", RadijosPavadinimas[vehicleid]);
	if(isnull(RadijosURL[vehicleid])) StopAudioStreamForVehicle(vehicleid);
	for(new p = 0, size = GetPlayerPoolSize(); p <= size; p++)
	{
		if(!IsPlayerConnected(p) || !IsPlayerInVehicle(p, vehicleid)) continue;
		SendClientMessage       (p, 0x6EF83CFF, szRadio);
		PlayAudioStreamForPlayer(p, RadijosURL[vehicleid]);
	}
	return true;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	PI[playerid][masina]       = vehicleid;
	PI[playerid][AntiHomeKint] = vehicleid;

	if(IsPlayerNPC(playerid)) return 1;

	if(PI[playerid][ikalintas]) return SetPlayerHealthEx(playerid, 0);

	if(Tazed[playerid]) return 1;

	if(VehicleInfo[vehicleid][vUzraktas])
	{
		new String[128];

		if(ArTaksi[vehicleid])
		{
			if(!ispassenger)
			{
				format(String, sizeof(String), "{ffffff} Transp. priemonë {FFAF00}%s {ffffff}uþrakinta. Norint atrakinti, spauskite {FFAF00}Y{ffffff}!", VehicleNames[GetVehicleModel(vehicleid) - 400]);

				Stop(playerid);
			}
		}
		else
		{
			if(strcmp(GetPlayerNameEx(playerid), VehicleInfo[vehicleid][vSavininkas], true))
			{
				format(String, sizeof(String), "{ffffff} Transp. priemonë {FFAF00}%s {ffffff}uþrakinta. Ji priklauso: {FFAF00}%s{ffffff}!", VehicleNames[GetVehicleModel(vehicleid) - 400], VehicleInfo[vehicleid][vSavininkas]);
			}
			else
			{
				format(String, sizeof(String), "{ffffff} Transp. priemonë {FFAF00}%s {ffffff}uþrakinta. Norint atrakinti, spauskite {FFAF00}Y{ffffff}!", VehicleNames[GetVehicleModel(vehicleid) - 400]);
			}

			Stop(playerid);
		}

		SendClientMessage 	(playerid, -1, String);
		//printf("%d\n", ArTaksi[vehicleid]);
		//Stop 				(playerid);
	}

	if(!ispassenger)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		if(VehicleHasDriver(vehicleid) > 0)
		{
			SetPlayerPos(playerid, x, y, z + 1.05);
			SendClientMessage(playerid, -1, "{ffffff} Tr. priemonæ jau kaþkas vairuoja, todël iðmesti jo negalite!");
			return 0;
		}
	}

	if(ArTurgausMasina[vehicleid] == true)
	{
		new str[400];

		new KoksKuras[64];

		switch(VehicleInfo[vehicleid][vKuroTipas])
		{
			case BENZINAS: 	KoksKuras = "Benzinas";
			case DYZELIS: 	KoksKuras = "Dyzelis";
		}

		format(str, sizeof(str), "{ffffff}Transporto pirkimas: \n \n\t{ffffff}Pavadinimas: {FFAF00}%s\n\t{ffffff}Kaina: {FFAF00}$%s\n\t{ffffff}Kuro tipas: {ffffff} %s\n\t{ffffff}Kuro sànaudos: {FFAF00}%.2f L/10 KM\n\t{ffffff}Bako tûris: {FFAF00}%.2f L\n\t{ffffff}Turimas kiekis: {FFAF00}%d\n \n{ffffff}Ar tikrai norite pirkti ðá transportà?",
		VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(TurgausInfo[vehicleid][tKaina]), KoksKuras, VehicleInfo[vehicleid][vSanaudos], VehicleInfo[vehicleid][vBakas], TurgausInfo[vehicleid][tKiekis]);
		ShowPlayerDialogEx(playerid, TurgausDialog, DIALOG_STYLE_MSGBOX, "Transporto pirkimas", str, "Taip", "Ne");

		PI[playerid][TurgausMasina] = vehicleid;

		Stop(playerid);
	}

	if(Ribotuvas[playerid] == true)
	{
		SetPlayerSpeedCap(playerid, GREICIO_RIBA);
	}
	else
	{
		DisablePlayerSpeedCap(playerid);
	}

	new	model = GetVehicleModel(vehicleid);

	if(model == 401 || model == 581 || model == 469)
	{
		DisablePlayerRaceCheckpoint(playerid);
	}

	if(ispassenger)
	{
		if(model == 519)
		{
			PI[playerid][lektuvas] = vehicleid;

			SetPlayerInterior(playerid, 1);

			AC_SetPlayerPos(playerid, 2.384830, 33.103397, 1199.849976);

			SetPlayerVirtualWorld(playerid, vehicleid);
		}
		return 1;
	}

	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	//RemovePlayerAttachedObject(playerid, SLOT);

	new model = GetVehicleModel(vehicleid);

	switch(model)
	{
		case 417, 425, 447, 460, 469, 476, 487, 488, 497, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593:
		{
			ac_ResetPlayerWeapon (playerid, 11);
			ac_GivePlayerWeapon(playerid, 46, 1);
		}
	}

	if(vehicleid >= VairavimoMokyklosMasina[0] && vehicleid <= VairavimoMokyklosMasina[10])
	{
		DisablePlayerCheckpointEx(playerid, 16);
		DisablePlayerCheckpointEx(playerid, 17);
		SetVehicleVirtualWorld(vehicleid, 0);
		ac_SetVehicleToRespawn(vehicleid);
		SetPlayerVirtualWorld(playerid, 0);
		PI[playerid][VairavimoKlaidos] = 0;
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
		//new vehicleids = GetPlayerVehicleID(TaxiInfo[playerid][taksistas]);

		if(TaxiInfo[playerid][imti])
		{
			new Float: Viet[2][3];

			GetPlayerPos(playerid, Viet[0][0], Viet[0][1], Viet[0][2]);

			Viet[1][0] = TaxiInfo[playerid][Start][0];
			Viet[1][1] = TaxiInfo[playerid][Start][1];
			Viet[1][2] = TaxiInfo[playerid][Start][2];


			new kaina = ((floatround(floatabs(Viet[0][0] - Viet[1][0])) + floatround(floatabs(Viet[0][1] - Viet[1][1])) + floatround(floatabs(Viet[0][2] - Viet[1][2]))))/6;

			TaxiInfo[playerid][imti] = false;

			if(TaksiMasina[0] <= vehicleid <= TaksiMasina[sizeof(TaksiMasina) - 1] || PI[playerid][DirbaTaksi])
			{
				kaina = kaina/2;
			}

			new String[128];

			if(GetPlayerMoneyA(playerid) >= kaina)
			{
				format(String, sizeof(String), "{ffffff} Keleivis iðlipo ir susimokëjo uþ paslaugas {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(kaina));
				SendClientMessage(TaxiInfo[playerid][taksistas], -1, String);

				format(String, sizeof(String), "{ffffff} Uþ taksi paslaugas susimokëjote {FFAF00}$%s{ffffff} grynais!", konvertuoti_pinigus(kaina));
				SendClientMessage(playerid, -1, String);

				GivePlayerMoneyA(TaxiInfo[playerid][taksistas], kaina);
				GivePlayerMoneyA(playerid, -kaina);

				if(!PI[TaxiInfo[playerid][taksistas]][mdPaveztZmogu]) PI[TaxiInfo[playerid][taksistas]][mdPaveztZmogu] = true;

				return 1;
			}
			else
			{
				if(PI[playerid][banke] >= kaina)
				{
					format(String, sizeof(String), "{ffffff} Keleivis iðlipo ir susimokëjo uþ paslaugas {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(kaina));
					SendClientMessage(TaxiInfo[playerid][taksistas], -1, String);

					format(String, sizeof(String), "{ffffff} Uþ taksi paslaugas susimokëjote {FFAF00}$%s{ffffff} bankiniu pavedimu!", konvertuoti_pinigus(kaina));
					SendClientMessage(playerid, -1, String);

					GivePlayerMoneyA(TaxiInfo[playerid][taksistas], kaina);

					PI[playerid][banke] -= kaina;

					if(!PI[TaxiInfo[playerid][taksistas]][mdPaveztZmogu]) PI[TaxiInfo[playerid][taksistas]][mdPaveztZmogu] = true;

					return 1;
				}
				else
				{
					SendClientMessage(TaxiInfo[playerid][taksistas], -1, "{ffffff} Dëja, bet keleivis neturi pinigø susimokëti uþ paslaugas!");

					SendClientMessage(playerid, -1, "{ffffff} Jus neturite pinigø susimokëti uþ taksi paslaugas, todël gaunate 5 átarimo lygius!");

					GiveStars(playerid, 5);

					return 1;
				}
			}
		}
	}

	GetVehiclePos(vehicleid, VehPos[vehicleid][0], VehPos[vehicleid][1], VehPos[vehicleid][2]);

	GetVehicleZAngle(vehicleid, VehPos[vehicleid][3]);

	CanCheckVehiclePos[vehicleid] = gettime() + 7;

	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat)
{
	new Float:fVehicle[5];
	GetVehiclePos(vehicleid, fVehicle[0], fVehicle[1], fVehicle[2]);
	GetVehicleZAngle(vehicleid, fVehicle[3]);
	if(gettime() > CanCheckVehiclePos[vehicleid])
	{
		fVehicle[4] = GetVehicleDistanceFromPoint(vehicleid, VehPos[vehicleid][0], VehPos[vehicleid][1], VehPos[vehicleid][2]);
		if(fVehicle[4] > 5.0)
		{
			AC_SetVehiclePos(vehicleid, VehPos[vehicleid][0], VehPos[vehicleid][1], VehPos[vehicleid][2]);
			SetVehicleZAngle(vehicleid, VehPos[vehicleid][3]);
		}
		else
		{
			VehPos[vehicleid][0] = fVehicle[0];
			VehPos[vehicleid][1] = fVehicle[1];
			VehPos[vehicleid][2] = fVehicle[2];
			VehPos[vehicleid][3] = fVehicle[3];
		}
	}
	else
	{
		VehPos[vehicleid][0] = fVehicle[0];
		VehPos[vehicleid][1] = fVehicle[1];
		VehPos[vehicleid][2] = fVehicle[2];
		VehPos[vehicleid][3] = fVehicle[3];
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(newstate == PLAYER_STATE_DRIVER)
	{
		new String[128];
		if(!IsABike(vehicleid))
		{
			SendClientMessage(playerid, -1, "{ffffff} Visà transp. priemoniø valdymà iðvysite paraðæ {FFAF00} /tvaldymas{ffffff}!");

			if(VehicleInfo[vehicleid][vNuoma])
			{
				if(GetPlayerMoneyA(playerid) < NuomosKaina[vehicleid])
				{
					SendClientMessage 		(playerid, -1, "{ffffff} Jums neuþtenka pinigø ðios transp. priemonës nuomai!");
					RemovePlayerFromVehicle	(playerid);

					return 1;
				}

				SendClientMessage(playerid, -1, " ");

				format(String, sizeof(String), "{ffffff} Álipote á nuomojamà transp. priemonæ. Nuomos kaina: {FFAF00}$%d/min{ffffff}!", NuomosKaina[vehicleid]);
				SendClientMessage(playerid, -1, String);
			}
		}
	}

	if(IsPlayerNPC(playerid)) return 1;

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		if(PI[playerid][AntiHomeKint] != vehicleid)
		{
			new String[216];

			format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}buvo iðmestas ið serverio!", GetPlayerNameEx(playerid));
			SendClientMessageToAll(-1, String);

			SendClientMessageToAll(-1, "{ffffff} Prieþastis: {FFAF00}HOME naudojimas.");

			IsmestiZaideja(playerid, 100);

			return 1;
		}
	}

	if(VairavimoMokyklosMasina[0] <= vehicleid <= VairavimoMokyklosMasina[sizeof(VairavimoMokyklosMasina) - 1])
	{
		DisablePlayerCheckpointEx(playerid, 16);
		DisablePlayerCheckpointEx(playerid, 17);
		SetVehicleVirtualWorld(vehicleid, 0);
		SetPlayerVirtualWorld(playerid, 0);
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{
		new model = GetPlayerVehicleSeat(playerid);
		if(model != 128)
		{
			if(!model)
			{
				model = GetVehicleModel(GetPlayerVehicleID(playerid));
				if(!(400 <= model <= 611) || MaxPassengers[model - 400 >>> 3] >>> ((model - 400 & 7) << 2) & 0xF == 15) return Kick(playerid);
			}
			else return Kick(playerid);
		}
	}
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
		new model = GetVehicleModel(GetPlayerVehicleID(playerid));
		if(400 <= model <= 611)
		{
			model -= 400;
			new seat = GetPlayerVehicleSeat(playerid);
			if(seat != 128)
			{
				model = (MaxPassengers[model >>> 3] >>> ((model & 7) << 2)) & 0xF;
				if(!model || model == 15) return Kick(playerid);
				else if(!(0 < seat <= model)) return Kick(playerid);
			}
			else return Kick(playerid);
		}
	}
	if( newstate == PLAYER_STATE_DRIVER )
	{
		new temp;
		temp = GetVehicleModel( GetPlayerVehicleID( playerid ) );
		BE_Play_Check[ playerid ] = true;
		for(new i; i != sizeof( BE_Bad_Vehs ); i++ )
		{
			if( temp == BE_Bad_Vehs[ i ] )
			{
				BE_Play_Check[ playerid ] = false;
				break;
			}
		}
	}
	if( oldstate == PLAYER_STATE_DRIVER )
	{
		BE_Play_Check[ playerid ] = false;
	}

	if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)
	{
		ExitFromCarShop(playerid);
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{
		SetPlayerArmedWeapon(playerid, 0);

		if(!IsABike(vehicleid))
		{
			for(new s = 0; s < 6; s ++)         TextDrawShowForPlayer(playerid, spidometras_g[s]);
			for(new s = 0; s < 6; s ++)         PlayerTextDrawShow(playerid, spidometras_p[playerid][s]);

			UpdateFuelBar(playerid);

			if(VehicleInfo[vehicleid][vDujos])
			{
				TextDrawShowForPlayer(playerid, spidometras_g[6]);
				TextDrawShowForPlayer(playerid, spidometras_g[7]);

				UpdateFuelBar(playerid);
			}
			else
			{
				TextDrawHideForPlayer(playerid, spidometras_g[6]);
				TextDrawHideForPlayer(playerid, spidometras_g[7]);
			}

			new model = GetVehicleModel(GetPlayerVehicleID(playerid));

			if(model == 574)
			{
				TextDrawShowForPlayer(playerid, spidometras_g[6]);
				TextDrawShowForPlayer(playerid, spidometras_g[7]);

				//Vanduo
				new msg[50];
				new Float: dTurimasKuras = VehicleInfo[GetPlayerVehicleID(playerid)][Vanduo], Float: dBakoTuris = 30;
				new Float: dSkirtumas 	= -3.410841 / dBakoTuris;

				new Float: dProgress = (-0.772005 + (dTurimasKuras * dSkirtumas));
				PlayerTextDrawLetterSize(playerid, spidometras_p[playerid][6], 0.000000, dProgress);

				PlayerTextDrawHide(playerid, spidometras_p[playerid][6]);
				PlayerTextDrawShow(playerid, spidometras_p[playerid][6]);

				TextDrawShowForPlayer(playerid, spidometras_g[6]);
				TextDrawShowForPlayer(playerid, spidometras_g[7]);
				PlayerTextDrawShow(playerid, spidometras_p[playerid][7]);

				format(msg, 31, "VAL.~N~SKYSTIS:~n~%.0f/30~Y~L", VehicleInfo[GetPlayerVehicleID(playerid)][Vanduo]);
				PlayerTextDrawSetString(playerid, spidometras_p[playerid][7], msg);
			}

			UpdateSpeedo(playerid);

			new masinosID = GetPlayerVehicleID(playerid);
		    if (!isnull(RadijosURL[masinosID]))
		    {
		        PlayAudioStreamForPlayer(playerid, RadijosURL[masinosID]);
			}
		}

		/*if(VehicleInfo[vehicleid][vNupirkta] && VehicleInfo[vehicleid][vLocked])
		{
			if(strcmp(VehicleInfo[vehicleid][vOwner], GetPlayerNameEx(playerid), false))
			{
				if(PI[playerid][AdminLevel] < LEVEL_OWNER)
				{
					Kick(playerid);

					return 0;
				}
			}
		}*/
	}

	if(newstate == PLAYER_STATE_ONFOOT && (oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER))
	{
		StopAudioStreamForPlayer(playerid);

		KillTimer(nuomaTimer[playerid]);

		for(new s = 0; s < 8; s ++)         TextDrawHideForPlayer(playerid, spidometras_g[s]);
		for(new s = 0; s < 8; s ++)         PlayerTextDrawHide(playerid, spidometras_p[playerid][s]);

		PI[playerid][Dirzas] = false;
	}

	if(newstate == PLAYER_STATE_ONFOOT && (oldstate == PLAYER_STATE_DRIVER))
	{
		if(PI[playerid][DirbaTaksi] == true)
		{
			new vehicleidd = PI[playerid][masina];

			DestroyDynamicObject(TaksiZenklas[playerid]);

			PI[playerid][DirbaTaksi] 	= false;
			ArTaksi[vehicleidd]					= false;

			SendClientMessage(playerid, -1, "{ffffff} Baigëte taksisto darbà!");
		}
	}

	if ((newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER) && oldstate == PLAYER_STATE_ONFOOT)
    {
        if (playerInfo[playerid][0])
        {
	        for(new i, size = GetPlayerPoolSize(); i <= size; i++)
	        {
	            if(!IsPlayerConnected(i) || PI[i][AdminLevel] == LEVEL_NONE) continue;

	            if (spectateInfo[i][0] == playerid)
                    PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
            }
        }
    }

    if ((oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) && newstate == PLAYER_STATE_ONFOOT)
    {
        if (playerInfo[playerid][0])
        {
	        for(new i, size = GetPlayerPoolSize(); i <= size; i++)
	        {
	           if(!IsPlayerConnected(i) || PI[i][AdminLevel] == LEVEL_NONE) continue;

	            if (spectateInfo[i][0] == playerid)
                    PlayerSpectatePlayer(i, spectateInfo[i][0]);
            }
        }
    }

	if(newstate == PLAYER_STATE_DRIVER)
	{
		new model = GetVehicleModel(vehicleid);
		new spec = PI[playerid][specialybe];

		new String[216];

		//Automobiliø teisës
		if(vehicleid >= VairavimoMokyklosMasina[5] && vehicleid <= VairavimoMokyklosMasina[10])
		{
			if(PI[playerid][teises]) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite B kategorijos vairavimo teises!"), Stop(playerid);

			if(!PI[playerid][teorija]) return SendClientMessage(playerid, -1, "{ffffff} Jus neiðlaikæs teorijos egzamino!"), Stop(playerid);

            format(String, sizeof(String), "{ffffff}Ar norite laikyti B kategorijos vairavimo egzaminà?\n \nJums tai kainuos {FFAF00}$%d{ffffff}.", BCategoryLicensePrice);
			ShowPlayerDialogEx(playerid, BCategoryLicenseDialog, DIALOG_STYLE_MSGBOX, "Vairavimo mokykla", String, "Taip", "Ne");

			/*if(!PI[playerid][Bpraktika])
			{
				format(String, sizeof(String), "{ffffff}Ar norite laikyti B kategorijos vairavimo egzaminà aikðtelëje?\n \nJums tai kainuos {FFAF00}$%d{ffffff}.", floatround(BCategoryLicensePrice / 2));
				ShowPlayerDialogEx(playerid, BCategoryLicenseDialog, DIALOG_STYLE_MSGBOX, "Vairavimo mokykla", String, "Taip", "Ne");
			}
			else
			{
				format(String, sizeof(String), "{ffffff}Ar norite laikyti B kategorijos vairavimo egzaminà?\n \nJums tai kainuos {FFAF00}$%d{ffffff}.", BCategoryLicensePrice);
				ShowPlayerDialogEx(playerid, BCategoryLicenseDialog, DIALOG_STYLE_MSGBOX, "Vairavimo mokykla", String, "Taip", "Ne");
			}*/
		}

		//motociklø teisës
		if(vehicleid >= VairavimoMokyklosMasina[2] && vehicleid <= VairavimoMokyklosMasina[4])
		{
			if(PI[playerid][Mteises]) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite A kategorijos vairavimo teises!"), Stop(playerid);

			if(!PI[playerid][teorija]) return SendClientMessage(playerid, -1, "{ffffff} Jus neiðlaikæs teorijos egzamino!"), Stop(playerid);

            format(String, sizeof(String), "{ffffff}Ar norite laikyti A kategorijos vairavimo egzaminà?\n \nJums tai kainuos {FFAF00}$%d{ffffff}.", ACategoryLicensePrice);
			ShowPlayerDialogEx(playerid, ACategoryLicenseDialog, DIALOG_STYLE_MSGBOX, "Vairavimo mokykla", String, "Taip", "Ne");
			/*if(!PI[playerid][Apraktika])
			{
				format(String, sizeof(String), "{ffffff}Ar norite laikyti A kategorijos vairavimo egzaminà aikðtelëje?\n \nJums tai kainuos {FFAF00}$%d{ffffff}.", floatround(ACategoryLicensePrice / 2));
				ShowPlayerDialogEx(playerid, ACategoryLicenseDialog, DIALOG_STYLE_MSGBOX, "Vairavimo mokykla", String, "Taip", "Ne");
			}
			else
			{
				format(String, sizeof(String), "{ffffff}Ar norite laikyti A kategorijos vairavimo egzaminà?\n \nJums tai kainuos {FFAF00}$%d{ffffff}.", ACategoryLicensePrice);
				ShowPlayerDialogEx(playerid, ACategoryLicenseDialog, DIALOG_STYLE_MSGBOX, "Vairavimo mokykla", String, "Taip", "Ne");
			}*/
		}

		//Sunkveþimiø teisës
		if(vehicleid >= VairavimoMokyklosMasina[0] && vehicleid <= VairavimoMokyklosMasina[1])
		{
			if(PI[playerid][FTeises]) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite C kategorijos vairavimo teises!"), Stop(playerid);

			if(!PI[playerid][teorija]) return SendClientMessage(playerid, -1, "{ffffff} Jus neiðlaikæs teorijos egzamino!"), Stop(playerid);

			format(String, sizeof(String), "{ffffff}Ar norite laikyti C kategorijos vairavimo egzaminà?\n \nJums tai kainuos {FFAF00}$%d{ffffff}.", CCategoryLicensePrice);
			ShowPlayerDialogEx(playerid, CCategoryLicenseDialog, DIALOG_STYLE_MSGBOX, "Vairavimo mokykla", String, "Taip", "Ne");
		}

		//Fûristai
		if(FuristuMasina[0] <= vehicleid <= FuristuMasina[sizeof(FuristuMasina) - 1])
		{
			if(spec != 11 && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			if(PI[playerid][AdminLevel] < LEVEL_OWNER)
			{
				if(!PI[playerid][uniformd]) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbinës uniformos!");
			}

			new
			    query[ 256 ],
				line[ 90 ],
				sql[ 150 ];
			format( query, 256, "SELECT * FROM `rangai` WHERE `RID` = '%d' AND `RKint` = '%d'", PI[ playerid ][ DarboRangas ], PI[ playerid ][ specialybe ] );
			mysql_query( query );
			mysql_store_result( );
			while( mysql_fetch_row( line ) )
			{
				mysql_get_field( "RMasina", sql );
			  	//Masiniukas = strval( sql );
			}

			//if( GetVehicleModel( vehicleid ) != Masiniukas ) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jûsø rangas neleidþia jums vairuoti ðios transp. priemonës!");

			AlgosZinutes		(playerid);
			SendClientMessage 	(playerid, -1, "{ffffff} Visos darbo komandos - {FFAF00} /darbas{ffffff}!");
		}

		//Policija
		if(PolicijosMasina[0] <= vehicleid <= PolicijosMasina[sizeof(PolicijosMasina) - 1])
		{
			if(spec != 1 && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			if(PI[playerid][AdminLevel] < LEVEL_OWNER)
			{
				if(!PI[playerid][uniformd]) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbinës uniformos!");
			}

			new
			    query[ 256 ],
				line[ 90 ],
				sql[ 150 ];
			format( query, 256, "SELECT * FROM `rangai` WHERE `RID` = '%d' AND `RKint` = '%d'", PI[ playerid ][ DarboRangas ], PI[ playerid ][ specialybe ] );
			mysql_query( query );
			mysql_store_result( );
			while( mysql_fetch_row( line ) )
			{
				mysql_get_field( "RMasina", sql );
			  	//Masiniukas = strval( sql );
			}

			//if( GetVehicleModel( vehicleid ) != Masiniukas ) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jûsø rangas neleidþia jums vairuoti ðios transp. priemonës!");

			AlgosZinutes		(playerid);
			SendClientMessage 	(playerid, -1, "{ffffff} Visos darbo komandos - {FFAF00} /darbas{ffffff}!");
		}

		//Medikai
		if(MedikuMasina[0] <= vehicleid <= MedikuMasina[sizeof(MedikuMasina) - 1])
		{
			if(spec != 2 && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			if(PI[playerid][AdminLevel] < LEVEL_OWNER)
			{
				if(!PI[playerid][uniformd]) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbinës uniformos!");
			}

			new
			    query[ 256 ],
				line[ 90 ],
				sql[ 150 ];
			format( query, 256, "SELECT * FROM `rangai` WHERE `RID` = '%d' AND `RKint` = '%d'", PI[ playerid ][ DarboRangas ], PI[ playerid ][ specialybe ] );
			mysql_query( query );
			mysql_store_result( );
			while( mysql_fetch_row( line ) )
			{
				mysql_get_field( "RMasina", sql );
			  	//Masiniukas = strval( sql );
			}

			//if( GetVehicleModel( vehicleid ) != Masiniukas ) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jûsø rangas neleidþia jums vairuoti ðios transp. priemonës!");

			AlgosZinutes		(playerid);
			SendClientMessage 	(playerid, -1, "{ffffff} Visos darbo komandos - {FFAF00} /darbas{ffffff}!");
		}
		
		//Taxo
		if(TaksiMasina[0] <= vehicleid <= TaksiMasina[sizeof(TaksiMasina) - 1])
		{
			if(spec != 13 && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			if(PI[playerid][AdminLevel] < LEVEL_OWNER)
			{
				if(!PI[playerid][uniformd]) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbinës uniformos!");
			}

			new
			    query[ 256 ],
				line[ 90 ],
				sql[ 150 ];
			format( query, 256, "SELECT * FROM `rangai` WHERE `RID` = '%d' AND `RKint` = '%d'", PI[ playerid ][ DarboRangas ], PI[ playerid ][ specialybe ] );
			mysql_query( query );
			mysql_store_result( );
			while( mysql_fetch_row( line ) )
			{
				mysql_get_field( "RMasina", sql );
			  	//Masiniukas = strval( sql );
			}

			//if( GetVehicleModel( vehicleid ) != Masiniukas ) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jûsø rangas neleidþia jums vairuoti ðios transp. priemonës!");

			AlgosZinutes		(playerid);
			SendClientMessage 	(playerid, -1, "{ffffff} Visos darbo komandos - {FFAF00} /darbas{ffffff}!");
		}


		//Aras
		if(ArasMasina[0] <= vehicleid <= ArasMasina[sizeof(ArasMasina) - 1])
		{
			if(spec != 5 && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			if(PI[playerid][AdminLevel] < LEVEL_OWNER)
			{
				if(!PI[playerid][uniformd]) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbinës uniformos!");
			}

			new
			    query[ 256 ],
				line[ 90 ],
				sql[ 150 ];
			format( query, 256, "SELECT * FROM `rangai` WHERE `RID` = '%d' AND `RKint` = '%d'", PI[ playerid ][ DarboRangas ], PI[ playerid ][ specialybe ] );
			mysql_query( query );
			mysql_store_result( );
			while( mysql_fetch_row( line ) )
			{
				mysql_get_field( "RMasina", sql );
			  	//Masiniukas = strval( sql );
			}

			//if( GetVehicleModel( vehicleid ) != Masiniukas ) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jûsø rangas neleidþia jums vairuoti ðios transp. priemonës!");

			AlgosZinutes		(playerid);
			SendClientMessage 	(playerid, -1, "{ffffff} Visos darbo komandos - {FFAF00} /darbas{ffffff}!");
		}

		//Carmello
		/*if(CarmelloMasina[0] <= vehicleid <= CarmelloMasina[sizeof(CarmelloMasina) - 1])
		{
			if(spec != CARMELLO && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			if(PI[playerid][AdminLevel] < LEVEL_OWNER)
			{
				if(!PI[playerid][uniformd]) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jus esate be gaujos drabuþiø!");
			}

			new
			    query[ 256 ],
				line[ 90 ],
				sql[ 150 ];
			format( query, 256, "SELECT * FROM `rangai` WHERE `RID` = '%d' AND `RKint` = '%d'", PI[ playerid ][ DarboRangas ], PI[ playerid ][ specialybe ] );
			mysql_query( query );
			mysql_store_result( );
			while( mysql_fetch_row( line ) )
			{
				mysql_get_field( "RMasina", sql );
			  	//Masiniukas = strval( sql );
			}

			//if( GetVehicleModel( vehicleid ) != Masiniukas ) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jûsø rangas neleidþia jums vairuoti ðios transp. priemonës!");

			AlgosZinutes		(playerid);
			SendClientMessage 	(playerid, -1, "{ffffff} Visos gaujos komandos - {FFAF00} /gauja{ffffff}!");
		}

		//Azteca
		if(AztecaMasina[0] <= vehicleid <= AztecaMasina[sizeof(AztecaMasina) - 1])
		{
			if(spec != AZTECA && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			if(PI[playerid][AdminLevel] < LEVEL_OWNER)
			{
				if(!PI[playerid][uniformd]) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jus esate be gaujos drabuþiø!");
			}

			new
			    query[ 256 ],
				line[ 90 ],
				sql[ 150 ];
			format( query, 256, "SELECT * FROM `rangai` WHERE `RID` = '%d' AND `RKint` = '%d'", PI[ playerid ][ DarboRangas ], PI[ playerid ][ specialybe ] );
			mysql_query( query );
			mysql_store_result( );
			while( mysql_fetch_row( line ) )
			{
				mysql_get_field( "RMasina", sql );
			  	//Masiniukas = strval( sql );
			}

			//if( GetVehicleModel( vehicleid ) != Masiniukas ) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jûsø rangas neleidþia jums vairuoti ðios transp. priemonës!");

			AlgosZinutes		(playerid);
			SendClientMessage 	(playerid, -1, "{ffffff} Visos gaujos komandos - {FFAF00} /gauja{ffffff}!");
		}*/

		//Kurjeriai
		if(KurjeriuMasina[0] <= vehicleid <= KurjeriuMasina[sizeof(KurjeriuMasina) - 1])
		{
			if(spec != 3 && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			if(PI[playerid][AdminLevel] < LEVEL_OWNER)
			{
				if(!PI[playerid][uniformd]) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbinës uniformos!");
			}

			new
			    query[ 256 ],
				line[ 90 ],
				sql[ 150 ];
			format( query, 256, "SELECT * FROM `rangai` WHERE `RID` = '%d' AND `RKint` = '%d'", PI[ playerid ][ DarboRangas ], PI[ playerid ][ specialybe ] );
			mysql_query( query );
			mysql_store_result( );
			while( mysql_fetch_row( line ) )
			{
				mysql_get_field( "RMasina", sql );
			  	//Masiniukas = strval( sql );
			}

			//if( GetVehicleModel( vehicleid ) != Masiniukas ) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jûsø rangas neleidþia jums vairuoti ðios transp. priemonës!");

			AlgosZinutes		(playerid);
			SendClientMessage 	(playerid, -1, "{ffffff} Visos darbo komandos - {FFAF00} /darbas{ffffff}!");
		}

		//Mechanikai
		if(MechanikuMasina[0] <= vehicleid <= MechanikuMasina[sizeof(MechanikuMasina) - 1])
		{
			if(spec != 4 && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			if(PI[playerid][AdminLevel] < LEVEL_OWNER)
			{
				if(!PI[playerid][uniformd]) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbinës uniformos!");
			}

			new
			    query[ 256 ],
				line[ 90 ],
				sql[ 150 ];
			format( query, 256, "SELECT * FROM `rangai` WHERE `RID` = '%d' AND `RKint` = '%d'", PI[ playerid ][ DarboRangas ], PI[ playerid ][ specialybe ] );
			mysql_query( query );
			mysql_store_result( );
			while( mysql_fetch_row( line ) )
			{
				mysql_get_field( "RMasina", sql );
			  	//Masiniukas = strval( sql );
			}

			//if( GetVehicleModel( vehicleid ) != Masiniukas ) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jûsø rangas neleidþia jums vairuoti ðios transp. priemonës!");

			AlgosZinutes		(playerid);
			SendClientMessage 	(playerid, -1, "{ffffff} Visos darbo komandos - {FFAF00} /darbas{ffffff}!");
		}

		if(ZeroGangID[0] <= vehicleid <= ZeroGangID[sizeof(ZeroGangID) - 1])
		{
			if(PI[playerid][gMember] != 1 && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			SendClientMessage 	(playerid, -1, "{ffffff} Álipote á gaujos transportà!");
		}

		if(FirstGangID[0] <= vehicleid <= FirstGangID[sizeof(FirstGangID) - 1])
		{
			if(PI[playerid][gMember] != 2 && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			SendClientMessage 	(playerid, -1, "{ffffff} Álipote á gaujos transportà!");
		}

		if(SecondGangID[0] <= vehicleid <= SecondGangID[sizeof(SecondGangID) - 1])
		{
			if(PI[playerid][gMember] != 3 && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			SendClientMessage 	(playerid, -1, "{ffffff} Álipote á gaujos transportà!");
		}

		//Picø iðveþiotojai
		if(Pizzaboy[0] <= vehicleid <= Pizzaboy[sizeof(Pizzaboy) - 1])
		{
			if(spec != 20 && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			if(PI[playerid][AdminLevel] < LEVEL_OWNER)
			{
				if(!PI[playerid][uniformd]) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbinës uniformos!");
			}

			AlgosZinutes		(playerid);
			SendClientMessage 	(playerid, -1, "{ffffff} Jûsø darbo informacija - {FFAF00} /darbas{ffffff}!");
		}

		//Keliø valytojai
		if(model == 574)
		{
			if(spec != 22 && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			if(PI[playerid][AdminLevel] < LEVEL_OWNER)
			{
				if(!PI[playerid][uniformd]) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbinës uniformos!");
			}

			AlgosZinutes		(playerid);
			SendClientMessage 	(playerid, -1, "{ffffff} Jûsø darbo informacija - {FFAF00} /darbas{ffffff}!");
		}

		//Gaisrininkai
		if(model == 407)
		{
			if(spec != 26 && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			if(PI[playerid][AdminLevel] < LEVEL_OWNER)
			{
				if(!PI[playerid][uniformd]) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbinës uniformos!");
			}

			AlgosZinutes		(playerid);
			SendClientMessage 	(playerid, -1, "{ffffff} Jûsø darbo informacija - {FFAF00} /darbas{ffffff}!");
		}

		//Autobusø vairuotojai


		if(BusDriversVehicle[0] <= vehicleid <= BusDriversVehicle[sizeof BusDriversVehicle - 2])// YRA TIK 6 MASINOS, O ARRAY SIZE YRA 7 //			if(vehicleid >= BusDriversVehicle[0] && vehicleid <= BusDriversVehicle[6])
		{
			if(spec != 24 && PI[playerid][AdminLevel] < LEVEL_OWNER) return Stop(playerid);

			if(PI[playerid][AdminLevel] < LEVEL_OWNER)
			{
				if(!PI[playerid][uniformd]) return Stop(playerid), SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbinës uniformos!");
			}

			if(BusDriversCityBlueberry[playerid])
			{
				if(vehicleid == BusDriversVehicle[0])
				{
					SetPlayerCheckpointEx(playerid, 31, 183.7946, -79.0569, 1.5703, 5); // Blueberry
				}
			}

			else if(BusDriversCityFortCarson[playerid])
			{
				if(vehicleid == BusDriversVehicle[1])
				{
					SetPlayerCheckpointEx(playerid, 32, -75.1079, 1205.4731, 19.7422, 5); // Fort Carson
				}
			}

			else if(BusDriversCityElQuebrados[playerid])
			{
				if(vehicleid == BusDriversVehicle[2])
				{
					SetPlayerCheckpointEx(playerid, 33, -1475.7335, 2664.7163, 55.8359, 5); // El Quebrados
				}
			}

			else if(BusDriversCityDillimore[playerid])
			{
				if(vehicleid == BusDriversVehicle[3])
				{
					SetPlayerCheckpointEx(playerid, 34, 703.8413, -464.6188, 16.3359, 5); // Dillimore
				}
			}

			else if(BusDriversCityMontgomery[playerid])
			{
				if(vehicleid == BusDriversVehicle[4])
				{
					SetPlayerCheckpointEx(playerid, 35, 1283.5227, 343.6131, 19.5547, 5); // Montgomery
				}
			}

			else if(BusDriversCityLasPayasdas[playerid])
			{
				if(vehicleid == BusDriversVehicle[5])
				{
					SetPlayerCheckpointEx(playerid, 36, -280.1835, 2707.1584, 62.6875, 5); // Las Payadasas
				}
			}

			else if(BusDriversCityPalominoCreek[playerid])
			{
				if(vehicleid == BusDriversVehicle[6])
				{
					SetPlayerCheckpointEx(playerid, 37, 2279.8577, -76.6321, 26.5328, 5); // Palomino Creek
				}
			}

			AlgosZinutes     (playerid);
			SendClientMessage(playerid, -1, "{ffffff} Norint pradëti/baigti darbà, raðyk {FFAF00} /autobusas <pradeti, baigti>");
		}

		//Nuomos transp. priemonës
		/*if(vehicleid >= NuomosMasina[0] && vehicleid <= NuomosMasina[8])
		{
			nuomaTimer[playerid] = SetTimerEx("Nuoma_Timeris", 1000 * 60, true, "d", playerid);

			SendClientMessage(playerid, -1, "{ffffff} Iðsinuomavote transp. priemonæ uþ {FFAF00}$5/min{ffffff}!");
		}*/
	}

	if(newstate == PLAYER_STATE_PASSENGER)
	{
		if(ArTaksi[vehicleid])
		{
			new vairuotojas = GetDriver(vehicleid), String[128];

			if(vairuotojas == INVALID_PLAYER_ID) return 1;

			if(PI[vairuotojas][DirbaTaksi] == false) return 1;

			GetPlayerPos(playerid, TaxiInfo[playerid][Start][0], TaxiInfo[playerid][Start][1], TaxiInfo[playerid][Start][2]);

			TaxiInfo[playerid][taksistas] 	= vairuotojas;
			keleivis[vairuotojas] 			= playerid;

			format(String, sizeof(String), "Álipo keleivis {FFAF00}%s.{ffffff}.\n\n\tAr norite imti ið jo pinigus?", GetPlayerNameEx(playerid));
			ShowPlayerDialogEx(vairuotojas, 5889, DIALOG_STYLE_MSGBOX, "Paslaugos", String, "Taip", "Ne");

			SendClientMessage(playerid, -1, "{ffffff} Jeigu neþinote kaip paaiðkinti vietà, paþymëkite jà þemëlapyje!");
		}
	}
	
	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    if(TaksiMasina[0] <= vehicleid <= TaksiMasina[sizeof(TaksiMasina) - 1])
		{
			new vairuotojas = GetDriver(vehicleid), String[128];

			if(vairuotojas == INVALID_PLAYER_ID) return 1;

			GetPlayerPos(playerid, TaxiInfo[playerid][Start][0], TaxiInfo[playerid][Start][1], TaxiInfo[playerid][Start][2]);

			TaxiInfo[playerid][taksistas] 	= vairuotojas;
			keleivis[vairuotojas] 			= playerid;

			format(String, sizeof(String), "Álipo keleivis {FFAF00}%s.{ffffff}.\n\n\tAr norite imti ið jo pinigus?", GetPlayerNameEx(playerid));
			ShowPlayerDialogEx(vairuotojas, 5889, DIALOG_STYLE_MSGBOX, "Paslaugos", String, "Taip", "Ne");

			SendClientMessage(playerid, -1, "{ffffff} Jeigu neþinote kaip paaiðkinti vietà, paþymëkite jà þemëlapyje!");
		}
	}

	SelectedCreditHouseID[playerid] = -1;

	return 1;
}

f_public: Float: GetDistanceBetweenPlayers(p1, p2)
{
    new Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2;

    if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
    {
        return -1.00;
    }

    GetPlayerPos(p1, x1, y1, z1);
    GetPlayerPos(p2, x2, y2, z2);

    return floatsqroot(floatpower(floatabs(floatsub(x2, x1)), 2) + floatpower(floatabs(floatsub(y2, y1)), 2) + floatpower(floatabs(floatsub(z2, z1)), 2));
}

stock GetClosestPlayer(playerid)
{
    new x, Float: dis, Float: dis2, player;

    player = -1;
    dis    = 99999.99;

    for(x = 0, size = GetPlayerPoolSize(); x <= size; x ++)
    {
        if(IsPlayerConnected(x))
        {
            if(x != playerid)
            {
                dis2 = GetDistanceBetweenPlayers(x, playerid);

                if(dis2 < dis && dis2 != -1.00)
                {
                    dis    = dis2;
                    player = x;
                }
            }
        }
    }
    return player;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if((newkeys & KEY_SECONDARY_ATTACK) && !(oldkeys & KEY_SECONDARY_ATTACK)) //If player presses ENTER
    {
        if(IsGambling[playerid] == true)
        {
            if(IsSpinning[playerid] == false)
            {
	            if(GetPlayerMoneyA(playerid) >= GAMBLE_WAGER(playerid))
	            {
	                PlayerEnum[playerid][TotalPaid] = PlayerEnum[playerid][TotalPaid] + GAMBLE_WAGER(playerid);
	                GivePlayerMoneyA(playerid, GAMBLE_WAGER(playerid) - GAMBLE_WAGER(playerid)*2);
	                IsSpinning[playerid] = true;
			        PreSpinTimer[playerid] = SetTimerEx("Prespin", 100, true, "i", playerid);
			        SetTimerEx("SpinSpinners", 3000, false, "i", playerid);
			        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw2]);
					PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw3]);
					PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw4]);
					PlayerTextDrawHide(playerid, PlayerEnum[playerid][Textdraw5]);

					if(GetPlayerMoneyA(playerid) < GAMBLE_WAGER(playerid))
					{
					    new wager[32];
						format(wager,sizeof(wager),"~r~Statymas = $%d", PI[playerid][Stafke]);
						PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw30],wager);
					}
					else
					{
					    new wager[32];
						format(wager,sizeof(wager),"~y~Statymas = $%d", PI[playerid][Stafke]);
						PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw30],wager);
					}
					new doublebar[16], bar[16], bell[16], cherry[16], grapes[16], sixtynine[16];
					format(doublebar,sizeof(doublebar),"= $%i",REWARD_DOUBLEBAR * GAMBLE_WAGER(playerid));
					format(bar,sizeof(bar),"= $%i",REWARD_BAR * GAMBLE_WAGER(playerid));
					format(bell,sizeof(bell),"= $%i",REWARD_BELL * GAMBLE_WAGER(playerid));
					format(cherry,sizeof(cherry),"= $%i",REWARD_CHERRY * GAMBLE_WAGER(playerid));
					format(grapes,sizeof(grapes),"= $%i",REWARD_GRAPES * GAMBLE_WAGER(playerid));
					format(sixtynine,sizeof(sixtynine),"= $%i",REWARD_SIXTYNINE * GAMBLE_WAGER(playerid));
					PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw29], doublebar);
					PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw28], bar);
					PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw24], sixtynine);
					PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw27], bell);
					PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw25], grapes);
					PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw26], cherry);
					PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw29]);
					PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw28]);
					PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw24]);
					PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw27]);
					PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw25]);
					PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw26]);
					SetPlayerWonPaid(playerid);
				}
				else return SendClientMessage(playerid, -1, "{ffffff} Jus nebegalite sukti aparato, nes jums neuþtenka pinigø!");
			}else return SendClientMessage(playerid, -1, "{ffffff} Norëdami pradëti kità sukimà, palaukite kol sustos sukimo aparatas!");
		}
    }

	if(PRESSED(KEY_SECONDARY_ATTACK))
	{
		for(new cHouseID; cHouseID < MAX_CREDIT_HOUSES; cHouseID ++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, CHD[cHouseID][_cHouseEnterPos][0], CHD[cHouseID][_cHouseEnterPos][1], CHD[cHouseID][_cHouseEnterPos][2]))
			{
				if(CHD[cHouseID][_cHouseLocked] && strcmp(CHD[cHouseID][_cHouseOwner], GetPlayerNameEx(playerid), false))
				{
					return SendClientMessage(playerid, -1, "{ffffff} Namo durys uþrakintos.");
				}

				if(!strcmp(CHD[cHouseID][_cHouseOwner], GetPlayerNameEx(playerid), true))
				{
					SendClientMessage(playerid, -1, "{4C7CFF}< > {ffffff}Áëjote á savo namus. Namø valdymas: {FFAF00} /cnamas{ffffff}!");
					SendClientMessage(playerid, -1, "{4C7CFF}< > {ffffff}Norëdami atrakinti/uþrakinti namo duris raðykite: {FFAF00} /craktas{ffffff}!");
				}

				SelectedCreditHouseID[playerid] = cHouseID;

				AC_SetPlayerPos(playerid, CHD[cHouseID][_cHouseExitPos][0], CHD[cHouseID][_cHouseExitPos][1], CHD[cHouseID][_cHouseExitPos][2]);
			}

			if(IsPlayerInRangeOfPoint(playerid, 1.0, CHD[cHouseID][_cHouseExitPos][0], CHD[cHouseID][_cHouseExitPos][1], CHD[cHouseID][_cHouseExitPos][2]))
			{
				SelectedCreditHouseID[playerid] = -1;

				AC_SetPlayerPos(playerid, CHD[cHouseID][_cHouseEnterPos][0], CHD[cHouseID][_cHouseEnterPos][1], CHD[cHouseID][_cHouseEnterPos][2]);
			}
		}

		new house = HouseID[playerid];

		if(house != -1)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[house][IntX], HouseInfo[house][IntY], HouseInfo[house][IntZ]))
			{
				SetPlayerInterior 		(playerid, 0);
				SetPlayerVirtualWorld 	(playerid, 0);
				AC_SetPlayerPos 		(playerid, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ]);
				SetPlayerFacingAngle 	(playerid, HouseInfo[house][ExitAngle]);

				HouseID[playerid] = -1;
			}
		}

		for(house = 0; house < MAX_HOUSES; house++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ]))
			{
				if(!HouseInfo[house][Buyed])
				{
					new str[300];

					if(PlayerHaveHouse(playerid) != -1) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite namà!");

					if(GetPlayerMoneyA(playerid) < HouseInfo[house][Cost]) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					GivePlayerMoneyA(playerid, -HouseInfo[house][Cost]);

					HouseInfo[house][Buyed] 	= true;
					HouseInfo[house][Locked] 	= true;

					format(HouseInfo[house][Owner], 21, "%s", GetPlayerNameEx(playerid));

					new houset[10];

					switch(HouseInfo[house][hType])
					{
						case TYPE_RATAI: houset = "Namuko";
						case TYPE_BUTAS: houset = "Buto";
						case TYPE_NAMAS: houset = "Namo";
					}

					format(str, 300, "{DEFF88}%s numeris: {FFAF00}%d\n{DEFF88}Savininkas: {FFAF00}%s\n \n{DEFF88}Norëdami áeiti, spauskite ENTER",
					houset, house + 1, HouseInfo[house][Owner]);
					Update3DTextLabelText(HouseInfo[house][House3D], -1, str);

					DestroyPickup(HouseInfo[house][HousePickup]);

					HouseInfo[house][HousePickup] = CreatePickup(19522, 1, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ], 0);

					SaveHouse(house);

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai nusipirkote namà!");
				}
				else
				{
					if(HouseInfo[house][Locked] && strcmp(HouseInfo[house][Owner], GetPlayerNameEx(playerid), false)) return SendClientMessage(playerid, -1, "{ffffff} Namo duris uþrakintos. Naudokite {FFAF00} /raktas{ffffff}!");

					if(!strcmp(HouseInfo[house][Owner], GetPlayerNameEx(playerid), true)) SendClientMessage(playerid, -1, "{ffffff} Atëjote á savo namà, namo meniu - {FFAF00} /namas{ffffff}!");

					SetPlayerVirtualWorld 	(playerid, HouseInfo[house][htVW]);
					SetPlayerInterior 		(playerid, HouseInfo[house][hInt]);
					AC_SetPlayerPos 		(playerid, HouseInfo[house][IntX], HouseInfo[house][IntY], HouseInfo[house][IntZ]);
					SetPlayerFacingAngle	(playerid, HouseInfo[house][IntAngle]);

					HouseID[playerid] = house;
				}
			}
		}

		if(PI[playerid][pila])
		{
			PI[playerid][pila] = false;
		}

		// ToDo:
		/*if(GetPlayerState(playerid) != PLAYER_STATE_PASSENGER && IsPlayerInAnyVehicle(playerid))
		{
			if(VehicleInfo[vehicleid][gas] < 1)
			{
				new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

				GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);

				if(!IsABike(vehicleid))
				{
					SetVehicleParamsEx(vehicleid, false, Lights, Alarm, Doors, Bonnet, Boot, Objective);
				}

				RemovePlayerFromVehicle(playerid);
			}
		}*/

		if(PI[playerid][lektuvas]!=-1)
		{
			new Float:bbX, Float:bbY, Float:bbZ, Float:bbA;

			GetVehiclePos 		(PI[playerid][lektuvas], bbX, bbY, bbZ);
			GetVehicleZAngle 	(PI[playerid][lektuvas], bbA);

			bbX += (5 * floatsin(-floatsub(bbA, 45.0), degrees)),
			bbY += (5 * floatcos(-floatsub(bbA, 45.0), degrees));

			SetPlayerInterior 		(playerid, 0);
			AC_SetPlayerPos 			(playerid, bbX, bbY, floatsub(bbZ, 0.94));
			SetPlayerFacingAngle 	(playerid, bbA);
			SetPlayerVirtualWorld 	(playerid,0);

			PI[playerid][lektuvas] =- 1;
		}

		if(CheckEntranceEnter(playerid, true))
		{
			NoCheckEntrancePickup[playerid] = 1;

			SetTimerEx("ClearEntranceVariable", 3000, false, "i", playerid);

			return 1;
		}

		if(CheckEntranceExit(playerid, true))
		{
			NoCheckEntrancePickup[playerid] = 1;

			SetTimerEx("ClearEntranceVariable", 3000, false, "i", playerid);

		    return 1;
		}

		return 1;
	}

	if(PRESSED(KEY_WALK))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			new Property = VersloID[playerid];

			for(Property = 0; Property < MAX_PROPERTYS; Property ++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, PropertyInfo[Property][pPos_X], PropertyInfo[Property][pPos_Y], PropertyInfo[Property][pPos_Z]))
				{
					if(!PropertyInfo[Property][pBuyed])
					{
					    VersloID[playerid] = Property;

						//if(GetPlayerMoneyA(playerid) < PropertyInfo[Property][pPrice]) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

	                    ShowPlayerDialogEx(playerid, PropertyBuyDialog, DIALOG_STYLE_LIST, "Verslo pirkimas", "1. Pirkti verslà\n2. Papildomo pelno informacija", "Pasirinkti", "Uþdaryti");
					}
					else
					{
						if(!strcmp(PropertyInfo[Property][pOwner], GetPlayerNameEx(playerid), false))
						{
							ShowPlayerDialogEx(playerid, MainPropertyDialog, DIALOG_STYLE_LIST, "Verslo valdymas",
							"1. Verslo nustatymai/valdymas\n2. Parduoti verslà\n3. Perleisti verslà\n4. Papildomo pelno informacija", "Pasirinkti", "Uþdaryti");

							VersloID[playerid] = Property;
						}
					}
				}
			}
		}

		for(new garageid = 0; garageid < MAX_GARAGES; garageid ++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 10.0, GI[garageid][GaragePos][0], GI[garageid][GaragePos][1], GI[garageid][GaragePos][2] - 4.0))
			{
				if(!strcmp(GI[garageid][GarageOwner], GetPlayerNameEx(playerid), false))
				{
					ShowPlayerDialogEx(playerid, GarazoValdymas, DIALOG_STYLE_LIST, "Garaþo valdymas", "1. Atidaryti garaþà\n2. Uþdaryti garaþà", "Pasirinkti", "Uþdaryti");

					pGarageID[playerid] = garageid;
				}
			}
		}

		for(new cHouseID = 0; cHouseID < MAX_CREDIT_HOUSES; cHouseID ++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 10.0, CHD[cHouseID][_cHouseGaragePos][0], CHD[cHouseID][_cHouseGaragePos][1], CHD[cHouseID][_cHouseGaragePos][2]))
			{
				if(!strcmp(CHD[cHouseID][_cHouseOwner], GetPlayerNameEx(playerid), false))
				{
					ShowPlayerDialogEx(playerid, NamuGarazoValdymas, DIALOG_STYLE_LIST, "Garaþo valdymas", "1. Atidaryti garaþà\n2. Uþdaryti garaþà", "Pasirinkti", "Uþdaryti");

					nGarageID[playerid] = cHouseID;
				}
			}
		}

		return 1;
	}

	/*if(PRESSED(262144))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			if(PolicijosMasina[0] <= vehicleid <= PolicijosMasina[sizeof(PolicijosMasina) - 1])
			{
				new giveplayerid = GetClosestPlayer(playerid);
				if(IsPlayerConnected(giveplayerid))
		     	{
			     	if(GetDistanceBetweenPlayers(playerid, giveplayerid) < 5.0)
		            {
		            	new str[128];

		            	format(str, 128, "~r~Pareigunas ~w~%s ~r~praso jusu sustoti!", GetPlayerNameEx(playerid));
		            	GameTextForPlayer(playerid, str, 2000, 4);
		            }
		     	}
			}
		}

		return 1;
	}*/

	if(PRESSED(KEY_SUBMISSION))
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
       	{
			if(GetVehicleModel(vehicleid) == 525)
			{
				new Float:aPos[3], Float: kabinamosz, Float: mechz;

				for(new v = 0, size = GetVehiclePoolSize(); v <= size; v++)
				{
				    if(GetVehicleModel(v) < 400 || v == vehicleid) continue;

					GetVehiclePos(v, aPos[0], aPos[1], aPos[2]);

					GetVehicleZAngle(vehicleid, mechz);
					GetVehicleZAngle(v, kabinamosz);

					if(IsPlayerInRangeOfPoint(playerid, 7.0, aPos[0], aPos[1], aPos[2]))
					{
						if(mechz <= kabinamosz + 10 && mechz >= kabinamosz - 10)
						{
							if(VehicleInfo[v][vNupirkta])
							{
								new vOwner = GetPlayeridMid(VehicleInfo[v][vSavininkas]);

								new str[128];

								format(str, sizeof(str), "{ffffff} Pradëjote vilkti þaidëjo {FFAF00}%s {FFFFFF}transp. priemonæ!", GetPlayerNameEx(vOwner));
								SendClientMessage(playerid, -1, str);

								format(str, sizeof(str), "{ffffff} Autoserviso ECO darbuotojas {FFAF00}%s {FFFFFF}pradëjo vilkti jûsø {FFAF00}%s{FFFFFF}!", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(v) - 400]);
								SendClientMessage(vOwner, -1, str);
							}

							AttachTrailerToVehicle(v, vehicleid);

							return 0;
						}
					}
				}
			}
		}

		return 1;
	}

	if(PRESSED(KEY_YES))
	{
		new String[128];

		if(SelectedSkin[playerid] > -1)
		{
			SelectedSkin[playerid] --;

			if(SelectedSkin[playerid] < 0)
			{
				SelectedSkin[playerid] = TotalClothesShopSkins - 1;
			}

			new SkinSlot = SelectedSkin[playerid];

			SetPlayerSkin(playerid, ClothesShopSkins[SkinSlot]);
			ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 0, 0, 0, 0);

			format(String, sizeof(String), "~w~Numeris: ~g~%d/%d~n~~w~Kaina: ~g~$%d~n~Norint iseiti: ~y~/baigti", SelectedSkin[playerid] + 1, TotalClothesShopSkins, ClothesShopSkinPrices[SelectedSkin[playerid]]);
			ShowInfoText(playerid, String, 10000, false);
		}

		if(SelectedGangSkin[playerid] > -1)
		{
			SelectedGangSkin[playerid] --;

			if(SelectedGangSkin[playerid] < 0)
			{
				SelectedGangSkin[playerid] = GangTotalClothesShopSkins - 1;
			}

			new SkinSlot = SelectedGangSkin[playerid];

			SetPlayerSkin(playerid, GangClothesShopSkins[SkinSlot]);
			ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 0, 0, 0, 0);

			format(String, sizeof(String), "~w~Numeris: ~g~%d/%d~n~~w~Kaina: ~g~$%d~n~Norint iseiti: ~y~/baigti", SelectedGangSkin[playerid] + 1, GangTotalClothesShopSkins, GangClothesShopSkinPrices[SelectedGangSkin[playerid]]);
			ShowInfoText(playerid, String, 10000, false);
		}

		if(PI[playerid][PasirinktaMasina] != -1)
        {
        	//SelectTextDraw(playerid, 0x336633FF);
            new Masina, MasinosKaina;

            switch(PI[playerid][KaPerka])
        	{
        		case 0: return 0;
        		case 1: Masina = sizeof(SportinesMasinos);
        		case 2: Masina = sizeof(Motociklai);
        		case 3: Masina = sizeof(Laivai);
        	}

            PI[playerid][PasirinktaMasina] ++;

            if(PI[playerid][PasirinktaMasina] >= Masina)
            {
                PI[playerid][PasirinktaMasina] = 0;
            }

        	if(PI[playerid][SukurtaMasina] != -1)
			{
			    if(VehicleInfo[PI[playerid][SukurtaMasina]][vNupirkta] == 2)
			    {
					SetVehicleVirtualWorld	(PI[playerid][SukurtaMasina], 0);
					DestroyVehicle			(PI[playerid][SukurtaMasina]);

					PI[playerid][SukurtaMasina] = -1;
				}
   			}

   			switch(PI[playerid][KaPerka])
        	{
        		case 0: return 0;
        		case 1: MasinosKaina = SportinesMasinos[PI[playerid][PasirinktaMasina]][1], TextDrawSetString(transporto_salonas_g[4], "masinu salonas");
        		case 2: MasinosKaina = Motociklai[PI[playerid][PasirinktaMasina]][1], TextDrawSetString(transporto_salonas_g[4], "motociklu salonas");
        		case 3: MasinosKaina = Laivai[PI[playerid][PasirinktaMasina]][1], TextDrawSetString(transporto_salonas_g[4], "laivu parduotuve");
        	}

        	switch(PI[playerid][KaPerka])
        	{
        		case 0: return 0;

        		case 1:
        		{
        			PI[playerid][SukurtaMasina] = CreateServerVehicle(SportinesMasinos[PI[playerid][PasirinktaMasina]][0], -1945.6490, 271.0439, 35.5445, 120.2910, random(126), random(126), -1);

        			format(String, sizeof(String), "~r~-~w~ Pavadinimas: ~p~%s~r~ -~n~-~w~ kaina:~g~ $%s~r~ -~n~-~w~ numeris:~y~ %d/%d~r~ -",
					VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina), PI[playerid][PasirinktaMasina] + 1, sizeof(SportinesMasinos));
        		}

        		case 2:
        		{
        			PI[playerid][SukurtaMasina] = CreateServerVehicle(Motociklai[PI[playerid][PasirinktaMasina]][0], -1946.1865, 266.0375, 40.5899, 90.0000, random(126), random(126), -1);

        			format(String, sizeof(String), "~r~-~w~ Pavadinimas: ~p~%s~r~ -~n~-~w~ kaina:~g~ $%s~r~ -~n~-~w~ numeris:~y~ %d/%d~r~ -",
					VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina), PI[playerid][PasirinktaMasina] + 1, sizeof(Motociklai));
        		}

        		case 3:
        		{
        			PI[playerid][SukurtaMasina] = CreateServerVehicle(Laivai[PI[playerid][PasirinktaMasina]][0], -2983.6296, 494.5702, 0.1902, 0.0000, random(126), random(126), -1);

        			format(String, sizeof(String), "~r~-~w~ Pavadinimas: ~p~%s~r~ -~n~-~w~ kaina:~g~ $%s~r~ -~n~-~w~ numeris:~y~ %d/%d~r~ -",
					VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina), PI[playerid][PasirinktaMasina] + 1, sizeof(Laivai));
        		}
        	}

			SetVehicleVirtualWorld(PI[playerid][SukurtaMasina], playerid + 1);
			VehicleInfo[PI[playerid][SukurtaMasina]][vNupirkta] = 2;

			PlayerTextDrawSetString(playerid, transporto_salonas_p[playerid][0], String);
		}

		new vehicleid = GetClosestVehicle(playerid);

		new Float: V_Pos[3]; GetVehiclePos(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);

		if(vehicleid != INVALID_VEHICLE_ID && IsPlayerInRangeOfPoint(playerid, 2.5, V_Pos[0], V_Pos[1], V_Pos[2]))
		{
			if(VehicleInfo[vehicleid][vNupirkta])
			{
				if(!strcmp(GetPlayerNameEx(playerid), VehicleInfo[vehicleid][vSavininkas], true))
				{
					if(VehicleInfo[vehicleid][vUzraktas])
					{
						GameTextForPlayer(playerid, "~w~Transp. priemone ~g~atrakinta!", 2000, 4);

						VehicleInfo[vehicleid][vUzraktas] = false;
					}
					else
					{
						GameTextForPlayer(playerid, "~w~Transp. priemone ~r~uzrakinta!", 2000, 4);

						VehicleInfo[vehicleid][vUzraktas] = true;
					}
				}
			}
		}

		return 1;
	}

	if(PRESSED(KEY_CTRL_BACK))
	{
		new String[128];

		if(SelectedSkin[playerid] > -1)
		{
			SelectedSkin[playerid] ++;

			if(SelectedSkin[playerid] >= TotalClothesShopSkins - 1)
			{
				SelectedSkin[playerid] = 0;
			}

			new SkinSlot = SelectedSkin[playerid];

			SetPlayerSkin(playerid, ClothesShopSkins[SkinSlot]);
			ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 0, 0, 0, 0);


			format(String, sizeof(String), "~w~Numeris: ~g~%d/%d~n~~w~Kaina: ~g~$%d~n~Norint iseiti: ~y~/baigti", SelectedSkin[playerid] + 1, TotalClothesShopSkins, ClothesShopSkinPrices[SelectedSkin[playerid]]);
			ShowInfoText(playerid, String, 10000, false);
		}

		if(SelectedGangSkin[playerid] > -1)
		{
			SelectedGangSkin[playerid] ++;

			if(SelectedGangSkin[playerid] >= GangTotalClothesShopSkins - 1)
			{
				SelectedGangSkin[playerid] = 0;
			}

			new SkinSlot = SelectedGangSkin[playerid];

			SetPlayerSkin(playerid, GangClothesShopSkins[SkinSlot]);
			ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 0, 0, 0, 0);

			format(String, sizeof(String), "~w~Numeris: ~g~%d/%d~n~~w~Kaina: ~g~$%d~n~Norint iseiti: ~y~/baigti", SelectedGangSkin[playerid] + 1, GangTotalClothesShopSkins, GangClothesShopSkinPrices[SelectedGangSkin[playerid]]);
			ShowInfoText(playerid, String, 10000, false);
		}

		if(PI[playerid][PasirinktaMasina] != -1)
        {
        	//SelectTextDraw(playerid, 0x336633FF);
            new Masina, MasinosKaina;

			switch(PI[playerid][KaPerka])
        	{
        		case 0: return 0;
        		case 1: Masina = sizeof(SportinesMasinos);
        		case 2: Masina = sizeof(Motociklai);
        		case 3: Masina = sizeof(Laivai);
        	}

            PI[playerid][PasirinktaMasina] --;

            if(PI[playerid][PasirinktaMasina] < 0)
            {
                PI[playerid][PasirinktaMasina] = Masina - 1;
            }

        	if(PI[playerid][SukurtaMasina] != -1)
			{
			    if(VehicleInfo[PI[playerid][SukurtaMasina]][vNupirkta] == 2)
			    {
					SetVehicleVirtualWorld	(PI[playerid][SukurtaMasina], 0);
					DestroyVehicle			(PI[playerid][SukurtaMasina]);

					PI[playerid][SukurtaMasina] = -1;
				}
   			}

		    switch(PI[playerid][KaPerka])
        	{
        		case 0: return 0;
        		case 1: MasinosKaina = SportinesMasinos[PI[playerid][PasirinktaMasina]][1], TextDrawSetString(transporto_salonas_g[4], "masinu salonas");
        		case 2: MasinosKaina = Motociklai[PI[playerid][PasirinktaMasina]][1], TextDrawSetString(transporto_salonas_g[4], "motociklu salonas");
        		case 3: MasinosKaina = Laivai[PI[playerid][PasirinktaMasina]][1], TextDrawSetString(transporto_salonas_g[4], "laivu parduotuve");
        	}

        	switch(PI[playerid][KaPerka])
        	{
        		case 0: return 0;

        		case 1:
        		{
        			PI[playerid][SukurtaMasina] = CreateServerVehicle(SportinesMasinos[PI[playerid][PasirinktaMasina]][0], -1945.6490, 271.0439, 35.5445, 120.2910, random(126), random(126), -1);

        			format(String, sizeof(String), "~r~-~w~ Pavadinimas: ~p~%s~r~ -~n~-~w~ kaina:~g~ $%s~r~ -~n~-~w~ numeris:~y~ %d/%d~r~ -",
					VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina), PI[playerid][PasirinktaMasina] + 1, sizeof(SportinesMasinos));
        		}

        		case 2:
        		{
        			PI[playerid][SukurtaMasina] = CreateServerVehicle(Motociklai[PI[playerid][PasirinktaMasina]][0], -1946.1865, 266.0375, 40.5899, 90.0000, random(126), random(126), -1);

        			format(String, sizeof(String), "~r~-~w~ Pavadinimas: ~p~%s~r~ -~n~-~w~ kaina:~g~ $%s~r~ -~n~-~w~ numeris:~y~ %d/%d~r~ -",
					VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina), PI[playerid][PasirinktaMasina] + 1, sizeof(Motociklai));
        		}

        		case 3:
        		{
        			PI[playerid][SukurtaMasina] = CreateServerVehicle(Laivai[PI[playerid][PasirinktaMasina]][0], -2983.6296, 494.5702, 0.1902, 0.0000, random(126), random(126), -1);

        			format(String, sizeof(String), "~r~-~w~ Pavadinimas: ~p~%s~r~ -~n~-~w~ kaina:~g~ $%s~r~ -~n~-~w~ numeris:~y~ %d/%d~r~ -",
					VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina), PI[playerid][PasirinktaMasina] + 1, sizeof(Laivai));
        		}
        	}

			SetVehicleVirtualWorld(PI[playerid][SukurtaMasina], playerid + 1);
			VehicleInfo[PI[playerid][SukurtaMasina]][vNupirkta] = 2;

			PlayerTextDrawSetString(playerid, transporto_salonas_p[playerid][0], String);
		}

		return 1;
	}

	if(PRESSED(KEY_SPRINT))
	{
		new String[200];

		if(PI[playerid][PasirinktaMasina] != -1)
        {
        	if(PI[playerid][Transportas1] != -1 && PI[playerid][Transportas2] != -1)
        	{
        		if(!PI[playerid][TransportoSlotas])
		        {
        			SendClientMessage	(playerid, -1, "{ffffff} Treèio transporto slotà galite ásigyti paraðæ /paslaugos!");
		        	ExitFromCarShop		(playerid);

		        	return 1;
		        }
		        else
		        {
		        	if(PI[playerid][Transportas3] != -1)
		        	{
		        		SendClientMessage	(playerid, -1, "{ffffff} Jus jau turite 3 transp. priemones!");
		        		ExitFromCarShop		(playerid);

		        		return 1;
		        	}
		        }
        	}

        	new Masina = PI[playerid][PasirinktaMasina], MasinosKaina;

        	switch(PI[playerid][KaPerka])
        	{
        		case 0: return 0;
        		case 1: MasinosKaina = SportinesMasinos[Masina][1];
        		case 2: MasinosKaina = Motociklai[Masina][1];
        		case 3: MasinosKaina = Laivai[Masina][1];
        	}

   	        if(GetPlayerMoneyA(playerid) < MasinosKaina) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

   	        //format(String, sizeof(String), "{ffffff} Nusipirkote {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff}. Transporto valdymas: {ffffff}/transportas{ffffff}.", VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina));
   	        //SendClientMessage(playerid, -1, String);

   	        format(String, sizeof(String), "{ffffff} Nusipirkote {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff}!", VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(MasinosKaina));
	   	    SendClientMessage(playerid, -1, String);

	   	    SendClientMessage(playerid, -1, "{ffffff} Transporto valdymas: {FFAF00} /transportas{ffffff}.");

   	        new Colors[2];

   	        Colors[0] = random(126);
   	        Colors[1] = random(126);

   	        if(PI[playerid][Transportas1] == -1)
   	        {
   	        	switch(PI[playerid][KaPerka])
	        	{
	        		case 0: return 0;

	        		case 1:
	        		{
	        			new iRandom = random(sizeof(RandomSalonoSpawn));

	        			PI[playerid][Transportas1] = AC_CreateVehicle(SportinesMasinos[Masina][0], RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}

	        		case 2:
	        		{
	        			new iRandom = random(sizeof(RandomMotocikluSpawn));

	        			PI[playerid][Transportas1] = AC_CreateVehicle(Motociklai[Masina][0], RandomMotocikluSpawn[iRandom][0], RandomMotocikluSpawn[iRandom][1], RandomMotocikluSpawn[iRandom][2], RandomMotocikluSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}

	        		case 3:
	        		{
	        			new iRandom = random(sizeof(RandomLaivuSpawn));

	        			PI[playerid][Transportas1] = AC_CreateVehicle(Laivai[Masina][0], RandomLaivuSpawn[iRandom][0], RandomLaivuSpawn[iRandom][1], RandomLaivuSpawn[iRandom][2], RandomLaivuSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}
	        	}

   	        	new vehicleid = PI[playerid][Transportas1];

   	        	ac_SetVehicleToRespawn(vehicleid);

   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
				format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
				format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

				for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

				VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
				VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
				VehicleInfo[vehicleid][vPaintjob] 	= -1;
				VehicleInfo[vehicleid][vUzraktas] 	= true;
				VehicleInfo[vehicleid][vNupirkta] 	= true;
				VehicleInfo[vehicleid][vRida] 		= 0.0;
				VehicleInfo[vehicleid][vSprogusi]  	= false;
				VehicleInfo[vehicleid][vDujos]		= false;
				VehicleInfo[vehicleid][vIjungta]	= false;
				VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
				VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
				VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
				VehicleInfo[vehicleid][vKaina]		= MasinosKaina;
				VehicleInfo[vehicleid][vTA]			= 0;

				for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
				{
					VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
					VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
				}

				SetVehicleFuelInfo(vehicleid);

				SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
				SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

				SavePlayerVehicle1(playerid);

   	        	GivePlayerMoneyA(playerid, -MasinosKaina);
   	        	ExitFromCarShop	(playerid);

   	        	switch(PI[playerid][KaPerka])
	        	{
	        		case 0: return 0;

	        		case 1, 2:
	        		{
	        			if(PropertyInfo[TR_SALONAS][pBuyed])
						{
							PropertyInfo[TR_SALONAS][pProfit] += floatround(MasinosKaina / 300);
						}
					}

	        		case 3:
	        		{
	        			if(PropertyInfo[LAIVU_SALONAS][pBuyed])
						{
							PropertyInfo[LAIVU_SALONAS][pProfit] += floatround(MasinosKaina / 300);
						}
					}
	        	}

   	        	return 1;
   	        }

   	        if(PI[playerid][Transportas2] == -1)
   	        {
   	        	switch(PI[playerid][KaPerka])
	        	{
	        		case 0: return 0;

	        		case 1:
	        		{
	        			new iRandom = random(sizeof(RandomSalonoSpawn));

	        			PI[playerid][Transportas2] = AC_CreateVehicle(SportinesMasinos[Masina][0], RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}

	        		case 2:
	        		{
	        			new iRandom = random(sizeof(RandomMotocikluSpawn));

	        			PI[playerid][Transportas2] = AC_CreateVehicle(Motociklai[Masina][0], RandomMotocikluSpawn[iRandom][0], RandomMotocikluSpawn[iRandom][1], RandomMotocikluSpawn[iRandom][2], RandomMotocikluSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}

	        		case 3:
	        		{
	        			new iRandom = random(sizeof(RandomLaivuSpawn));

	        			PI[playerid][Transportas2] = AC_CreateVehicle(Laivai[Masina][0], RandomLaivuSpawn[iRandom][0], RandomLaivuSpawn[iRandom][1], RandomLaivuSpawn[iRandom][2], RandomLaivuSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}
	        	}

   	        	new vehicleid = PI[playerid][Transportas2];

   	        	ac_SetVehicleToRespawn(vehicleid);

   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
				format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
				format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

				for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

				VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
				VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
				VehicleInfo[vehicleid][vPaintjob] 	= -1;
				VehicleInfo[vehicleid][vUzraktas] 	= true;
				VehicleInfo[vehicleid][vNupirkta] 	= true;
				VehicleInfo[vehicleid][vRida] 		= 0.0;
				VehicleInfo[vehicleid][vSprogusi]  	= false;
				VehicleInfo[vehicleid][vDujos]		= false;
				VehicleInfo[vehicleid][vIjungta]	= false;
				VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
				VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
				VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
				VehicleInfo[vehicleid][vKaina]		= MasinosKaina;
				VehicleInfo[vehicleid][vTA]			= 0;

				for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
				{
					VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
					VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
				}

				SetVehicleFuelInfo(vehicleid);

				SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
				SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

				SavePlayerVehicle2(playerid);

   	        	GivePlayerMoneyA 		(playerid, -MasinosKaina);
   	        	ExitFromCarShop	(playerid);

   	        	switch(PI[playerid][KaPerka])
	        	{
	        		case 0: return 0;

	        		case 1, 2:
	        		{
	        			if(PropertyInfo[TR_SALONAS][pBuyed])
						{
							PropertyInfo[TR_SALONAS][pProfit] += floatround(MasinosKaina / 300);
						}
					}

	        		case 3:
	        		{
	        			if(PropertyInfo[LAIVU_SALONAS][pBuyed])
						{
							PropertyInfo[LAIVU_SALONAS][pProfit] += floatround(MasinosKaina / 300);
						}
					}
	        	}

   	        	return 1;
   	        }

   	        if(PI[playerid][Transportas3] == -1)
   	        {
   	        	switch(PI[playerid][KaPerka])
	        	{
	        		case 0: return 0;

	        		case 1:
	        		{
	        			new iRandom = random(sizeof(RandomSalonoSpawn));

	        			PI[playerid][Transportas3] = AC_CreateVehicle(SportinesMasinos[Masina][0], RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}

	        		case 2:
	        		{
	        			new iRandom = random(sizeof(RandomMotocikluSpawn));

	        			PI[playerid][Transportas3] = AC_CreateVehicle(Motociklai[Masina][0], RandomMotocikluSpawn[iRandom][0], RandomMotocikluSpawn[iRandom][1], RandomMotocikluSpawn[iRandom][2], RandomMotocikluSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}

	        		case 3:
	        		{
	        			new iRandom = random(sizeof(RandomLaivuSpawn));

	        			PI[playerid][Transportas3] = AC_CreateVehicle(Laivai[Masina][0], RandomLaivuSpawn[iRandom][0], RandomLaivuSpawn[iRandom][1], RandomLaivuSpawn[iRandom][2], RandomLaivuSpawn[iRandom][3], Colors[0], Colors[1], -1);
	        		}
	        	}

   	        	new vehicleid = PI[playerid][Transportas3];

   	        	ac_SetVehicleToRespawn(vehicleid);

   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
				format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
				format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

				for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

				VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
				VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
				VehicleInfo[vehicleid][vPaintjob] 	= -1;
				VehicleInfo[vehicleid][vUzraktas] 	= true;
				VehicleInfo[vehicleid][vNupirkta] 	= true;
				VehicleInfo[vehicleid][vRida] 		= 0.0;
				VehicleInfo[vehicleid][vSprogusi]  	= false;
				VehicleInfo[vehicleid][vDujos]		= false;
				VehicleInfo[vehicleid][vIjungta]	= false;
				VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
				VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
				VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
				VehicleInfo[vehicleid][vKaina]		= MasinosKaina;
				VehicleInfo[vehicleid][vTA]			= 0;

				for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
				{
					VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
					VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
				}

				SetVehicleFuelInfo(vehicleid);

				SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
				SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

				SavePlayerVehicle3(playerid);

   	        	GivePlayerMoneyA 		(playerid, -MasinosKaina);
   	        	ExitFromCarShop	(playerid);

   	        	switch(PI[playerid][KaPerka])
	        	{
	        		case 0: return 0;

	        		case 1, 2:
	        		{
	        			if(PropertyInfo[TR_SALONAS][pBuyed])
						{
							PropertyInfo[TR_SALONAS][pProfit] += floatround(MasinosKaina / 300);
						}
					}

	        		case 3:
	        		{
	        			if(PropertyInfo[LAIVU_SALONAS][pBuyed])
						{
							PropertyInfo[LAIVU_SALONAS][pProfit] += floatround(MasinosKaina / 300);
						}
					}
	        	}

   	        	return 1;
   	        }
        }

        if(SelectedGangSkin[playerid] > -1)
		{
			new SkinSlot = SelectedGangSkin[playerid];

			if(GetPlayerMoneyA(playerid) >= GangClothesShopSkinPrices[SkinSlot])
			{
				if(!PI[playerid][uniformd])
				{
					PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);

					PI[playerid][drabuziai] = GangClothesShopSkins[SkinSlot];

					GivePlayerMoneyA		(playerid, -GangClothesShopSkinPrices[SkinSlot]);
					SetPlayerSkin   		(playerid, PI[playerid][drabuziai]);
					SetCameraBehindPlayer   (playerid);
					SetPlayerVirtualWorld   (playerid, 0);
					TogglePlayerControllable(playerid, true);

					SelectedGangSkin[playerid] = -1;

					/*if(PropertyInfo[DRABUZIU_PARDUOTUVE][pBuyed])
					{
						PropertyInfo[DRABUZIU_PARDUOTUVE][pProfit] += ClothesShopSkinPrices[SkinSlot];
					}*/
				}
				else
				{
					ShowInfoText(playerid, "~r~Pirmiausia turite nusivilkti darbinius drabuzius!", 6000, true);
				}
			}
			else
			{
				ShowInfoText(playerid, "~r~Neuztenka pinigu!", 3000, true);
			}
		}

		if(SelectedSkin[playerid] > -1)
		{
			new SkinSlot = SelectedSkin[playerid];

			if(GetPlayerMoneyA(playerid) >= ClothesShopSkinPrices[SkinSlot])
			{
				if(!PI[playerid][uniformd])
				{
					PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);

					PI[playerid][drabuziai] = ClothesShopSkins[SkinSlot];

					GivePlayerMoneyA		(playerid, -ClothesShopSkinPrices[SkinSlot]);
					SetPlayerSkin   		(playerid, PI[playerid][drabuziai]);
					SetCameraBehindPlayer   (playerid);
					SetPlayerVirtualWorld   (playerid, 0);
					TogglePlayerControllable(playerid, true);

					SelectedSkin[playerid] = -1;

					if(PropertyInfo[DRABUZIU_PARDUOTUVE][pBuyed])
					{
						PropertyInfo[DRABUZIU_PARDUOTUVE][pProfit] += ClothesShopSkinPrices[SkinSlot];
					}
				}
				else
				{
					ShowInfoText(playerid, "~r~Pirmiausia turite nusivilkti darbinius drabuzius!", 6000, true);
				}
			}
			else
			{
				ShowInfoText(playerid, "~r~Neuztenka pinigu!", 3000, true);
			}
		}

		if(PI[playerid][zvejoja])
		{
			if(!IsPlayerInRangeOfPoint(playerid,10, -1473.0586,679.3528,1.3565) ||
			!IsPlayerInRangeOfPoint(playerid,10,1483.3712,-229.0811,2.5860) ||
			!IsPlayerInRangeOfPoint(playerid,10,1483.0999,-240.1637,2.5860) ||
			!IsPlayerInRangeOfPoint(playerid,10,1483.1444,-250.3070,2.5860) ||
			!IsPlayerInRangeOfPoint(playerid,10,1474.6935,-258.6636,2.5860) ||
			!IsPlayerInRangeOfPoint(playerid,10,1465.1777,-258.3516,2.5860) ||
			!IsPlayerInRangeOfPoint(playerid,10,1455.1544,-258.7960,2.5610) ||
			!IsPlayerInRangeOfPoint(playerid,10,1442.5587,-258.8754,2.5860) ||
			!IsPlayerInRangeOfPoint(playerid,10,1431.5696,-258.9926,2.5860) ||
			!IsPlayerInRangeOfPoint(playerid,10,1422.0123,-258.8349,2.5860) ||
			!IsPlayerInRangeOfPoint(playerid,10,1413.1741,-250.0321,2.5860) ||
			!IsPlayerInRangeOfPoint(playerid,10,1412.9000,-240.0776,2.5860))
			{
				if(PI[playerid][laikastraukti])
				{
					if(PI[playerid][kiekistrauke] < 100) PI[playerid][kiekistrauke] += 5;

					SetPlayerProgressBarValue	(playerid, FishingBar[playerid], PI[playerid][kiekistrauke]);
					UpdatePlayerProgressBar 	(playerid, FishingBar[playerid]);
					ApplyAnimation 		(playerid, "SWORD", "sword_block", 4.1, 0, 1, 1, 1, 1, 1);
				}
				else
				{
					SendClientMessage 			(playerid, -1, "{ffffff} Iðtraukëte meðkëræ per anksti, be laimikio!");
					ClearAnimations			 	(playerid);
					TogglePlayerControllable 	(playerid, true);

					PI[playerid][kiekistrauke] 		= 0;
					PI[playerid][zvejoja] 			= false;
					PI[playerid][laikastraukti] 	= false;

					if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2);

					DestroyPlayerProgressBar(playerid, FishingBar[playerid]);

					FishingBar[playerid] = INVALID_PLAYER_BAR_ID;

					KillTimer(ZvejojaEx[playerid]);
					KillTimer(UzkiboEx[playerid]);
				}
			}
		}

		return 1;
	}

	if(PRESSED(KEY_FIRE))
	{
		if(	PlayerInZone(playerid, -2464.2332,1450.8206, -2399.1199,1453.5428) || PlayerInZone(playerid, -2403.5088,1429.0901, -2400.8433,1453.7195) ||
		PlayerInZone(playerid, -2410.3289,1429.5035, -2400.4282,1432.2861) || PlayerInZone(playerid, -2465.7004,1428.9535, -2457.6633,1432.3746) ||
		PlayerInZone(playerid, -2463.9307,1429.4803, -2461.0876,1454.0513))
		{
			if(FS[playerid][Fishing] == 0)
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid, MESKERE_ATTACH_SLOT))
				{
					if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Þvejoti ið transp. priemonës negalite!");

					new unguriai = PI[playerid][ungurys];
					new karosai = PI[playerid][karosas];
					new karpiai = PI[playerid][karpis];
					new karsiai = PI[playerid][karsis];
					new lydekos = PI[playerid][lydeka];

					if(!zVarzybos)
					{
						if(unguriai + karosai + karpiai + karsiai + lydekos > 100)
						{
							SendClientMessage(playerid, -1, "{ffffff} Jus jau turite per daug þuvies, daugiau nepaneðite. Parduoti jas galite MetroCity.lt Turguje!");
							SendClientMessage(playerid, -1, "{ffffff} Já rasite: {FFAF00} /gps > Kitos vietovës > MetroCity.lt Turgus{ffffff}.");

							return 1;
						}
					}

					if(!PI[playerid][meskere]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite meðkerës!");

					if(!PI[playerid][valas]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite valo!");

					if(PI[playerid][masalas] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite masalo!");

					SendClientMessage 		(playerid, -1, "{ffffff} ÞVEJYBA {ffffff}Uþmetëte meðkëræ, laukite kol uþkibs...");
					TogglePlayerControllable(playerid, false);
					ApplyAnimation 			(playerid, "SWORD", "sword_block", 4.1, 0, 1, 1, 1, 1, 1);

					FishingTimer[playerid] 	= SetTimerEx("StartFishing", (5 + random(5)) * 1000, false, "d", playerid);
					FS[playerid][Fishing] 	= 1;
				}
				else
				{
					SendClientMessage(playerid, -1, "{ffffff} Turite bûti iðsitraukæs meðkëræ - {FFAF00} /meskere{ffffff}!");
				}
			}
		}

		if(GetPlayerInterior(playerid) == 40)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	       	{
				if(GetPlayerWeapon(playerid) == WEAPON_SHOVEL) // Kastuvas
				{
					new Float: KiekTuri = PI[playerid][Aliuminis] + PI[playerid][Varis] + PI[playerid][Zalvaris] + PI[playerid][Auksas] + PI[playerid][Titanas] + PI[playerid][Sidabras];

					if(KiekTuri > 250.00) return SendClientMessage(playerid, -1, "{ffffff} Daugiau {FFAF00}250.00 {ffffff}KG metalo nepaneðite!");

					if(IsPlayerInRangeOfPoint(playerid, 5.0, PI[playerid][KasPosX], PI[playerid][KasPosY], PI[playerid][KasPosZ]))
					{
						return SendClientMessage(playerid, -1, "{ffffff} Èia jau bandëte kasti, nueikite toliau!");
					}

					if(PI[playerid][kiekiskase] == 0)
					{
						KasaEx[playerid] = SetTimerEx("Uzsikase", 3000, false, "d", playerid);

						IskasenuBar[playerid] = CreatePlayerProgressBar(playerid, 243.00, 357.00, 152.50, 16.20, -6529025, 100.0);

						ShowPlayerProgressBar		(playerid, IskasenuBar[playerid]);
						SetPlayerProgressBarValue 	(playerid, IskasenuBar[playerid], PI[playerid][kiekiskase]);
						TogglePlayerControllable 	(playerid, false);
					}

					if(PI[playerid][kiekiskase] < 100)
					{
						PI[playerid][kiekiskase] += 7;
					}

					GameTextForPlayer 	(playerid, "~W~Kaskite kuo greiciau, kol duobe neuzsikase!", 1000, 4);
					ApplyAnimation 		(playerid, "CHAINSAW", "CSAW_G", 4.1, 0, 0, 0, 0, 0);

					SetPlayerProgressBarValue	(playerid, IskasenuBar[playerid], PI[playerid][kiekiskase]);
					UpdatePlayerProgressBar 	(playerid, IskasenuBar[playerid]);
				}
			}
		}

		return 1;
	}

	if(PRESSED(KEY_ANALOG_LEFT))
	{
		if(SelectedSkin[playerid] > -1)
		{
			SelectedSkin[playerid] --;

			if(SelectedSkin[playerid] < 0)
			{
				SelectedSkin[playerid] = TotalClothesShopSkins - 1;
			}

			new String[128];
			new SkinSlot = SelectedSkin[playerid];

			SetPlayerSkin(playerid, ClothesShopSkins[SkinSlot]);
			ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 0, 0, 0, 0);

			format(String, sizeof(String), "~w~Numeris: ~g~%d/%d~n~~w~Kaina: ~g~$%d~n~Norint iseiti: ~y~/baigti", SelectedSkin[playerid] + 1, TotalClothesShopSkins, ClothesShopSkinPrices[SelectedSkin[playerid]]);
			ShowInfoText(playerid, String, 10000, false);
		}

		if(SelectedGangSkin[playerid] > -1)
		{
			SelectedGangSkin[playerid] --;

			if(SelectedGangSkin[playerid] < 0)
			{
				SelectedGangSkin[playerid] = GangTotalClothesShopSkins - 1;
			}

			new String[128];
			new SkinSlot = SelectedGangSkin[playerid];

			SetPlayerSkin(playerid, GangClothesShopSkins[SkinSlot]);
			ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 0, 0, 0, 0);

			format(String, sizeof(String), "~w~Numeris: ~g~%d/%d~n~~w~Kaina: ~g~$%d~n~Norint iseiti: ~y~/baigti", SelectedGangSkin[playerid] + 1, GangTotalClothesShopSkins, GangClothesShopSkinPrices[SelectedGangSkin[playerid]]);
			ShowInfoText(playerid, String, 10000, false);
		}

		if(IsPlayerInAnyVehicle(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			if(!IsABike(vehicleid))
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

					GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);

					if(!Engine)
					{
						if(VehicleInfo[vehicleid][vDujos])
						{
							if(VehicleInfo[vehicleid][vIjungta])
							{
								if(VehicleInfo[vehicleid][vDujuLikutis] <= 0.0) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonëje nëra dujø!");
							}
							else
							{
								if(VehicleInfo[vehicleid][vKuras] <= 0.0) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonëje nëra kuro!");
							}
						}
						else
						{
							if(VehicleInfo[vehicleid][vKuras] <= 0.0) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonëje nëra kuro!");
						}

						SetVehicleParamsEx	(vehicleid, true, Lights, Alarm, Doors, Bonnet, Boot, Objective);
						GameTextForPlayer	(playerid, "~w~Variklis ~g~uzvestas!", 2000, 4);
					}
					else
					{
						SetVehicleParamsEx	(vehicleid, false, Lights, Alarm, Doors, Bonnet, Boot, Objective);
						GameTextForPlayer	(playerid, "~w~Variklis ~r~uzgesintas!", 2000, 4);
					}
				}
			}
		}

		return 1;
	}

	if(PRESSED(KEY_ANALOG_RIGHT))
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(SelectedSkin[playerid] > -1)
		{
			SelectedSkin[playerid] ++;

			if(SelectedSkin[playerid] >= TotalClothesShopSkins - 1)
			{
				SelectedSkin[playerid] = 0;
			}

			new String[128];
			new SkinSlot = SelectedSkin[playerid];

			SetPlayerSkin(playerid, ClothesShopSkins[SkinSlot]);
			ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 0, 0, 0, 0);


			format(String, sizeof(String), "~w~Numeris: ~g~%d/%d~n~~w~Kaina: ~g~$%d~n~Norint iseiti: ~y~/baigti", SelectedSkin[playerid] + 1, TotalClothesShopSkins, ClothesShopSkinPrices[SelectedSkin[playerid]]);
			ShowInfoText(playerid, String, 10000, false);
		}

		if(SelectedGangSkin[playerid] > -1)
		{
			SelectedGangSkin[playerid] ++;

			if(SelectedGangSkin[playerid] >= GangTotalClothesShopSkins - 1)
			{
				SelectedGangSkin[playerid] = 0;
			}

			new String[128];
			new SkinSlot = SelectedGangSkin[playerid];

			SetPlayerSkin(playerid, GangClothesShopSkins[SkinSlot]);
			ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 0, 0, 0, 0);

			format(String, sizeof(String), "~w~Numeris: ~g~%d/%d~n~~w~Kaina: ~g~$%d~n~Norint iseiti: ~y~/baigti", SelectedGangSkin[playerid] + 1, GangTotalClothesShopSkins, GangClothesShopSkinPrices[SelectedGangSkin[playerid]]);
			ShowInfoText(playerid, String, 10000, false);
		}

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(!IsABike(vehicleid))
			{
				if(PI[playerid][cuffed]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas!");

				ShowPlayerDialogEx(playerid, 4147, DIALOG_STYLE_LIST, "Transporto priemonës valdymas", "{ffffff}Ájungti/Iðjungti ðviesas\nAtidaryti/Uþdaryti kapotà\nAtidaryti/Uþdaryti bagaþin", "Pasirinkti", "Atðaukti");
			}
		}

		return 1;
	}

	if(PRESSED(KEY_NO))
	{
		if(PI[playerid][specialybe] == 3)
		{
			if(IsPlayerInRangeOfPoint(playerid, 4.0, 1768.6866,-2021.8337,14.1454) || IsPlayerInRangeOfPoint(playerid, 4.0, 1766.6501,-2031.9403,13.8563))
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new vehid = GetPlayerVehicleID(playerid);

					if(KurjeriuMasina[0] <= vehid <= KurjeriuMasina[sizeof(KurjeriuMasina) - 1])
					{
						new String[800], Stringas[800];

						strcat(String, "Krovinys\tPradinis ánaðas\tAtsiskaitymas uþ pristatymà\n");

						for(new i = 0; i < sizeof(KurjeriuPasikrovimas); i ++)
						{
							format(Stringas, sizeof(Stringas), "%d. %s\t{FFAF00}$%d\t{FFAF00}$%d\n", i + 1,
							KurjeriuPasikrovimas[i][Name0], KurjeriuPasikrovimas[i][Price1], KurjeriuPasikrovimas[i][Price2]);
							strcat(String, Stringas);
						}

						ShowPlayerDialogEx(playerid, 4592, DIALOG_STYLE_TABLIST_HEADERS, "Kurjeriø pasikrovimas", String, "Pasirinkti", "Uþdaryti");
					}
				}
				else
				{
					SendClientMessage(playerid, -1, "{ffffff} Turite èia privaþiuoti su darbine transp. priemone!");
				}
			}
			
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 343.5182,1799.6932,18.3275)) // áëjimas á trefkes
			{
				if(PI[playerid][specialybe] == 1 || PI[playerid][specialybe] == 5)
				{
				    AC_SetPlayerPos(playerid, 347.4177,1795.3444,18.2190);
				}
			}
			
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 347.4177,1795.3444,18.2190)) // iðëjimas ið trefkes
			{
				if(PI[playerid][specialybe] == 1 || PI[playerid][specialybe] == 5)
				{
				    AC_SetPlayerPos(playerid, 343.5182,1799.6932,18.3275);
				}
			}

			if(IsPlayerInRangeOfPoint(playerid, 4.0, -2683.5378,194.4817,4.3280))
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new vehid = GetPlayerVehicleID(playerid);

					if(KurjeriuMasina[0] <= vehid <= KurjeriuMasina[sizeof(KurjeriuMasina) - 1])
					{
						AC_SetVehiclePos 		(vehid, -1311.2468,-164.1337,-91.9670);
						SetVehicleZAngle 		(vehid, 90.00);
						LinkVehicleToInterior 	(vehid, 48);
						SetPlayerInterior 		(playerid, 48);
					}
					else
					{
						SendClientMessage(playerid, -1, "{ffffff} Á garaþà ávaþiuoti galima tik su darbine transp. priemone!");
					}
				}
				else
				{
					SendClientMessage(playerid, -1, "{ffffff} Á garaþà ávaþiuoti galima tik su darbine transp. priemone!");
				}
			}

			if(IsPlayerInRangeOfPoint(playerid, 4.0, -1311.2468,-164.1337,-91.9670))
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new vehid = GetPlayerVehicleID(playerid);

					if(KurjeriuMasina[0] <= vehid <= KurjeriuMasina[sizeof(KurjeriuMasina) - 1])
					{
						AC_SetVehiclePos 		(vehid, -2683.5378,194.4817,4.3280);
						SetVehicleZAngle 		(vehid, 90.0000);
						LinkVehicleToInterior 	(vehid, 0);
						SetPlayerInterior 		(playerid, 0);
					}
				}
				else
				{
					SendClientMessage(playerid, -1, "{ffffff} Ið garaþo iðvaþiuoti galima tik su darbine transp. priemone!");
				}
			}
		}

		if(PI[playerid][specialybe] == 11)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new vehid = GetPlayerVehicleID(playerid);

				if(FuristuMasina[0] <= vehid <= FuristuMasina[sizeof(FuristuMasina) - 1])
				{
					if(IsPlayerInRangeOfPoint(playerid, 6.0, vK_Pos[vehid][0], vK_Pos[vehid][1], vK_Pos[vehid][2]))
					{
						if(PI[playerid][Issikrauna] == false)
						{
							if(vKrovinys[vehid] != -1)
							{
								if(!IsTrailerAttachedToVehicle(vehid) && GetVehicleModel(vehid) != 482) return SendClientMessage(playerid, -1, "{ffffff} Turite atvaþiuoti su priekaba!");

								PI[playerid][IssikrovimoLaikas]		= gettime() + (50 + random(50));
								PI[playerid][Issikrauna]			= true;

								TogglePlayerControllable(playerid, false);
							}
						}
					}
				}
			}
		}

		if(PI[playerid][specialybe] == 11)
		{
			if(IsPlayerInRangeOfPoint(playerid, 6.0, 1766.7333,-2048.9414,13.8588)) // pasikrovimo vietoj furistas
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new vehid = GetPlayerVehicleID(playerid);

					if(FuristuMasina[0] <= vehid <= FuristuMasina[sizeof(FuristuMasina) - 1])
					{
						if(!IsTrailerAttachedToVehicle(vehid) && GetVehicleModel(vehid) != 482) return SendClientMessage(playerid, -1, "{ffffff} Turite atvaþiuoti su priekaba arba su \"Burrito\"!");

						new String[800], Stringas[800];

						strcat(String, "Krovinys\tPradinis ánaðas\tAtsiskaitymas uþ pristatymà\n");

						for(new i = 0; i < sizeof(FuristuPasikrovimas); i ++)
						{
							if(FuristuPasikrovimas[i][Price1] == 0)
							{
								format(Stringas, sizeof(Stringas), "%s\n", FuristuPasikrovimas[i][Name0]);
								strcat(String, Stringas);
							}
							else
							{
								format(Stringas, sizeof(Stringas), "%s\t{FFAF00}$%d\t{FFAF00}$%d\n",
								FuristuPasikrovimas[i][Name0], FuristuPasikrovimas[i][Price1], FuristuPasikrovimas[i][Price2]);
								strcat(String, Stringas);
							}
						}

						ShowPlayerDialogEx(playerid, 4593, DIALOG_STYLE_TABLIST_HEADERS, "Fûristø pasikrovimas", String, "Pasirinkti", "Uþdaryti");
					}
					else
					{
						SendClientMessage(playerid, -1, "{ffffff} Turite atvaþiuoti su fûra!");
					}
				}
			}
		}

		if(PI[playerid][specialybe] == 3)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new vehid = GetPlayerVehicleID(playerid);

				if(KurjeriuMasina[0] <= vehid <= KurjeriuMasina[sizeof(KurjeriuMasina) - 1])
				{
					if(IsPlayerInRangeOfPoint(playerid, 4.0, vK_Pos[vehid][0], vK_Pos[vehid][1], vK_Pos[vehid][2]))
					{
						if(PI[playerid][Issikrauna] == false)
						{
							if(vKrovinys[vehid] != -1)
							{
								PI[playerid][IssikrovimoLaikas]		= gettime() + (50 + random(50));
								PI[playerid][Issikrauna]			= true;

								TogglePlayerControllable(playerid, false);
							}
						}
					}
				}
			}
		}

		new vehicleid = GetClosestVehicle(playerid);

		new Float: V_Pos[3]; GetVehiclePos(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);

		if(vehicleid != INVALID_VEHICLE_ID && IsPlayerInRangeOfPoint(playerid, 1.0, V_Pos[0], V_Pos[1], V_Pos[2]))
		{
			if(Pizzaboy[0] <= vehicleid <= Pizzaboy[sizeof(Pizzaboy) - 1])
			{
				if(PI[playerid][specialybe] == 20)
				{
					if(PI[playerid][uniformd])
					{
						if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
						{
							if(NesaPica[playerid] == 1 && IsPlayerAttachedObjectSlotUsed(playerid, PIZZA_ATTACH_SLOT))
							{
								if(Pica[vehicleid] == false)
								{
									Pica[vehicleid] 	= true;
									NesaPica[playerid] 	= 0;

									ClearAnimations 			(playerid);
									SetPlayerSpecialAction 		(playerid, SPECIAL_ACTION_NONE);
	            					RemovePlayerAttachedObject 	(playerid, PIZZA_ATTACH_SLOT);
	            					GameTextForPlayer 			(playerid, "~g~Padejote pica", 1500, 3);
	            					SendClientMessage 			(playerid, -1, "{ffffff} Veþkite picà á geltonu taðku paþymëtà vietà!");

	            					if(!PicaCP[playerid])
	            					{
	            						new RandomHouse;

		            					for(new house; house < MAX_HOUSES; house ++)
		            					{
		            						if(HouseInfo[house][hCreated]) RandomHouse = random(house);
		            					}

	            						//SetPlayerCheckpointEx(playerid, PIZZA_DELIVERY_CHECKPOINT, HouseInfo[RandomHouse][ExitX], HouseInfo[RandomHouse][ExitY], HouseInfo[RandomHouse][ExitZ], 2.0);
										SetPlayerMapIcon(playerid, 99, HouseInfo[RandomHouse][ExitX], HouseInfo[RandomHouse][ExitY], HouseInfo[RandomHouse][ExitZ], 56, 0, MAPICON_GLOBAL);

										PI[playerid][DarboCP][0] = HouseInfo[RandomHouse][ExitX];
										PI[playerid][DarboCP][1] = HouseInfo[RandomHouse][ExitY];
										PI[playerid][DarboCP][2] = HouseInfo[RandomHouse][ExitZ];
									}
								}
							}
							else if(NesaPica[playerid] == 0)
							{
								if(Pica[vehicleid] == true)
								{
									Pica[vehicleid]  	= false;
									PicaCP[playerid]  	= true;
									NesaPica[playerid] 	= 1;

									for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i ++)
								    {
								        if(IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);
								    }

									SetPlayerSpecialAction 	(playerid, SPECIAL_ACTION_CARRY);
									SetPlayerAttachedObject (playerid, PIZZA_ATTACH_SLOT, 1582, 1, -0.04, 0.491794, -0.005850, 0.000000, 87.603507, 0.654105, 1.000000, 1.000000, 1.000000);
									GameTextForPlayer 		(playerid, "~g~Pasiemete pica", 1500, 3);
								}
							}
						}
					}
				}
			}
		}

		//Medikø vartai
		if(IsPlayerInRangeOfPoint(playerid, 10.0, -2195.61816, 222.25729, 29.64330))
		{
			if(PI[playerid][specialybe] == 2 || PI[playerid][AdminLevel] == LEVEL_OWNER)
			{
				if(!Vartai[0])
				{
					MoveDynamicObject(MedikuVartai, -2195.61816, 222.25729, 25.23090, 3.0, 0.00000, 0.00000, 0.00000);

					Vartai[0] = true;
				}
				else
				{
					MoveDynamicObject(MedikuVartai, -2195.61816, 222.25729, 29.64330, 3.0, 0.00000, 0.00000, 0.00000);

					Vartai[0] = false;
				}
			}
		}

		//Furistø vartai
		if(IsPlayerInRangeOfPoint(playerid, 20.0, -2127.17334, -80.55104, 37.13493))
		{
			if(PI[playerid][specialybe] == 11 || PI[playerid][AdminLevel] == LEVEL_OWNER)
			{
				if(!Vartai[1])
				{
				    new String[160];
                    format(String, sizeof(String), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}%s", GetPlayerNameEx(playerid));
					Update3DTextLabelText(gatesText[6], -1, String);
					MoveDynamicObject(FuristuVartai, -2127.17334, -80.55100, 29.57500, 3.0, 0.00000, 0.00000, 0.00000);
					Vartai[1] = true;
				}
				else
				{
				    new String[160];
                    format(String, sizeof(String), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}%s", GetPlayerNameEx(playerid));
					Update3DTextLabelText(gatesText[6], -1, String);
					MoveDynamicObject(FuristuVartai, -2127.17334, -80.55104, 38.13493, 3.0, 0.00000, 0.00000, 0.00000);
					Vartai[1] = false;
				}
			}
		}

		//Policijos vartai (1)
		if(IsPlayerInRangeOfPoint(playerid, 6.0, -1571.785278, 661.355407, 6.846899))
		{
			if(PI[playerid][specialybe] == 1 || PI[playerid][AdminLevel] == LEVEL_OWNER)
			{
				if(!Vartai[2])
				{
					new String[160];
                    format(String, sizeof(String), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}%s", GetPlayerNameEx(playerid));
					Update3DTextLabelText(gatesText[3], -1, String);
					MoveDynamicObject(pdvartai, -1571.90002441,661.50000000,3.40000010, 3);
					Vartai[2] = true;
				}
				else
				{
					new String[160];
                    format(String, sizeof(String), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}%s", GetPlayerNameEx(playerid));
					Update3DTextLabelText(gatesText[3], -1, String);
					MoveDynamicObject(pdvartai, -1571.90002441,661.50000000,6.90000010, 3);
					Vartai[2] = false;
				}
			}
		}

		//Policijos vartai (2)
		if(IsPlayerInRangeOfPoint(playerid, 6.0, -1641.652587, 681.394714, 6.846899))
		{
			if(PI[playerid][specialybe] == 1 || PI[playerid][AdminLevel] == LEVEL_OWNER)
			{
				if(!Vartai[3])
				{
					new String[160];
                    format(String, sizeof(String), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}%s", GetPlayerNameEx(playerid));
					Update3DTextLabelText(gatesText[4], -1, String);
     				MoveDynamicObject(pdvartai2, -1641.50000000,682.29998779,3.40000010, 3);
					Vartai[3] = true;
				}
				else
				{
					new String[160];
                    format(String, sizeof(String), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}%s", GetPlayerNameEx(playerid));
					Update3DTextLabelText(gatesText[4], -1, String);
					MoveDynamicObject(pdvartai2, -1641.50000000,682.29998779,8.10000038, 3);
					Vartai[3] = false;
				}
			}
		}

		//Policijos vartai (3)
		if(IsPlayerInRangeOfPoint(playerid, 6.0, -1631.193725, 688.143554, 8.181819))
		{
			if(PI[playerid][specialybe] == 1 || PI[playerid][AdminLevel] == LEVEL_OWNER)
			{
				if(!Vartai[29])
				{
					new String[160];
                    format(String, sizeof(String), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}%s", GetPlayerNameEx(playerid));
					Update3DTextLabelText(gatesText[5], -1, String);
					MoveDynamicObject(pdvartai3,-1631.59997559,688.20001221,3.79999995, 3);
					Vartai[29] = true;
				}
				else
				{
					new String[160];
                    format(String, sizeof(String), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}%s", GetPlayerNameEx(playerid));
					Update3DTextLabelText(gatesText[5], -1, String);
					MoveDynamicObject(pdvartai3,-1631.59997559,688.20001221,8.89999962, 3);
					Vartai[29] = false;
				}
			}
		}

		//Mirki ðlagbaumas
		if(IsPlayerInRangeOfPoint(playerid, 10.0, -2638.87720, 859.23462, 63.87920))
		{
			if(SameText(GetPlayerNameEx(playerid), "Mirek_Binladen"))
			{
				if(!Vartai[28]) // atidarom
				{
					RotateObject(SlagbaumMirki, 0.00000, 0.00000, 90.00000, 0.0003);

					Vartai[28] = true;
				}
				else // uþdarom
				{
					RotateObject(SlagbaumMirki, 0.00000, 90.00000, 90.00000, 0.0009);

					Vartai[28] = false;
				}
			}
		}

		//Aras ðlagbaumas
		if(IsPlayerInRangeOfPoint(playerid, 20.0, -1517.8530,468.6875,9.1204))
		{
			if(PI[playerid][specialybe] == 5 || PI[playerid][specialybe] == 11 || PI[playerid][AdminLevel] == LEVEL_OWNER)
			{
				if(!Vartai[4]) // atidarom
				{
					MoveDynamicObject(ArasVartai[0], -1518.10999, 462.76999, 2.74201, 3.0, 0.00000, 0.00000, -90.00000);
					new String[160];
                    format(String, sizeof(String), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}%s", GetPlayerNameEx(playerid));
					Update3DTextLabelText(gatesText[0], -1, String);
					Vartai[4] = true;
				}
				else // uþdarom
				{
					MoveDynamicObject(ArasVartai[0], -1518.10999, 462.76999, 8.880, 3.0, 0.00000, 0.00000, -90.00000);
                    new String[160];
                    format(String, sizeof(String), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}%s", GetPlayerNameEx(playerid));
					Update3DTextLabelText(gatesText[0], -1, String);
					Vartai[4] = false;
				}
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 20.0, -1318.61743, 481.78271, 8.35800))
		{
			if(PI[playerid][specialybe] == 5 || PI[playerid][AdminLevel] == LEVEL_OWNER)
			{
				if(!Vartai[10]) // atidarom
				{
					MoveDynamicObject(ArasVartai[1], -1318.57532, 481.80057, 1.11202, 3.0, 0.00000, 0.00000, 0.00000);
                    new String[160];
                    format(String, sizeof(String), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}%s", GetPlayerNameEx(playerid));
					Update3DTextLabelText(gatesText[1], -1, String);
					Vartai[10] = true;
				}
				else // uþdarom
				{
					MoveDynamicObject(ArasVartai[1], -1318.57532, 481.80057, 7.220, 3.0, 0.00000, 0.00000, 0.00000);
                    new String[160];
                    format(String, sizeof(String), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}%s", GetPlayerNameEx(playerid));
					Update3DTextLabelText(gatesText[0], -1, String);
					Vartai[10] = false;
				}
			}
		}

		//Pasikrovimo ðlagbaumas
		if(IsPlayerInRangeOfPoint(playerid, 10.0, 1812.93103, -2075.05127, 13.36041))
		{
			if(PI[playerid][specialybe] == 3 || PI[playerid][specialybe] == 11 || PI[playerid][AdminLevel] == LEVEL_OWNER)
			{
				if(!Vartai[6]) // atidarom
				{
					RotateObject(PasikrovimoSlagbaumas, 0.00000, 0.00000, 90.00000, 0.0003);

					Vartai[6] = true;
				}
				else // uþdarom
				{
					RotateObject(PasikrovimoSlagbaumas, 0.00000, 90.00000, 90.00000, 0.0009);

					Vartai[6] = false;
				}
			}
		}

		//Kurjeriø ðlagbaumas
        if(IsPlayerInRangeOfPoint(playerid, 10.0, -2696.5315,200.7775,4.3280))
        {
            if(PI[playerid][specialybe] == 3 || PI[playerid][AdminLevel] == LEVEL_OWNER)
            {
                if(!Vartai[7]) // atidarom
                {
                    RotateObject(KurjeriuSlagbaumas, 0.00000, 0.00000, 90.00000, 0.0003);
                    new String[160];
                    format(String, sizeof(String), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}%s", GetPlayerNameEx(playerid));
					Update3DTextLabelText(gatesText[2], -1, String);
                    Vartai[7] = true;
                }
                else // uþdarom
                {
                    RotateObject(KurjeriuSlagbaumas, 0.00000, 270.00000, 90.00000, 0.0009);
					new String[160];
                    format(String, sizeof(String), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}%s", GetPlayerNameEx(playerid));
					Update3DTextLabelText(gatesText[2], -1, String);
                    Vartai[7] = false;
                }
            }
        }

		//KMA
		if(IsPlayerInRangeOfPoint(playerid, 10.0, -1665.00854, 1296.86877, 6.84070))
		{
			if(PI[playerid][specialybe] == 4 || PI[playerid][AdminLevel] == LEVEL_OWNER)
			{
				if(!Vartai[9]) // atidarom
				{
					MoveDynamicObject(KMAVartai, -1665.00854, 1296.86877, 1.29840, 3.0, 0.00000, 0.00000, -45.00000);

					Vartai[9] = true;
				}
				else // uþdarom
				{
					MoveDynamicObject(KMAVartai, -1665.00854, 1296.86877, 8.84070, 3.0, 0.00000, 0.00000, -45.00000);

					Vartai[9] = false;
				}
			}
		}

		//Garaþø ðlagbaumas
		if(IsPlayerInRangeOfPoint(playerid, 10.0, -2598.79224, 689.19299, 27.57580))
		{
			if(!Vartai[11]) // atidarom
			{
				RotateObject(MedikuSlagbaumas, 0.00000, 0.00000, 270.00000, 0.0003);

				Vartai[11] = true;
			}
			else // uþdarom
			{
				RotateObject(MedikuSlagbaumas, 0.00000, 90.00000, 270.00000, 0.0009);

				Vartai[11] = false;
			}
		}

		//Medikø ðlagbaumas
		/*if(IsPlayerInRangeOfPoint(playerid, 10.0, -2563.26685, 617.17548, 14.23520))
		{
			if(PI[playerid][specialybe] == 2 || PI[playerid][AdminLevel] == LEVEL_OWNER)
			{
				if(!Vartai[12]) // atidarom
				{
					RotateObject(MedikuSlagbaumas[1], 0.00000, 0.00000, 0.00000, 0.0003);

					Vartai[12] = true;
				}
				else // uþdarom
				{
					RotateObject(MedikuSlagbaumas[1], 0.00000, 270.00000, 0.00000, 0.0009);

					Vartai[12] = false;
				}
			}
		}*/

		if(IsPlayerInRangeOfPoint(playerid, 2.0, -33.9836,-74.3116,1003.5469) || IsPlayerInRangeOfPoint(playerid, 2.0, -20.0124,-74.3236,1003.5542)) // Sultys
		{
			if(PI[playerid][PardSaskaita] > GetPlayerMoneyA(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþteks pinigø atsiskaityti uþ prekes!");

			PI[playerid][PardSaskaita] += SULCIU_KAINA;
			PI[playerid][Sultys] ++;

			SendClientMessage(playerid, -1, "{ffffff} Pasiëmëte sulèiø!");
			//ApplyAnimation(playerid, "MISC", "Case_pickup", 4.1, 0, 1, 1, 1, 1);
			//SetTimerEx("ClearA", 1500, false, "d", playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, 2.0, -21.2226,-83.1633,1003.5469) || IsPlayerInRangeOfPoint(playerid, 2.0, -31.9058,-87.2799,1003.5469)) // pica
		{
			if(PI[playerid][PardSaskaita] >= GetPlayerMoneyA(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþteks pinigø atsiskaityti uþ prekes!");

			PI[playerid][PardSaskaita] += PICOS_KAINA;
			PI[playerid][Pizza] ++;

			SendClientMessage(playerid, -1, "{ffffff} Pasiëmëte picà!");
			//ApplyAnimation(playerid, "MISC", "Case_pickup", 4.1, 0, 1, 1, 1, 1);
			//SetTimerEx("ClearA", 1500, false, "d", playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, 2.0, -23.8784,-77.8102,1003.5469)) // Ðokoladas
		{
			if(PI[playerid][PardSaskaita] >= GetPlayerMoneyA(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþteks pinigø atsiskaityti uþ prekes!");

			PI[playerid][PardSaskaita] += SOKOLADO_KAINA;
			PI[playerid][Sokoladas] ++;

			SendClientMessage(playerid, -1, "{ffffff} Pasiëmëte ðokoladà!");
			//ApplyAnimation(playerid, "MISC", "Case_pickup", 4.1, 0, 1, 1, 1, 1);
			//SetTimerEx("ClearA", 1500, false, "d", playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, 2.0, -14.8823,-82.0770,1003.5469)) // Deðra
		{
			if(PI[playerid][PardSaskaita] >= GetPlayerMoneyA(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþteks pinigø atsiskaityti uþ prekes!");

			PI[playerid][PardSaskaita] += DESROS_KAINA;
			PI[playerid][Desra] ++;

			SendClientMessage(playerid, -1, "{ffffff} Pasiëmëte deðros!");
			//ApplyAnimation(playerid, "MISC", "Case_pickup", 4.1, 0, 1, 1, 1, 1);
			//SetTimerEx("ClearA", 1500, false, "d", playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, 2.0, -14.8774,-78.0956,1003.5469)) // Sûreliai
		{
			if(PI[playerid][PardSaskaita] >= GetPlayerMoneyA(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþteks pinigø atsiskaityti uþ prekes!");

			PI[playerid][PardSaskaita] += SURELIO_KAINA;
			PI[playerid][Surelis] ++;

			SendClientMessage(playerid, -1, "{ffffff} Pasiëmëte sûrelá!");
			//ApplyAnimation(playerid, "MISC", "Case_pickup", 4.1, 0, 1, 1, 1, 1);
			//SetTimerEx("ClearA", 1500, false, "d", playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, 2.0, -29.2305,-77.7784,1003.5469)) // Ledai
		{
			if(PI[playerid][PardSaskaita] >= GetPlayerMoneyA(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþteks pinigø atsiskaityti uþ prekes!");

			PI[playerid][PardSaskaita] += LEDU_KAINA;
			PI[playerid][Ledai] ++;

			SendClientMessage(playerid, -1, "{ffffff} Pasiëmëte ledus!");
			//ApplyAnimation(playerid, "MISC", "Case_pickup", 4.1, 0, 1, 1, 1, 1);
			//SetTimerEx("ClearA", 1500, false, "d", playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, 2.0, -37.2160,-88.3731,1003.5469)) // Duona
		{
			if(PI[playerid][PardSaskaita] >= GetPlayerMoneyA(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþteks pinigø atsiskaityti uþ prekes!");

			PI[playerid][PardSaskaita] += DUONOS_KAINA;
			PI[playerid][Duona] ++;

			SendClientMessage(playerid, -1, "{ffffff} Pasiëmëte duonos!");
			//ApplyAnimation(playerid, "MISC", "Case_pickup", 4.1, 0, 1, 1, 1, 1);
			//SetTimerEx("ClearA", 1500, false, "d", playerid);
		}

		return 1;
	}

	if(newkeys & KEY_FIRE && !HoldingKey[playerid])
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		//if(zInfo[playerid][specialybe] == 5 || zInfo[playerid][admin] >= 4)
		{
  			if(GetVehicleModel(vehicleid) == 407)
	    	{
      			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
       			{
		        	KeyCheck(playerid);

					HoldingKey[playerid] = true;
				}
			}
		}

		return 1;
	}

	return 1;
}

public Prespin(playerid)
{
	new Float:rxL, Float:ryL, Float:rzL;
	new Float:rxM, Float:ryM, Float:rzM;
	new Float:rxR, Float:ryR, Float:rzR;
	GetPlayerObjectRot(playerid,LeftSpinner[playerid],rxL, ryL, rzL);
	GetPlayerObjectRot(playerid,LeftSpinner[playerid],rxM, ryM, rzM);
	GetPlayerObjectRot(playerid,LeftSpinner[playerid],rxR, ryR, rzR);
    if(movedup[playerid] == false)
	{
	    MovePlayerObject(playerid, LeftSpinner[playerid],2236.6072, 1601.0479, 1000.6791  + ZOff[playerid],0.01,rxL + 120.0, 0.00,-90.0);
	    MovePlayerObject(playerid, MiddleSpinner[playerid],2236.6072, 1600.9279, 1000.6791  + ZOff[playerid],0.01,rxM + 120.0, 0.00,-90.0);
		MovePlayerObject(playerid, RightSpinner[playerid],2236.6072, 1600.8079, 1000.6791  + ZOff[playerid],0.01,rxR + 120.0, 0.00,-90.0);
		movedup[playerid] = true;
	}
	else
	{
	    MovePlayerObject(playerid, LeftSpinner[playerid],2236.6072, 1601.0479, 1000.6791  - ZOff[playerid],0.01,rxL + 120.0, 0.00,-90.0);
	    MovePlayerObject(playerid, MiddleSpinner[playerid],2236.6072, 1600.9279, 1000.6791   - ZOff[playerid],0.01,rxM + 120.0, 0.00,-90.0);
		MovePlayerObject(playerid, RightSpinner[playerid],2236.6072, 1600.8079, 1000.6791  - ZOff[playerid],0.01,rxR + 120.0, 0.00,-90.0);
		movedup[playerid] = false;
	}
	return 1;
}

public SpinSpinners(playerid)
{
	KillTimer(PreSpinTimer[playerid]);
	new RandSL = random(sizeof(Rotations));
	new RandSM = random(sizeof(Rotations));
	new RandSR = random(sizeof(Rotations));
	if(movedup[playerid] == false)
	{
	    MovePlayerObject(playerid, LeftSpinner[playerid],2236.6072, 1601.0479, 1000.6791  + ZOff[playerid],0.1,Rotations[RandSL] + 5.0, 0.00,-90.0);
	    MovePlayerObject(playerid, MiddleSpinner[playerid],2236.6072, 1600.9279, 1000.6791  + ZOff[playerid],0.1,Rotations[RandSM] + 5.0, 0.00,-90.0);
		MovePlayerObject(playerid, RightSpinner[playerid],2236.6072, 1600.8079, 1000.6791  + ZOff[playerid],0.1,Rotations[RandSR] + 5.0, 0.00,-90.0);
	}
	else
	{
	    MovePlayerObject(playerid, LeftSpinner[playerid],2236.6072, 1601.0479, 1000.6791  - ZOff[playerid],0.1,Rotations[RandSL] + 5.0, 0.00,-90.0);
	    MovePlayerObject(playerid, MiddleSpinner[playerid],2236.6072, 1600.9279, 1000.6791  - ZOff[playerid],0.1,Rotations[RandSM] + 5.0, 0.00,-90.0);
		MovePlayerObject(playerid, RightSpinner[playerid],2236.6072, 1600.8079, 1000.6791  - ZOff[playerid],0.1,Rotations[RandSR]+ 5.0, 0.00,-90.0);
	}
	SymbolSL[playerid] = ResultIDsLeft[RandSL];
	SymbolSM[playerid] = ResultIDsMiddle[RandSM];
	SymbolSR[playerid] = ResultIDsRight[RandSR];
	GiveResult(playerid);
	return 1;
}

public GiveResult(playerid)
{
    IsSpinning[playerid] = false;
	PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw2],ResultNames[SymbolSL[playerid] - 1]);
	PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw3],ResultNames[SymbolSM[playerid] - 1]);
	PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw4],ResultNames[SymbolSR[playerid] - 1]);
	PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw2]); //Left result
	PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw3]); //Middle result
	PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw4]); //Right result
	if(SymbolSL[playerid] == SymbolSM[playerid] && SymbolSM[playerid] == SymbolSR[playerid] && SymbolSL[playerid] == SymbolSR[playerid]) //If all the symbols are the same
	{
		PlayerTextDrawShow(playerid, PlayerEnum[playerid][Textdraw5]);
		if(SymbolSL[playerid] == 1) //If the first symbol (thus the other two too) is Symbol ID 1 (goldbar)
		{
		    new doublebar[16];
		    format(doublebar,sizeof(doublebar),"= ~r~~h~$%i",REWARD_DOUBLEBAR * GAMBLE_WAGER(playerid));
		    PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw29],doublebar);
            GivePlayerMoneyA(playerid,REWARD_DOUBLEBAR * GAMBLE_WAGER(playerid));
            PlayerEnum[playerid][TotalWon] = PlayerEnum[playerid][TotalWon] + REWARD_DOUBLEBAR * GAMBLE_WAGER(playerid);
            PlayerPlaySound(playerid,5461,0,0,0);
		}
		else if(SymbolSL[playerid] == 2)
		{
		    new bar[16];
		    format(bar,sizeof(bar),"= ~r~~h~$%i",REWARD_BAR * GAMBLE_WAGER(playerid));
		    PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw28],bar);
            GivePlayerMoneyA(playerid,REWARD_BAR * GAMBLE_WAGER(playerid));
            PlayerEnum[playerid][TotalWon] = PlayerEnum[playerid][TotalWon] + REWARD_BAR * GAMBLE_WAGER(playerid);
            PlayerPlaySound(playerid,5448,0,0,0);
		}
		else if(SymbolSL[playerid] == 3)
		{
		    new sixtynine[16];
		    format(sixtynine,sizeof(sixtynine),"= ~r~~h~$%i",REWARD_SIXTYNINE * GAMBLE_WAGER(playerid));
		    PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw24],sixtynine);
            GivePlayerMoneyA(playerid,REWARD_SIXTYNINE * GAMBLE_WAGER(playerid));
            PlayerEnum[playerid][TotalWon] = PlayerEnum[playerid][TotalWon] + REWARD_SIXTYNINE * GAMBLE_WAGER(playerid);
            PlayerPlaySound(playerid,5448,0,0,0);
		}
		else if(SymbolSL[playerid] == 4)
		{
		    new bell[16];
		    format(bell,sizeof(bell),"= ~r~~h~$%i",REWARD_BELL * GAMBLE_WAGER(playerid));
		    PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw27],bell);
            GivePlayerMoneyA(playerid,REWARD_BELL * GAMBLE_WAGER(playerid));
            PlayerEnum[playerid][TotalWon] = PlayerEnum[playerid][TotalWon] + REWARD_BELL * GAMBLE_WAGER(playerid);
            PlayerPlaySound(playerid,5448,0,0,0);
		}
		else if(SymbolSL[playerid] == 5)
		{
		    new grapes[16];
		    format(grapes,sizeof(grapes),"= ~r~~h~$%i",REWARD_GRAPES * GAMBLE_WAGER(playerid));
		    PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw25],grapes);
            GivePlayerMoneyA(playerid,REWARD_GRAPES * GAMBLE_WAGER(playerid));
            PlayerEnum[playerid][TotalWon] = PlayerEnum[playerid][TotalWon] + REWARD_GRAPES * GAMBLE_WAGER(playerid);
            PlayerPlaySound(playerid,5448,0,0,0);
		}
		else
		{
		    new cherry[16];
		    format(cherry,sizeof(cherry),"= ~r~~h~$%i",REWARD_CHERRY * GAMBLE_WAGER(playerid));
		    PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw26],cherry);
		    GivePlayerMoneyA(playerid,REWARD_CHERRY * GAMBLE_WAGER(playerid));
		    PlayerEnum[playerid][TotalWon] = PlayerEnum[playerid][TotalWon] + REWARD_CHERRY * GAMBLE_WAGER(playerid);
		    PlayerPlaySound(playerid,5448,0,0,0);
		}
	}
	SetPlayerWonPaid(playerid);
}

public SetPlayerWonPaid(playerid)
{
	new PaidString[32], WonString[32], TotalString[32];
	PlayerEnum[playerid][TotalTotal] = PlayerEnum[playerid][TotalWon] - PlayerEnum[playerid][TotalPaid];
	format(PaidString,sizeof(PaidString),"~w~sumoketa:    ~r~$%i",PlayerEnum[playerid][TotalPaid]);
    format(WonString,sizeof(WonString),"~w~laimeta:   ~g~$%i",PlayerEnum[playerid][TotalWon]);
    if(PlayerEnum[playerid][TotalTotal] > 0)
    {
        format(TotalString,sizeof(TotalString),"~w~skirtumas:    ~g~+$%i",PlayerEnum[playerid][TotalTotal]);
    }
    else if(PlayerEnum[playerid][TotalTotal] == 0)
    {
        format(TotalString,sizeof(TotalString),"~w~skirtumas:    ~y~$%i",PlayerEnum[playerid][TotalTotal]);
    }
    else if(PlayerEnum[playerid][TotalTotal] < 0)
    {
        format(TotalString,sizeof(TotalString),"~w~skirtumas:    ~r~$%i",PlayerEnum[playerid][TotalTotal]);
    }
    PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw32],WonString);
    PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw34],TotalString);
    PlayerTextDrawSetString(playerid, PlayerEnum[playerid][Textdraw35],PaidString);
    PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw32]);
    PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw34]);
    PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw35]);
	return 1;
}

f_public: ClearEntranceVariable(playerid) return NoCheckEntrancePickup[playerid] = 0;

forward Unfreeze(playerid);
public Unfreeze(playerid) return TogglePlayerControllable(playerid,true);

f_public: OnTextDrawGetFullAlpha(playerid, TextDrawUsingFor)
{
	switch(TextDrawUsingFor)
	{
		case USING_ENTER_BUILDING:
		{
		    CheckEntranceEnter 		(playerid, true);
		    StarPlayerTextDrawUpdate(playerid, 0, 0, 0,   255, 1, TextDrawUsingFor);
		}
		case USING_ENTER_FROM_BUILDING:
		{
		    CheckEntranceExit 		(playerid, true);
		    StarPlayerTextDrawUpdate(playerid, 0, 0, 0,   255, 1, TextDrawUsingFor);
		}
		case USING_LOADING_LOAD:
		{
			ac_ResetPlayerWeapons		(playerid);
    		StarPlayerTextDrawUpdate(playerid, 0, 0, 0,   255, 1, TextDrawUsingFor);
		}
    }

	return 1;
}

f_public: IskraunamMasinaEx(playerid)
{
	new str[300], String[128];

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti fûroje!");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(!(FuristuMasina[0] <= vehicleid <= FuristuMasina[sizeof(FuristuMasina) - 1])) return SendClientMessage(playerid, -1, "{ffffff} Turite atvaþiuoti su fûra!");

	if(!IsTrailerAttachedToVehicle(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Turite atvaþiuoti su priekaba!");

	new trailerid = GetVehicleTrailer(vehicleid);

	if(VehicleInfo[trailerid][KiekPriekaboje] <= 0)
	{
		IskraunaMasinaP[playerid] = false;

		format(String, sizeof(String), "Tr. pavadinimas: ~g~%s~n~~w~Iskrauta: ~g~0%", VehicleNames[VehicleInfo[trailerid][KasPriekaboje] - 400]);
		GameTextForPlayer(playerid, String, 1000, 5);

		for(new v = 0, size = GetVehiclePoolSize(); v <= size; v ++)
		{
			if(ArTurgausMasina[v])
			{
				new model = GetVehicleModel(v);

				switch(model)
				{
					case 401: if(VehicleInfo[trailerid][KasPriekaboje] == 401) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 404: if(VehicleInfo[trailerid][KasPriekaboje] == 404) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 410: if(VehicleInfo[trailerid][KasPriekaboje] == 410) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 412: if(VehicleInfo[trailerid][KasPriekaboje] == 412) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 419: if(VehicleInfo[trailerid][KasPriekaboje] == 419) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 436: if(VehicleInfo[trailerid][KasPriekaboje] == 436) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 439: if(VehicleInfo[trailerid][KasPriekaboje] == 439) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 445: if(VehicleInfo[trailerid][KasPriekaboje] == 445) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 458: if(VehicleInfo[trailerid][KasPriekaboje] == 458) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 466: if(VehicleInfo[trailerid][KasPriekaboje] == 466) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 467: if(VehicleInfo[trailerid][KasPriekaboje] == 467) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 479: if(VehicleInfo[trailerid][KasPriekaboje] == 479) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 480: if(VehicleInfo[trailerid][KasPriekaboje] == 480) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 491: if(VehicleInfo[trailerid][KasPriekaboje] == 491) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 492: if(VehicleInfo[trailerid][KasPriekaboje] == 492) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 507: if(VehicleInfo[trailerid][KasPriekaboje] == 507) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 516: if(VehicleInfo[trailerid][KasPriekaboje] == 516) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 517: if(VehicleInfo[trailerid][KasPriekaboje] == 517) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 518: if(VehicleInfo[trailerid][KasPriekaboje] == 518) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 526: if(VehicleInfo[trailerid][KasPriekaboje] == 526) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 580: if(VehicleInfo[trailerid][KasPriekaboje] == 580) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 529: if(VehicleInfo[trailerid][KasPriekaboje] == 529) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 533: if(VehicleInfo[trailerid][KasPriekaboje] == 533) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 534: if(VehicleInfo[trailerid][KasPriekaboje] == 534) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 536: if(VehicleInfo[trailerid][KasPriekaboje] == 536) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 542: if(VehicleInfo[trailerid][KasPriekaboje] == 542) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 575: if(VehicleInfo[trailerid][KasPriekaboje] == 575) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
					case 576: if(VehicleInfo[trailerid][KasPriekaboje] == 576) TurgausInfo[v][tKiekis] ++, GivePlayerMoneyA(playerid, 12000);
				}

				new KoksKuras[64];

				switch(VehicleInfo[v][vKuroTipas])
				{
					case BENZINAS: 	KoksKuras = "Benzinas";
					case DYZELIS: 	KoksKuras = "Dyzelis";
				}

				format(str, sizeof(str), "{ffffff}Pavadinimas: {FFAF00}%s\n{ffffff}Kaina: {FFAF00}$%s\n{ffffff}Kuro tipas: {ffffff} %s\n{ffffff}Kuro sànaudos: {FFAF00}%.2f L/10 KM\n{ffffff}Bako tûris: {FFAF00}%.2f L\n{ffffff}Turimas kiekis: {FFAF00}%d",
				VehicleNames[GetVehicleModel(v) - 400], konvertuoti_pinigus(TurgausInfo[v][tKaina]), KoksKuras, VehicleInfo[v][vSanaudos], VehicleInfo[v][vBakas], TurgausInfo[v][tKiekis]);
			    //Update3DTextLabelText(TurgausInfo[v][tText], -1, str);
			    UpdateDynamic3DTextLabelText(TurgausInfo[v][tText], -1, str);

			    //GivePlayerMoneyA(playerid, 12000);

			    SaveTurgus();
			}
		}

		format(String, sizeof(String), "{ffffff} Transp. priemonë {FFAF00}%s {FFFFFF}iðkrauta. Gavote savo atlygá!", VehicleNames[VehicleInfo[trailerid][KasPriekaboje] - 400]);
		SendClientMessage(playerid, -1, String);

		VehicleInfo[trailerid][KiekPriekaboje] 	= 0;
		VehicleInfo[trailerid][KasPriekaboje] 	= -1;

		Delete3DTextLabel(VehicleInfo[trailerid][t_text]);

		KillTimer				(IskraunamMasina[playerid]);
		TogglePlayerControllable(playerid, true);

		return 1;
	}

	VehicleInfo[trailerid][KiekPriekaboje] -= 3 + random(3);
	IskraunaMasinaP[playerid] = true;

	TogglePlayerControllable(playerid, false);

	format(String, sizeof(String), "Tr. pavadinimas: ~g~%s~n~~w~Iskrauta: ~g~%d%", VehicleNames[VehicleInfo[trailerid][KasPriekaboje] - 400], VehicleInfo[trailerid][KiekPriekaboje]);
	GameTextForPlayer(playerid, String, 1000, 5);

	return 1;
}

stock SaveTurgus()
{
	new Query[300];
	Query[0] = EOS;

	for(new v = 1, j = GetVehiclePoolSize(); v <= j; v++)
	{
		if(ArTurgausMasina[v])
		{
			new model = GetVehicleModel(v);

			switch(model)
			{
				case 401: SaugomTurgu[0] = TurgausInfo[v][tKiekis];
				case 404: SaugomTurgu[1] = TurgausInfo[v][tKiekis];
				case 410: SaugomTurgu[2] = TurgausInfo[v][tKiekis];
				case 412: SaugomTurgu[3] = TurgausInfo[v][tKiekis];
				case 419: SaugomTurgu[4] = TurgausInfo[v][tKiekis];
				case 436: SaugomTurgu[5] = TurgausInfo[v][tKiekis];
				case 439: SaugomTurgu[6] = TurgausInfo[v][tKiekis];
				case 445: SaugomTurgu[7] = TurgausInfo[v][tKiekis];
				case 458: SaugomTurgu[8] = TurgausInfo[v][tKiekis];
				case 466: SaugomTurgu[9] = TurgausInfo[v][tKiekis];
				case 467: SaugomTurgu[10] = TurgausInfo[v][tKiekis];
				case 479: SaugomTurgu[11] = TurgausInfo[v][tKiekis];
				case 480: SaugomTurgu[12] = TurgausInfo[v][tKiekis];
				case 491: SaugomTurgu[13] = TurgausInfo[v][tKiekis];
				case 492: SaugomTurgu[14] = TurgausInfo[v][tKiekis];
				case 507: SaugomTurgu[15] = TurgausInfo[v][tKiekis];
				case 516: SaugomTurgu[16] = TurgausInfo[v][tKiekis];
				case 517: SaugomTurgu[17] = TurgausInfo[v][tKiekis];
				case 518: SaugomTurgu[18] = TurgausInfo[v][tKiekis];
				case 526: SaugomTurgu[19] = TurgausInfo[v][tKiekis];
				case 580: SaugomTurgu[20] = TurgausInfo[v][tKiekis];
				case 529: SaugomTurgu[21] = TurgausInfo[v][tKiekis];
				case 533: SaugomTurgu[22] = TurgausInfo[v][tKiekis];
				case 534: SaugomTurgu[23] = TurgausInfo[v][tKiekis];
				case 536: SaugomTurgu[24] = TurgausInfo[v][tKiekis];
				case 542: SaugomTurgu[25] = TurgausInfo[v][tKiekis];
				case 575: SaugomTurgu[26] = TurgausInfo[v][tKiekis];
				case 576: SaugomTurgu[27] = TurgausInfo[v][tKiekis];
				// Nepamirðti pridëti krovimo jeigu prisidës maðinø.
			}
		}
	}

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `401` = '%d'", SaugomTurgu[0]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `404` = '%d'", SaugomTurgu[1]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `410` = '%d'", SaugomTurgu[2]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `412` = '%d'", SaugomTurgu[3]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `419` = '%d'", SaugomTurgu[4]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `436` = '%d'", SaugomTurgu[5]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `439` = '%d'", SaugomTurgu[6]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `445` = '%d'", SaugomTurgu[7]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `458` = '%d'", SaugomTurgu[8]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `466` = '%d'", SaugomTurgu[9]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `467` = '%d'", SaugomTurgu[10]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `479` = '%d'", SaugomTurgu[11]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `480` = '%d'", SaugomTurgu[12]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `491` = '%d'", SaugomTurgu[13]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `492` = '%d'", SaugomTurgu[14]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `507` = '%d'", SaugomTurgu[15]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `516` = '%d'", SaugomTurgu[16]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `517` = '%d'", SaugomTurgu[17]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `518` = '%d'", SaugomTurgu[18]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `526` = '%d'", SaugomTurgu[19]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `580` = '%d'", SaugomTurgu[20]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `529` = '%d'", SaugomTurgu[21]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `533` = '%d'", SaugomTurgu[22]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `534` = '%d'", SaugomTurgu[23]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `536` = '%d'", SaugomTurgu[24]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `542` = '%d'", SaugomTurgu[25]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `575` = '%d'", SaugomTurgu[26]);
	mysql_query(Query);

	format(Query, sizeof(Query), "UPDATE `mturgus` SET `576` = '%d'", SaugomTurgu[27]);
	mysql_query(Query);
}

stock LoadTurgus()
{
	new Query[300];
	mysql_query("SELECT * FROM `mturgus`");

	mysql_store_result();
	if(mysql_retrieve_row())
	{
		if(mysql_num_rows())
		{
			mysql_fetch_field_row(Query, "401"); 	KraunamTurgu[0] = strval(Query);
			mysql_fetch_field_row(Query, "404"); 	KraunamTurgu[1] = strval(Query);
			mysql_fetch_field_row(Query, "410"); 	KraunamTurgu[2] = strval(Query);
			mysql_fetch_field_row(Query, "412"); 	KraunamTurgu[3] = strval(Query);
			mysql_fetch_field_row(Query, "419"); 	KraunamTurgu[4] = strval(Query);
			mysql_fetch_field_row(Query, "436"); 	KraunamTurgu[5] = strval(Query);
			mysql_fetch_field_row(Query, "439"); 	KraunamTurgu[6] = strval(Query);
			mysql_fetch_field_row(Query, "445"); 	KraunamTurgu[7] = strval(Query);
			mysql_fetch_field_row(Query, "458"); 	KraunamTurgu[8] = strval(Query);
			mysql_fetch_field_row(Query, "466"); 	KraunamTurgu[9] = strval(Query);
			mysql_fetch_field_row(Query, "467"); 	KraunamTurgu[10] = strval(Query);
			mysql_fetch_field_row(Query, "479"); 	KraunamTurgu[11] = strval(Query);
			mysql_fetch_field_row(Query, "480"); 	KraunamTurgu[12] = strval(Query);
			mysql_fetch_field_row(Query, "491"); 	KraunamTurgu[13] = strval(Query);
			mysql_fetch_field_row(Query, "492"); 	KraunamTurgu[14] = strval(Query);
			mysql_fetch_field_row(Query, "507"); 	KraunamTurgu[15] = strval(Query);
			mysql_fetch_field_row(Query, "516"); 	KraunamTurgu[16] = strval(Query);
			mysql_fetch_field_row(Query, "517"); 	KraunamTurgu[17] = strval(Query);
			mysql_fetch_field_row(Query, "518"); 	KraunamTurgu[18] = strval(Query);
			mysql_fetch_field_row(Query, "526"); 	KraunamTurgu[19] = strval(Query);
			mysql_fetch_field_row(Query, "580"); 	KraunamTurgu[20] = strval(Query);
			mysql_fetch_field_row(Query, "529"); 	KraunamTurgu[21] = strval(Query);
			mysql_fetch_field_row(Query, "533"); 	KraunamTurgu[22] = strval(Query);
			mysql_fetch_field_row(Query, "534"); 	KraunamTurgu[23] = strval(Query);
			mysql_fetch_field_row(Query, "536");	KraunamTurgu[24] = strval(Query);
			mysql_fetch_field_row(Query, "542"); 	KraunamTurgu[25] = strval(Query);
			mysql_fetch_field_row(Query, "575"); 	KraunamTurgu[26] = strval(Query);
			mysql_fetch_field_row(Query, "576"); 	KraunamTurgu[27] = strval(Query);
		}
	}
	mysql_free_result();
}

f_public: KraunamMasinaEx(playerid, modid)
{
	new str[300], String[128];

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti fûroje!");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(!(FuristuMasina[0] <= vehicleid <= FuristuMasina[sizeof(FuristuMasina) - 1])) return SendClientMessage(playerid, -1, "{ffffff} Turite atvaþiuoti su fûra!");

	if(!IsTrailerAttachedToVehicle(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Turite atvaþiuoti su priekaba!");

	new trailerid = GetVehicleTrailer(vehicleid);

	if(VehicleInfo[trailerid][KiekPriekaboje] >= 100)
	{
		VehicleInfo[trailerid][KasPriekaboje] = modid;
		KraunaMasinaP[playerid] = false;

		format(String, sizeof(String), "Tr. pavadinimas: ~g~%s~n~~w~Pakrauta: ~g~100%", VehicleNames[modid - 400]);
		GameTextForPlayer(playerid, String, 1000, 5);

		format(String, sizeof(String), "{ffffff} Transp. priemonë {FFAF00}%s {ffffff}pakrauta á priekabà. Galite vaþiuoti á paþymëtà vietà.", VehicleNames[modid - 400]);
		SendClientMessage(playerid, -1, String);

		SetPlayerMapIcon(playerid, 99, -2500.0793,320.5070,30.0442, 56, 0, MAPICON_GLOBAL);
		//SetPlayerCheckpointEx 	(playerid, 1, -2500.0793,320.5070,30.0442, 3.0);
		KillTimer				(KraunamMasina[playerid]);
		TogglePlayerControllable(playerid, true);
		GetVehiclePos 			(trailerid, VehicleInfo[trailerid][T_Poss][0], VehicleInfo[trailerid][T_Poss][1], VehicleInfo[trailerid][T_Poss][2]);

		format(str, sizeof(str), "Krovinys: {ffff00}%s", VehicleNames[modid - 400]);
		VehicleInfo[trailerid][t_text] = Create3DTextLabel(str, -1, VehicleInfo[trailerid][T_Poss][0], VehicleInfo[trailerid][T_Poss][1], VehicleInfo[trailerid][T_Poss][2] + 5, 15.0, 0, 1);
		Attach3DTextLabelToVehicle(Text3D: VehicleInfo[trailerid][t_text], trailerid, 0, 0, 0);

		return 1;
	}

	VehicleInfo[trailerid][KiekPriekaboje] += 3 + random(3);
	KraunaMasinaP[playerid] = true;

	TogglePlayerControllable(playerid, false);

	format(String, sizeof(String), "Tr. pavadinimas: ~g~%s~n~~w~Pakrauta: ~g~%d%", VehicleNames[modid - 400], VehicleInfo[trailerid][KiekPriekaboje]);
	GameTextForPlayer(playerid, String, 1000, 5);

	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	PlaySound(playerid, 1139);

	new cpid = pCPID[playerid];
	switch(cpid)
	{
		case 1:
		{
			SendClientMessage 			(playerid, -1, "{ffffff} Sëkmingai atvykote prie paþymëto taðko!");
			DisablePlayerCheckpointEx 	(playerid, 1);
		}

		/*case 41:
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			if(MedikuMasina[0] <= vehicleid <= MedikuMasina[sizeof(MedikuMasina) - 1])
			{
				if(TuriIskvietima[playerid])
				{
					PI[playerid][Kraunasi] 		= true;
					PI[playerid][GydymoLaikas]	= gettime() + (30 + random(30));

					DisablePlayerCheckpointEx 	(playerid, 41);
					TogglePlayerControllable(playerid, false);
   				}
			}
		}*/

		/*case PIZZA_DELIVERY_CHECKPOINT:
		{
			if(PI[playerid][specialybe] == 20)
			{
				if(PI[playerid][uniformd])
				{
					if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
					{
						if(NesaPica[playerid] == 1 && IsPlayerAttachedObjectSlotUsed(playerid, PIZZA_ATTACH_SLOT))
						{
							NesaPica[playerid] = 0;

							ClearAnimations 			(playerid);
							SetPlayerSpecialAction 		(playerid, SPECIAL_ACTION_NONE);
        					RemovePlayerAttachedObject 	(playerid, PIZZA_ATTACH_SLOT);
        					DisablePlayerCheckpointEx 	(playerid, PIZZA_DELIVERY_CHECKPOINT);

        					new Atlyginimas, Arbatpinigiai;

							Atlyginimas 	= 340 + random(60);
							Arbatpinigiai	= 5 + random(5);

        					new String[128];

        					format(String, sizeof(String), "{ffffff} Sëkmingai pristatëte picà. Uþ pristatytà picà gavote {FFAF00}$%d{ffffff}!", Atlyginimas);
        					SendClientMessage(playerid, -1, String);

        					format(String, sizeof(String), "{ffffff} Taip pat gavote {FFAF00}$%d{ffffff} arbatpinigiø!", Arbatpinigiai);
        					SendClientMessage(playerid, -1, String);

        					PicaCP[playerid] = false;

        					GivePlayerMoneyA (playerid, Arbatpinigiai + Atlyginimas);
        					GameTextForPlayer(playerid, "~g~Pica pristatyta", 1500, 3);
						}
					}
				}
			}
		}*/

		case 31:
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			new String[216];

			if(PI[playerid][specialybe] != 24 && PI[playerid][AdminLevel] >= LEVEL_OWNER) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(!BusDriversCityBlueberry[playerid]) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(!IsPlayerInAnyVehicle(playerid)) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(vehicleid != BusDriversVehicle[0]) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			new RandomMoney = 100 + random(50);

			GivePlayerMoneyA(playerid, RandomMoney);

			format(String, sizeof(String), "{ffffff} Sëkmingai atvykote á paþymëtà taðkà. Gavote atlygá: {FFAF00}$%i{ffffff}!", RandomMoney);
			SendClientMessage(playerid, -1, String);

			DisableAllPlayerCheckpoints(playerid);

			ac_SetVehicleToRespawn(vehicleid);

			RemovePlayerFromVehicle(playerid);

			AC_SetPlayerPos(playerid, -1976.0577,106.2484,27.5297);

			SetPlayerFacingAngle(playerid, 180.0);

			ClearBusDriversVariables(playerid);
		}

		case 32:
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			new String[216];

			if(PI[playerid][specialybe] != 24 && PI[playerid][AdminLevel] >= LEVEL_OWNER) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(!BusDriversCityFortCarson[playerid]) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(!IsPlayerInAnyVehicle(playerid)) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(vehicleid != BusDriversVehicle[1]) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			new RandomMoney = 100 + random(50);

			GivePlayerMoneyA(playerid, RandomMoney);

			format(String, sizeof(String), "{ffffff} Sëkmingai atvykote á paþymëtà taðkà. Gavote atlygá: {FFAF00}$%i{ffffff}!", RandomMoney);
			SendClientMessage(playerid, -1, String);

			DisableAllPlayerCheckpoints(playerid);

			ac_SetVehicleToRespawn(vehicleid);

			RemovePlayerFromVehicle(playerid);

			AC_SetPlayerPos(playerid, -1976.0577,106.2484,27.5297);

			SetPlayerFacingAngle(playerid, 180.0);

			ClearBusDriversVariables(playerid);
		}

		case 33:
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			new String[216];

			if(PI[playerid][specialybe] != 24 && PI[playerid][AdminLevel] >= LEVEL_OWNER) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(!BusDriversCityElQuebrados[playerid]) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(!IsPlayerInAnyVehicle(playerid)) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(vehicleid != BusDriversVehicle[2]) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			new RandomMoney = 100 + random(50);

			GivePlayerMoneyA(playerid, RandomMoney);

			format(String, sizeof(String), "{ffffff} Sëkmingai atvykote á paþymëtà taðkà. Gavote atlygá: {FFAF00}$%i{ffffff}!", RandomMoney);
			SendClientMessage(playerid, -1, String);

			DisableAllPlayerCheckpoints(playerid);

			ac_SetVehicleToRespawn(vehicleid);

			RemovePlayerFromVehicle(playerid);

			AC_SetPlayerPos(playerid, -1976.0577,106.2484,27.5297);

			SetPlayerFacingAngle(playerid, 180.0);

			ClearBusDriversVariables(playerid);
		}

		case 34:
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			new String[216];

			if(PI[playerid][specialybe] != 24 && PI[playerid][AdminLevel] >= LEVEL_OWNER) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(!BusDriversCityDillimore[playerid]) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(!IsPlayerInAnyVehicle(playerid)) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(vehicleid != BusDriversVehicle[3]) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			new RandomMoney = 100 + random(50);

			GivePlayerMoneyA(playerid, RandomMoney);

			format(String, sizeof(String), "{ffffff} Sëkmingai atvykote á paþymëtà taðkà. Gavote atlygá: {FFAF00}$%i{ffffff}!", RandomMoney);
			SendClientMessage(playerid, -1, String);

			DisableAllPlayerCheckpoints(playerid);

			ac_SetVehicleToRespawn(vehicleid);

			RemovePlayerFromVehicle(playerid);

			AC_SetPlayerPos(playerid, -1976.0577,106.2484,27.5297);

			SetPlayerFacingAngle(playerid, 180.0);

			ClearBusDriversVariables(playerid);
		}

		case 35:
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			new String[216];

			if(PI[playerid][specialybe] != 24 && PI[playerid][AdminLevel] >= LEVEL_OWNER) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(!BusDriversCityMontgomery[playerid]) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(!IsPlayerInAnyVehicle(playerid)) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(vehicleid != BusDriversVehicle[4]) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			new RandomMoney = 100 + random(50);

			GivePlayerMoneyA(playerid, RandomMoney);

			format(String, sizeof(String), "{ffffff} Sëkmingai atvykote á paþymëtà taðkà. Gavote atlygá: {FFAF00}$%i{ffffff}!", RandomMoney);
			SendClientMessage(playerid, -1, String);

			DisableAllPlayerCheckpoints(playerid);

			ac_SetVehicleToRespawn(vehicleid);

			RemovePlayerFromVehicle(playerid);

			AC_SetPlayerPos(playerid, -1976.0577,106.2484,27.5297);

			SetPlayerFacingAngle(playerid, 180.0);

			ClearBusDriversVariables(playerid);
		}

		case 36:
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			new String[216];

			if(PI[playerid][specialybe] != 24 && PI[playerid][AdminLevel] >= LEVEL_OWNER) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(!BusDriversCityLasPayasdas[playerid]) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(!IsPlayerInAnyVehicle(playerid)) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(vehicleid != BusDriversVehicle[5]) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			new RandomMoney = 100 + random(50);

			GivePlayerMoneyA(playerid, RandomMoney);

			format(String, sizeof(String), "{ffffff} Sëkmingai atvykote á paþymëtà taðkà. Gavote atlygá: {FFAF00}$%i{ffffff}!", RandomMoney);
			SendClientMessage(playerid, -1, String);

			DisableAllPlayerCheckpoints(playerid);

			ac_SetVehicleToRespawn(vehicleid);

			RemovePlayerFromVehicle(playerid);

			AC_SetPlayerPos(playerid, -1976.0577,106.2484,27.5297);

			SetPlayerFacingAngle(playerid, 180.0);

			ClearBusDriversVariables(playerid);
		}

		case 37:
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			new String[216];

			if(PI[playerid][specialybe] != 24 && PI[playerid][AdminLevel] >= LEVEL_OWNER) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(!BusDriversCityPalominoCreek[playerid]) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(!IsPlayerInAnyVehicle(playerid)) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			if(vehicleid != BusDriversVehicle[6]) return DisableAllPlayerCheckpoints(playerid), ClearBusDriversVariables(playerid);

			new RandomMoney = 100 + random(50);

			GivePlayerMoneyA(playerid, RandomMoney);

			format(String, sizeof(String), "{ffffff} Sëkmingai atvykote á paþymëtà taðkà. Gavote atlygá: {FFAF00}$%i{ffffff}!", RandomMoney);
			SendClientMessage(playerid, -1, String);

			DisableAllPlayerCheckpoints(playerid);

			ac_SetVehicleToRespawn(vehicleid);

			RemovePlayerFromVehicle(playerid);

			AC_SetPlayerPos(playerid, -1976.0577,106.2484,27.5297);

			SetPlayerFacingAngle(playerid, 180.0);

			ClearBusDriversVariables(playerid);
		}
		case 0:
		{
			if(IsPlayerInCheckpointEx(playerid, cpid)) DisablePlayerCheckpointEx(playerid, 0);
		}
		case 7:
		{
			if(IsPlayerInCheckpointEx(playerid, cpid))
			{
				DisablePlayerCheckpointEx(playerid, 7);
				PI[playerid][GpsFinishPos][0] = 0.0;
				PI[playerid][GpsFinishPos][1] = 0.0;
				PI[playerid][GpsFinishPos][2] = 0.0;
			}
		}
		case 16:
		{
			if(IsPlayerInCheckpointEx(playerid, cpid))
			{
				if(!IsPlayerInAnyVehicle(playerid)) return DisablePlayerCheckpointEx(playerid, 16);

				switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
				{
					case 521: // motociklas
					{
						if(!IsPlayerAttachedObjectSlotUsed(playerid, POLICEHAT_ATTACH_SLOT)) // be ðalmo
						{
							new str[128];

							PI[playerid][VairavimoKlaidos] ++;

							switch(PI[playerid][VairavimoKlaidos])
							{
								case 0..4:
								{
									SendClientMessage(playerid, -1, "{ffffff} Padarëte klaidà (neuþsidëtas ðalmas).");
									format(str, 128, "{ffffff} Tai buvo {FFAF00}%d {FFFFFF}klaida ið {FFAF00}4 {FFFFFF}galimø!", PI[playerid][VairavimoKlaidos]);
									SendClientMessage(playerid, -1, str);
								}

								default:
								{
									SendClientMessage(playerid, -1, "{ffffff} Vairavimo egzaminas neiðlaikytas, kadangi padarëte {FFAF00}5 {ffffff}klaidas!");

									SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
									SetPlayerVirtualWorld(playerid, 0);
									ac_SetVehicleToRespawn    (GetPlayerVehicleID(playerid));
									RemovePlayerFromVehicle(playerid);

									PI[playerid][VairavimoKlaidos] 	= 0;
									PI[playerid][EgzaminoCP] 		= 0;

									return 1;
								}
							}
						}
					}

					default:
					{
						if(PI[playerid][Dirzas] == false)
						{
							new str[128];

							PI[playerid][VairavimoKlaidos] ++;

							if(PI[playerid][VairavimoKlaidos] <= 4)
							{
								SendClientMessage(playerid, -1, "{ffffff} Padarëte klaidà (neprisisegtas saugos dirþas).");
								format(str, 128, "{ffffff} Tai buvo {FFAF00}%d {FFFFFF}klaida ið {FFAF00}4 {FFFFFF}galimø!", PI[playerid][VairavimoKlaidos]);
								SendClientMessage(playerid, -1, str);
							}
							else
							{
								SendClientMessage(playerid, -1, "{ffffff} Vairavimo egzaminas neiðlaikytas, kadangi padarëte {FFAF00}5 {ffffff}klaidas!");

								SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
								SetPlayerVirtualWorld(playerid, 0);
								ac_SetVehicleToRespawn    (GetPlayerVehicleID(playerid));
								RemovePlayerFromVehicle(playerid);

								PI[playerid][VairavimoKlaidos] 	= 0;
								PI[playerid][EgzaminoCP] 		= 0;

								return 1;
							}
						}
					}
				}

				switch(GetPlayerSpeed(playerid))
				{
					case 94..110: // Duodam klaidà
					{
						PI[playerid][VairavimoKlaidos] ++;

						switch(PI[playerid][VairavimoKlaidos])
						{
							case 0..4:
							{
								new str[128];

								SendClientMessage(playerid, -1, "{ffffff} Padarëte klaidà (greièio virðijimas).");
								format(str, 128, "{ffffff} Tai buvo {FFAF00}%d {FFFFFF}klaida ið {FFAF00}4 {FFFFFF}galimø!", PI[playerid][VairavimoKlaidos]);
								SendClientMessage(playerid, -1, str);
							}

							default:
							{
								SendClientMessage(playerid, -1, "{ffffff} Vairavimo egzaminas neiðlaikytas, kadangi padarëte {FFAF00}5 {ffffff}klaidas!");

								SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
								SetPlayerVirtualWorld(playerid, 0);
								ac_SetVehicleToRespawn    (GetPlayerVehicleID(playerid));
								RemovePlayerFromVehicle(playerid);

								PI[playerid][VairavimoKlaidos] 	= 0;
								PI[playerid][EgzaminoCP] 		= 0;

								return 1;
							}
						}
					}

					case 111..400: // Kritinë klaida
					{
						SendClientMessage(playerid, -1, "{ffffff} Vairavimo egzaminas neiðlaikytas, kadangi padarëte kritinæ klaidà (didelis greièio virðijimas)!");

						SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
						SetPlayerVirtualWorld(playerid, 0);
						ac_SetVehicleToRespawn    (GetPlayerVehicleID(playerid));
						RemovePlayerFromVehicle(playerid);

						PI[playerid][VairavimoKlaidos] 	= 0;
						PI[playerid][EgzaminoCP] 		= 0;

						return 1;
					}
				}

				switch(PI[playerid][EgzaminoCP])
				{
					case 1:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2050.3401,-78.9246,35.3570, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 2:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2094.2310,-67.9149,35.1654, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 3:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2154.2383,-67.9626,35.1719, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 4:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2240.0659,-68.0347,35.1719, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 5:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2260.1238,-112.4416,35.1797, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 6:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2260.2927,-180.8748,35.1719, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 7:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2211.9221,-191.2703,35.2188, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 8:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2211.3296,-279.0354,35.3203, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 9:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2119.0706,-295.3890,35.4141, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 10:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2003.2679,-276.3420,35.3203, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 11:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2003.1879,-163.5797,35.7109, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 12:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2004.6166,-21.8780,35.0155, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 13:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2004.5347,47.9541,31.4536, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 14:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -1991.3810,112.3621,27.5391, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 15:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -1997.5004,190.3515,27.5391, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 16:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2002.5077,250.9027,30.0504, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 17:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2000.7983,290.4226,34.0861, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 18:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2000.5809,391.2088,35.0156, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 19:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2000.1655,511.9195,35.0156, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 20:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2000.9619,564.3771,35.0156, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 21:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2059.6636,569.2114,35.0232, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 22:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2168.9451,569.0989,35.0156, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 23:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2309.1946,569.1539,33.0351, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 24:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2385.7466,568.3792,24.7422, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 25:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2381.0344,518.5197,28.2888, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 26:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2430.1855,489.6837,29.9290, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 27:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2528.2334,422.2201,24.2951, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 28:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2541.5139,326.3953,19.5831, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 29:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2576.1465,233.6024,9.3828, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 30:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2569.8516,200.8792,7.0541, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 31:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2564.2146,169.0609,4.2639, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 32:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2599.1438,159.8427,4.1773, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 33:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2606.3022,69.6165,4.1797, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 34:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2605.9753,-19.4263,4.1797, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 35:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2605.9180,-68.8136,4.2969, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 36:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2503.7388,-72.4731,25.5790, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 37:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2389.4231,-72.7528,35.1641, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 38:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2238.0947,-72.4935,35.1719, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 39:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2179.4177,-72.6587,35.1719, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 40:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2095.6204,-72.4510,35.1719, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 41:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2053.3840,-72.4089,35.1654, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 42:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						SetPlayerCheckpointEx(playerid, 16, -2050.8591,-110.3257,35.3848, 4.0);

						PI[playerid][EgzaminoCP] ++;
					}

					case 43:
					{
						DisablePlayerCheckpointEx(playerid, 16);

						PI[playerid][EgzaminoCP] = 0;

						new Float: health, veh;

						veh = GetPlayerVehicleID(playerid);

						GetVehicleHealth(veh, health);

						if(health > 900)
						{
							new vehicleid = GetPlayerVehicleID(playerid);

							if(vehicleid >= VairavimoMokyklosMasina[5] && vehicleid <= VairavimoMokyklosMasina[10])
							{
								SendClientMessage(playerid, -1, "{ffffff} Sëkmingai iðlaikei B kategorijos vairavimo teises!");

								PI[playerid][teises] = true;

								if(!PI[playerid][misTeises]) PI[playerid][misTeises] = true;

								SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
								SetPlayerVirtualWorld(playerid, 0);
								SetVehicleVirtualWorld(vehicleid, 0);
								ac_SetVehicleToRespawn    (vehicleid);
								RemovePlayerFromVehicle(playerid);

								return 1;
							}

							if(vehicleid >= VairavimoMokyklosMasina[2] && vehicleid <= VairavimoMokyklosMasina[4])
							{
								SendClientMessage(playerid, -1, "{ffffff} Sëkmingai iðlaikei A kategorijos vairavimo teises!");

								PI[playerid][Mteises] 	= true;
								PI[playerid][Salmas] 	= 0;

								if(!PI[playerid][mMTeises]) PI[playerid][mMTeises] = true;

								SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
								SetPlayerVirtualWorld(playerid, 0);
								SetVehicleVirtualWorld(vehicleid, 0);
								ac_SetVehicleToRespawn    (vehicleid);
								RemovePlayerFromVehicle(playerid);
								RemovePlayerAttachedObject(playerid, POLICEHAT_ATTACH_SLOT);

								return 1;
							}

							if(vehicleid >= VairavimoMokyklosMasina[0] && vehicleid <= VairavimoMokyklosMasina[1])
							{
								SendClientMessage(playerid, -1, "{ffffff} Sëkmingai iðlaikei C kategorijos vairavimo teises!");

								PI[playerid][FTeises] = true;

								if(!PI[playerid][mFTeises]) PI[playerid][mFTeises] = true;

								SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
								SetPlayerVirtualWorld(playerid, 0);
								SetVehicleVirtualWorld(vehicleid, 0);
								ac_SetVehicleToRespawn    (vehicleid);
								RemovePlayerFromVehicle(playerid);

								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, -1, "{ffffff} Vairavimo egzaminas neiðlaikytas, kadangi per daug sudauþëte transp. priemonæ!");

							SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
							SetPlayerVirtualWorld(playerid, 0);
							ac_SetVehicleToRespawn    (veh);
							RemovePlayerFromVehicle(playerid);

							return 1;
					   }
					}
				}
			}
		}

		case 17:
		{
			if(IsPlayerInCheckpointEx(playerid, cpid))
			{
				if(!IsPlayerInAnyVehicle(playerid)) return DisablePlayerCheckpointEx(playerid, 17);

				switch(PI[playerid][AikstelesCPA])
				{
					case 1:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2083.3428,-151.4797,34.8907, 2.0);

						PI[playerid][AikstelesCPA] ++;
					}

					case 2:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2087.2073,-157.6445,34.8845, 2.0);

						PI[playerid][AikstelesCPA] ++;
					}

					case 3:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2090.8721,-165.0711,34.8894, 2.0);

						PI[playerid][AikstelesCPA] ++;
					}

					case 4:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2088.2432,-170.8170,34.8839, 2.0);

						PI[playerid][AikstelesCPA] ++;
					}

					case 5:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2083.0381,-173.4373,34.8922, 2.0);

						PI[playerid][AikstelesCPA] ++;
					}

					case 6:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2084.0085,-166.4473,34.8847, 2.0);

						PI[playerid][AikstelesCPA] ++;
					}

					case 7:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2067.7358,-163.2276,34.8923, 2.0);

						PI[playerid][AikstelesCPA] ++;
					}

					case 8:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2071.9258,-176.7214,34.8840, 2.0);

						PI[playerid][AikstelesCPA] ++;
					}

					case 9:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2068.2856,-187.5063,34.8841, 2.0);

						PI[playerid][AikstelesCPA] ++;
					}

					case 10:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2072.9446,-196.4491,34.8835, 2.0);

						PI[playerid][AikstelesCPA] ++;
					}

					case 11:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2069.3208,-202.8983,34.8866, 2.0);

						PI[playerid][AikstelesCPA] ++;
					}

					case 12:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2077.9670,-210.6393,34.8842, 2.0);

						PI[playerid][AikstelesCPA] ++;
					}

					case 13:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2072.9087,-204.8158,34.8920, 2.0);

						PI[playerid][AikstelesCPA] ++;
					}

					case 14:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2068.4614,-214.7660,34.8840, 2.0);

						PI[playerid][AikstelesCPA] ++;
					}

					case 15:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2071.2061,-221.5208,34.8953, 2.0);

						PI[playerid][AikstelesCPA] ++;
					}

					case 16:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						PI[playerid][AikstelesCPA] = 0;

						new Float: health, veh;

						veh = GetPlayerVehicleID(playerid);

						GetVehicleHealth(veh, health);

						if(health > 950)
						{
							new vehicleid = GetPlayerVehicleID(playerid);

							if(vehicleid >= VairavimoMokyklosMasina[5] && vehicleid <= VairavimoMokyklosMasina[10])
							{
								SendClientMessage(playerid, -1, "{ffffff} Sëkmingai iðlaikei vairavimo egzaminà aikðtelëje, dabar vaþiuok á miestà!");

								PI[playerid][Apraktika] = true;

								SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
								SetPlayerVirtualWorld(playerid, 0);
								ac_SetVehicleToRespawn    (vehicleid);
								RemovePlayerFromVehicle(playerid);

								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, -1, "{ffffff} Vairavimo egzaminas aikðtelëje neiðlaikytas!");

							SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
							SetPlayerVirtualWorld(playerid, 0);
							ac_SetVehicleToRespawn    (veh);
							RemovePlayerFromVehicle(playerid);

							return 1;
					   	}
					}
				}

				switch(PI[playerid][AikstelesCPB])
				{
					case 1:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2048.2700,-147.2995,35.0258, 2.0);

						PI[playerid][AikstelesCPB] ++;
					}

					case 2:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2048.3962,-176.1328,35.0245, 2.0);

						PI[playerid][AikstelesCPB] ++;
					}

					case 3:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2041.4076,-185.5957,35.0256, 2.0);

						PI[playerid][AikstelesCPB] ++;
					}

					case 4:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2047.7023,-186.8430,35.0258, 2.0);

						PI[playerid][AikstelesCPB] ++;
					}

					case 5:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2041.3263,-175.6462,35.0302, 2.0);

						PI[playerid][AikstelesCPB] ++;
					}

					case 6:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2032.7733,-164.5651,35.0286, 2.0);

						PI[playerid][AikstelesCPB] ++;
					}

					case 7:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2020.5144,-171.1015,35.0247, 2.0);

						PI[playerid][AikstelesCPB] ++;
					}

					case 8:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2021.8074,-188.6937,35.0249, 2.0);

						PI[playerid][AikstelesCPB] ++;
					}

					case 9:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2025.0721,-203.1468,35.0250, 2.0);

						PI[playerid][AikstelesCPB] ++;
					}

					case 10:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2029.8024,-197.5089,35.0252, 2.0);

						PI[playerid][AikstelesCPB] ++;
					}

					case 11:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2026.4023,-222.8625,35.0251, 2.0);

						PI[playerid][AikstelesCPB] ++;
					}

					case 12:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2033.1571,-211.9621,35.0261, 2.0);

						PI[playerid][AikstelesCPB] ++;
					}

					case 13:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2028.5110,-235.8780,35.0288, 2.0);

						PI[playerid][AikstelesCPB] ++;
					}

					case 14:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2033.9659,-225.5272,35.0252, 2.0);

						PI[playerid][AikstelesCPB] ++;
					}

					case 15:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						SetPlayerCheckpointEx(playerid, 17, -2033.8987,-228.5683,35.0277, 2.0);

						PI[playerid][AikstelesCPB] ++;
					}

					case 16:
					{
						DisablePlayerCheckpointEx(playerid, 17);

						PI[playerid][AikstelesCPB] = 0;

						new Float: health, veh;

						veh = GetPlayerVehicleID(playerid);

						GetVehicleHealth(veh, health);

						if(health > 950)
						{
							new vehicleid = GetPlayerVehicleID(playerid);

							if(vehicleid >= VairavimoMokyklosMasina[2] && vehicleid <= VairavimoMokyklosMasina[4])
							{
								SendClientMessage(playerid, -1, "{ffffff} Sëkmingai iðlaikei vairavimo egzaminà aikðtelëje, dabar vaþiuok á miestà!");

								PI[playerid][Bpraktika] = true;

								SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
								SetPlayerVirtualWorld(playerid, 0);
								ac_SetVehicleToRespawn    (vehicleid);
								RemovePlayerFromVehicle(playerid);

								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, -1, "{ffffff} Vairavimo egzaminas aikðtelëje neiðlaikytas!");

							SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
							SetPlayerVirtualWorld(playerid, 0);
							ac_SetVehicleToRespawn    (veh);
							RemovePlayerFromVehicle(playerid);

							return 1;
					   	}
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	new cpid = pCPID[playerid];
	switch(cpid)
	{
		case 1:
		{
			if(IsPlayerInCheckpointEx(playerid, cpid))
			{
				/*printf("Paliko CP %d", cpid);*/
			}
		}
	}
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid){

	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnObjectMoved(objectid){

	return 1;
}

stock StartTutorial(playerid)
{
	new String[500];

	KelintasApmokymas[playerid] = 32000;
	SkaitymoLaikas[playerid] 	= gettime() + 15;

	AC_SetPlayerPos 		(playerid, -2050.2485,-60.6317,35.3138);
	SetPlayerCameraPos		(playerid, -2102.0146,-69.3394,45.7878);
	SetPlayerCameraLookAt	(playerid, -2043.6599,-104.6000,35.3190);

	strcat(String, "{ffffff} - Vairavimo mokykla\n \n");
	strcat(String, "{ffffff}Èia jus galësite iðsilaikyti vairavimo teises. Viso serveryje yra 3 kategorijø vairavimo\n");
	strcat(String, "{ffffff}paþymëjimai: A - motociklø, B - lengvøjø tr. priemoniø ir C - sunkiøjø tr. priemoniø.\n");
	strcat(String, "{ffffff}Taèiau prieð laikant vairavimo egzaminà, jums reikës iðlaikyti teorijos egzaminà, kuris\n");
	strcat(String, "{ffffff}susidës ið 10 nesudëtingø klausimø.");

	ShowPlayerDialogEx(playerid, KelintasApmokymas[playerid], DIALOG_STYLE_MSGBOX, "www.MetroCity.lt apmokymai", String, "Toliau", "");

	return 1;
}

stock ShowTutorialDialog(playerid, dialogid)
{
	new String[900];

	switch(dialogid)
	{
		case 32000: // VM
		{
			AC_SetPlayerPos 		(playerid, -2050.2485,-60.6317,35.3138);
			SetPlayerCameraPos		(playerid, -2102.0146,-69.3394,45.7878);
			SetPlayerCameraLookAt	(playerid, -2043.6599,-104.6000,35.3190);

			strcat(String, "{ffffff} - Vairavimo mokykla\n \n");
			strcat(String, "{ffffff}Èia jus galësite iðsilaikyti vairavimo teises. Viso serveryje yra 3 kategorijø vairavimo\n");
			strcat(String, "{ffffff}paþymëjimai: A - motociklø, B - lengvøjø tr. priemoniø ir C - sunkiøjø tr. priemoniø.\n");
			strcat(String, "{ffffff}Taèiau prieð laikant vairavimo egzaminà, jums reikës iðlaikyti teorijos egzaminà, kuris\n");
			strcat(String, "{ffffff}susidës ið 10 nesudëtingø klausimø.");
		}

		case 32001: // 7 MetroCity stebuklai
		{
			AC_SetPlayerPos 		(playerid, -2079.0239,1370.0383,7.1016);
			SetPlayerCameraPos		(playerid, -2077.9788,1388.0342,13.5516);
			SetPlayerCameraLookAt	(playerid, -2078.1155,1419.3195,7.1007);

			strcat(String, "{ffffff} - 7 uliunø Stebuklai\n \n");
			strcat(String, "{ffffff}Ði vieta skirta mëgstantiems uþuomenas ir kaþko ieðkoti. Atvaþiavæ á ðià vietà gausite\n");
			strcat(String, "{ffffff}visokias uþuomenas, pagal kurias reikës ieðkoti MetroCity.lt Stebuklus, radus visus 7\n");
			strcat(String, "{ffffff}stebuklus galësite pasirinkti koká prizà norite atsiimti (prizai iðties dosnûs).");
		}

		case 32002: // Þvejyba
		{
			AC_SetPlayerPos 		(playerid, -2442.1328,1401.1781,7.7947);
			SetPlayerCameraPos		(playerid, -2458.9834,1419.7618,8.8934);
			SetPlayerCameraLookAt	(playerid, -2425.9199,1450.5894,8.8934);

			strcat(String, "{ffffff} - Þvejybos vieta\n \n");
			strcat(String, "{ffffff}Ði vieta skirta mëgstantiems atsipalaiduoti po sunkios darbo dienos ir tuo paèiu dar uþsidirbti\n");
			strcat(String, "{ffffff}papildomø pinigø. Viskas, ko jums reikës þvejybai tai meðkerës, valo bei masalo, visus ðiuos\n");
			strcat(String, "{ffffff}resursus galësite nusipirkti ten pat. Taèiau sugavus tam tikrà þuvies kieká turësite nuveþti\n");
			strcat(String, "{ffffff}parduoti jà á MetroCity.lt Turgø (apie já - vëliau). Taip pat serveryje reguliariai vyksta þvejybos\n");
			strcat(String, "{ffffff}varþybos, per kurias daugiausiai þuvies pagavæs þaidëjas laimi atitinkamà prizà.");
		}

		case 32003: // Kasykla
		{
			AC_SetPlayerPos 		(playerid, -2943.4905,664.7591,13.3377);
			SetPlayerCameraPos		(playerid, -2940.1934,665.1736,13.7742);
			SetPlayerCameraLookAt	(playerid, -2907.0576,669.3398,5.7975);

			strcat(String, "{ffffff} - Metalo kasykla\n \n");
			strcat(String, "{ffffff}Èia galësite pasinerti á ðachtininko gyvenimà. Turint kastuvà (já nusipirkti galima betkuriame\n");
			strcat(String, "{ffffff}Lietuvos Spauda kioske) galësite pradëti kasti metalus. Ið viso yra 6 skirtingos metalo rûðys\n");
			strcat(String, "{ffffff}todël atitinkamai metalo kaina ir tikimybë já atkasti yra skirtingos. Panaðiai kaip ir su þvejyba\n");
			strcat(String, "{ffffff}parduoti iðkastà metalà galësite MetroCity.lt Turguje. Taip pat serveryje vyksta ir metalo kasimo varþybos,\n");
			strcat(String, "{ffffff}principas tas pats kaip ir su þuvim, daugiausiai kilogramø metalo atkasæs þaidëjas laimi prizà.");
		}

		case 32004: // MetroCity.lt Turgus
		{
			AC_SetPlayerPos 		(playerid, -2559.5337,252.5286,12.6732);
			SetPlayerCameraPos		(playerid, -2559.6238,252.4648,56.1893);
			SetPlayerCameraLookAt	(playerid, -2497.2336,296.7506,35.1219);

			strcat(String, "{ffffff} - MetroCity.lt Turgus\n \n");
			strcat(String, "{ffffff}Ði vieta daug kà reiðkia ðiame serveryje. Èia, kaip buvo sakoma, jus galësite parduoti iðkastà metalà\n");
			strcat(String, "{ffffff}ir sugautas þuvis. Taèiau èia dar galima nusipirkti pasenusias tr. priemones maþomis kainomis (kaip tik\n");
			strcat(String, "{ffffff}naujokui). Ðioje vietoje dar galima parduoti savo tr. priemones jeigu jos jums nereikalingos. Taipogi\n");
			strcat(String, "{ffffff}fûristai èia veþa tr. priemones jeigu turguje nëra vienos ar kitos tr. priemonës rûðies. Ateityje\n");
			strcat(String, "{ffffff}ðià vietà planuojame tobulinti iki dar daugiau galimybiø.");
		}

		case 32005: // MetroCity.lt Garaþas
		{
			AC_SetPlayerPos 		(playerid, -2323.9590,-88.6216,35.3315);
			SetPlayerCameraPos		(playerid, -2323.9590,-88.6216,35.3315);
			SetPlayerCameraLookAt	(playerid, -2323.9590,-88.6216,35.3315);

			strcat(String, "{ffffff} - MetroCity.lt Garaþas\n \n");
			strcat(String, "{ffffff}Kaip ir MetroCity.lt Turgus ði vieta irgi labai daug reiðkia tiek jums, tiek jûsø tr. priemonëms. Kadangi tik\n");
			strcat(String, "{ffffff}èia galësite uþregistruoti naujai nupirktà transportà. Taip pat èia galësite praeiti tech. apþiûrà bei\n");
			strcat(String, "{ffffff}ámontuoti dujø árangà (aiðku jeigu jûsø transporto variklis benzininis). O sprogus/nuskendus arba dar\n");
			strcat(String, "{ffffff}kokiais kitais bûdais sunaikinus jûsø transportà, èia galësite já ir atstatyti (atstatymo kaina priklauso\n");
			strcat(String, "{ffffff}nuo jûsø transporto kainos).");
		}

		case 32006: // Maðinø, Motociklø salonas
		{
			AC_SetPlayerPos 		(playerid, -2022.8236,284.8334,34.2881);
			SetPlayerCameraPos		(playerid, -2022.6859,284.8152,48.8411);
			SetPlayerCameraLookAt	(playerid, -1971.3378,278.3078,35.1719);

			strcat(String, "{ffffff} - Maðinø, motociklø salonas\n \n");
			strcat(String, "{ffffff}Èia galës lankytis tik serverio turtuoliai, kurie galëtø sau leisti nusipirkti maðinà arba motociklà\n");
			strcat(String, "{ffffff}uþ dideles kainas. Ðioje vietoje dauguma yra sportiniø maðinø, todël ir kainos padarytos atitinkamos.\n");
			strcat(String, "{ffffff}Motociklai aiðku yra pigesni, taèiau vos atëjus á serverá tikrai negalësite èia nieko ápirkti. Iðkart\n");
			strcat(String, "{ffffff}apsilankyti patariame MetroCity.lt Turguje norint turëti ratus.");
		}

		case 32007: // Laivø parduotuvë
		{
			AC_SetPlayerPos 		(playerid, -2857.6172,488.7400,4.4600);
			SetPlayerCameraPos		(playerid, -2865.3240,484.3050,13.2082);
			SetPlayerCameraLookAt	(playerid, -2920.6709,452.4532,4.8727);

			strcat(String, "{ffffff} - Laivø salonas\n \n");
			strcat(String, "{ffffff}Kaip ir su sportinëm maðinom taip ir su laivais - juos galës ápirkti tik pinigø neskaièiuojantys þaidëjai.\n");
			strcat(String, "{ffffff}Serveryje yra daug skirtingø laivø rûðiø, laivams padarytos specialios degalinës, atstatymø vietos ir t.t.\n");
			strcat(String, "{ffffff}Privalumas turint laivà yra tas, kad galësite su juo þvejoti bet kur, o tai padidina tikimybæ, kad pagausite\n");
			strcat(String, "{ffffff}daugiau þuvies.");
		}

		case 32008: // Ginklø, narkotikø sandëlis
		{
			AC_SetPlayerPos 		(playerid, -1028.7791,-585.3314,32.00780);
			SetPlayerCameraPos		(playerid, -1035.1067,-676.2258,42.2049);
			SetPlayerCameraLookAt	(playerid, -1099.4570,-677.4651,32.0126);

			strcat(String, "{ffffff} - Ginklø, narkotikø sandëlis\n \n");
			strcat(String, "{ffffff}Kiekvienà dienà lygiai nuo 19:00 iki 20:00 ðis sandëlis bûna atidarytas. Ðiuo metu\n");
			strcat(String, "{ffffff}èia galësite pamatyti karà tarp teisësaugos ir gaujos nariø, kurie kovos tarpusavyje: kas daugiau paims ir kas\n");
			strcat(String, "{ffffff}daugiau sunaikins narkotikø ir ginklø, kuriuos reguliariai èia juos pristato fûristai. Surinkus kuo daugiau\n");
			strcat(String, "{ffffff}ginklø ir narkotikø gaujos galës viskà pardavinëti kitiems þaidëjams.");
		}

		case 32009: // Namø sistema
		{
			AC_SetPlayerPos 		(playerid, -2062.9207,309.6262,35.2673);
			SetPlayerCameraPos		(playerid, -2076.1235,323.3882,43.6031);
			SetPlayerCameraLookAt	(playerid, -2062.2375,351.3794,36.6857);

			strcat(String, "{ffffff} - Namai\n \n");
			strcat(String, "{ffffff}Viso serveryje yra 3 tipø namø sistemos: Namukai (ant ratø ir pnð), Butai ir Namai. Turbût nesunku suprasti,\n");
			strcat(String, "{ffffff}kad ir kainos namø priklausys nuo to, koks namo tipas yra. Taèiau kuo namas brangesnis, tuo daugiau privalumø jis\n");
			strcat(String, "{ffffff}turi. Pvz Namuke galima tik pavalgyti ir pasidëti pinigø. Bute galima pavalgyti, pasigydyti, pasidëti pinigø, ginklus,\n");
			strcat(String, "{ffffff} o namuose bus galima pasidëti viskà kas buvo iki ðiol ir dar narkotikus.");
		}

		case 32010: // Verslø sistema
		{
			AC_SetPlayerPos 		(playerid, -2058.1985,395.0446,35.1709);
			SetPlayerCameraPos		(playerid, -2001.9347,392.3935,36.3112);
			SetPlayerCameraLookAt	(playerid, -2044.9214,413.9418,35.1900);

			strcat(String, "{ffffff} - Verslai\n \n");
			strcat(String, "{ffffff}Viso serveryje yra 2 tipø verslø sistemos: su ir be papildomo pelno. Verslai turintys papildomà pelnà bus brangesni,\n");
			strcat(String, "{ffffff}taèiau jø privalumas tas, kad pinigai uþ prekes nupirktas ið jûsø verslo keliaus á jûsø verslo pelnà, tuo paèiu dar\n");
			strcat(String, "{ffffff}gausite tam tikrà pinigø kieká á minutæ uþ verslà. Verslai be papildomo pelno bus pigesni, taèiau pinigus jie gaus\n");
			strcat(String, "{ffffff}tiesiog uþ verslo egzistavimà. Apie papildomo verslo pelno informacijà galite suþinote prie verslo paspaudæ ALT mygtukà.");
		}

		case 32011: // Pabaiga
		{
			PI[playerid][DeleteAcc] = false;

			SetCameraBehindPlayer(playerid);
			AC_SetPlayerPos      (playerid, -1982.1161,137.7512,27.6875);
			SetPlayerFacingAngle (playerid, 91.0455);

			SendClientMessage(playerid, -1, "{ffffff} Apmokymai baigti. Iðkylus klausimams kreipkites á administracijà - {FFAF00} /admin{ffffff}!");
			SendClientMessage(playerid, -1, "{ffffff} Gero þaidimo linki www.MetroCity.lt administracija!");
		}
	}

	ShowPlayerDialogEx(playerid, KelintasApmokymas[playerid], DIALOG_STYLE_MSGBOX, "www.MetroCity.lt apmokymai", String, "Toliau", "Atgal");
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	//printf("DIALOGID: %i\nLISTITEM: %i\nINPUTTEXT: %s\nV_P: %s",dialogid,listitem, inputtext,GetPlayerNameEx(playerid));
	//if(GetPVarInt(playerid, "A_DIALOG") != dialogid) return SendClientMessage(playerid, -1, " ");

	if(dialogid == 31999)
	{
		if(response)
		{
			StartTutorial(playerid);
		}
	}

	if(dialogid == KelintasApmokymas[playerid])
	{
		if(response)
		{
			/*if(SkaitymoLaikas[playerid] > gettime())
			{
				SendClientMessage (playerid, -1, "{ffffff} Patariame jums perskaityti viskà prieð spaudþiant Toliau!");
				ShowTutorialDialog(playerid, KelintasApmokymas[playerid]);

				return 1;
			}*/

			SkaitymoLaikas[playerid] 	= gettime() + 15;
			KelintasApmokymas[playerid] ++;

			ShowTutorialDialog(playerid, KelintasApmokymas[playerid]);
		}
		else
		{
			if(KelintasApmokymas[playerid] == 32000) return StartTutorial(playerid);

			SkaitymoLaikas[playerid] 	= gettime() + 15;
			KelintasApmokymas[playerid] --;

			ShowTutorialDialog(playerid, KelintasApmokymas[playerid]);
		}

		return 1;
	}

	if(dialogid == 5722)
	{
		if(response)
		{
			new String[128];

  			switch(listitem)
		    {
	            case 0:
    			{
    			    if(GetPlayerMoneyA(playerid) < 70) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					if(PI[playerid][laikrodis]) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite laikrodá!");

					if(Laikrodziai == 0) return SendClientMessage(playerid, -1, "{ffffff} Atsipraðome, taèiau ðiuo metu parduotuvë neturi laikrodþiø!");

					Laikrodziai --;

					format(String, sizeof(String), "UPDATE `sinfo` SET `Laikrodziai` = '%d'", Laikrodziai);
					mysql_query(String);

					PI[playerid][laikrodis] = 1;
					LaikPasleptas[playerid]			= false;

					ApplyAnimation 		(playerid, "ped", "phone_out", 3.0, 0, 0, 0, 0, 0);
					GivePlayerMoneyA 	(playerid, -70);
 				 	SendClientMessage 	(playerid, -1, "{ffffff} Nusipirkote laikrodá uþ {FFAF00}$70{ffffff}.");

 				 	if(PropertyInfo[EL_PARDUOTUVE][pBuyed])
					{
						PropertyInfo[EL_PARDUOTUVE][pProfit] += 35;
					}
	            }

	            case 1:
	            {
    			    if(GetPlayerMoneyA(playerid) < 45) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

    			    if(Fotikai == 0) return SendClientMessage(playerid, -1, "{ffffff} Atsipraðome, taèiau ðiuo metu parduotuvë neturi fotoaparatø!");

					Fotikai --;

					format(String, sizeof(String), "UPDATE `sinfo` SET `Fotikai` = '%d'", Fotikai);
					mysql_query(String);

					ac_GivePlayerWeapon 		(playerid, 43, 100);
					ApplyAnimation 		(playerid, "ped", "phone_out", 3.0, 0, 0, 0, 0, 0);
					GivePlayerMoneyA 	(playerid, -45);
 				 	SendClientMessage 	(playerid, -1, "{ffffff} Nusipirkote fotoaparatà (100 kadrø) uþ {FFAF00}$45{ffffff}.");

 				 	if(PropertyInfo[EL_PARDUOTUVE][pBuyed])
					{
						PropertyInfo[EL_PARDUOTUVE][pProfit] += 22;
					}
	            }

				case 2:
    			{
    			    if(GetPlayerMoneyA(playerid) < 320) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					if(PI[playerid][gps]) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite GPS navigacijà!");

					if(Navigacijos == 0) return SendClientMessage(playerid, -1, "{ffffff} Atsipraðome, taèiau ðiuo metu parduotuvë neturi GPS navigacijø!");

					Navigacijos --;

					format(String, sizeof(String), "UPDATE `sinfo` SET `Navigacijos` = '%d'", Navigacijos);
					mysql_query(String);

					PI[playerid][gps] = true;

					ApplyAnimation 		(playerid, "ped", "phone_out", 3.0, 0, 0, 0, 0, 0);
					GivePlayerMoneyA 	(playerid, -320);
 				 	SendClientMessage 	(playerid, -1, "{ffffff} Nusipirkote GPS navigacijà uþ {FFAF00}$320{ffffff}.");

 				 	if(PropertyInfo[EL_PARDUOTUVE][pBuyed])
					{
						PropertyInfo[EL_PARDUOTUVE][pProfit] += 160;
					}
	            }
			}

			OnPlayerPickUpPickup(playerid, PickupsInfo[ElektronikosPard][0]);
		}

		return 1;
	}

	if(dialogid == 10042)
	{
		if(response)
  		{
		    switch(listitem)
		    {
			    case 0:
			    {
				    new vID = PI[playerid][Transportas1];
				    new rand = random(sizeof(RandomCarSpawn));

			        if(GetPlayerMoneyA(playerid) < 1000) return SendClientMessage(playerid, -1, "{ffffff} Jûs neturie tiek pinigø!");
			        if(vID == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!");
			        if(VehicleInfo[vID][vSprogusi]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonë yra sudauþyta!");

			        GivePlayerMoneyA(playerid, -1000);

					SetVehiclePos(vID, RandomCarSpawn[rand][0], RandomCarSpawn[rand][1], RandomCarSpawn[rand][2]);
					SetVehicleZAngle(vID, 359.4875);
					SetVehicleVirtualWorld(vID, 0);

					SendClientMessage(playerid, -1, "{24F34A} TR.ATSIKELDINIMAS  {ffffff}Atsikeldinote savo maðinà uþ $1000!");
	   			}
       			case 1:
       			{
          			new vID = PI[playerid][Transportas2];
          			new rand = random(sizeof(RandomCarSpawn));

					if(GetPlayerMoneyA(playerid) < 1000) return SendClientMessage(playerid, -1, "{ffffff} Jûs neturie tiek pinigø!");
					if(vID == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 2-ojo transporto!");
					if(VehicleInfo[vID][vSprogusi]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonë yra sudauþyta!");

					GivePlayerMoneyA(playerid, -1000);

					SetVehiclePos(vID, RandomCarSpawn[rand][0], RandomCarSpawn[rand][1], RandomCarSpawn[rand][2]);
					SetVehicleZAngle(vID, 359.4875);
					SetVehicleVirtualWorld(vID, 0);

					SendClientMessage(playerid, -1, "{24F34A} TR.ATSIKELDINIMAS  {ffffff}Atsikeldinote savo maðinà uþ $1000!");
				}
				case 2:
				{
					new vID = PI[playerid][Transportas3];
					new rand = random(sizeof(RandomCarSpawn));

					if(GetPlayerMoneyA(playerid) < 1000) return SendClientMessage(playerid, -1, "{ffffff} Jûs neturie tiek pinigø!");
					if(vID == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 3-ojo transporto!");
					if(VehicleInfo[vID][vSprogusi]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonë yra sudauþyta!");

					GivePlayerMoneyA(playerid, -1000);

					SetVehiclePos(vID, RandomCarSpawn[rand][0], RandomCarSpawn[rand][1], RandomCarSpawn[rand][2]);
					SetVehicleZAngle(vID, 359.4875);
					SetVehicleVirtualWorld(vID, 0);

					SendClientMessage(playerid, -1, "{24F34A} TR.ATSIKELDINIMAS  {ffffff}Atsikeldinote savo maðinà uþ $1000!");
				}
 			}
		}
		return 1;
	}

	if(dialogid == 5881)
	{
		if(response)
		{
			switch(listitem)
			{
				case 5:
				{
					new
					darbs = GetJobFromFaction( PI[ playerid ][ specialybe ] );
					if( Idukas == INVALID_PLAYER_ID ) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas neprisijungæs!" );
					else if( PI[ Idukas ][ specialybe ] != darbs ) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nedirba pas jus!" );

				    new
						query[ 300 ],
						str  [ 1200 ];

					format( query, 200, "SELECT `RID`, `RPavadinimas` FROM `rangai` WHERE `RKint` = '%d'", PI[ playerid ][ specialybe ] );
					mysql_query( query );
					mysql_store_result();
					if ( mysql_num_rows( ))
					{
						while( mysql_fetch_row( query ))
						{
							new
								id,
								pavadinimas[ 50 ];

							sscanf( query, "p<|>is[50]", id, pavadinimas );
							format( str, 1200, "%sID: %i - %s\n", str, id, pavadinimas );
						}
						mysql_free_result();
							ShowPlayerDialogEx( playerid, 341, DIALOG_STYLE_LIST, "{FFFFFF}Pasirinkite Rangà", str, "Rinktis", "Atgal" );
					}
				}

				case 6:
				{
					new
						dirikas[ MAX_PLAYER_NAME ],
						masyvas[ 201 ],
						darbs = GetJobFromFaction( PI[ playerid ][ specialybe ] );
					if( Idukas == INVALID_PLAYER_ID ) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas neprisijungæs!" );
					else if( PI[ Idukas ][ specialybe ] != darbs ) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nedirba pas jus!" );
					else
					{
				    	GetPlayerName( playerid, dirikas, sizeof( dirikas ) );
				    	format( masyvas, 200, "{ffffff} Direktorius {FFAF00}%s {ffffff}davë jums áspëjimà!", dirikas );
				    	SendClientMessage( Idukas, -1, masyvas );
				    	format( masyvas, 200, "{ffffff} Davëte áspëjimà þaidëjui {FFAF00}%s{ffffff}!", Vardukas );
				    	SendClientMessage( playerid, -1, masyvas );
				    	PI[ Idukas ][ ispejimai ] += 1;
				    	new
							msgg[ 150 ];
				    	format( msgg, 150, "UPDATE `players` SET `ispejimai` = '%i' WHERE `Vardas` = '%s'", PI[ Idukas ][ ispejimai ], Vardukas );
						mysql_query( msgg );
						if( PI[ Idukas ][ ispejimai ] == 3 )
						{
							SetPlayerSkin( Idukas, PI[ Idukas ][ drabuziai ] );
							PI[ Idukas ][ specialybe ] = 0;
							PI[ Idukas ][ uniformd ] = false;
							PI[ Idukas ][ uniforma ] = -1;
							PI[ Idukas ][ ispejimai ] = 0;
							format( msgg, 150, "UPDATE `players` SET `Job` = '0', `Ispejimai` = '0'  WHERE `Vardas` = '%s'", Vardukas );
							mysql_query( msgg );
							SendClientMessage( playerid, -1, "{ffffff} Jus surinkote {FFAF00}3 {ffffff}áspëjimus, todël buvote iðmestas ið darbo!" );
							format( masyvas, 150, "{ffffff} Þaidëjas surinko {FFAF00}3 {ffffff}áspëjimus, todël buvo iðmestas ið darbo!", Vardukas );
							SendClientMessage( playerid, -1, masyvas );

							new query[150];

							format(query, sizeof(query), "UPDATE `players` SET `SiandienPriimta` = '%d', `SiaSavaitePriimta` = '%d', `IsVisoPriimta` = '%d' WHERE `Vardas` = '%s'",
							PI[Idukas][SiandienPriimta][0], PI[Idukas][SiaSavaitePriimta][0], PI[Idukas][IsVisoPriimta][0], Vardukas);
							mysql_query(query);
						}
					}
				}

				case 7:
				{
					new
						dirikas[ MAX_PLAYER_NAME ],
						masyvas[ 201 ],
						darbs = GetJobFromFaction( PI[ playerid ][ specialybe ] );
					if( Idukas == INVALID_PLAYER_ID ) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas neprisijungæs!" );
					else if( PI[ Idukas ][ specialybe ] != darbs ) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nedirba pas jus!" );
					else if( PI[ Idukas ][ ispejimai ] <= 0 )return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas áspëjimø neturi!" );
					else
					{
				    	GetPlayerName( playerid, dirikas, sizeof( dirikas ) );
				    	format( masyvas, 200, "{ffffff} Direktorius {FFAF00}%s {ffffff}nuëme jums áspëjimà!", dirikas );
				    	SendClientMessage( Idukas, -1, masyvas );
				    	format( masyvas, 200, "{ffffff} Nuëmëte áspëjimà þaidëjui {FFAF00}%s{ffffff}!", Vardukas );
				    	SendClientMessage( playerid, -1, masyvas );
				    	PI[ Idukas ][ ispejimai ] -= 1;
				    	new
							msgg[ 150 ];
				    	format( msgg, 150, "UPDATE `players` SET `Ispejimai` = '%i' WHERE `Vardas` = '%s'", PI[ Idukas ][ ispejimai ], Vardukas );
						mysql_query( msgg );
					}
				}

				case 8:
				{
					new
				    dirikas[ MAX_PLAYER_NAME ],
				 	masyvas[ 128 ],
			 		darbs = GetJobFromFaction( PI[ playerid ][ specialybe ] );
			 		GetPlayerName( playerid, dirikas, sizeof( dirikas ) );
			        if( Idukas == INVALID_PLAYER_ID ) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas neprisijungæs!" );
					else if( PI[ Idukas ][ specialybe ] != darbs ) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nedirba pas jus!" );

					else
					{

						SetPlayerSkin( Idukas, PI[ Idukas ][ drabuziai ] );
						PI[ Idukas ][ specialybe ] = 0;
						PI[ Idukas ][ uniformd ] = false;
				 		PI[ Idukas ][ uniforma ] = -1;
				 		new
					 		msgg[ 150 ];
					 	SendClientMessage( playerid, -1, "{ffffff} Jus buvote iðmestas ið darbo!" );
				 		format( msgg, 150, "UPDATE `players` SET `Job` = '0', `Ispejimai` = '0'  WHERE `Vardas` = '%s'", Vardukas );
						mysql_query( msgg );
				 		format( masyvas, 128, "{ffffff} Iðmetëte þaidëjà {FFAF00}%s{ffffff} ið darbo!", Vardukas );
						SendClientMessage( playerid, -1, masyvas );

						for(new index = 0; index < 3; index ++) PI[Idukas][SiandienPriimta][index] 	= 0;
						for(new index = 0; index < 3; index ++) PI[Idukas][SiaSavaitePriimta][index] 	= 0;
						for(new index = 0; index < 3; index ++) PI[Idukas][IsVisoPriimta][index] 		= 0;

						new query[150];

						format(query, sizeof(query), "UPDATE `players` SET `SiandienPriimta` = '%d', `SiaSavaitePriimta` = '%d', `IsVisoPriimta` = '%d' WHERE `Vardas` = '%s'",
						PI[Idukas][SiandienPriimta][0], PI[Idukas][SiaSavaitePriimta][0], PI[Idukas][IsVisoPriimta][0], Vardukas);
						mysql_query(query);
			  		}
			  	}
			}
		}

		return 1;
	}

	/*if( dialogid == 306 )
	{
		if( response )
		{
			switch( listitem )
			{
				case 1://Ðiuo metu prisijungæ darbuotojai
				{
					new
						Index,
						query[ 300 ],
						query2[ 300 ],
						str  [ 1200 ];

					format( query, 200, "SELECT `Vardas`,`Job` FROM `players` WHERE `Job` =  '%d'", PI[ playerid ][ plead ] );
					mysql_query( query );
					mysql_store_result();
					if ( mysql_num_rows( ))
					{
						while( mysql_fetch_row( query2 ))
						{
							new
								name[ MAX_PLAYER_NAME ],
								factionid;

							sscanf( query2, "p<|>s[24]i", name, factionid);

							if(GetPlayeridMid(name) != INVALID_PLAYER_ID)
							{
								format( str, 1200, "%s%s - {FFAF00}ONLINE\n{FFFFFF}", str, name );
								Index++;
							}
							else
							{
								format( str, 1200, "%s%s - {FFAF00}OFFLINE\n{FFFFFF}", str, name );
								Index++;

							}
						}
					}
					mysql_free_result();
					if ( !Index )
					{
						ShowPlayerDialogEx( playerid, 312, DIALOG_STYLE_LIST, "{FFAF00}» Jûsø darbuotojai", "{FFAF00}Nëra nei vieno darbuotojo", "Rinktis", "Atgal" );
					}
					else
					{
						ShowPlayerDialogEx( playerid, 312, DIALOG_STYLE_LIST, "Jûsø darbuotojai", str, "Rinktis", "Atgal" );
					}
					return 1;
				}
				case 4://Rangø sistema...
				{
				    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
				}
			}
		}
		return 1;
	}*/

	if( dialogid == 310 )//rangai
	{
		if( response )
		{
		    switch( listitem )
		    {
		        case 0://Sukurti rangà...
		        {
					new
						query[ 300 ],
						str  [ 1200 ];

					format( query, 200, "SELECT `RID`, `RPavadinimas` FROM `rangai` WHERE `RKint` = '%d'", PI[ playerid ][ specialybe ] );
					mysql_query( query );
					mysql_store_result();
					if ( mysql_num_rows( ))
					{
						while( mysql_fetch_row( query ))
						{
							new
								id,
								pavadinimas[ 50 ];

							sscanf( query, "p<|>is[50]", id, pavadinimas );
							format( str, 1200, "%sID: %i - %s\n", str, id, pavadinimas );
						}
					}
					mysql_free_result();
					ShowPlayerDialogEx( playerid, 311, DIALOG_STYLE_LIST, "{FFFFFF}Rangai", str, "Rinktis", "Atgal" );
					return true;
          		}
		        /*case 1://Priskirti Transportà...
		        {
		        	new
						query[ 300 ],
						str  [ 1200 ];

					format( query, 200, "SELECT `RID`, `RPavadinimas` FROM `rangai` WHERE `RKint` = '%d'", PI[ playerid ][ specialybe ] );
					mysql_query( query );
					mysql_store_result();
					if ( mysql_num_rows( ))
					{
						while( mysql_fetch_row( query ))
						{
							new
								id,
								pavadinimas[ 50 ];

							sscanf( query, "p<|>is[50]", id, pavadinimas );
							format( str, 1200, "%sID: %i - %s\n", str, id, pavadinimas );
						}
						mysql_free_result();
               			ShowPlayerDialogEx( playerid, 331, DIALOG_STYLE_LIST, "{FFFFFF}Pasirinkite Rangà", str, "Rinktis", "Atgal" );
					}
		        }*/
		        case 1://Priskirti Uniformà...
		        {
		            new
						query[ 300 ],
						str  [ 1200 ];

					format( query, 200, "SELECT `RID`, `RPavadinimas` FROM `rangai` WHERE `RKint` = '%d'", PI[ playerid ][ specialybe ] );
					mysql_query( query );
					mysql_store_result();
					if ( mysql_num_rows( ))
					{
						while( mysql_fetch_row( query ))
						{
							new
								id,
								pavadinimas[ 50 ];

							sscanf( query, "p<|>is[50]", id, pavadinimas );
							format( str, 1200, "%sID: %i - %s\n", str, id, pavadinimas );
						}
						mysql_free_result();
               			ShowPlayerDialogEx( playerid, 321, DIALOG_STYLE_LIST, "{FFFFFF}Pasirinkite Rangà", str, "Rinktis", "Atgal" );
					}
		        }
		        case 2://Iðtrinti Rangà...
		        {
		        	new
						query[ 300 ],
						str  [ 1200 ];

					format( query, 200, "SELECT `RID`, `RPavadinimas` FROM `rangai` WHERE `RKint` = '%d'", PI[ playerid ][ specialybe ] );
					mysql_query( query );
					mysql_store_result();
					if ( mysql_num_rows( ))
					{
						while( mysql_fetch_row( query ))
						{
							new
								id,
								pavadinimas[ 50 ];

							sscanf( query, "p<|>is[50]", id, pavadinimas );
							format( str, 1200, "%sID: %i - %s\n", str, id, pavadinimas );
						}
						mysql_free_result();
						ShowPlayerDialogEx( playerid, 314, DIALOG_STYLE_LIST, "{FFFFFF}Rangai", str, "Rinktis", "Atgal" );
						return true;
	          		}
		        }
			}
		}
		return true;
	}

	if( dialogid == 311 )//Sukurti rangà...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
			"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    if( PI[ playerid ][ plead ] == 0 ) return false;
		    new pose[ 20 ],
				yraa;
		    strmid( pose, inputtext, 8, 19 );
			if( strfind( pose, "Nesukurtas" ) != -1 )
			{
			    yraa = 1;
			}
			if( !yraa ) return SendClientMessage( playerid, -1, "{ffffff} Rangas jau sukurtas!" );
  			ShowPlayerDialogEx( playerid, 313, DIALOG_STYLE_INPUT, "{FFFFFF}Rango kurimas", "Áraðykite rango pavadinimà.", "Gerai", "Atgal" );
          	new
				msg[ 21 ],
				pos = strfind( inputtext, " -" );
			strmid( msg, inputtext, 3, pos, 6 );
			format( Rangiukas, 10, "%s", msg );
		}
		return true;
	}
	if( dialogid == 313 )//Sukurti rangà...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
			"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    if( strfind( inputtext, "%" ) != -1 )
			{
				IsmestiZaideja(playerid, 100);
	   			return true;
			}
		    new
				query[ 256 ];
			format( query, 256, "UPDATE `rangai` SET `RPavadinimas` = '%s' WHERE `RID` = '%d' AND `RKint` = '%d'", inputtext, strval( Rangiukas ), PI[ playerid ][ specialybe ] );
			mysql_query( query );
			ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
			"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );

			SendClientMessage( playerid, -1, "{ffffff} Sëkmingai sukûrëte naujà rangà!" );
 		}
		return true;
	}
	if( dialogid == 314 )//Iðtrinti rangà...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
			"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    new pose[ 20 ],
				yraa;
		    strmid( pose, inputtext, 8, 19 );
			if( strfind( pose, "Nesukurtas" ) != -1 )
			{
			    yraa = 1;
			}
			if( !yraa )
			{
	  			new
					msg[ 21 ],
					pos = strfind( inputtext, " -" );
				strmid( msg, inputtext, 3, pos, 6 );
				format( Rangiukas, 10, "%s", msg );
                new
					query[ 256 ];
				format( query, 256, "UPDATE `rangai` SET `RPavadinimas` = 'Nesukurtas' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ specialybe ] );
				mysql_query( query );
				format( query, 256, "UPDATE `rangai` SET `RSkin` = '0' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ specialybe ] );
				mysql_query( query );
				format( query, 256, "UPDATE `rangai` SET `RMasina` = '0' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ specialybe ] );
				mysql_query( query );
				ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
				"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
				SendClientMessage( playerid, -1, "{ffffff} Sëkmingai iðtrynëte rangà!" );
			}
			else
			{
			    return SendClientMessage( playerid, -1, "{ffffff} Rangas nesukurtas!" );
			}
		}
		return true;
	}
	if( dialogid == 320 )//Skin...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
			"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
			if( PI[ playerid ][ plead ] == 1 )
			{
				ShowPlayerDialogEx( playerid, 322, DIALOG_STYLE_LIST, "Uniformos",
				"1. ID: {FFAF00}280 {ffffff}\t Pavadinimas: {FFAF00}Los Santos Police Officer\n2. ID: {FFAF00}281 {ffffff}\t Pavadinimas: {FFAF00}}MetroCity.lt Police Officer\n\
				3. ID: {FFAF00}282 {ffffff}\t Pavadinimas: {FFAF00}Las Venturas Police Officer\n4. ID: {FFAF00}283 {ffffff}\t Pavadinimas: {FFAF00}County Sheriff\n\
				5. ID: {FFAF00}284 {ffffff}\t Pavadinimas: {FFAF00}LSPD Motorbike Cop\n6. ID: {FFAF00}288 {ffffff}\t Pavadinimas: {FFAF00}Desert Sheriff", "Pasirinkti", "Atgal" );
			}
			else if( PI[ playerid ][ plead ] == 11 )
			{
				ShowPlayerDialogEx( playerid, 323, DIALOG_STYLE_LIST, "Uniformos",
				"1. ID: {FFAF00}125 {ffffff}\t Pavadinimas: {FFAF00}The Mafia\n2. ID: {FFAF00}126 {ffffff}\t Pavadinimas: {FFAF00}The Mafia\n\
				3. ID: {FFAF00}127 {ffffff}\t Pavadinimas: {FFAF00}The Mafia\n4. ID: {FFAF00}128 {ffffff}\t Pavadinimas: {FFAF00}Farm Inhabitant\n\
				5. ID: {FFAF00}133 {ffffff}\t Pavadinimas: {FFAF00}Farm Inhabitant", "Pasirinkti", "Atgal" );
			}
			else if( PI[ playerid ][ plead ] == 3 )
			{
				ShowPlayerDialogEx( playerid, 324, DIALOG_STYLE_LIST, "Uniformos",
				"1. ID: {FFAF00}189 {ffffff}\t Pavadinimas: {FFAF00}Valet\n2. ID: {FFAF00}187 {ffffff}\t Pavadinimas: {FFAF00}Businessman\n\
				3. ID: {FFAF00}240 {ffffff}\t Pavadinimas: {FFAF00}The D.A\n4. ID: {FFAF00}227 {ffffff}\t Pavadinimas: {FFAF00}Oriental Businessman", "Pasirinkti", "Atgal" );
			}
			else if( PI[ playerid ][ plead ] == 2 )
			{
				ShowPlayerDialogEx( playerid, 325, DIALOG_STYLE_LIST, "Uniformos",
				"1. ID: {FFAF00}274 {ffffff}\t Pavadinimas: {FFAF00}Paramedic\n2. ID: {FFAF00}275 {ffffff}\t Pavadinimas: {FFAF00}Paramedic\n\
				3. ID: {FFAF00}276 {ffffff}\t Pavadinimas: {FFAF00}Paramedic\n4. ID: {FFAF00}270 {ffffff}\t Pavadinimas: {FFAF00}Scientist", "Pasirinkti", "Atgal" );
			}
			else if( PI[ playerid ][ plead ] == 4 )
			{
				ShowPlayerDialogEx( playerid, 326, DIALOG_STYLE_LIST, "Uniformos",
				"1. ID: {FFAF00}50 {ffffff}\t Pavadinimas: {FFAF00}Mechanic\n2. ID: {FFAF00}268 {ffffff}\t Pavadinimas: {FFAF00}Dwaine\n\
				3. ID: {FFAF00}8 {ffffff}\t Pavadinimas: {FFAF00}Janitor", "Rinktis", "Atgal" );
			}
			else if( PI[ playerid ][ plead ] == 5 )
			{
				ShowPlayerDialogEx( playerid, 327, DIALOG_STYLE_LIST, "Uniformos",
				"1. ID: {FFAF00}285 {ffffff}\t Pavadinimas: {FFAF00}S.W.A.T Special Forces\n2. ID: {FFAF00}294 {ffffff}\t Pavadinimas: {FFAF00}Wu Zi Mu (Woozie)\n\
				3. ID: {FFAF00}165 {ffffff}\t Pavadinimas: {FFAF00}White MIB agent", "Rinktis", "Atgal" );
			}
			else if( PI[ playerid ][ plead ] == 13 )
			{
				ShowPlayerDialogEx( playerid, 7005, DIALOG_STYLE_LIST, "Uniformos",
				"1. ID: {FFAF00}7 {ffffff}\t Pavadinimas: {FFAF00}Taxi vairuotojas\n2. ID: {FFAF00}255 {ffffff}\t Pavadinimas: {FFAF00}Taxi vairuotojas\n\
				3. ID: {FFAF00}171 {ffffff}\t Pavadinimas: {FFAF00}Taxi vairuotojas\n4. ID: {FFAF00}189 {ffffff}\t Pavadinimas: {FFAF00}Taxi vairuotojas", "Pasirinkti", "Atgal" );
		}
		}
		return true;
	}

	if( dialogid == 321 )//Skin...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
			"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    new
				msg[ 21 ],
				pos = strfind( inputtext, " -" );
				strmid( msg, inputtext, 3, pos, 6 );
				format( Rangiukas, 10, "%s", msg );
		    new
		        Query[ 256 ],
		        fetch[ 10 ],
				Skinas;

		    format( Query, 256, "SELECT * FROM `rangai` WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
			mysql_query( Query );
			mysql_store_result( );
			while( mysql_retrieve_row( ) )
			{
	            mysql_fetch_field_row( fetch,"RSkin" );
				Skinas = strval( fetch );
			}
			if( Skinas )
			{
                ShowPlayerDialogEx( playerid, 320, DIALOG_STYLE_MSGBOX,"{00FF00}Áspejimas", "Ðis rangas jau turi uniforma, ar norite ja pakeisti?", "Keisti", "Nekeisti" );
			}
 			else
			{
			    new pose[ 20 ],
					yraa;
			    strmid( pose, inputtext, 8, 19 );
				if( strfind( pose, "Nesukurtas" ) != -1 )
				{
				    yraa = 1;
				}
				if( !yraa )
				{
					if( PI[ playerid ][ plead ] == 1 )
					{
						ShowPlayerDialogEx( playerid, 322, DIALOG_STYLE_LIST, "Uniformos",
						"1. ID: {FFAF00}280 {ffffff}\t Pavadinimas: {FFAF00}Los Santos Police Officer\n2. ID: {FFAF00}281 {ffffff}\t Pavadinimas: {FFAF00}}MetroCity.lt Police Officer\n\
						3. ID: {FFAF00}282 {ffffff}\t Pavadinimas: {FFAF00}Las Venturas Police Officer\n4. ID: {FFAF00}283 {ffffff}\t Pavadinimas: {FFAF00}County Sheriff\n\
						5. ID: {FFAF00}284 {ffffff}\t Pavadinimas: {FFAF00}LSPD Motorbike Cop\n6. ID: {FFAF00}288 {ffffff}\t Pavadinimas: {FFAF00}Desert Sheriff", "Pasirinkti", "Atgal" );
					}
					else if( PI[ playerid ][ plead ] == 11 )
					{
						ShowPlayerDialogEx( playerid, 323, DIALOG_STYLE_LIST, "Uniformos",
						"1. ID: {FFAF00}125 {ffffff}\t Pavadinimas: {FFAF00}The Mafia\n2. ID: {FFAF00}126 {ffffff}\t Pavadinimas: {FFAF00}The Mafia\n\
						3. ID: {FFAF00}127 {ffffff}\t Pavadinimas: {FFAF00}The Mafia\n4. ID: {FFAF00}128 {ffffff}\t Pavadinimas: {FFAF00}Farm Inhabitant\n\
						5. ID: {FFAF00}133 {ffffff}\t Pavadinimas: {FFAF00}Farm Inhabitant", "Pasirinkti", "Atgal" );
					}
					else if( PI[ playerid ][ plead ] == 3 )
					{
						ShowPlayerDialogEx( playerid, 324, DIALOG_STYLE_LIST, "Uniformos",
						"1. ID: {FFAF00}15 {ffffff}\t Pavadinimas: {FFAF00}Mr. Whittaker\n2. ID: {FFAF00}24 {ffffff}\t Pavadinimas: {FFAF00}Madd Dogg Bodyguard\n\
						3. ID: {FFAF00}25 {ffffff}\t Pavadinimas: {FFAF00}Madd Dogg Bodyguard 2\n4. ID: {FFAF00}273 {ffffff}\t Pavadinimas: {FFAF00}T-Bone Mendez", "Pasirinkti", "Atgal" );
					}
					else if( PI[ playerid ][ plead ] == 2 )
					{
						ShowPlayerDialogEx( playerid, 325, DIALOG_STYLE_LIST, "Uniformos",
						"1. ID: {FFAF00}274 {ffffff}\t Pavadinimas: {FFAF00}Paramedic\n2. ID: {FFAF00}275 {ffffff}\t Pavadinimas: {FFAF00}Paramedic\n\
						3. ID: {FFAF00}276 {ffffff}\t Pavadinimas: {FFAF00}Paramedic\n4. ID: {FFAF00}270 {ffffff}\t Pavadinimas: {FFAF00}Scientist", "Pasirinkti", "Atgal" );
					}
					else if( PI[ playerid ][ plead ] == 4 )
					{
						ShowPlayerDialogEx( playerid, 326, DIALOG_STYLE_LIST, "Uniformos",
						"1. ID: {FFAF00}50 {ffffff}\t Pavadinimas: {FFAF00}Mechanic\n2. ID: {FFAF00}268 {ffffff}\t Pavadinimas: {FFAF00}Dwaine\n\
						3. ID: {FFAF00}8 {ffffff}\t Pavadinimas: {FFAF00}Janitor", "Rinktis", "Atgal" );
					}
					else if( PI[ playerid ][ plead ] == 5 )
					{
						ShowPlayerDialogEx( playerid, 327, DIALOG_STYLE_LIST, "Uniformos",
						"1. ID: {FFAF00}285 {ffffff}\t Pavadinimas: {FFAF00}S.W.A.T Special Forces\n2. ID: {FFAF00}294 {ffffff}\t Pavadinimas: {FFAF00}Wu Zi Mu (Woozie)\n\
						3. ID: {FFAF00}165 {ffffff}\t Pavadinimas: {FFAF00}White MIB agent", "Rinktis", "Atgal" );
					}
					else if( PI[ playerid ][ plead ] == 13 )
				{
				ShowPlayerDialogEx( playerid, 7005, DIALOG_STYLE_LIST, "Uniformos",
				"1. ID: {FFAF00}7 {ffffff}\t Pavadinimas: {FFAF00}Taxi vairuotojas\n2. ID: {FFAF00}255 {ffffff}\t Pavadinimas: {FFAF00}Taxi vairuotojasc\n\
				3. ID: {FFAF00}171 {ffffff}\t Pavadinimas: {FFAF00}Taxi vairuotojas\n4. ID: {FFAF00}189 {ffffff}\t Pavadinimas: {FFAF00}Taxi vairuotojas", "Pasirinkti", "Atgal" );
				}
				}
				else
				{
				    return SendClientMessage( playerid, -1, "{ffffff} Rangas nesukurtas!" );
				}
			}
		}
		mysql_free_result( );
		return true;
	}

	if( dialogid == 322 )//PD skinai...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
			"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    switch( listitem )
		    {
		        case 0://280
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '280' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}280{ffffff}) pasirinktam rangui!" );
		        }
		        case 1://281
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '281' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}281{ffffff}) pasirinktam rangui!" );
		        }
		        case 2://282
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '282' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}282{ffffff}) pasirinktam rangui!" );
		        }
		        case 3://283
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '283' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}283{ffffff}) pasirinktam rangui!" );
		        }
		        case 4://284
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '284' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}284{ffffff}) pasirinktam rangui!" );
		        }
		        case 5://288
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '288' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}288{ffffff}) pasirinktam rangui!" );
		        }
			}
  		}
  		return true;
	}

	if( dialogid == 323 )//furistu skinai...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
			"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    switch( listitem )
		    {
		        case 0://125
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '125' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}125{ffffff}) pasirinktam rangui!" );
		        }
		        case 1://126
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '126' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}126{ffffff}) pasirinktam rangui!" );
		        }
		        case 2://127
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '127' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}127{ffffff}) pasirinktam rangui!" );
		        }
		        case 3://128
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '128' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}128{ffffff}) pasirinktam rangui!" );
		        }
		        case 4://133
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '133' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}133{ffffff}) pasirinktam rangui!" );
		        }
			}
  		}
  		return true;
	}

	if( dialogid == 324 )//Kurjeriø skinai
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    switch( listitem )
		    {
		        case 0://15
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '15' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}15{ffffff}) pasirinktam rangui!" );
		        }
		        case 1://24
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '24' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}24{ffffff}) pasirinktam rangui!" );
		        }
		        case 2://25
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '25' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}25{ffffff}) pasirinktam rangui!" );
		        }
		        case 3://273
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '273' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}273{ffffff}) pasirinktam rangui!" );
		        }
			}
  		}
  		return true;
	}
	if( dialogid == 325 )//Medikø skinai...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    switch( listitem )
		    {
		        case 0://274
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '274' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}274{ffffff}) pasirinktam rangui!" );
		        }
		        case 1://275
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '275' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}275{ffffff}) pasirinktam rangui!" );
		        }
		        case 2://276
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '276' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}276{ffffff}) pasirinktam rangui!" );
		        }
		        case 3://70
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '70' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}70{ffffff}) pasirinktam rangui!" );
		        }
			}
  		}
  		return true;
	}
	if( dialogid == 7005 )//Taxi skinai...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    switch( listitem )
		    {
		        case 0://7
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '7' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}7{ffffff}) pasirinktam rangui!" );
		        }
		        case 1://255
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '255' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}255{ffffff}) pasirinktam rangui!" );
		        }
		        case 2://171189
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '171' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}171{ffffff}) pasirinktam rangui!" );
		        }
		        case 3://189
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '189' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}189{ffffff}) pasirinktam rangui!" );
		        }
			}
  		}
  		return true;
	}
	if( dialogid == 326 )//Mechanikø skinai...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    switch( listitem )
		    {
		        case 0://50
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '50' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}50{ffffff}) pasirinktam rangui!" );
		        }
		        case 1://268
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '268' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}268{ffffff}) pasirinktam rangui!" );
		        }
		        case 2://8
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '8' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}8{ffffff}) pasirinktam rangui!" );
		        }
			}
  		}
  		return true;
	}

	if( dialogid == 327 )//Spec. bûrio pajëgos ARAS skinai
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    switch( listitem )
		    {
		        case 0://28
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '285' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}285{ffffff}) pasirinktam rangui!" );
		        }

		        case 1://28
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '294' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}294{ffffff}) pasirinktam rangui!" );
		        }

		        case 2://28
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RSkin` = '165' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte skinà (ID: {FFAF00}165{ffffff}) pasirinktam rangui!" );
		        }
			}
  		}
  		return true;
	}

	if( dialogid == 330 )//Transportas...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
			if( PI[ playerid ][ plead ] == 1 )
			{
				ShowPlayerDialogEx( playerid, 332, DIALOG_STYLE_LIST, "Transportas",
				"1. ID: {FFAF00}599 {ffffff}\t Pavadinimas: {FFAF00}Police Ranger\n2. ID: {FFAF00}490 {ffffff}\t Pavadinimas: {FFAF00}FBI Rancher\n\
				3. ID: {FFAF00}597 {ffffff}\t Pavadinimas: {FFAF00}Police Car (SFPD)\n4. ID: {FFAF00}497 {ffffff}\t Pavadinimas: {FFAF00}Police Maverick\n", "Pasirinkti", "Atgal" );
			}
			else if( PI[ playerid ][ plead ] == 11 )
			{
				ShowPlayerDialogEx( playerid, 333, DIALOG_STYLE_LIST, "Transportas", "1. ID: {FFAF00}403 {ffffff}\t Pavadinimas: {FFAF00}Linerunner\n2. ID: {FFAF00}515 {ffffff}\t Pavadinimas: {FFAF00}RoadTrain", "Pasirinkti", "Atgal" );
			}
			else if( PI[ playerid ][ plead ] == 3 )
			{
				ShowPlayerDialogEx( playerid, 334, DIALOG_STYLE_LIST, "Transportas",
				"1. ID: {FFAF00}420 {ffffff}\t Pavadinimas: {FFAF00}Taxi\n2. ID: {FFAF00}560 {ffffff}\t Pavadinimas: {FFAF00}Sultan", "Pasirinkti", "Atgal" );
			}
			else if( PI[ playerid ][ plead ] == 2 )
			{
				ShowPlayerDialogEx( playerid, 335, DIALOG_STYLE_LIST, "Transportas",
				"1. ID: {FFAF00}416 {ffffff}\t Pavadinimas: {FFAF00}Ambulance\n2. ID: {FFAF00}489 {ffffff}\t Pavadinimas: {FFAF00}Rancher", "Pasirinkti", "Atgal" );
			}
			else if( PI[ playerid ][ plead ] == 4 )
			{
				ShowPlayerDialogEx( playerid, 336, DIALOG_STYLE_LIST, "Transportas", "1. ID: {FFAF00}525 {ffffff}\t Pavadinimas: {FFAF00}Towtruck", "Pasirinkti", "Atgal" );
			}
			else if( PI[ playerid ][ plead ] == 5 )
			{
				ShowPlayerDialogEx( playerid, 337, DIALOG_STYLE_LIST, "Transportas", "1. ID: {FFAF00}482 {ffffff}\t Pavadinimas: {FFAF00}Burrito\n\
				2. ID: {FFAF00}475 {ffffff}\t Pavadinimas: {FFAF00}Sabre", "Pasirinkti", "Atgal" );
			}
			else if( PI[ playerid ][ plead ] == 13 )
			{
				ShowPlayerDialogEx( playerid, 7006, DIALOG_STYLE_LIST, "Transportas", "1. ID: {FFAF00}438 {ffffff}\t Pavadinimas: {FFAF00}Cabbie\n\
				2. ID: {FFAF00}420 {ffffff}\t Pavadinimas: {FFAF00}Taxi", "Pasirinkti", "Atgal" );
			}
		}
		return true;
	}

	if( dialogid == 331 )//Transportas...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    new
				msg[ 21 ],
				pos = strfind( inputtext, " -" );
				strmid( msg, inputtext, 3, pos, 6 );
				format( Rangiukas, 10, "%s", msg );
		    new
		        Query[ 256 ],
		        fetch[ 10 ],
				Skinas;
		    format( Query, 256, "SELECT * FROM `rangai` WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
			mysql_query( Query );
			mysql_store_result( );
			while( mysql_retrieve_row( ) )
			{
	            mysql_fetch_field_row( fetch,"RMasina" );
				Skinas = strval( fetch );
			}
			if( Skinas )
			{
                ShowPlayerDialogEx( playerid, 330, DIALOG_STYLE_MSGBOX,"{00FF00}Áspejimas", "Ðis rangas jau turi transporta, ar norite ja pakeisti?", "Keisti", "Nekeisti" );
			}
 			else
			{
			    new pose[ 20 ],
					yraa;
			    strmid( pose, inputtext, 8, 19 );
				if( strfind( pose, "Nesukurtas" ) != -1 )
				{
				    yraa = 1;
				}
				if( !yraa )
				{
					if( PI[ playerid ][ plead ] == 1 )
					{
						ShowPlayerDialogEx( playerid, 332, DIALOG_STYLE_LIST, "Transportas",
						"1. ID: {FFAF00}599 {ffffff}\t Pavadinimas: {FFAF00}Police Ranger\n2. ID: {FFAF00}490 {ffffff}\t Pavadinimas: {FFAF00}FBI Rancher\n\
						3. ID: {FFAF00}597 {ffffff}\t Pavadinimas: {FFAF00}Police Car (SFPD)\n4. ID: {FFAF00}497 {ffffff}\t Pavadinimas: {FFAF00}Police Maverick\n", "Pasirinkti", "Atgal" );
					}
					else if( PI[ playerid ][ plead ] == 11 )
					{
						ShowPlayerDialogEx( playerid, 333, DIALOG_STYLE_LIST, "Transportas", "1. ID: {FFAF00}403 {ffffff}\t Pavadinimas: {FFAF00}Linerunner\n2. ID: {FFAF00}515 {ffffff}\t Pavadinimas: {FFAF00}RoadTrain", "Pasirinkti", "Atgal" );
					}
					else if( PI[ playerid ][ plead ] == 3 )
					{
						ShowPlayerDialogEx( playerid, 334, DIALOG_STYLE_LIST, "Transportas",
						"1. ID: {FFAF00}420 {ffffff}\t Pavadinimas: {FFAF00}Taxi\n2. ID: {FFAF00}560 {ffffff}\t Pavadinimas: {FFAF00}Sultan", "Pasirinkti", "Atgal" );
					}
					else if( PI[ playerid ][ plead ] == 2 )
					{
						ShowPlayerDialogEx( playerid, 335, DIALOG_STYLE_LIST, "Transportas",
						"1. ID: {FFAF00}416 {ffffff}\t Pavadinimas: {FFAF00}Ambulance\n2. ID: {FFAF00}489 {ffffff}\t Pavadinimas: {FFAF00}Rancher", "Pasirinkti", "Atgal" );
					}
					else if( PI[ playerid ][ plead ] == 4 )
					{
						ShowPlayerDialogEx( playerid, 336, DIALOG_STYLE_LIST, "Transportas", "1. ID: {FFAF00}525 {ffffff}\t Pavadinimas: {FFAF00}Towtruck", "Pasirinkti", "Atgal" );
					}
					else if( PI[ playerid ][ plead ] == 5 )
					{
						ShowPlayerDialogEx( playerid, 337, DIALOG_STYLE_LIST, "Transportas", "1. ID: {FFAF00}482 {ffffff}\t Pavadinimas: {FFAF00}Burrito\n\
						2. ID: {FFAF00}475 {ffffff}\t Pavadinimas: {FFAF00}Sabre", "Pasirinkti", "Atgal" );
					}
					else if( PI[ playerid ][ plead ] == 13 )
					{
				ShowPlayerDialogEx( playerid, 7006, DIALOG_STYLE_LIST, "Transportas", "1. ID: {FFAF00}438 {ffffff}\t Pavadinimas: {FFAF00}Cabbie\n\
				2. ID: {FFAF00}420 {ffffff}\t Pavadinimas: {FFAF00}Taxi", "Pasirinkti", "Atgal" );
				}
				}
				else
				{
				    return SendClientMessage( playerid, -1, "{ffffff} Rangas nesukurtas!" );
				}
			}
		}
		mysql_free_result( );
		return true;
	}
	if( dialogid == 332 )//Policijos Transportas...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    switch( listitem )
		    {
		        case 0://599
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RMasina` = '599' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte transportà (ID: {FFAF00}599{ffffff}) pasirinktam rangui!" );
		        }
		        case 1://490
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RMasina` = '490' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte transportà (ID: {FFAF00}490{ffffff}) pasirinktam rangui!" );
		        }
		        case 2://597
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RMasina` = '597' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte transportà (ID: {FFAF00}597{ffffff}) pasirinktam rangui!" );
		        }
		        case 3://497
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RMasina` = '497' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte transportà (ID: {FFAF00}497{ffffff}) pasirinktam rangui!" );
		        }
			}
  		}
  		return true;
	}
	if( dialogid == 333 )//Furistu Transportas...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    switch( listitem )
		    {
		        case 0://403
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RMasina` = '403' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte transportà (ID: {FFAF00}403{ffffff}) pasirinktam rangui!" );
		        }
		        case 1://515
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RMasina` = '515' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte transportà (ID: {FFAF00}515{ffffff}) pasirinktam rangui!" );
		        }
			}
  		}
  		return true;
	}
	if( dialogid == 7006 )//Taxi Transportas...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    switch( listitem )
		    {
		        case 0://420
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RMasina` = '420' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte transportà (ID: {FFAF00}420{ffffff}) pasirinktam rangui!" );
		        }
		        case 1://560
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RMasina` = '560' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte transportà (ID: {FFAF00}560{ffffff}) pasirinktam rangui!" );
		        }
			}
  		}
  		return true;
	}
	if( dialogid == 335 )//Medikø Transportas...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    switch( listitem )
		    {
		        case 0://416
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RMasina` = '416' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte transportà (ID: {FFAF00}416{ffffff}) pasirinktam rangui!" );
		        }
		        case 1://489
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RMasina` = '489' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte transportà (ID: {FFAF00}489{ffffff}) pasirinktam rangui!" );
		        }
			}
  		}
  		return true;
	}
	if( dialogid == 336 )//Mechanikø Transportas...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    switch( listitem )
		    {
		        case 0://525
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RMasina` = '525' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte transportà (ID: {FFAF00}525{ffffff}) pasirinktam rangui!" );
		        }
			}
  		}
  		return true;
	}
	if( dialogid == 337 )//dyleriø Transportas...
	{
	    if( !response )
		{
		    ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
		}
		if( response )
		{
		    switch( listitem )
		    {
		        case 0://482
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RMasina` = '482' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte transportà (ID: {FFAF00}482{ffffff}) pasirinktam rangui!" );
		        }
		        case 1://475
		        {
		            new
						query[ 256 ];
					format( query, 256, "UPDATE `rangai` SET `RMasina` = '475' WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ playerid ][ plead ] );
					mysql_query( query );
					ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
					"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );
					SendClientMessage( playerid, -1, "{ffffff} Sëkmingai priskyrëte transportà (ID: {FFAF00}475{ffffff}) pasirinktam rangui!" );
		        }
			}
  		}
  		return true;
	}
	if( dialogid == 341 )
	{
		if( response )
		{
		    if( PI[ playerid ][ specialybe ] == 0 ) return false;
		    new pose[ 20 ],
				yraa;
		    strmid( pose, inputtext, 8, 19 );
			if( strfind( pose, "Nesukurtas" ) != -1 )
			{
			    yraa = 1;
			}
			if( yraa ) return SendClientMessage( playerid, -1, "{ffffff} Rangas dar nesukurtas!" );
  			new
				msg[ 21 ],
				pos = strfind( inputtext, " -" );
			strmid( msg, inputtext, 3, pos, 6 );
			format( Rangiukas, 10, "%s", msg );
			new
			    query[ 256 ];
			PI[ Idukas ][ DarboRangas ] = strval( Rangiukas );
			new sql[ 300 ];
			new line[ 300 ];
		 	format( query, 256, "SELECT * FROM `rangai` WHERE `RID` = '%d' AND `RKint` = '%d'", strval( Rangiukas ), PI[ Idukas ][ specialybe ] );
			mysql_query( query );
			mysql_store_result( );
			while( mysql_fetch_row( line ) )
			{
				mysql_get_field( "RSkin", sql );
				if(strval(sql) == 0) return SendClientMessage( playerid, -1, "{ffffff} Pirmiausiai priskirkite rangui uniformà!" );

				switch(PI[Idukas][specialybe])
				{
					case 1:
					{
						if(PI[Idukas][lytis] == 0)
						{
							PI[ Idukas ][ uniforma ] = strval( sql );
						}
						else if(PI[Idukas][lytis] == 1)
						{
							switch(random(3))
							{
								case 0: PI[Idukas][uniforma] = 306;
								case 1: PI[Idukas][uniforma] = 307;
								case 2: PI[Idukas][uniforma] = 309;
							}
						}
					}

					case 2:
					{
 						if(PI[Idukas][lytis] == 0)
						{
							PI[ Idukas ][ uniforma ] = strval( sql );
						}
						else if(PI[Idukas][lytis] == 1)
						{
							PI[Idukas][uniforma] = 308;
						}
					}

					default: PI[ Idukas ][ uniforma ] = strval( sql );
				}

			  	//PI[ Idukas ][ uniforma ] = strval( sql );
			}
			format( query, 256, "UPDATE `players` SET `Rangas` = '%d', `Uniforma` = '%i' WHERE `Vardas` = '%s'", strval( Rangiukas ), PI[ Idukas ][ uniforma ], GetPlayerNameEx( Idukas ) );
			mysql_query( query );

			new msge[ 251 ];
			format (msge, sizeof( msge ), "{ffffff} Sëkmingai uþdëjote rangà {FFAF00}%d {ffffff}þaidëjui {FFAF00}%s{ffffff}!", strval( Rangiukas ), GetPlayerNameEx( Idukas ) );
  			SendClientMessage( playerid, -1, msge );
  			SetPlayerSkin( Idukas, PI[ Idukas ][ uniforma ] );
  			PI[Idukas][uniformd] = true;
  			format (msge, sizeof( msge ), "{ffffff} Direktorius {FFAF00}%s {ffffff}uþdëjo jums rangà {FFAF00}%d{ffffff}!", GetPlayerNameEx( playerid ), strval( Rangiukas ) );
  			SendClientMessage( Idukas, -1, msge );
  		}
  		return true;
	}

	/*if(dialogid == 312)
	{
		if(response)
		{
			new msg[24], pos = strfind(inputtext, " -" ), name[MAX_PLAYER_NAME], query[128], ispejimaid[10], specofke[10], pavas[50], praleido[10];

			strmid(msg, inputtext, 0, pos, 21);
			format(name, 24, "%s", msg);

			Idukas 		= GetPlayeridMid(name);
			Vardukas	= name;

			format(query, 128, "SELECT * FROM `players` WHERE `Vardas` = '%s'", Vardukas);
		    mysql_query(query);

		    mysql_store_result( );

		    if(mysql_retrieve_row())
		    {
		        mysql_get_field( "Ispejimai", ispejimaid);
		        mysql_get_field( "Uniforma", specofke);
		        mysql_get_field( "Pradirbo", praleido);
		    }

		    format(query, 128, "SELECT * FROM `rangai` WHERE `RID` = '%d' AND `RKint` = '%d'", PI[Idukas][DarboRangas], PI[playerid][specialybe]);
		    mysql_query(query);
		}
	}*/

	if( dialogid == 312 )//Darbuotju valdymas...
	{
	    if( response )
		{
			new
				msg[ 24 ],
				pos = strfind( inputtext, " -" );
    		strmid( msg, inputtext, 0, pos, 21 );
		    new name[ MAX_PLAYER_NAME ];
		    format( name, 24, "%s", msg );
      		Idukas = GetPlayeridMid( name );
      		Vardukas = name;

      		if(Idukas == INVALID_PLAYER_ID)
      		{
      			new tmpName[MAX_PLAYER_NAME + 1];
				inputtext[1] = ' '; //Assuming your inputtext will be from each line only. Replacing '.' to ' ' (space) to make it use for current version of sscanf.
				sscanf(inputtext, "?<SSCANF_QUIET=1>{d}s[25]'\t'{s}", tmpName);

				printf("%s\n", tmpName);

				return 1;
      		}

		    new
				query[ 128 ],
            	ispejimaid[ 10 ],
            	specofke[ 10 ],
            	pavas[ 50 ],
            	praleido[ 10 ];

            format( query, 128, "SELECT * FROM players WHERE Vardas = '%s'", name );
		    mysql_query( query );

		    mysql_store_result( );

		    if( mysql_retrieve_row( ) )
		    {
		        mysql_get_field( "Ispejimai", ispejimaid );
		        mysql_get_field( "Uniforma", specofke );
		        mysql_get_field( "Pradirbo", praleido );
		    }

		    format( query, 128, "SELECT * FROM `rangai` WHERE `RID` = '%d' AND `RKint` = '%d'", PI[ Idukas ][ DarboRangas ], PI[ playerid ][ specialybe ] );
		    mysql_query( query );

		    mysql_store_result( );

		    if( mysql_retrieve_row( ) )
		    {
		        mysql_get_field( "RPavadinimas", pavas );
		    }

		    new praleistax;

			if(Idukas != INVALID_PLAYER_ID) 	praleistax = PI[ Idukas ][ pradirbo ];
			if(Idukas == INVALID_PLAYER_ID) 	praleistax = strval( praleido );

			if(Idukas != INVALID_PLAYER_ID)
			{
			    new String[450];

			    switch(PI[Idukas][specialybe])
			    {
			    	case 1:
			    	{
			    		format(String, sizeof(String), "Vardas_Pavardë: {FFAF00}%s\nÐiandien pradirbo: {FFAF00}%d min\nRangas: {FFAF00}%s\nÁspëjimai: {FFAF00}%s/3\n \n\
				 		1. Pakeisti rangà\n2. Duoti áspëjimà\n3. Nuimti áspëjimà\n4. Atleisti ið darbo\n\nÐiandien priimta iðkvietimø: {FFAF00}%d\nÐià savaitæ priimta iðkvietimø: {FFAF00}%d\
				 		\nIð viso priimta iðkvietimø: {FFAF00}%d", name, praleistax, pavas, ispejimaid, PI[Idukas][SiandienPriimta][0], PI[Idukas][SiaSavaitePriimta][0],
				 		PI[Idukas][IsVisoPriimta][0]);
						ShowPlayerDialogEx(playerid, 5881, DIALOG_STYLE_LIST, "Darbuotojo valdymas", String, "Pasirinkti", "Uþdaryti");
			    	}

			    	case 2:
			    	{
			    		format(String, sizeof(String), "Vardas_Pavardë: {FFAF00}%s\nÐiandien pradirbo: {FFAF00}%d min\nRangas: {FFAF00}%s\nÁspëjimai: {FFAF00}%s/3\n \n\
				 		1. Pakeisti rangà\n2. Duoti áspëjimà\n3. Nuimti áspëjimà\n4. Atleisti ið darbo\n\nÐiandien priimta iðkvietimø: {FFAF00}%d\nÐià savaitæ priimta iðkvietimø: {FFAF00}%d\
				 		\nIð viso priimta iðkvietimø: {FFAF00}%d", name, praleistax, pavas, ispejimaid, PI[Idukas][SiandienPriimta][1], PI[Idukas][SiaSavaitePriimta][1],
				 		PI[Idukas][IsVisoPriimta][1]);
						ShowPlayerDialogEx(playerid, 5881, DIALOG_STYLE_LIST, "Darbuotojo valdymas", String, "Pasirinkti", "Uþdaryti");
			    	}

			    	case 4:
			    	{
			    		format(String, sizeof(String), "Vardas_Pavardë: {FFAF00}%s\nÐiandien pradirbo: {FFAF00}%d min\nRangas: {FFAF00}%s\nÁspëjimai: {FFAF00}%s/3\n \n\
				 		1. Pakeisti rangà\n2. Duoti áspëjimà\n3. Nuimti áspëjimà\n4. Atleisti ið darbo\n\nÐiandien priimta iðkvietimø: {FFAF00}%d\nÐià savaitæ priimta iðkvietimø: {FFAF00}%d\
				 		\nIð viso priimta iðkvietimø: {FFAF00}%d", name, praleistax, pavas, ispejimaid, PI[Idukas][SiandienPriimta][2], PI[Idukas][SiaSavaitePriimta][2],
				 		PI[Idukas][IsVisoPriimta][2]);
						ShowPlayerDialogEx(playerid, 5881, DIALOG_STYLE_LIST, "Darbuotojo valdymas", String, "Pasirinkti", "Uþdaryti");
			    	}

			    	default:
			    	{
			    		format(String, sizeof(String), "Vardas_Pavardë: {FFAF00}%s\nÐiandien pradirbo: {FFAF00}%d min\nRangas: {FFAF00}%s\nÁspëjimai: {FFAF00}%s/3\n \n\
				 		1. Pakeisti rangà\n2. Duoti áspëjimà\n3. Nuimti áspëjimà\n4. Atleisti ið darbo", name, praleistax, pavas, ispejimaid);
						ShowPlayerDialogEx(playerid, 5881, DIALOG_STYLE_LIST, "Darbuotojo valdymas", String, "Pasirinkti", "Uþdaryti");
			    	}
			    }
			}

		    mysql_free_result( );
		}

		return 1;
	}

	if(dialogid == 5426)
	{
		if(response)
		{
			if(GetPlayerMoneyA(playerid) < 1500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

			SendClientMessage(playerid, -1, "{ffffff} Skubëkite atsiimti savo transp. priemonæ, nes vartai uþsidarys lygiai po minutës!");

			MoveDynamicObject(KMAVartai, -1665.00854, 1296.86877, 1.29840, 3.0, 0.00000, 0.00000, -45.00000);

			Vartai[9] = true;

			SetTimer("KMAVartaiclose", 60000, true);

		   	GivePlayerMoneyA(playerid, -1500);

		   	Pelnas[1] += 750;
		}

		return 1;
	}

	if(dialogid == 5930)
	{
		if(response)
		{
			new str[200];

			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialogEx(playerid, 1037, DIALOG_STYLE_LIST, "Parduoti namà",
					"1. Parduoti namà þaidëjui\n2. Parduoti namà serveriui", "Pasirinkti", "Atgal");
				}

				case 1:
				{
					ShowPlayerDialogEx(playerid, 5934, DIALOG_STYLE_INPUT, "Perleisti namà",
					"{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");
				}

				case 2:
				{
					new house = PlayerHaveHouse(playerid);

					format(str, sizeof(str), "{ffffff}Jûsø namo seife yra: {FFAF00}$%s\n1. Padëti pinigø á seifà\n2. Pasiimti pinigø ið seifo",
					konvertuoti_pinigus(HouseInfo[house][Money]));
					ShowPlayerDialogEx(playerid, 1038, DIALOG_STYLE_LIST, "Namo seifas", str, "Pasirinkti", "Atgal");
				}

				case 3:
				{
					SendClientMessage 	(playerid, -1, "{ffffff} Valgote maistà ið ðaldytuvo!");
					Sotumas				(playerid, 100);
					ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);
				}

				case 4:
				{
					SendClientMessage (playerid, -1, "{ffffff} Sëkmingai pasigydëte!");
					SetPlayerHealthEx(playerid, 100);
				}

				case 5: // padëti ginklus
				{
					new WeaponName[64], String[200];

					GetWeaponName(GetPlayerWeapon(playerid), WeaponName, sizeof(WeaponName));

					format(String, sizeof(String), "{ffffff}Áraðykite kiek kulkø ginklo {FFAF00}%s {ffffff}norite padëti á spintà:", WeaponName);
					ShowPlayerDialogEx(playerid, 6992, DIALOG_STYLE_INPUT, "Padëti ginklà á spintà", String, "Padëti", "Atgal");
				}

				case 6: // paimti ginklus
				{
					new houseid = PlayerHaveHouse(playerid), Count = 0, Stringas[128], String[500];

					strcat(String, "Ginklas\tKulkos\n");

					for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
					{
	            		if(HouseChest[houseid][i][ItemID] > 0 && HouseChest[houseid][i][ItemAmmount] > 0)
		    			{
		    				new WeaponName[64]; GetWeaponName(HouseChest[houseid][i][ItemID], WeaponName, sizeof(WeaponName));

						    format(Stringas, sizeof(Stringas), " %s\t{FFAF00}%d\n",
						    WeaponName, HouseChest[houseid][i][ItemAmmount]);
							strcat(String, Stringas);

	 						Count ++;

		   				    PI[playerid][HouseChestIDs][Count] = HouseChest[houseid][i][ItemID];

					   	}
					}

					ShowPlayerDialogEx(playerid, 6993, DIALOG_STYLE_TABLIST_HEADERS, "Paimti ginklus ið spintos", String, "Pasirinkti", "Atgal");
				}
			}
		}

		return 1;
	}

	if(dialogid == VehicleTrunkSelectionDialog)
	{
		if(response)
		{
			new Header[80], vehicleid = SelectedTrunkVehicleID[playerid], Count = 0;

			switch(listitem)
			{
				case 0: // Paimti
				{
					new Stringas[128], String[500];

					format(Header, sizeof(Header), "{FFAF00}%s {ffffff}bagaþinë", VehicleNames[GetVehicleModel(vehicleid) - 400]);

					strcat(String, "Ginklas\tKulkos\n");

					for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
					{
						if(VehicleTrunkInfo[vehicleid][i][ItemID] > 0 && VehicleTrunkInfo[vehicleid][i][ItemAmmount] > 0)
						{
		    				new WeaponName[64]; GetWeaponName(VehicleTrunkInfo[vehicleid][i][ItemID], WeaponName, sizeof(WeaponName));

						    format(Stringas, sizeof(Stringas), " %s\t{FFAF00}%d\n",
						    WeaponName, VehicleTrunkInfo[vehicleid][i][ItemAmmount]);
							strcat(String, Stringas);

	 						Count ++;

		   				    PI[playerid][VehicleTrunkIDs][Count] = VehicleTrunkInfo[vehicleid][i][ItemID];

					   	}
					}

					ShowPlayerDialogEx(playerid, VehicleTrunkWitdrawDialog, DIALOG_STYLE_TABLIST_HEADERS, Header, String, "Pasirinkti", "Atgal");
				}

				case 1: // Padëti
				{
					new WeaponName[64], String[200];

					format(Header, sizeof(Header), "{FFAF00}%s {ffffff}bagaþinë", VehicleNames[GetVehicleModel(vehicleid) - 400]);

					GetWeaponName(GetPlayerWeapon(playerid), WeaponName, sizeof(WeaponName));

					format(String, sizeof(String), "{ffffff}Áraðykite kiek kulkø ginklo {FFAF00}%s {ffffff}norite padëti á bagaþinë:", WeaponName);
					ShowPlayerDialogEx(playerid, VehicleTrunkDepositDialog , DIALOG_STYLE_INPUT, Header, String, "Padëti", "Atgal");
				}
			}
		}
	}

	if(dialogid == VehicleTrunkWitdrawDialog)
	{
		if(response)
		{
			new vehicleid = SelectedTrunkVehicleID[playerid], Header[80], String[300];

			new SelectedItem = GetTrunkItemSlot(vehicleid, PI[playerid][VehicleTrunkIDs][listitem + 1]);

            PI[playerid][SelectedChestItemID] = PI[playerid][VehicleTrunkIDs][listitem + 1];

			if(VehicleTrunkInfo[vehicleid][SelectedItem][ItemID] > 0)
		    {
		    	new WeaponName[64]; GetWeaponName(PI[playerid][SelectedChestItemID], WeaponName, sizeof(WeaponName));

		    	format(Header, sizeof(Header), "{FFAF00}%s {ffffff}bagaþinë", VehicleNames[GetVehicleModel(vehicleid) - 400]);

    			format(String, sizeof(String), "{ffffff}Áraðykite kiek kulkø ginklo {FFAF00}%s {ffffff}norite paimti ið bagaþinës:\n",
    			WeaponName);

				ShowPlayerDialogEx(playerid, TrunkItemAmmountWitdraw, DIALOG_STYLE_INPUT, Header, String, "Paimti", "Atgal");
			}
		}
		else
		{
			pc_cmd_bagazine(playerid);
		}
	}

	if(dialogid == TrunkItemAmmountWitdraw)
	{
		if(response)
		{
			if(IsNumeric(inputtext))
    		{
				new vehicleid = SelectedTrunkVehicleID[playerid];

				new SelectedItem = PI[playerid][SelectedChestItemID];

				if(VehicleTrunkInfo[vehicleid][GetTrunkItemSlot(vehicleid, SelectedItem)][ItemAmmount] >= strval(inputtext) && strval(inputtext) > 0)
		    	{
		    		new WeaponName[64]; GetWeaponName(SelectedItem, WeaponName, sizeof(WeaponName));

	    			ac_GivePlayerWeapon          	(playerid,  SelectedItem, strval(inputtext));
	    			RemoveItemCountFromTrunk(vehicleid, SelectedItem, strval(inputtext));

	        	    new String[160];
    			    format(String, sizeof(String), "{ffffff} Pasiëmëte ginklà {FFAF00}%s {ffffff}su {FFAF00}%d {ffffff}kulkø ið bagaþinës!", WeaponName, strval(inputtext));
			   		SendClientMessage(playerid, -1, String);

			   		new vOwner = GetPlayeridMid(VehicleInfo[vehicleid][vSavininkas]);

					SavePlayerVehicle1 	(vOwner);
					SavePlayerVehicle2 	(vOwner);
					SavePlayerVehicle3 	(vOwner);
			   	}
			   	else
			   	{
			   		SendClientMessage(playerid, -1, "{ffffff} Bagaþinëje nëra tiek ðio ginklo kulkø!");
			   	}
			}
			else
		   	{
		   		SendClientMessage(playerid, -1, "{ffffff} Ávestame tekste rasta neleistinø simboliø!");
		   	}
		}
		else
		{
			new Header[80], vehicleid = SelectedTrunkVehicleID[playerid], Count = 0, Stringas[128], String[500];

			format(Header, sizeof(Header), "{FFAF00}%s {ffffff}bagaþinë", VehicleNames[GetVehicleModel(vehicleid) - 400]);

			strcat(String, "Ginklas\tKulkos\n");

			for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
			{
				if(VehicleTrunkInfo[vehicleid][i][ItemID] > 0 && VehicleTrunkInfo[vehicleid][i][ItemAmmount] > 0)
				{
    				new WeaponName[64]; GetWeaponName(VehicleTrunkInfo[vehicleid][i][ItemID], WeaponName, sizeof(WeaponName));

				    format(Stringas, sizeof(Stringas), " %s\t{FFAF00}%d\n",
				    WeaponName, VehicleTrunkInfo[vehicleid][i][ItemAmmount]);
					strcat(String, Stringas);

					Count ++;

   				    PI[playerid][VehicleTrunkIDs][Count] = VehicleTrunkInfo[vehicleid][i][ItemID];
			   	}
			}

			ShowPlayerDialogEx(playerid, VehicleTrunkWitdrawDialog, DIALOG_STYLE_TABLIST_HEADERS, Header, String, "Pasirinkti", "Atgal");
		}
	}

	if(dialogid == 6994)
	{
		if(response)
		{
			if(IsNumeric(inputtext))
    		{
				new houseid = PlayerHaveHouse(playerid), SelectedItem = PI[playerid][SelectedChestItemID];

				if(HouseChest[houseid][GetHouseChestItemSlot(houseid, SelectedItem)][ItemAmmount] >= strval(inputtext) && strval(inputtext) > 0)
		    	{
		    		new WeaponName[64]; GetWeaponName(SelectedItem, WeaponName, sizeof(WeaponName));

	    			ac_GivePlayerWeapon          	(playerid,  SelectedItem, strval(inputtext));
	    			RemoveItemCountFromHouseChest(houseid,   SelectedItem, strval(inputtext));

	        	    new String[160];
    			    format(String, sizeof(String), "{ffffff} Pasiëmëte ginklà {FFAF00}%s {ffffff}su {FFAF00}%d {ffffff}kulkø ið spintos!", WeaponName, strval(inputtext));
			   		SendClientMessage(playerid, -1, String);

			   		SaveHouse(houseid);
			   	}
			   	else
			   	{
			   		SendClientMessage(playerid, -1, "{ffffff} Jûsø spintoje nëra tiek ðio ginklo kulkø!");
			   	}
			}
			else
		   	{
		   		SendClientMessage(playerid, -1, "{ffffff} Ávestame tekste rasta neleistinø simboliø!");
		   	}
		}
		else
		{
			new houseid = PlayerHaveHouse(playerid), Count = 0, Stringas[128], String[500];

			strcat(String, "Ginklas\tKulkos\n");

			for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
			{
        		if(HouseChest[houseid][i][ItemID] > 0 && HouseChest[houseid][i][ItemAmmount] > 0)
    			{
				    format(Stringas, sizeof(Stringas), "%d. %s\t{FFAF00}%d\n",
				    i + 1, GetTrunkItemName(HouseChest[houseid][i][ItemID]), HouseChest[houseid][i][ItemAmmount]);
					strcat(String, Stringas);

					Count ++;

   				    PI[playerid][HouseChestIDs][Count] = HouseChest[houseid][i][ItemID];

			   	}
			}

			ShowPlayerDialogEx(playerid, 6993, DIALOG_STYLE_TABLIST_HEADERS, "Paimti ginklus ið spintos", String, "Pasirinkti", "Atgal");
		}
	}

	if(dialogid == 6993)
	{
		if(response)
		{
			new houseid = PlayerHaveHouse(playerid), String[200], SelectedItem;

			SelectedItem = GetHouseChestItemSlot(houseid, PI[playerid][HouseChestIDs][listitem + 1]);

			PI[playerid][SelectedChestItemID] = PI[playerid][HouseChestIDs][listitem + 1];

			if(HouseChest[houseid][SelectedItem][ItemID] > 0)
		    {
		    	new WeaponName[64]; GetWeaponName(SelectedItem, WeaponName, sizeof(WeaponName));

    			format(String, sizeof(String), "{ffffff}Áraðykite kiek kulkø ginklo {FFAF00}%s {ffffff}norite paimti ið spintos:\n",
    			WeaponName);

				ShowPlayerDialogEx(playerid, 6994, DIALOG_STYLE_INPUT, "Paimti ginklus ið spintos", String, "Paimti", "Atgal");
			}
		}
		else
		{
			pc_cmd_namas(playerid, " ");
		}
	}

	if(dialogid == VehicleTrunkDepositDialog)
	{
		if(response)
		{
			if(IsNumeric(inputtext))
    		{
        		if(ac_GetPlayerAmmo(playerid, GetPlayerWeapon(playerid)) >= strval(inputtext))
        		{
        			new vehicleid = SelectedTrunkVehicleID[playerid];

					new WeaponName[64]; GetWeaponName(GetPlayerWeapon(playerid), WeaponName, sizeof(WeaponName));

                    ac_GivePlayerWeapon 			(playerid, GetPlayerWeapon(playerid), -strval(inputtext));
                    AddItemInVehicleTrunk 	(vehicleid, GetPlayerWeapon(playerid),  strval(inputtext));

					new vOwner = GetPlayeridMid(VehicleInfo[vehicleid][vSavininkas]);

					SavePlayerVehicle1 	(vOwner);
					SavePlayerVehicle2 	(vOwner);
					SavePlayerVehicle3 	(vOwner);

                    new String[160];
    			    format(String, sizeof(String), "{ffffff} Padëjote ginklà {FFAF00}%s {ffffff}su {FFAF00}%d {ffffff}kulkø á bagaþinæ!", WeaponName, strval(inputtext));
			   		SendClientMessage(playerid, -1, String);
			   	}
			   	else
			   	{
			   		SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek ðio ginklo kulkø!");
			   	}
			}
			else
		   	{
		   		SendClientMessage(playerid, -1, "{ffffff} Ávestame tekste rasta neleistinø simboliø!");
		   	}
		}
		else
		{
			pc_cmd_bagazine(playerid);
		}
	}

	if(dialogid == 6992)
	{
		if(response)
		{
			if(IsNumeric(inputtext))
    		{
        		if(ac_GetPlayerAmmo(playerid, GetPlayerWeapon(playerid)) >= strval(inputtext))
        		{
        			new houseid = PlayerHaveHouse(playerid);

					new WeaponName[64]; GetWeaponName(GetPlayerWeapon(playerid), WeaponName, sizeof(WeaponName));

                    ac_GivePlayerWeapon(playerid, GetPlayerWeapon(playerid), -strval(inputtext));
                    AddItemInHouseChest(houseid,  GetPlayerWeapon(playerid),  strval(inputtext));

					SaveHouse(houseid);

                    new String[160];
    			    format(String, sizeof(String), "{ffffff} Padëjote ginklà {FFAF00}%s {ffffff}su {FFAF00}%d {ffffff}kulkø á spintà!", WeaponName, strval(inputtext));
			   		SendClientMessage(playerid, -1, String);
			   	}
			   	else
			   	{
			   		SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek ðio ginklo kulkø!");
			   	}
			}
			else
		   	{
		   		SendClientMessage(playerid, -1, "{ffffff} Ávestame tekste rasta neleistinø simboliø!");
		   	}
		}
		else
		{
			pc_cmd_namas(playerid, " ");
		}
	}

	if(dialogid == 5934)
	{
		if(response)
		{
			new String[400];
			new house = PlayerHaveHouse(playerid);

			if(house == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite namo!");

			new giveplayerid, Float: P_Pos[3];

			if(sscanf(inputtext, "u", giveplayerid))
			{
				ShowPlayerDialogEx(playerid, 5934, DIALOG_STYLE_INPUT, "Perleisti namà",
				"{FFAF00}Kaþkas blogai ávesta!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

				return 1;
			}

			if(strfind(inputtext, "%") != -1)
			{
				ShowPlayerDialogEx(playerid, 5934, DIALOG_STYLE_INPUT, "Perleisti namà",
				"{FFAF00}Tekste rasta neleistinø simboliø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

				return 1;
			}

			if(giveplayerid == INVALID_PLAYER_ID)
			{
				ShowPlayerDialogEx(playerid, 5934, DIALOG_STYLE_INPUT, "Perleisti namà",
				"{FFAF00}Tokio þaidëjo nëra!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

				return 1;
			}

			if(giveplayerid == playerid)
			{
				ShowPlayerDialogEx(playerid, 5934, DIALOG_STYLE_INPUT, "Perleisti namà",
				"{FFAF00}Sau namo atiduoti negalite!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

				return 1;
			}

			if(PlayerHaveHouse(giveplayerid) != -1)
			{
				ShowPlayerDialogEx(playerid, 5934, DIALOG_STYLE_INPUT, "Perleisti namà",
				"{FFAF00}Ðis þaidëjas jau turi namà!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

				return 1;
			}

			GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, P_Pos[0], P_Pos[1], P_Pos[2]))
			{
				ShowPlayerDialogEx(playerid, 5935, DIALOG_STYLE_INPUT, "Parduoti namà",
				"{FFAF00}Þaidëjas per toli nuo jûsø!\n \n{FFFFFF}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

				return 1;
			}

			format(HouseInfo[house][Owner], 21, "%s", GetPlayerNameEx(giveplayerid));
			HouseInfo[house][Money] = 0;
			format(String, 250, "{FFFFFF}Namo numeris: {FFAF00}%d\n{FFFFFF}Namas neparduodamas\n{FFFFFF}Namo savininkas: {FFAF00}%s", house + 1, HouseInfo[house][Owner]);
			Update3DTextLabelText(HouseInfo[house][House3D], -1, String);
			SaveHouse(house);
			RemovePlayersFromHouse(house);

			format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s{ffffff} atidavë jums savo namà!",
			GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} Atidavëte savo namà þaidëjui {FFAF00}%s{ffffff}!",
			GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, -1, String);
		}
		else
		{
			pc_cmd_namas(playerid, " ");
		}

		return 1;
	}

	if(dialogid == 1039)
	{
		new String[400];
		new house = PlayerHaveHouse(playerid);

		if(response)
		{
			if(IsNumeric(inputtext) || strval(inputtext) >= 1)
			{
				if(GetPlayerMoneyA(playerid) < strval(inputtext))
				{
					format(String, sizeof(String), "{FFAF00}Jus neturite tiek pinigø!\n \n{ffffff}Áraðykite kiek norite padëti pinigø á jûsø namo seifà.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.",
					konvertuoti_pinigus(HouseInfo[house][Money]));
					ShowPlayerDialogEx(playerid, 1039, DIALOG_STYLE_INPUT, "Namo seifas", String, "Padëti", "Atgal");

					return 1;
				}

				format(String, sizeof(String), "{ffffff} Pasidëjote {FFAF00}$%s{ffffff} á jûsø namo seifà!", konvertuoti_pinigus(strval(inputtext)));
				SendClientMessage(playerid, -1, String);

				GivePlayerMoneyA(playerid, -strval(inputtext));

				HouseInfo[house][Money] += strval(inputtext);

				SaveHouse(house);
			}
			else
			{
				format(String, sizeof(String), "{FFAF00}Kaþkas blogai ávesta!\n \n{ffffff}Áraðykite kiek norite padëti pinigø á jûsø namo seifà.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.",
				konvertuoti_pinigus(HouseInfo[house][Money]));
				ShowPlayerDialogEx(playerid, 1039, DIALOG_STYLE_INPUT, "Namo seifas", String, "Padëti", "Atgal");
			}
		}
		else
		{
			format(String, sizeof(String), "{ffffff}Jûsø namo seife yra: {FFAF00}$%s\n1. Padëti pinigø á seifà\n2. Pasiimti pinigø ið seifo",
			konvertuoti_pinigus(HouseInfo[house][Money]));
			ShowPlayerDialogEx(playerid, 1038, DIALOG_STYLE_LIST, "Namo seifas", String, "Pasirinkti", "Atgal");
		}

		return 1;
	}

	if(dialogid == 1042)
	{
		new String[400];
		new house = PlayerHaveHouse(playerid);

		if(response)
		{
			if(IsNumeric(inputtext) || strval(inputtext) >= 1)
			{
				if(HouseInfo[house][Money] < strval(inputtext))
				{
					format(String, sizeof(String), "{FFAF00}Namo seife nëra tiek pinigø!\n \n{ffffff}Áraðykite kiek norite paimti pinigø ið jûsø namo seifo.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.",
					konvertuoti_pinigus(HouseInfo[house][Money]));
					ShowPlayerDialogEx(playerid, 1042, DIALOG_STYLE_INPUT, "Namo seifas", String, "Paimti", "Atgal");

					return 1;
				}

				format(String, sizeof(String), "{ffffff} Pasiëmete ið savo namo seifo {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(strval(inputtext)));
				SendClientMessage(playerid, -1, String);

				GivePlayerMoneyA(playerid, strval(inputtext));

				HouseInfo[house][Money] -= strval(inputtext);

				SaveHouse(house);
			}
			else
			{
				format(String, sizeof(String), "{FFAF00}Kaþkas blogai ávesta!\n \n{ffffff}Áraðykite kiek norite paimti pinigø ið jûsø namo seifo.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.",
				konvertuoti_pinigus(HouseInfo[house][Money]));
				ShowPlayerDialogEx(playerid, 1042, DIALOG_STYLE_INPUT, "Namo seifas", String, "Paimti", "Atgal");
			}
		}
		else
		{
			format(String, sizeof(String), "{ffffff}Jûsø namo seife yra: {FFAF00}$%s\n1. Padëti pinigø á seifà\n2. Pasiimti pinigø ið seifo",
			konvertuoti_pinigus(HouseInfo[house][Money]));
			ShowPlayerDialogEx(playerid, 1038, DIALOG_STYLE_LIST, "Namo seifas", String, "Pasirinkti", "Atgal");
		}

		return 1;
	}

	if(dialogid == 1038)
	{
		if(response)
		{
			new String[200];
			new house = PlayerHaveHouse(playerid);

			switch(listitem)
			{
				case 0:
				{
					format(String, sizeof(String), "{ffffff}Jûsø namo seife yra: {FFAF00}$%s\n1. Padëti pinigø á seifà\n2. Pasiimti pinigø ið seifo",
					konvertuoti_pinigus(HouseInfo[house][Money]));
					ShowPlayerDialogEx(playerid, 1038, DIALOG_STYLE_LIST, "Namo seifas", String, "Pasirinkti", "Atgal");
				}

				case 1: // Padëti pinigø á biudþetà
				{
					format(String, sizeof(String), "{ffffff}Áraðykite kiek norite padëti pinigø á jûsø namo seifà.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.",
					konvertuoti_pinigus(HouseInfo[house][Money]));
					ShowPlayerDialogEx(playerid, 1039, DIALOG_STYLE_INPUT, "Namo seifas", String, "Padëti", "Atgal");
				}

				case 2: // Pasiimti pinigø ið biudþeto
				{
					format(String, sizeof(String), "{ffffff}Áraðykite kiek norite paimti pinigø ið jûsø namo seifo.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.",
					konvertuoti_pinigus(HouseInfo[house][Money]));
					ShowPlayerDialogEx(playerid, 1042, DIALOG_STYLE_INPUT, "Namo seifas", String, "Paimti", "Atgal");
				}
			}
		}
		else
		{
			pc_cmd_namas(playerid, " ");
		}

		return 1;
	}

	if(dialogid == 1037)
	{
		if(response)
		{
			new house = PlayerHaveHouse(playerid);

			switch(listitem)
			{
				case 0:
				{
					if(house == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite namo!");

					ShowPlayerDialogEx(playerid, 5935, DIALOG_STYLE_INPUT, "Parduoti namà",
					"{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");
				}

				case 1:
				{
					new String[400];

					format(String, sizeof(String), "{ffffff}Ar tikrai norite parduoti namà numeriu {ffffff} %d {ffffff}uþ {FFAF00}$%s{ffffff}?",
					house + 1, konvertuoti_pinigus(floatround(HouseInfo[house][Cost] / 2)));
					ShowPlayerDialogEx(playerid, 5933, DIALOG_STYLE_MSGBOX, "Parduoti namà", String, "Taip", "Ne");
				}
			}
		}
		else
		{
			pc_cmd_namas(playerid, " ");
		}

		return 1;
	}

	if(dialogid == 5931)
	{
		if(!response) return ShowPlayerDialogEx(playerid, 5930, DIALOG_STYLE_LIST, "{ffffff}Namo meniu", "{ffffff}Padëti pinigus.\nPaimti pinigus.\nParduoti namà.\nPerleisti namà.\nParduoti namà þmogui.", "Rinktis", "Uþdaryti");
		if(response)
		{
			if(!IsNumeric(inputtext)) return ShowPlayerDialogEx(playerid, 5931, DIALOG_STYLE_INPUT, "{ffffff}Namo meniu", "{ffffff}Neteisingai ávesta suma.\nNorëdami padëti pinigus, áveskite sumà:", "Padëti", "Atgal");
			new kiek = strval(inputtext), house = HouseID[playerid];
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
			if(kiek < 1) return ShowPlayerDialogEx(playerid,5931, DIALOG_STYLE_INPUT, "{ffffff}Namo meniu", "{ffffff}Neteisingai ávesta suma.\nNorëdami padëti pinigus, áveskite sumà:", "Padëti", "Atgal");
			if(GetPlayerMoneyA(playerid) < kiek) return ShowPlayerDialogEx(playerid, 5931, DIALOG_STYLE_INPUT, "{ffffff}Namo meniu", "{ffffff}Jûs neturite tiek pinigø.\nNorëdami padëti pinigus, áveskite sumà:", "Padëti", "Atgal");
			HouseInfo[house][Money] += kiek;
			GivePlayerMoneyA(playerid, -kiek);
			SendClientMessage(playerid, -1, "{ffffff} Padëjote pinigus á seifà!");
			SaveHouse(house);
		}
		return 1;
	}
	if(dialogid == 5932)
	{
		if(!response) return ShowPlayerDialogEx(playerid, 5930, DIALOG_STYLE_LIST, "{ffffff}Namo meniu", "{ffffff}Padëti pinigus.\nPaimti pinigus.\nParduoti namà.\nPerleisti namà.\nParduoti namà þmogui.", "Rinktis", "Uþdaryti");
		if(response)
		{
			if(!IsNumeric(inputtext)) return ShowPlayerDialogEx(playerid, 5932, DIALOG_STYLE_INPUT, "{ffffff}Namo meniu", "{ffffff}Neteisingai ávesta suma.\nNorëdami paimti pinigus, áveskite sumà:", "Paimti", "Atgal");
			new kiek = strval(inputtext), house = HouseID[playerid];
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
			if(kiek < 1) return ShowPlayerDialogEx(playerid, 5932, DIALOG_STYLE_INPUT, "{ffffff}Namo meniu", "{ffffff}Neteisingai ávesta suma.\nNorëdami paimti pinigus, áveskite sumà:", "Paimti", "Atgal");
			if(HouseInfo[house][Money] < kiek) return ShowPlayerDialogEx(playerid, 5932, DIALOG_STYLE_INPUT, "{ffffff}Namo meniu", "{ffffff}Seife tiek pinigø nëra.\nNorëdami paimti pinigus, áveskite sumà:", "Paimti", "Atgal");
			HouseInfo[house][Money] -= kiek;
			GivePlayerMoneyA(playerid, kiek);
			SendClientMessage(playerid, -1, "{ffffff} Pasiëmëte pinigus ið seifo!");
			SaveHouse(house);
		}
		return 1;
	}
	if(dialogid == 5933)
	{
		if(!response) return ShowPlayerDialogEx(playerid, 5930, DIALOG_STYLE_LIST, "{ffffff}Namo meniu", "{ffffff}Padëti pinigus.\nPaimti pinigus.\nParduoti namà.\nPerleisti namà.\nParduoti namà þmogui.", "Rinktis", "Uþdaryti");
		if(response)
		{
			new house = HouseID[playerid], kiek = floatround(HouseInfo[house][Cost] / 2), str[300];
			GivePlayerMoneyA(playerid, kiek + HouseInfo[house][Money]);
			HouseInfo[house][Locked] = true;
			HouseInfo[house][Buyed] = false;
			format(HouseInfo[house][Owner], 32, "Savivaldybë");
			HouseInfo[house][Money] = 0;
			new houset[10];

			switch(HouseInfo[house][hType])
			{
				case TYPE_RATAI: houset = "Namuko";
				case TYPE_BUTAS: houset = "Buto";
				case TYPE_NAMAS: houset = "Namo";
			}
			format(str, 300, "{DEFF88}%s numeris: {FFAF00}%d\n{DEFF88}Savininkas: {FFAF00}%s\n{DEFF88}Kaina: {FFAF00}$%s\n \n{DEFF88}Norëdami nupirkti, spauskite ENTER",
			houset, house + 1, HouseInfo[house][Owner], konvertuoti_pinigus(HouseInfo[house][Cost]));
			Update3DTextLabelText(HouseInfo[house][House3D], -1, str);
			DestroyPickup(HouseInfo[house][HousePickup]);
			HouseInfo[house][HousePickup] = CreatePickup(1273, 1, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ], 0);

			for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
			{
			    HouseChest[house][i][ItemID]		= 0;
				HouseChest[house][i][ItemAmmount]	= 0;
			}

			SaveHouse(house);

			RemovePlayersFromHouse(house);
			format(str, 170, "{ffffff} Sëkmingai pardavëte savo namà uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(kiek));
			SendClientMessage(playerid, -1, str);
		}
		return 1;
	}
	/*if(dialogid == 5934)
	{
		if(!response) return ShowPlayerDialogEx(playerid, 5930, DIALOG_STYLE_LIST, "{ffffff}Namo meniu", "{ffffff}Padëti pinigus.\nPaimti pinigus.\nParduoti namà.\nPerleisti namà.\nParduoti namà þmogui.", "Rinktis", "Uþdaryti");
		if(response)
		{
			new pID, house = HouseID[playerid], str[250];
			if(sscanf(inputtext, "u", pID)) return ShowPlayerDialogEx(playerid, 5934, DIALOG_STYLE_INPUT, "{ffffff}Namo meniu", "{ffffff}Þaidëjo su tokiu vardu arba ID nëra.\nNorëdami perleisti namà þmogui,\náraðykite jo Varda_Pavarde arba ID á ðá laukelá:", "Perleisti", "Atgal");
			if(pID == playerid) return SendClientMessage(playerid, -1, "Klaida, sau namo perleisti negalite.");
			if(pID == INVALID_PLAYER_ID) return ShowPlayerDialogEx(playerid, 5934, DIALOG_STYLE_INPUT, "{ffffff}Namo meniu", "{ffffff}Þaidëjo su tokiu vardu arba ID nëra.\nNorëdami perleisti namà þmogui,\náraðykite jo Varda_Pavarde arba ID á ðá laukelá:", "Perleisti", "Atgal");
			if(PlayerHaveHouse(pID) != -1) return SendClientMessage(playerid, -1, "Klaida, þaidëjas jau turi namà.");
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
			GivePlayerMoneyA(playerid, HouseInfo[house][Money]);
			format(HouseInfo[house][Owner], 21, "%s", GetPlayerNameEx(pID));
			HouseInfo[house][Money] = 0;
			format(str, 250, "{FFFFFF}Namo numeris: {FFAF00}%d\n{FFFFFF}Namas neparduodamas\n{FFFFFF}Namo savininkas: {FFAF00}%s", house + 1, HouseInfo[house][Owner]);
			Update3DTextLabelText(HouseInfo[house][House3D], -1, str);
			SaveHouse(house);
			RemovePlayersFromHouse(house);
			format(str, 170, "{ffffff} Atidavëte savo namà þaidëjui {FFAF00}%s{ffffff}!", GetPlayerNameEx(pID));
			SendClientMessage(playerid, -1, str);
			format(str, 170, "{ffffff} Þaidëjas {FFAF00}%s{ffffff} atidavë jums savo namà!", GetPlayerNameEx(playerid));
			SendClientMessage(pID, -1, str);
		}
		return 1;
	}*/
	if(dialogid == 5935)
	{
		if(!response) return ShowPlayerDialogEx(playerid, 5930, DIALOG_STYLE_LIST, "{ffffff}Namo meniu", "{ffffff}Padëti pinigus.\nPaimti pinigus.\nParduoti namà.\nPerleisti namà.\nParduoti namà þmogui.", "Rinktis", "Uþdaryti");
		if(response)
		{
			/*new pID, kaina, str[216];
			if(sscanf(inputtext, "ud", pID, kaina)) return ShowPlayerDialogEx(playerid, 5935, DIALOG_STYLE_INPUT, "{ffffff}Namo meniu", "{ffffff}Blogai suvedëte vardà, ID arba kaina.\nNorëdami parduoti namà þmogui,\náraðykite jo Varda_Pavarde arba ID ir kaina á ðá laukelá:", "Parduoti", "Atgal");
			if(pID == playerid) return SendClientMessage(playerid, -1, "{ffffff} Sau namo parduoti negalite!");
			if(pID == INVALID_PLAYER_ID) return ShowPlayerDialogEx(playerid, 5935, DIALOG_STYLE_INPUT, "{ffffff}Namo meniu", "{ffffff}Þaidëjo su tokiu vardu arba ID nëra.\nNorëdami parduoti namà þmogui,\náraðykite jo Varda_Pavarde arba ID ir kaina á ðá laukelá:", "Parduoti", "Atgal");
			if(PlayerHaveHouse(pID) != -1) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas jau turi namà!");
			if(kaina < 1) return  ShowPlayerDialogEx(playerid, 5935, DIALOG_STYLE_INPUT, "{ffffff}Namo meniu", "{ffffff}Blogai nurodëte kainà.\nNorëdami parduoti namà þmogui,\náraðykite jo Varda_Pavarde arba ID ir kaina á ðá laukelá:", "Parduoti", "Atgal");
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
			new Float:pPos[3];
			GetPlayerPos(pID, pPos[0], pPos[1], pPos[2]);
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, pPos[0], pPos[1], pPos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");
			ChoosedPlayer[playerid] = pID;
			ChoosedPlayer[pID] = playerid;
			HouseCost[playerid] = kaina;
			HouseCost[pID] = kaina;
			format(str, 216, "{ffffff}Þaidëjas {FFAF00}%s {ffffff}siûlo jums nusipirkti namà uþ {FFAF00}$%s{ffffff}.\n{ffffff}Ar pirksite?", GetPlayerNameEx(playerid), konvertuoti_pinigus(kaina));
			ShowPlayerDialogEx(pID, 5936, DIALOG_STYLE_MSGBOX, "{ffffff}Namo pirkimas", str, "Taip", "Ne");*/

			new String[400];
			new house = PlayerHaveHouse(playerid);

			if(house == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite namo!");

			new giveplayerid, MoneyCount, Float: P_Pos[3];

			if(sscanf(inputtext, "ud", giveplayerid, MoneyCount))
			{
				ShowPlayerDialogEx(playerid, 5935, DIALOG_STYLE_INPUT, "Parduoti namà",
				"{FFAF00}Kaþkas blogai ávesta!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

				return 1;
			}

			if(strfind(inputtext, "%") != -1)
			{
				ShowPlayerDialogEx(playerid, 5935, DIALOG_STYLE_INPUT, "Parduoti namà",
				"{FFAF00}Tekste rasta neleistinø simboliø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

				return 1;
			}

			if(giveplayerid == INVALID_PLAYER_ID)
			{
				ShowPlayerDialogEx(playerid, 5935, DIALOG_STYLE_INPUT, "Parduoti namà",
				"{FFAF00}Tokio þaidëjo nëra!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

				return 1;
			}

			if(giveplayerid == playerid)
			{
				ShowPlayerDialogEx(playerid, 5935, DIALOG_STYLE_INPUT, "Parduoti namà",
				"{FFAF00}Sau namo parduoti negalite!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

				return 1;
			}

			if(PlayerHaveHouse(giveplayerid) != -1)
			{
				ShowPlayerDialogEx(playerid, 5935, DIALOG_STYLE_INPUT, "Parduoti namà",
				"{FFAF00}Ðis þaidëjas jau turi namà!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

				return 1;
			}

			if(MoneyCount < 1)
			{
				ShowPlayerDialogEx(playerid, 5935, DIALOG_STYLE_INPUT, "Parduoti namà",
				"{FFAF00}Blogai nurodëte pardavimo kainà!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

				return 1;
			}

			GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, P_Pos[0], P_Pos[1], P_Pos[2]))
			{
				ShowPlayerDialogEx(playerid, 5935, DIALOG_STYLE_INPUT, "Parduoti namà",
				"{FFAF00}Þaidëjas per toli nuo jûsø!\n \n{FFFFFF}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

				return 1;
			}

			ChoosedPlayer[playerid] 	= giveplayerid;
			ChoosedPlayer[giveplayerid] = playerid;
			HouseCost[playerid] 		= MoneyCount;
			HouseCost[giveplayerid] 	= MoneyCount;

			format(String, sizeof(String), "{ffffff}Þaidëjas {FFAF00}%s {ffffff}siûlo jums pirkti jo namà uþ {FFAF00}$%s{ffffff}.\n \n{ffffff}Ar tikrai norite pirkti ðá namà?",
			GetPlayerNameEx(playerid), konvertuoti_pinigus(MoneyCount));
			ShowPlayerDialogEx(giveplayerid, 5936, DIALOG_STYLE_MSGBOX, "Namo pirkimas", String, "Taip", "Ne");

			format(String, sizeof(String), "{ffffff} Pasiûlëte nusipirkti þaidëjui {FFAF00}%s {ffffff}savo namà uþ {FFAF00}$%s{ffffff}!",
			GetPlayerNameEx(giveplayerid), konvertuoti_pinigus(MoneyCount));
			SendClientMessage(playerid, -1, String);
		}
		else
		{
			pc_cmd_namas(playerid, " ");
		}

		return 1;
	}

	if(dialogid == 5936)
	{
		new pID = ChoosedPlayer[playerid], kaina = HouseCost[playerid], str[250];
		if(pID == INVALID_PLAYER_ID)
		{
			SendClientMessage(playerid, -1, "{ffffff} Þaidëjas atsijungë!");
			return 1;
		}
		if(!response)
		{
			SendClientMessage(playerid, -1, "{ffffff} Atsisakëte nusipirkti namà!");
			SendClientMessage(pID, -1, "{ffffff} Þaidëjas atsisakë nusipirkti namà!");
			return 1;
		}
		else
		{
			new house = PlayerHaveHouse(pID);
			if(house == -1) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nebeturi namo!");
			if(PlayerHaveHouse(playerid) != -1) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite namà!");
			if(GetPlayerMoneyA(playerid) < kaina)
			{
				SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
				SendClientMessage(pID, -1, "{ffffff} Þaidëjui neuþtenka pinigø!");
				return 1;
			}
			GivePlayerMoneyA(playerid, - kaina);
			GivePlayerMoneyA(pID, HouseInfo[house][Money] + kaina);
			format(HouseInfo[house][Owner], 21, "%s", GetPlayerNameEx(playerid));
			HouseInfo[house][Money] = 0;
			format(str, 250, "{FFFFFF}Namo numeris: {FFAF00}%d\n{FFFFFF}Namas neparduodamas\n{FFFFFF}Namo savininkas: {FFAF00}%s", house + 1, HouseInfo[house][Owner]);
			Update3DTextLabelText(HouseInfo[house][House3D], -1, str);
			SaveHouse(house);
			RemovePlayersFromHouse(house);
			SendClientMessage(playerid, -1, "{ffffff} Nusipirkote namà!");
			SendClientMessage(pID, -1, "{ffffff} Pardavëte namà!");
		}
		return 1;
	}
	/*if(dialogid == 5937)
	{
		if(!response) return ShowPlayerDialogEx(playerid, 5930, DIALOG_STYLE_LIST, "{ffffff}Namo meniu", "{ffffff}Padëti pinigus.\nPaimti pinigus.\nParduoti namà.\nPerleisti namà.\nParduoti namà þmogui.", "Rinktis", "Uþdaryti");
		if(response)
		{
			new k = listitem, house = HouseID[playerid];
			if(GetPlayerMoneyA(playerid) < hInterior[k][Price]) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
			GivePlayerMoneyA(playerid,  -hInterior[k][Price]);
			HouseInfo[house][hInt] = hInterior[k][Int];
			HouseInfo[house][IntX] = hInterior[k][IntX];
			HouseInfo[house][IntY] = hInterior[k][IntY];
			HouseInfo[house][IntZ] = hInterior[k][IntZ];
			HouseInfo[house][IntAngle] = hInterior[k][IntAngle];
			SaveHouse(house);
			RemovePlayersFromHouse(house);
			SendClientMessage(playerid, -1, "{ffffff} Atnaujinote namà!");
		}
		return 1;
	}*/

	switch(dialogid)
	{
		case DIALOG_STARTGAMBLE:
		{
		    if(response) //If player pressed the first ("Yes") button
		    {
		    	switch(listitem)
		    	{
		    		case 0: PI[playerid][Stafke] = 1;
		    		case 1: PI[playerid][Stafke] = 3;
		    		case 2: PI[playerid][Stafke] = 5;
		    		case 3: PI[playerid][Stafke] = 7;
		    		case 4: PI[playerid][Stafke] = 10;
		    		case 5: PI[playerid][Stafke] = 12;
		    	}

		        if(GetPlayerMoneyA(playerid) >= GAMBLE_WAGER(playerid))
		        {
			        IsGambling[playerid] = true;
			        PlayerEnum[playerid][TotalPaid] = 0;
			        PlayerEnum[playerid][TotalWon] = 0;
			        PlayerEnum[playerid][TotalTotal] = 0;
			        TogglePlayerControllable(playerid,0);
			        GetPlayerPos(playerid,pX[playerid],pY[playerid],pZ[playerid]);
			        SetPlayerPos(playerid,2221.9514,1619.6721,1006.1836);
			        SetPlayerCameraPos(playerid,2235.9072, 1600.9279, 1000.8791);
			        SetPlayerCameraLookAt(playerid,2236.6072, 1600.9279, 1000.6791);
			        SetPlayerWonPaid(playerid);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw0]); //black box side
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw1]); //Black box bottom
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw6]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw7]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw8]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw9]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw10]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw11]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw12]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw13]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw14]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw15]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw16]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw17]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw18]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw19]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw20]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw21]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw22]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw23]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw24]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw25]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw26]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw27]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw28]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw29]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw30]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw31]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw32]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw33]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw34]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw35]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw36]);
			        PlayerTextDrawShow(playerid,PlayerEnum[playerid][Textdraw37]);
			    }
			    else
			    {
			        SendClientMessage(playerid, -1, "{ffffff} Jus negalite sukti aparato, nes jums neuþtenka pinigø!");
			    }
	        	return 1;
		    }
		}
		case DIALOG_STOPGAMBLE:
		{
		    if(response) //If player pressed the first ("Yes") button
		    {
		        IsGambling[playerid] = false;
		        TogglePlayerControllable(playerid,1);
		        SetPlayerPos(playerid,pX[playerid],pY[playerid],pZ[playerid]);
		        SetCameraBehindPlayer(playerid);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw0]); //black box side
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw1]); //Black box bottom
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw2]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw3]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw4]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw5]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw6]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw7]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw8]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw9]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw10]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw11]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw12]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw13]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw14]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw15]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw16]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw17]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw18]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw19]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw20]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw21]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw22]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw23]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw24]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw25]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw26]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw27]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw28]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw29]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw30]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw31]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw32]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw33]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw34]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw35]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw36]);
		        PlayerTextDrawHide(playerid,PlayerEnum[playerid][Textdraw37]);
	        	return 1;
		    }
		}

		case PaimtiNark:
		{
			if(response)
			{
				new cHouseID = SelectedCreditHouseID[playerid], String[200];

				if(IsNumeric(inputtext))
				{
					switch(KoksNarkotikas[playerid])
					{
						case sZOLE:
						{
							if(CHD[cHouseID][_cHouseDrugs1] >= strval(inputtext))
							{
								PI[playerid][Weed] 				+= strval(inputtext);
								CHD[cHouseID][_cHouseDrugs1] 	-= strval(inputtext);

							    format(String, sizeof(String), "{B54F4F}< > {ffffff}Pasiëmëte {FFAF00}%d {ffffff}mg þolës ið jûsø namø!", strval(inputtext));
						   		SendClientMessage(playerid, -1, String);

						   		SaveCreditHouse 	(cHouseID);
						   		OnDialogResponse 	(playerid, PagrNamoValdymas, true, 5, "");
							}
							else
							{
								SendClientMessage(playerid, -1, "{ffffff} Jûsø namuose nëra tiek ðios rûðies narkotikø!");
			   					OnDialogResponse(playerid, NarkValdymas, true, 0, "");
							}
						}

						case sKOKAINAS:
						{
							if(CHD[cHouseID][_cHouseDrugs2] >= strval(inputtext))
							{
								PI[playerid][Kokainas] 			+= strval(inputtext);
								CHD[cHouseID][_cHouseDrugs2] 	-= strval(inputtext);

							    format(String, sizeof(String), "{B54F4F}< > {ffffff}Pasiëmëte {FFAF00}%d {ffffff}mg kokaino ið jûsø namø!", strval(inputtext));
						   		SendClientMessage(playerid, -1, String);

						   		SaveCreditHouse 	(cHouseID);
						   		OnDialogResponse 	(playerid, PagrNamoValdymas, true, 5, "");
							}
							else
							{
								SendClientMessage(playerid, -1, "{ffffff} Jûsø namuose nëra tiek ðios rûðies narkotikø!");
			   					OnDialogResponse(playerid, NarkValdymas, true, 0, "");
							}
						}

						case sEKSTAZI:
						{
							if(CHD[cHouseID][_cHouseDrugs3] >= strval(inputtext))
							{
								PI[playerid][Ekstazi] 			+= strval(inputtext);
								CHD[cHouseID][_cHouseDrugs3] 	-= strval(inputtext);

							    format(String, sizeof(String), "{B54F4F}< > {ffffff}Pasiëmëte {FFAF00}%d {ffffff}mg ekstazio ið jûsø namø!", strval(inputtext));
						   		SendClientMessage(playerid, -1, String);

						   		SaveCreditHouse 	(cHouseID);
						   		OnDialogResponse 	(playerid, PagrNamoValdymas, true, 5, "");
							}
							else
							{
								SendClientMessage(playerid, -1, "{ffffff} Jûsø namuose nëra tiek ðios rûðies narkotikø!");
			   					OnDialogResponse(playerid, NarkValdymas, true, 0, "");
							}
						}

						case sHEROINAS:
						{
							if(CHD[cHouseID][_cHouseDrugs4] >= strval(inputtext))
							{
								PI[playerid][Heroinas] 			+= strval(inputtext);
								CHD[cHouseID][_cHouseDrugs4] 	-= strval(inputtext);

							    format(String, sizeof(String), "{B54F4F}< > {ffffff}Pasiëmëte {FFAF00}%d {ffffff}ml heroino ið jûsø namø!", strval(inputtext));
						   		SendClientMessage(playerid, -1, String);

						   		SaveCreditHouse 	(cHouseID);
						   		OnDialogResponse 	(playerid, PagrNamoValdymas, true, 5, "");
							}
							else
							{
								SendClientMessage(playerid, -1, "{ffffff} Jûsø namuose nëra tiek ðios rûðies narkotikø!");
			   					OnDialogResponse(playerid, NarkValdymas, true, 0, "");
							}
						}
					}
				}
				else
			   	{
			   		SendClientMessage(playerid, -1, "{ffffff} Kaþkas blogai ávesta!");
			   		OnDialogResponse(playerid, NarkValdymas, true, 0, "");
			   	}
			}
			else
			{
				OnDialogResponse(playerid, PagrNarkValdymas, true, KoksNarkotikas[playerid], "");
			}
		}

		case PadetiNark:
		{
			if(response)
			{
				new cHouseID = SelectedCreditHouseID[playerid], String[200];

				if(IsNumeric(inputtext))
				{
					switch(KoksNarkotikas[playerid])
					{
						case sZOLE:
						{
							if(PI[playerid][Weed] >= strval(inputtext))
							{
								PI[playerid][Weed] 				-= strval(inputtext);
								CHD[cHouseID][_cHouseDrugs1] 	+= strval(inputtext);

							    format(String, sizeof(String), "{B54F4F}< > {ffffff}Padëjote {FFAF00}%d {ffffff}mg þolës á jûsø namus!", strval(inputtext));
						   		SendClientMessage(playerid, -1, String);

						   		SaveCreditHouse 	(cHouseID);
						   		OnDialogResponse 	(playerid, PagrNamoValdymas, true, 5, "");
							}
							else
							{
								SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek ðios rûðies narkotikø!");
			   					OnDialogResponse(playerid, NarkValdymas, true, 1, "");
							}
						}

						case sKOKAINAS:
						{
							if(PI[playerid][Kokainas] >= strval(inputtext))
							{
								PI[playerid][Kokainas] 			-= strval(inputtext);
								CHD[cHouseID][_cHouseDrugs2] 	+= strval(inputtext);

							    format(String, sizeof(String), "{B54F4F}< > {ffffff}Padëjote {FFAF00}%d {ffffff}mg kokaino á jûsø namus!", strval(inputtext));
						   		SendClientMessage(playerid, -1, String);

						   		SaveCreditHouse 	(cHouseID);
						   		OnDialogResponse 	(playerid, PagrNamoValdymas, true, 5, "");
							}
							else
							{
								SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek ðios rûðies narkotikø!");
			   					OnDialogResponse(playerid, NarkValdymas, true, 1, "");
							}
						}

						case sEKSTAZI:
						{
							if(PI[playerid][Ekstazi] >= strval(inputtext))
							{
								PI[playerid][Ekstazi] 			-= strval(inputtext);
								CHD[cHouseID][_cHouseDrugs3] 	+= strval(inputtext);

							    format(String, sizeof(String), "{B54F4F}< > {ffffff}Padëjote {FFAF00}%d {ffffff}mg ekstazio á jûsø namus!", strval(inputtext));
						   		SendClientMessage(playerid, -1, String);

						   		SaveCreditHouse 	(cHouseID);
						   		OnDialogResponse 	(playerid, PagrNamoValdymas, true, 5, "");
							}
							else
							{
								SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek ðios rûðies narkotikø!");
			   					OnDialogResponse(playerid, NarkValdymas, true, 1, "");
							}
						}

						case sHEROINAS:
						{
							if(PI[playerid][Heroinas] >= strval(inputtext))
							{
								PI[playerid][Heroinas] 			-= strval(inputtext);
								CHD[cHouseID][_cHouseDrugs4] 	+= strval(inputtext);

							    format(String, sizeof(String), "{B54F4F}< > {ffffff}Padëjote {FFAF00}%d {ffffff}ml heroino á jûsø namus!", strval(inputtext));
						   		SendClientMessage(playerid, -1, String);

						   		SaveCreditHouse 	(cHouseID);
						   		OnDialogResponse 	(playerid, PagrNamoValdymas, true, 5, "");
							}
							else
							{
								SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek ðios rûðies narkotikø!");
			   					OnDialogResponse(playerid, NarkValdymas, true, 1, "");
							}
						}
					}
				}
				else
			   	{
			   		SendClientMessage(playerid, -1, "{ffffff} Kaþkas blogai ávesta!");
			   		OnDialogResponse(playerid, NarkValdymas, true, 1, "");
			   	}
			}
			else
			{
				OnDialogResponse(playerid, PagrNarkValdymas, true, KoksNarkotikas[playerid], "");
			}
		}

		case NarkValdymas:
		{
			if(response)
			{
				new cHouseID = SelectedCreditHouseID[playerid], String[200], HeaderString[128];

				switch(listitem)
				{
					case 0: // paimti
					{
						switch(KoksNarkotikas[playerid])
						{
							case sZOLE:
							{
								format(HeaderString, sizeof(HeaderString), "{ffffff}Jûsø namuose yra {FFAF00}%d {ffffff}mg þolës", CHD[cHouseID][_cHouseDrugs1]);

								strcat(String, "{ffffff}Áraðykite kiek mg þolës norite paimti ið jûsø namø:\n");
							}

							case sKOKAINAS:
							{
								format(HeaderString, sizeof(HeaderString), "{ffffff}Jûsø namuose yra {FFAF00}%d {ffffff}mg kokaino", CHD[cHouseID][_cHouseDrugs2]);
								
								strcat(String, "{ffffff}Áraðykite kiek mg kokaino norite paimti ið jûsø namø:\n");
							}

							case sEKSTAZI:
							{
								format(HeaderString, sizeof(HeaderString), "{ffffff}Jûsø namuose yra {FFAF00}%d {ffffff}mg ekstazio", CHD[cHouseID][_cHouseDrugs3]);
								
								strcat(String, "{ffffff}Áraðykite kiek mg ekstazio norite paimti ið jûsø namø:\n");
							}

							case sHEROINAS:
							{
								format(HeaderString, sizeof(HeaderString), "{ffffff}Jûsø namuose yra {FFAF00}%d {ffffff}ml heroino", CHD[cHouseID][_cHouseDrugs4]);
								
								strcat(String, "{ffffff}Áraðykite kiek ml heroino norite paimti ið jûsø namø:\n");
							}
						}

						ShowPlayerDialogEx(playerid, PaimtiNark, DIALOG_STYLE_INPUT, HeaderString, String, "Paimti", "Atgal");
					}

					case 1: // padëti
					{
						switch(KoksNarkotikas[playerid])
						{
							case sZOLE:
							{
								format(HeaderString, sizeof(HeaderString), "{ffffff}Jûsø namuose yra {FFAF00}%d {ffffff}mg þolës", CHD[cHouseID][_cHouseDrugs1]);

								strcat(String, "{ffffff}Áraðykite kiek mg þolës norite padëti á jûsø namus:\n");
							}

							case sKOKAINAS:
							{
								format(HeaderString, sizeof(HeaderString), "{ffffff}Jûsø namuose yra {FFAF00}%d {ffffff}mg kokaino", CHD[cHouseID][_cHouseDrugs2]);
								
								strcat(String, "{ffffff}Áraðykite kiek mg kokaino norite padëti á jûsø namus:\n");
							}

							case sEKSTAZI:
							{
								format(HeaderString, sizeof(HeaderString), "{ffffff}Jûsø namuose yra {FFAF00}%d {ffffff}mg ekstazio", CHD[cHouseID][_cHouseDrugs3]);
								
								strcat(String, "{ffffff}Áraðykite kiek mg ekstazio norite padëti á jûsø namus:\n");
							}

							case sHEROINAS:
							{
								format(HeaderString, sizeof(HeaderString), "{ffffff}Jûsø namuose yra {FFAF00}%d {ffffff}ml heroino", CHD[cHouseID][_cHouseDrugs4]);
								
								strcat(String, "{ffffff}Áraðykite kiek ml heroino norite padëti á jûsø namus:\n");
							}
						}

						ShowPlayerDialogEx(playerid, PadetiNark, DIALOG_STYLE_INPUT, HeaderString, String, "Padëti", "Atgal");
					}
				}
			}	
			else
			{
				OnDialogResponse(playerid, PagrNamoValdymas, true, 5, "");
			}
		}

		case AtsisakytiNamo:
		{
			if(response)
			{
				new cHouseID = SelectedCreditHouseID[playerid];

				SendClientMessage 			(playerid, -1, "{FFAF00}< > {ffffff}Atsisakëte ðio namo nuomos!");
				AC_SetPlayerPos 			(playerid, CHD[cHouseID][_cHouseEnterPos][0], CHD[cHouseID][_cHouseEnterPos][1], CHD[cHouseID][_cHouseEnterPos][2]);
				ClearCreditHouseVariables 	(cHouseID);

				SelectedCreditHouseID[playerid] = -1;
			}
			else
			{
				pc_cmd_cnamas(playerid);
			}
		}

		case PagrNarkValdymas:
		{
			if(response)
			{
				new cHouseID = SelectedCreditHouseID[playerid], String[200], HeaderString[128];

				switch(listitem)
				{
					case 0: // þolë
					{
						format(HeaderString, sizeof(HeaderString), "{ffffff}Jûsø namuose yra {FFAF00}%d {ffffff}mg þolës", CHD[cHouseID][_cHouseDrugs1]);

						KoksNarkotikas[playerid] = sZOLE;
					}

					case 1: // kokainas
					{
						format(HeaderString, sizeof(HeaderString), "{ffffff}Jûsø namuose yra {FFAF00}%d {ffffff}mg kokaino", CHD[cHouseID][_cHouseDrugs2]);

						KoksNarkotikas[playerid] = sKOKAINAS;
					}

					case 2: // ekstazi
					{
						format(HeaderString, sizeof(HeaderString), "{ffffff}Jûsø namuose yra {FFAF00}%d {ffffff}mg ekstazio", CHD[cHouseID][_cHouseDrugs3]);

						KoksNarkotikas[playerid] = sEKSTAZI;
					}

					case 3: // heroinas
					{
						format(HeaderString, sizeof(HeaderString), "{ffffff}Jûsø namuose yra {FFAF00}%d {ffffff}ml heroino", CHD[cHouseID][_cHouseDrugs4]);

						KoksNarkotikas[playerid] = sHEROINAS;
					}
				}

				strcat(String, "{B54F4F}< > {ffffff}Paimti narkotikus\n");
				strcat(String, "{B54F4F}< > {ffffff}Padëti narkotikus");

				ShowPlayerDialogEx(playerid, NarkValdymas, DIALOG_STYLE_LIST, HeaderString, String, "Pasirinkti", "Atgal");
			}
			else
			{
				pc_cmd_cnamas(playerid);
			}
		}

		case PadetiISeifa:
		{
			new cHouseID = SelectedCreditHouseID[playerid], String[130];

			if(response)
			{
				if(IsNumeric(inputtext) || strval(inputtext) >= 1)
				{
					if(GetPlayerMoneyA(playerid) >= strval(inputtext))
					{
						CHD[cHouseID][_cHouseChest] += strval(inputtext);

						SaveCreditHouse 	(cHouseID);
						GivePlayerMoneyA 	(playerid, -strval(inputtext));

						format(String, sizeof(String), "{B54F4F}< > {ffffff}Sëkmingai padëjote {FFAF00}$%s {ffffff}á jûsø namø seifà!", konvertuoti_pinigus(strval(inputtext)));
						SendClientMessage(playerid, -1, String);

						pc_cmd_cnamas(playerid);
					}
					else
					{
						SendClientMessage 	(playerid, -1, "{ffffff} Jus neturite tiek pinigø!");
						OnDialogResponse 	(playerid, PagrSeifoValdymas, true, 1, "");
					}
				}
				else
				{
					SendClientMessage 	(playerid, -1, "{ffffff} Kaþkas blogai ávesta!");
					OnDialogResponse 	(playerid, PagrSeifoValdymas, true, 1, "");
				}
			}
			else
			{
				OnDialogResponse(playerid, PagrNamoValdymas, true, 3, "");
			}
		}

		case PaimtiIsSeifo:
		{
			new cHouseID = SelectedCreditHouseID[playerid], String[128];

			if(response)
			{
				if(IsNumeric(inputtext) || strval(inputtext) >= 1)
				{
					if(CHD[cHouseID][_cHouseChest] >= strval(inputtext))
					{
						CHD[cHouseID][_cHouseChest] -= strval(inputtext);

						SaveCreditHouse 	(cHouseID);
						GivePlayerMoneyA 	(playerid, strval(inputtext));

						format(String, sizeof(String), "{B54F4F}< > {ffffff}Sëkmingai pasiëmëte {FFAF00}$%s {ffffff}ið jûsø namø seifo!", konvertuoti_pinigus(strval(inputtext)));
						SendClientMessage(playerid, -1, String);

						pc_cmd_cnamas(playerid);
					}
					else
					{
						SendClientMessage(playerid, -1, "{ffffff} Jûsø namø seife tiek pinigø nëra!");
						OnDialogResponse (playerid, PagrSeifoValdymas, true, 0, "");
					}
				}
				else
				{
					SendClientMessage(playerid, -1, "{ffffff} Kaþkas blogai ávesta!");
					OnDialogResponse (playerid, PagrSeifoValdymas, true, 0, "");
				}
			}
			else
			{
				OnDialogResponse(playerid, PagrNamoValdymas, true, 3, "");
			}
		}

		case PagrSeifoValdymas:
		{
			new cHouseID = SelectedCreditHouseID[playerid], ChestString[100];

			if(response)
			{
				switch(listitem)
				{
					case 0: // Paimti pinigus ið seifo
					{
						format(ChestString, sizeof(ChestString), "{ffffff}Jûsø namø seife yra {FFAF00}$%s", konvertuoti_pinigus(CHD[cHouseID][_cHouseChest]));

						ShowPlayerDialogEx(playerid, PaimtiIsSeifo, DIALOG_STYLE_INPUT, ChestString, "{ffffff}Áraðykite kiek pinigø norite paimti ið jûsø namø seifo:", "Paimti", "Atgal");
					}

					case 1: // Padëti pinigus á seifà
					{
						format(ChestString, sizeof(ChestString), "{ffffff}Jûsø namø seife yra {FFAF00}$%s", konvertuoti_pinigus(CHD[cHouseID][_cHouseChest]));

						ShowPlayerDialogEx(playerid, PadetiISeifa, DIALOG_STYLE_INPUT, ChestString, "{ffffff}Áraðykite kiek pinigø norite padëti á jûsø namø seifà:", "Padëti", "Atgal");
					}
				}
			}
			else
			{
				pc_cmd_cnamas(playerid);
			}
		}

		case PadetiGinklusInput:
		{
			if(response)
			{
				if(IsNumeric(inputtext))
				{
		    		if(ac_GetPlayerAmmo(playerid, GetPlayerWeapon(playerid)) >= strval(inputtext))
		    		{
		    			new cHouseID = SelectedCreditHouseID[playerid], WeaponName[64]; GetWeaponName(GetPlayerWeapon(playerid), WeaponName, sizeof(WeaponName));

		                ac_GivePlayerWeapon 				(playerid, GetPlayerWeapon(playerid), -strval(inputtext));
		                AddItemInCreditHouseChest 	(cHouseID,  GetPlayerWeapon(playerid),  strval(inputtext));
						SaveCreditHouse 			(cHouseID);

		                new String[160];

					    format(String, sizeof(String), "{B54F4F}< > {ffffff}Padëjote ginklà {FFAF00}%s {ffffff}su {FFAF00}%d {ffffff}kulkø á spintà!", WeaponName, strval(inputtext));
				   		SendClientMessage(playerid, -1, String);

				   		OnDialogResponse(playerid, PagrNamoValdymas, true, 4, "");
				   	}
				   	else
				   	{
				   		SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek ðio ginklo kulkø!");
				   		OnDialogResponse (playerid, PagrGinkluValdymas, true, 1, "");
				   	}
				}
				else
			   	{
			   		SendClientMessage(playerid, -1, "{ffffff} Kaþkas blogai ávesta!");
			   		OnDialogResponse (playerid, PagrGinkluValdymas, true, 1, "");
			   	}
			}
			else
			{
				OnDialogResponse(playerid, PagrNamoValdymas, true, 4, "");
			}
		}

		case PaimtiGinklusInput:
		{
			if(response)
			{
				if(IsNumeric(inputtext))
				{
					new cHouseID = SelectedCreditHouseID[playerid], SelectedItem = PI[playerid][SelectedChestItemID];

					if(CreditHouseChest[cHouseID][GetCreditHouseChestItemSlot(cHouseID, SelectedItem)][ItemAmmount] >= strval(inputtext) && strval(inputtext) > 0)
			    	{
			    		new WeaponName[64]; GetWeaponName(SelectedItem, WeaponName, sizeof(WeaponName));

		    			ac_GivePlayerWeapon          			(playerid,  SelectedItem, strval(inputtext));
		    			RemoveItemCountFromCreditHouse (cHouseID,   SelectedItem, strval(inputtext));

		        	    new String[160];

					    format(String, sizeof(String), "{B54F4F}< > {ffffff}Pasiëmëte ginklà {FFAF00}%s {ffffff}su {FFAF00}%d {ffffff}kulkø ið spintos!", WeaponName, strval(inputtext));
				   		SendClientMessage(playerid, -1, String);

				   		SaveCreditHouse 	(cHouseID);
				   		OnDialogResponse 	(playerid, PagrGinkluValdymas, true, 0, "");
				   	}
				   	else
				   	{
				   		SendClientMessage(playerid, -1, "{ffffff} Jûsø spintoje nëra tiek ðio ginklo kulkø!");
				   		OnDialogResponse (playerid, PagrGinkluValdymas, true, 0, "");
				   	}
				}
				else
			   	{
			   		SendClientMessage(playerid, -1, "{ffffff} Kaþkas blogai ávesta!");
			   		OnDialogResponse (playerid, PagrGinkluValdymas, true, 0, "");
			   	}
			}
			else
			{
				OnDialogResponse(playerid, PagrGinkluValdymas, true, 0, "");
			}
		}

		case PaimtiGinklus:
		{
			if(response)
			{
				new cHouseID = SelectedCreditHouseID[playerid], String[200], SelectedItem;

				SelectedItem = GetCreditHouseChestItemSlot(cHouseID, PI[playerid][cHouseChestIDs][listitem + 1]);

				PI[playerid][SelectedChestItemID] = PI[playerid][cHouseChestIDs][listitem + 1];

				if(CreditHouseChest[cHouseID][SelectedItem][ItemID] > 0)
			    {
			    	new WeaponName[64]; GetWeaponName(PI[playerid][SelectedChestItemID], WeaponName, sizeof(WeaponName));

					format(String, sizeof(String), "{ffffff}Áraðykite kiek kulkø ginklo {FFAF00}%s {ffffff}norite paimti ið spintos:\n",
					WeaponName);

					ShowPlayerDialogEx(playerid, PaimtiGinklusInput, DIALOG_STYLE_INPUT, "Paimti ginklus ið spintos", String, "Paimti", "Atgal");
				}
			}
			else
			{
				OnDialogResponse(playerid, PagrNamoValdymas, true, 4, "");
			}
		}

		case PagrGinkluValdymas:
		{
			new cHouseID = SelectedCreditHouseID[playerid], Count = 0, Stringas[128], String[500];

			if(response)
			{
				switch(listitem)
				{
					case 0: // Paimti ginklus
					{
						strcat(String, "Ginklo pavadinimas\tKulkos\n");

						for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
						{
		            		if(CreditHouseChest[cHouseID][i][ItemID] > 0 && CreditHouseChest[cHouseID][i][ItemAmmount] > 0)
			    			{
			    				new WeaponName[64]; GetWeaponName(CreditHouseChest[cHouseID][i][ItemID], WeaponName, sizeof(WeaponName));

							    format(Stringas, sizeof(Stringas), "{B54F4F}< > {ffffff}%s\t{FFAF00}%d\n", WeaponName, CreditHouseChest[cHouseID][i][ItemAmmount]);
								strcat(String, Stringas);

		 						Count ++;

			   				    PI[playerid][cHouseChestIDs][Count] = CreditHouseChest[cHouseID][i][ItemID];
						   	}
						}

						ShowPlayerDialogEx(playerid, PaimtiGinklus, DIALOG_STYLE_TABLIST_HEADERS, "Paimti ginklus", String, "Pasirinkti", "Atgal");
					}

					case 1: // Padëti ginklus
					{
						new WeaponName[64];

						GetWeaponName(GetPlayerWeapon(playerid), WeaponName, sizeof(WeaponName));

						format(String, sizeof(String), "{ffffff}Áraðykite kiek kulkø ginklo {FFAF00}%s {ffffff}norite padëti á spintà:\n", WeaponName);
						ShowPlayerDialogEx(playerid, PadetiGinklusInput, DIALOG_STYLE_INPUT, "Padëti ginklus", String, "Padëti", "Atgal");
					}
				}
			}
			else
			{
				pc_cmd_cnamas(playerid);
			}
		}

		case PagrNamoValdymas:
		{
			if(response)
			{
				new cHouseID = SelectedCreditHouseID[playerid], String[300], Stringas[200], ChestString[100];

				switch(listitem)
				{
					case 0:
					{
						SendClientMessage (playerid, -1, "{4C7CFF}< > {ffffff}Sëkmingai pasigydëte!");
						SetPlayerHealthEx (playerid, 100);
					}

					case 1:
					{
						SendClientMessage 	(playerid, -1, "{4C7CFF}< > {ffffff}Valgote maistà ið ðaldytuvo!");
						Sotumas				(playerid, 100);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);
					}

					case 2, 6:
					{
						pc_cmd_cnamas(playerid);
					}

					case 3: // Seifas
					{
						format(ChestString, sizeof(ChestString), "{ffffff}Jûsø namø seife yra {FFAF00}$%s", konvertuoti_pinigus(CHD[cHouseID][_cHouseChest]));

						strcat(String, "{B54F4F}< > {ffffff}Paimti pinigus ið seifo\n");
						strcat(String, "{B54F4F}< > {ffffff}Padëti pinigus á seifà");

						ShowPlayerDialogEx(playerid, PagrSeifoValdymas, DIALOG_STYLE_LIST, ChestString, String, "Pasirinkti", "Atgal");
					}

					case 4: // Ginklai
					{
						strcat(String, "{B54F4F}< > {ffffff}Paimti ginklus\n");
						strcat(String, "{B54F4F}< > {ffffff}Padëti ginklus");

						ShowPlayerDialogEx(playerid, PagrGinkluValdymas, DIALOG_STYLE_LIST, "Ginklai", String, "Pasirinkti", "Atgal");
					}

					case 5: // Narkotikai
					{
						strcat(String, "Rûðis\tTurimas kiekis\n");
						format(Stringas, sizeof(Stringas), "{B54F4F}< > {ffffff}Þolë\t{FFAF00}%d {ffffff}mg\n", CHD[cHouseID][_cHouseDrugs1]); 		strcat(String, Stringas);
						format(Stringas, sizeof(Stringas), "{B54F4F}< > {ffffff}Kokainas\t{FFAF00}%d {ffffff}mg\n", CHD[cHouseID][_cHouseDrugs2]); 	strcat(String, Stringas);
						format(Stringas, sizeof(Stringas), "{B54F4F}< > {ffffff}Ekstazi\t{FFAF00}%d {ffffff}mg\n", CHD[cHouseID][_cHouseDrugs3]); 	strcat(String, Stringas);
						format(Stringas, sizeof(Stringas), "{B54F4F}< > {ffffff}Heroinas\t{FFAF00}%d {ffffff}ml", CHD[cHouseID][_cHouseDrugs4]); 	strcat(String, Stringas);

						ShowPlayerDialogEx(playerid, PagrNarkValdymas, DIALOG_STYLE_TABLIST_HEADERS, "Narkotikai", String, "Pasirinkti", "Atgal");
					}

					case 7:
					{
						strcat(String, "{ffffff}Ar esate ásitikinæs, kad norite atsisakyti ðio namo?\n");
						strcat(String, "Visi turimi narkotikai, pinigai bei ginklai graþinti nebus.");

						ShowPlayerDialogEx(playerid, AtsisakytiNamo, DIALOG_STYLE_MSGBOX, "Atsisakyti namo", String, "Taip", "Atgal");
					}
				}
			}
		}

		case IsejimasDialog:
		{
			if(response)
			{
				if(PI[playerid][uniformd])
			    {
			    	SetPlayerSkin(playerid, PI[playerid][uniforma]);
			    }
			    else
			    {
			    	SetPlayerSkin(playerid, PI[playerid][drabuziai]);
			    }

			    Dazasvydis[playerid] = 0;

			    AC_SetPlayerPos 	 	(playerid, 297.7109,-77.0784,1001.5156);
			    SetPlayerInterior 	 	(playerid, 4);
			    SetPlayerVirtualWorld 	(playerid, 0);
			    SetPlayerHealthEx 		(playerid, 99.0);
			    ac_ResetPlayerWeapons 			(playerid);
			    LoadPlayerGuns 			(playerid);
			    SendClientMessage 		(playerid, -1, "{24F34A} DAÞASVYDIS  {ffffff}Palikote daþasvydþio arenà!");
			}
		}

		case DazasvydzioDialog:
		{
			if(response)
			{
				new String[200];

				new KiekZaliu = 0, KiekGeltonu = 0;

				for(new p, size = GetPlayerPoolSize(); p <= size; p ++)
				{
					if(IsPlayerConnected(p))
					{
						switch(Dazasvydis[p])
						{
							case ZALIAS: 	KiekZaliu ++;
							case GELTONAS: 	KiekGeltonu ++;
						}
					}
				}

				format(String, sizeof(String), "Komandos spalva\tKomandos nariai\n1. Þaliøjø komanda\t{FFAF00}%d\n2. Geltonøjø komanda\t{FFAF00}%d", KiekZaliu, KiekGeltonu);
				ShowPlayerDialogEx(playerid, PradetiDazasvydiDialog, DIALOG_STYLE_TABLIST_HEADERS, "Pasirinkite komandà", String, "Pradëti", "Uþdaryti");
			}
		}

		case PradetiDazasvydiDialog:
		{
			if(response)
			{
				if(GetPlayerMoneyA(playerid) < 1000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

				if(!PI[playerid][gLicenzija]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite ginklø licenzijos!");

				new KiekZaliu = 0, KiekGeltonu = 0;

				for(new p, size = GetPlayerPoolSize(); p <= size; p ++)
				{
					if(IsPlayerConnected(p))
					{
						switch(Dazasvydis[p])
						{
							case ZALIAS: 	KiekZaliu ++;
							case GELTONAS: 	KiekGeltonu ++;
						}
					}
				}

				if(KiekZaliu + KiekGeltonu <= 1)
				{
					RespawnAllDazasvydis();

					new LabelUpdate[128];

					format(LabelUpdate, sizeof(LabelUpdate), "Þaliøjø taðkai: %d", zPoints);
					SetDynamicObjectMaterialText(Zaltaskiai, 0, LabelUpdate, 80, "Ariel", 20, 1, 0xFFFFFFFB, 0x00000000, 1);

					format(LabelUpdate, sizeof(LabelUpdate), "Geltonøjø taðkai: %d", gPointss);
					SetDynamicObjectMaterialText(Geltontaskiai, 0, LabelUpdate, 80, "Ariel", 20, 1, 0xFFFFFFFB, 0x00000000, 1);

					format(LabelUpdate, sizeof(LabelUpdate), "Laikas: %s", ConvertSeconds(rTime - gettime()));
					SetDynamicObjectMaterialText(Roundlaikis, 0, LabelUpdate, 80, "Ariel", 20, 1, 0xFFFFFFFB, 0x00000000, 1);
				}

				new String[128];

				switch(listitem)
				{
					case 0: //þali
					{
						format(String, sizeof(String), "{24F34A} DAÞASVYDIS  {ffffff}Þaidëjas {FFAF00}%s {ffffff}prisijungë á daþasvydá prie þaliøjø komandos!", GetPlayerNameEx(playerid));
						SendMessageToDazasvydis 	(String);

						Dazasvydis[playerid] = ZALIAS;

						SetPlayerSkin 		(playerid, ZALIU_SKIN);
						AC_SetPlayerPos 	(playerid, -2613.5020,2627.5459,-99.0178);
						SendClientMessage 	(playerid, -1, "{24F34A} DAÞASVYDIS  {ffffff}Pradëjote þaisti daþasvydá uþ þaliøjø komandà. Sëkmës!");
					}

					case 1: //geltoni
					{
						format(String, sizeof(String), "{24F34A} DAÞASVYDIS  {ffffff}Þaidëjas {FFAF00}%s {ffffff}prisijungë á daþasvydá prie geltonøjø komandos!", GetPlayerNameEx(playerid));
						SendMessageToDazasvydis 	(String);

						Dazasvydis[playerid] = GELTONAS;

						SetPlayerSkin 		(playerid, GELTONU_SKIN);
						AC_SetPlayerPos 	(playerid, -2651.4290,2591.8848,-99.0178);
						SendClientMessage 	(playerid, -1, "{24F34A} DAÞASVYDIS  {ffffff}Pradëjote þaisti daþasvydá uþ geltonøjø komandà. Sëkmës!");
					}
				}

				GivePlayerMoneyA 	(playerid, -1000);
				SavePlayerGuns 	 	(playerid);
				ac_ResetPlayerWeapons 		(playerid);
				ac_GivePlayerWeapon 		(playerid, 24, 2000);
				ac_GivePlayerWeapon 		(playerid, 29, 2000);
				SetPlayerInterior 	(playerid, 10);
				SetPlayerHealthEx 	(playerid, 99.0);
				SetPlayerArmourEx 	(playerid, 0.0);
			}
		}

		case KauliukoDialog:		
		{
			new SuKuoZaidzia = KS[playerid][KS_giveplayerid], MoneyCount = KS[playerid][KS_money], String[150], Winner = -1, Looser;

			if(response)
			{
				if(SuKuoZaidzia == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas atsijungë!");

				if(GetPlayerMoneyA(playerid) < MoneyCount) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek pinigø!");

				if(GetPlayerMoneyA(SuKuoZaidzia) < MoneyCount) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nebeturi tiek pinigø!");

				if(KS[playerid][KS_time] < gettime()) return SendClientMessage(playerid, -1, "{ffffff} Jau praëjo 20 sekundþiø nuo pasiûlymo!");

				KS[SuKuoZaidzia][KS_firstplayer] 	= random(6);
				KS[playerid][KS_firstplayer] 		= random(6);

				if(KS[SuKuoZaidzia][KS_firstplayer] > KS[playerid][KS_firstplayer])
				{
					Winner = SuKuoZaidzia;
					Looser = playerid;
				}

				if(KS[SuKuoZaidzia][KS_firstplayer] < KS[playerid][KS_firstplayer])
				{
					Winner = playerid;
					Looser = SuKuoZaidzia;
				}

				if(KS[SuKuoZaidzia][KS_firstplayer] == KS[playerid][KS_firstplayer])
				{
					Winner = -1;
					Looser = -1;
				}

				/*format(String, sizeof(String), "{24F34A} KAULIUKAS  {ffffff}Jus metate kauliukà... Iðkrito skaièius: {FFAF00}%d{ffffff}!", KS[SuKuoZaidzia][KS_firstplayer] + 1);
				SendClientMessage(SuKuoZaidzia, -1, String);

				format(String, sizeof(String), "{24F34A} KAULIUKAS  {ffffff}Jus metate kauliukà... Iðkrito skaièius: {FFAF00}%d{ffffff}!", KS[playerid][KS_firstplayer] + 1);
				SendClientMessage(playerid, -1, String);*/

				format(String, sizeof(String), "{24F34A} KAULIUKAS  {ffffff}Þaidëjas {FFAF00}%s {ffffff}meta kauliukà... Iðkrito skaièius: {FFAF00}%d{ffffff}!", GetPlayerNameEx(playerid), KS[playerid][KS_firstplayer] + 1);
				SendDistanceMessage(10.0, playerid, String);

				format(String, sizeof(String), "{24F34A} KAULIUKAS  {ffffff}Þaidëjas {FFAF00}%s {ffffff}meta kauliukà... Iðkrito skaièius: {FFAF00}%d{ffffff}!", GetPlayerNameEx(SuKuoZaidzia), KS[SuKuoZaidzia][KS_firstplayer] + 1);
				SendDistanceMessage(10.0, playerid, String);

				switch(Winner)
				{
					case -1:
					{
						format(String, sizeof(String), "{24F34A} KAULIUKAS  {ffffff}Kadangi iðkrito po lygiai - {FFAF00}%d{ffffff}, nelaimëjo niekas!", KS[playerid][KS_firstplayer] + 1);
						SendDistanceMessage(10.0, playerid, String);
					}

					default:
					{
						GivePlayerMoneyA(Looser, -MoneyCount);

						new KiekGaus = MoneyCount * 15 / 100;
						GivePlayerMoneyA(Winner, floatround(MoneyCount - KiekGaus));

						format(String, sizeof(String), "{24F34A} KAULIUKAS  {ffffff}Laimëjo {FFAF00}%s{ffffff}, jis gavo {FFAF00}$%s{ffffff}!", GetPlayerNameEx(Winner), konvertuoti_pinigus(floatround(MoneyCount - KiekGaus)));
						SendDistanceMessage(10.0, playerid, String);
					}
				}

				KS[SuKuoZaidzia][KS_playedtime] = gettime() + 30;
				KS[playerid][KS_playedtime] 	= gettime() + 30;

				KS[SuKuoZaidzia][KS_time] 	= 0;
				KS[playerid][KS_time] 		= 0;

				KS[SuKuoZaidzia][KS_money] 	= 0;
				KS[playerid][KS_money] 		= 0;

				KS[SuKuoZaidzia][KS_giveplayerid] 	= -1;
				KS[playerid][KS_giveplayerid] 		= -1;

				KS[SuKuoZaidzia][KS_firstplayer]	= -1;
				KS[playerid][KS_firstplayer]		= -1;

				Winner = -1;
				Looser = -1;
			}
			else
			{
				format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}atsisakë þaisti kauliukà su jumis!", GetPlayerNameEx(playerid));
				SendClientMessage(SuKuoZaidzia, -1, String);

				format(String, sizeof(String), "{ffffff} Atsisakëte þaisti kauliukà su {FFAF00}%s{ffffff}!", GetPlayerNameEx(SuKuoZaidzia));
				SendClientMessage(playerid, -1, String);

				KS[SuKuoZaidzia][KS_time] 	= 0;
				KS[playerid][KS_time] 		= 0;

				KS[SuKuoZaidzia][KS_money] 	= 0;
				KS[playerid][KS_money] 		= 0;

				KS[SuKuoZaidzia][KS_giveplayerid] 	= -1;
				KS[playerid][KS_giveplayerid] 		= -1;
			}
		}

		case NutrauktiGarazoNuoma:
		{
			if(response)
			{
				new garageid = pGarageID[playerid];

				strdel(GI[garageid][GarageOwner], 0,        24);
				strcat(GI[garageid][GarageOwner], "Nera", 	24);

				GI[garageid][GarageTimeLeft] = 0;

				SendClientMessage(playerid, -1, "{ffffff} Sëkmingai nutraukëte garaþo nuomos sutartá!");
				UpdateGarageLabel(garageid);

				new Query[128];
				format(Query, sizeof(Query), "UPDATE `garazai` SET `GarageOwner` = '%s', `GarageTimeLeft` = '%d' WHERE `GarageID` = '%d'", GI[garageid][GarageOwner], GI[garageid][GarageTimeLeft], garageid);
				mysql_query(Query);
			}
		}

		case NamuGarazoValdymas:
		{
			if(response)
			{
				new garageid = nGarageID[playerid];

				switch(listitem)
				{
					case 0:
					{
						switch(garageid)
						{
							case 0: RotateObjectEx(NamuGarazoVartai[0], -2833.34985, -65.40420, 11.51590,   0.00000, 270.00000, 90.00000, 1.0);
							case 1: RotateObjectEx(NamuGarazoVartai[1], -2028.34546, -874.29871, 34.66950,   0.00000, 270.00000, 0.00000, 1.0);
						}

						GameTextForPlayer(playerid, "GARAZAS ATSIDARO", 2000, 4);
					}

					case 1:
					{
						switch(garageid)
						{
							case 0: RotateObjectEx(NamuGarazoVartai[0], -2833.34985, -63.70320, 9.76500,   0.00000, 0.00000, 90.00000, 1.0);
							case 1: RotateObjectEx(NamuGarazoVartai[1], -2026.59045, -874.29871, 33.00880,   0.00000, 0.00000, 0.00000, 1.0);
						}

						GameTextForPlayer(playerid, "GARAZAS UZSIDARO", 2000, 4);
					}
				}
			}
		}

		case GarazoValdymas:
		{
			if(response)
			{
				new garageid = pGarageID[playerid];

				switch(listitem)
				{
					case 0:
					{
						switch(garageid)
						{
							case 0: RotateObjectEx(GarazoVartai[0], -2579.43335, 650.07751, 30.25690,   0.00000, 270.00000, 90.00000, 1.0);
							case 1: RotateObjectEx(GarazoVartai[1], -2572.22412, 650.07751, 30.25690,   0.00000, 270.00000, 90.00000, 1.0);
							case 2: RotateObjectEx(GarazoVartai[2], -2565.01392, 650.07751, 30.25690,   0.00000, 270.00000, 90.00000, 1.0);
							case 3: RotateObjectEx(GarazoVartai[3], -2557.79932, 650.07751, 30.25690,   0.00000, 270.00000, 90.00000, 1.0);
							case 4: RotateObjectEx(GarazoVartai[4], -2550.61792, 650.07751, 30.25690,   0.00000, 270.00000, 90.00000, 1.0);
							case 5: RotateObjectEx(GarazoVartai[5], -2543.43530, 650.07751, 30.25690,   0.00000, 270.00000, 90.00000, 1.0);
							case 6: RotateObjectEx(GarazoVartai[6], -2586.61230, 627.79462, 30.25690,   0.00000, 270.00000, 90.00000, 1.0);
							case 7: RotateObjectEx(GarazoVartai[7], -2579.43628, 627.79462, 30.25690,   0.00000, 270.00000, 90.00000, 1.0);
							case 8: RotateObjectEx(GarazoVartai[8], -2572.22290, 627.79462, 30.25690,   0.00000, 270.00000, 90.00000, 1.0);
							case 9: RotateObjectEx(GarazoVartai[9], -2565.01563, 627.79462, 30.25690,   0.00000, 270.00000, 90.00000, 1.0);
							case 10: RotateObjectEx(GarazoVartai[10], -2557.79590, 627.79462, 30.25690,   0.00000, 270.00000, 90.00000, 1.0);
							case 11: RotateObjectEx(GarazoVartai[11], -2550.60962, 627.79462, 30.25690,   0.00000, 270.00000, 90.00000, 1.0);
							case 12: RotateObjectEx(GarazoVartai[12], -2543.41357, 627.79462, 30.25690,   0.00000, 270.00000, 90.00000, 1.0);
						}

						GameTextForPlayer(playerid, "GARAZAS ATSIDARO", 2000, 4);
					}

					case 1:
					{
						switch(garageid)
						{
							case 0: RotateObjectEx(GarazoVartai[0], -2579.43335, 651.75250, 28.62750,   0.00000, 0.00000, 90.00000, 1.0);
							case 1: RotateObjectEx(GarazoVartai[1], -2572.22412, 651.75781, 28.62980,   0.00000, 0.00000, 90.00000, 1.0);
							case 2: RotateObjectEx(GarazoVartai[2], -2565.01392, 651.77802, 28.58520,   0.00000, 0.00000, 90.00000, 1.0);
							case 3: RotateObjectEx(GarazoVartai[3], -2557.79932, 651.79791, 28.62100,   0.00000, 0.00000, 90.00000, 1.0);
							case 4: RotateObjectEx(GarazoVartai[4], -2550.61792, 651.80829, 28.62139,   0.00000, 0.00000, 90.00000, 1.0);
							case 5: RotateObjectEx(GarazoVartai[5], -2543.43530, 651.76538, 28.60173,   0.00000, 0.00000, 90.00000, 1.0);
							case 6: RotateObjectEx(GarazoVartai[6], -2586.61230, 629.89459, 28.63820,   0.00000, 0.00000, 90.00000, 1.0);
							case 7: RotateObjectEx(GarazoVartai[7], -2579.43628, 629.93188, 28.65430,   0.00000, 0.00000, 90.00000, 1.0);
							case 8: RotateObjectEx(GarazoVartai[8], -2572.22290, 629.88849, 28.64610,   0.00000, 0.00000, 90.00000, 1.0);
							case 9: RotateObjectEx(GarazoVartai[9], -2565.01563, 629.89130, 28.64060,   0.00000, 0.00000, 90.00000, 1.0);
							case 10: RotateObjectEx(GarazoVartai[10], -2557.79590, 629.89478, 28.63460,   0.00000, 0.00000, 90.00000, 1.0);
							case 11: RotateObjectEx(GarazoVartai[11], -2550.60962, 629.90668, 28.63400,   0.00000, 0.00000, 90.00000, 1.0);
							case 12: RotateObjectEx(GarazoVartai[12], -2543.41357, 629.89337, 28.65920,   0.00000, 0.00000, 90.00000, 1.0);
						}

						GameTextForPlayer(playerid, "GARAZAS UZSIDARO", 2000, 4);
					}
				}
			}
		}

		case PirktiGaraza:
		{
			if(response)
			{
				new garageid = listitem, String[70];
				pGarageID[playerid] = garageid;

				if(GI[garageid][GarageTimeLeft] > gettime())
				{
					SendClientMessage 	(playerid, -1, "{ffffff} Ðis garaþas uþimtas!");
					OnPlayerPickUpPickup(playerid, PickupsInfo[GarazoPirkimas]);

					return 1;
				}

				format(String, sizeof(String), "Garaþo nr. {FFAF00}%d {ffffff}nuoma", garageid + 1);

				ShowPlayerDialogEx(playerid, NuomosLaikas, DIALOG_STYLE_TABLIST_HEADERS, String,
				"Laikotarpis\tKaina\n1. 7 dienos\t{FFAF00}$40,000\n2. 14 dienø\t{FFAF00}$70,000\n3. 30 dienø\t{FFAF00}$120,000", "Nuomotis", "Atgal");
			}
		}

		case NuomosLaikas:
		{
			if(response)
			{
				new garageid = pGarageID[playerid], String[160];

				if(GI[garageid][GarageTimeLeft] > gettime())
				{
					SendClientMessage 	(playerid, -1, "{ffffff} Ðis garaþas uþimtas!");
					OnPlayerPickUpPickup(playerid, PickupsInfo[GarazoPirkimas]);

					return 1;
				}

				switch(listitem)
				{
					case 0:
					{
						if(GetPlayerMoneyA(playerid) < 40000)
						{
							SendClientMessage 	(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
							OnPlayerPickUpPickup(playerid, PickupsInfo[GarazoPirkimas]);

							return 1;
						}

						GivePlayerMoneyA(playerid, -40000);

						GI[garageid][GarageTimeLeft] = gettime() + 604800;
					}

					case 1:
					{
						if(GetPlayerMoneyA(playerid) < 70000)
						{
							SendClientMessage 	(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
							OnPlayerPickUpPickup(playerid, PickupsInfo[GarazoPirkimas]);

							return 1;
						}

						GivePlayerMoneyA(playerid, -70000);

						GI[garageid][GarageTimeLeft] = gettime() + 1209600;
					}

					case 2:
					{
						if(GetPlayerMoneyA(playerid) < 120000)
						{
							SendClientMessage 	(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
							OnPlayerPickUpPickup(playerid, PickupsInfo[GarazoPirkimas]);

							return 1;
						}

						GivePlayerMoneyA(playerid, -120000);

						GI[garageid][GarageTimeLeft] = gettime() + 2592000;
					}
				}

				strdel(GI[garageid][GarageOwner], 0,         					24);
				strcat(GI[garageid][GarageOwner], GetPlayerNameEx(playerid), 	24);

				format(String, sizeof(String), "{ffffff} Iðsinuomojote garaþà nr. {FFAF00}%d{ffffff}, kuris galios iki {FFAF00}%s{ffffff}!", garageid + 1, TimestampToDate(GI[garageid][GarageTimeLeft]));
				SendClientMessage(playerid, -1, String);

				UpdateGarageLabel(garageid);

				new Query[128];
				format(Query, sizeof(Query), "UPDATE `garazai` SET `GarageOwner` = '%s', `GarageTimeLeft` = '%d' WHERE `GarageID` = '%d'", GetPlayerNameEx(playerid), GI[garageid][GarageTimeLeft], garageid);
				mysql_query(Query);
			}
			else
			{
				OnPlayerPickUpPickup(playerid, PickupsInfo[GarazoPirkimas]);
			}
		}

		case 1046:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);

				new ColorOne, ColorTwo;

				if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

				if(sscanf(inputtext, "dd", ColorOne, ColorTwo))
				{
					ShowPlayerDialogEx(playerid, 1046, DIALOG_STYLE_INPUT,
					"Transp. priemonës daþymas",
					"{ffffff}Norint perdaþyti transporto priemonæ reikia áraðyti dviejø spalvø kodus. Pvz: 0 0 - Juoda. Raðymo pavyzdys: 0 0\n \n\t{FFAF00}ÁSPËJIMAS: Spalvø kodai turi bûti tarp 0 ir 255",
					"Daþyti", "Uþdaryti");

					return 1;
				}

				if(ColorOne > 255 || ColorOne < 0)
				{
					ShowPlayerDialogEx(playerid, 1046, DIALOG_STYLE_INPUT,
					"Transp. priemonës daþymas",
					"{ffffff}Norint perdaþyti transporto priemonæ reikia áraðyti dviejø spalvø kodus. Pvz: 0 0 - Juoda. Raðymo pavyzdys: 0 0\n \n\t{FFAF00}ÁSPËJIMAS: Spalvø kodai turi bûti tarp 0 ir 255",
					"Daþyti", "Uþdaryti");

					return 1;
				}

				if(ColorTwo > 255 || ColorTwo < 0)
				{
					ShowPlayerDialogEx(playerid, 1046, DIALOG_STYLE_INPUT,
					"Transp. priemonës daþymas",
					"{ffffff}Norint perdaþyti transporto priemonæ reikia áraðyti dviejø spalvø kodus. Pvz: 0 0 - Juoda. Raðymo pavyzdys: 0 0\n \n\t{FFAF00}ÁSPËJIMAS: Spalvø kodai turi bûti tarp 0 ir 255",
					"Daþyti", "Uþdaryti");

					return 1;
				}

				if(GetPlayerMoneyA(playerid) < 400)
				{
					SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					pc_cmd_tune(playerid);

					return 1;
				}

				GivePlayerMoneyA (playerid, -400);
				pc_cmd_tune(playerid);

				if(WhoIsDriver(vehicleid) != playerid) PlaySound(WhoIsDriver(vehicleid), 1134);
				PlaySound(playerid, 1134);

				VehicleInfo[vehicleid][vColor][0] = ColorOne;
				VehicleInfo[vehicleid][vColor][1] = ColorTwo;

				ChangeVehicleColor(GetPlayerVehicleID(playerid), ColorOne, ColorTwo);
			}
			else
			{
				pc_cmd_tune(playerid);
			}
		}

		case 6001:
		{
			if(response)
			{
				new vehicle = GetPlayerVehicleID(playerid);

				if(GetPlayerMoneyA(playerid) < 1000)
				{
					SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					pc_cmd_tune(playerid);

					return 1;
				}

				GivePlayerMoneyA (playerid, -1000);
				pc_cmd_tune(playerid);

				if(WhoIsDriver(vehicle) != playerid) PlaySound(WhoIsDriver(vehicle), 1133);
				PlaySound(playerid, 1133);

				switch(listitem)
				{
					case 0: AddVehicleComponent(vehicle, 1073);
					case 1: AddVehicleComponent(vehicle, 1074);
					case 2: AddVehicleComponent(vehicle, 1075);
					case 3: AddVehicleComponent(vehicle, 1076);
					case 4: AddVehicleComponent(vehicle, 1077);
					case 5: AddVehicleComponent(vehicle, 1078);
					case 6: AddVehicleComponent(vehicle, 1079);
					case 7: AddVehicleComponent(vehicle, 1080);
					case 8: AddVehicleComponent(vehicle, 1081);
					case 9: AddVehicleComponent(vehicle, 1082);
					case 10: AddVehicleComponent(vehicle, 1083);
					case 11: AddVehicleComponent(vehicle, 1084);
					case 12: AddVehicleComponent(vehicle, 1085);
				}
			}
			else
			{
				pc_cmd_tune(playerid);
			}
		}

		case 1045:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);

				switch(listitem)
				{
					case 0:
					{
						new Float:vHP; GetVehicleHealth(vehicleid, vHP);

						if(GetPlayerMoneyA(playerid) < 350)
						{
							SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
							pc_cmd_mechanikas(playerid);

							return 1;
						}

						if(vHP > 999.9)
						{
							SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë nëra sudauþyta!");
							pc_cmd_mechanikas(playerid);

							return 1;
						}

						GivePlayerMoneyA 	(playerid, -40);
						SendClientMessage 	(playerid, -1, "{ffffff} Tr. priemonë sutvarkyta!");
						ac_RepairVehicle 		(vehicleid);
						pc_cmd_mechanikas(playerid);
					}

					case 1:
					{
						if(GetPlayerMoneyA(playerid) < 200)
						{
							SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
							pc_cmd_mechanikas(playerid);

							return 1;
						}

						GivePlayerMoneyA 	(playerid, -200);
						pc_cmd_mechanikas(playerid);

						if(!VehicleInfo[vehicleid][vDujos]) // Maðina neturi dujø árangos
						{
							VehicleInfo[vehicleid][vKuras] = VehicleInfo[vehicleid][vBakas];

							if(VehicleHasDriver(vehicleid))
							{
								UpdateFuelBar(WhoIsDriver(vehicleid));
							}

							SendClientMessage(playerid, -1, "{ffffff} Ápylëte degalø á tr. priemonæ!");
						}
						else // Dujø áranga yra
						{
							if(!VehicleInfo[vehicleid][vIjungta]) // Dujos iðjungtos
							{
								VehicleInfo[vehicleid][vKuras] = VehicleInfo[vehicleid][vBakas];

								if(VehicleHasDriver(vehicleid))
								{
									UpdateFuelBar(WhoIsDriver(vehicleid));
								}

								SendClientMessage(playerid, -1, "{ffffff} Ápylëte degalø á tr. priemonæ!");
							}
							else // Dujos ájungtos
							{
								VehicleInfo[vehicleid][vDujuLikutis] = VehicleInfo[vehicleid][vDujuBakas];

								UpdateFuelBar(WhoIsDriver(vehicleid));

								SendClientMessage(playerid, -1, "{ffffff} Ápylëte dujø á tr. priemonæ!");
							}
						}
					}

					case 2:
					{
						new Float: V_Health; GetVehicleHealth(vehicleid, V_Health);

						if(GetPlayerMoneyA(playerid) < 500)
						{
							SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
							pc_cmd_mechanikas(playerid);

							return 1;
						}

						if(!VehicleInfo[vehicleid][vNupirkta])
						{
							SendClientMessage(playerid, -1, "{ffffff} Ðiai tr. priemonei TA atlikti negalite!");
							pc_cmd_mechanikas(playerid);

							return 1;
						}

						new vOwner = GetPlayeridMid(VehicleInfo[vehicleid][vSavininkas]);

						if(VehicleInfo[vehicleid][vTA] > gettime())
						{
							SendClientMessage(playerid, -1, "{ffffff} TA ðioje tr. priemonëje dar galioja!");
							pc_cmd_mechanikas(playerid);

							return 1;
						}

						if(!strcmp("Neregistruota", VehicleInfo[vehicleid][vNumeriai], true))
						{
							SendClientMessage(playerid, -1, "{ffffff} Tr. priemonë yra neregistruota, todël TA atlikti negalime!");
							pc_cmd_mechanikas(playerid);

							return 1;
						}
						
						if(V_Health < 900.0)
						{
							SendClientMessage(playerid, -1, "{ffffff} Tr. priemonë yra per daug sudauþyta!");
							pc_cmd_mechanikas(playerid);

							return 1;
						}

						VehicleInfo[vehicleid][vTA] = gettime() + 604800; // 7 dienos

						GivePlayerMoneyA 	(playerid, -500);
						SendClientMessage 	(playerid, -1, "{ffffff} Techninë apþiûra sëkmingai atlikta. Jos galiojimas: {FFAF00}7{ffffff} dienos!");
						SavePlayerVehicle1 	(vOwner);
						SavePlayerVehicle2 	(vOwner);
						SavePlayerVehicle3 	(vOwner);
						pc_cmd_mechanikas(playerid);
					}

					case 3:
					{
						new Float: V_Health; GetVehicleHealth(vehicleid, V_Health);

						if(GetPlayerMoneyA(playerid) < 1000)
						{
							SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
							pc_cmd_mechanikas(playerid);

							return 1;
						}

						if(!VehicleInfo[vehicleid][vNupirkta])
						{
							SendClientMessage(playerid, -1, "{ffffff} Ðiai tr. priemonei dujø árangos ámontuoti negalite!");
							pc_cmd_mechanikas(playerid);

							return 1;
						}

						new vOwner = GetPlayeridMid(VehicleInfo[vehicleid][vSavininkas]);

						if(VehicleInfo[vehicleid][vDujos])
						{
							SendClientMessage(playerid, -1, "{ffffff} Ðiai tr. priemonei dujø áranga jau ámontuota!");
							pc_cmd_mechanikas(playerid);

							return 1;
						}

						if(VehicleInfo[vehicleid][vKuroTipas] == DYZELIS)
						{
							SendClientMessage(playerid, -1, "{ffffff} Dyzeliniams varikliams dujø árangos ámontuoti negalima!");
							pc_cmd_mechanikas(playerid);

							return 1;
						}

						if(IsAMoto(vehicleid))
						{
							SendClientMessage(playerid, -1, "{ffffff} Ðiai tr. priemonei dujø árangos ámontuoti negalite!");
							pc_cmd_mechanikas(playerid);

							return 1;
						}

						VehicleInfo[vehicleid][vDujos] 			= true;
						VehicleInfo[vehicleid][vDujuBakas]		= 50.0 + randomfloat(100.0);
						VehicleInfo[vehicleid][vDujuLikutis] 	= 0.0;

						GivePlayerMoneyA 	(playerid, -1000);
						SendClientMessage 	(playerid, -1, "{ffffff} Dujø áranga sëkmingai ámontuota á tr. priemonæ!");
						SavePlayerVehicle1 	(vOwner);
						SavePlayerVehicle2 	(vOwner);
						SavePlayerVehicle3 	(vOwner);
						pc_cmd_mechanikas(playerid);
					}

					case 4: pc_cmd_mechanikas(playerid);

					case 5:
					{
						if(VehicleInfo[vehicleid][vNupirkta])
						{
							SendClientMessage(playerid, -1, "{ffffff} Ðios tr. priemonës sunaikinti negalite!");
							pc_cmd_mechanikas(playerid);

							return 1;
						}

						ac_SetVehicleToRespawn (vehicleid);
						pc_cmd_mechanikas(playerid);
					}
				}
			}
		}

		case MechDialog:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid), String[600];

				switch(listitem)
				{
					case 0:
					{
						static color_list[3072];
					    color_list[0] = EOS;

					    for (new colorid; colorid != sizeof gVehicleColors; colorid++)
					    {
					        format(color_list, sizeof color_list, "%s{%06x}%03d%s", color_list, gVehicleColors[colorid] >>> 8, colorid, !((colorid + 1) % 16) ? ("\n") : (" "));
					    }

					    ShowPlayerDialogEx(playerid, MechColorDialog, DIALOG_STYLE_MSGBOX, "Spalvø kodai (ID)", color_list, "Atgal", "");
					}

					case 1: // daþyti
					{
						ShowPlayerDialogEx(playerid, 1046, DIALOG_STYLE_INPUT,
						"Transp. priemonës daþymas",
						"{ffffff}Norint perdaþyti transporto priemonæ reikia áraðyti dviejø spalvø kodus. Pvz: 0 0 - Juoda. Raðymo pavyzdys: 0 0\n \n\t{FFAF00}ÁSPËJIMAS: Spalvø kodai turi bûti tarp 0 ir 255",
						"Daþyti", "Atgal");
					}

					case 2: // ratai
					{
						if(IsAMoto(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Motociklams ratø keisti negalima!");

						ShowPlayerDialogEx(playerid, 6001, DIALOG_STYLE_LIST, "Keisti transporto ratus", "Shadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic", "Keisti", "Atgal");
					}

					case 3: // tune
					{
						if(IsAMoto(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Motociklø tuninguoti negalima!");

						strcat(String, "Pasirinkimas\tKaina\n");
						strcat(String, "1. Paint Job\t{FFAF00}$700\n");
						strcat(String, "2. Slenksèiai\t{FFAF00}$600\n");
						strcat(String, "3. Priekinis bamperis\t{FFAF00}$1,000\n");
						strcat(String, "4. Galinis bamperis\t{FFAF00}$1,000\n");
						strcat(String, "5. Spoileris\t{FFAF00}$2,000\n");
						strcat(String, "6. Iðmetimas\t{FFAF00}$1,500\n");
						strcat(String, "7. Stogas\t{FFAF00}$700\n");
						strcat(String, "8. Hydraulika\t{FFAF00}$3,000\n");
						strcat(String, "9. Nitro\t{FFAF00}$500 {ffffff}- {FFAF00}$2,500");

						ShowPlayerDialogEx(playerid, MechTuneDialog, DIALOG_STYLE_TABLIST_HEADERS, "Tuninguoti transportà", String, "Pasirinkti", "Atgal");
					}

					case 4: // nuimti tune
					{
						if(IsAMoto(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Nuimti tuningà motociklams negalima!");

						if(GetPlayerMoneyA(playerid) < 1500)
						{
							SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

							pc_cmd_tune(playerid);

							return 1;
						}

						GivePlayerMoneyA (playerid, -1500);
						pc_cmd_tune(playerid);

						for(new tune = 1000; tune < 1193; tune ++)
						{
							RemoveVehicleComponent(vehicleid, tune);
						}

						ChangeVehiclePaintjob(vehicleid, 3);

						if(WhoIsDriver(vehicleid) != playerid) PlaySound(WhoIsDriver(vehicleid), 1133);
						PlaySound(playerid, 1133);
					}
				}
			}
		}

		case NitroDialog:
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(GetPlayerMoneyA(playerid) < 500)
						{
							SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

							OnDialogResponse(playerid, MechDialog, true, 3, "");

							return 1;
						}

						GivePlayerMoneyA 	(playerid, -500);
						AddVehicleComponent (vehicleid, 1009);
						OnDialogResponse 	(playerid, MechDialog, true, 3, "");
						if(WhoIsDriver(vehicleid) != playerid) PlaySound(WhoIsDriver(vehicleid), 1133);
						PlaySound(playerid, 1133);
					}

					case 1:
					{
						if(GetPlayerMoneyA(playerid) < 1250)
						{
							SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

							OnDialogResponse(playerid, MechDialog, true, 3, "");

							return 1;
						}

						GivePlayerMoneyA 	(playerid, -1250);
						AddVehicleComponent (vehicleid, 1008);
						OnDialogResponse 	(playerid, MechDialog, true, 3, "");
						if(WhoIsDriver(vehicleid) != playerid) PlaySound(WhoIsDriver(vehicleid), 1133);
						PlaySound(playerid, 1133);
					}

					case 2:
					{
						if(GetPlayerMoneyA(playerid) < 2500)
						{
							SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

							OnDialogResponse(playerid, MechDialog, true, 3, "");

							return 1;
						}

						GivePlayerMoneyA 	(playerid, -2500);
						AddVehicleComponent (vehicleid, 1010);
						OnDialogResponse 	(playerid, MechDialog, true, 3, "");
						if(WhoIsDriver(vehicleid) != playerid) PlaySound(WhoIsDriver(vehicleid), 1133);
						PlaySound(playerid, 1133);
					}
				}
			}
		}

		case MechTuneDialog:
		{
			new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid), String[128];

			if(response)
			{
				switch(listitem)
				{
					case 0: // paintjobai
					{
						switch(modelid)
						{
							case 483:
							{
								strcat(String, "Paintjob 1");
							}

							case 575:
							{
								strcat(String, "Paintjob 1\n");
								strcat(String, "Paintjob 2");
							}

							case 534..536, 558..562, 565, 567, 576:
							{
								strcat(String, "Paintjob 1\n");
								strcat(String, "Paintjob 2\n");
								strcat(String, "Paintjob 3");
							}

							default:
							{
								SendClientMessage(playerid, -1, "{ffffff} Ðiam transportui tai daryti negalite!");

								OnDialogResponse(playerid, MechDialog, true, 3, "");

								return 1;
							}
						}

						ShowPlayerDialogEx(playerid, PaintjobDialog, DIALOG_STYLE_LIST, "Paint Job", String, "Pasirinkti", "Atgal");
					}

					case 1:
					{
						switch(modelid)
						{
							case 558, 559, 560, 561, 562, 565: // Sultan, Elegy and etc..
							{
								strcat(String, "Alien\n");
								strcat(String, "X-Flow");
							}

							case 575: // Broadway
							{
								strcat(String, "Chrome");
							}

							case 534: // Remington
							{
								strcat(String, "Chrome Flames\n");
								strcat(String, "Chrome Arches");
							}

							case 536, 567, 576: // Blade, Savanna, Tornado
							{
								strcat(String, "Chrome Strip");
							}

							case 535: // Slamvan
							{
								strcat(String, "Chrome Trim\n");
								strcat(String, "Wheelcovers");
							}

							default:
							{
								SendClientMessage(playerid, -1, "{ffffff} Ðiam transportui tai daryti negalite!");

								OnDialogResponse(playerid, MechDialog, true, 3, "");

								return 1;
							}
						}

						ShowPlayerDialogEx(playerid, SideskirtsDialog, DIALOG_STYLE_LIST, "Slenksèiai", String, "Pasirinkti", "Atgal");
					}

					case 2: // Priekinis bamperis
					{
						switch(modelid)
						{
							case 565, 561, 559, 558, 560, 562:
							{
								strcat(String, "Alien\n");
								strcat(String, "X-Flow");
							}

							case 535: // Slamvan
							{
								strcat(String, "Chrome");
							}

							case 575, 534: // Broadway, Remington, Savanna, Tornado, Blade
							{
								strcat(String, "Chrome\n");
								strcat(String, "Slamin");
							}

							default:
							{
								SendClientMessage(playerid, -1, "{ffffff} Ðiam transportui tai daryti negalite!");

								OnDialogResponse(playerid, MechDialog, true, 3, "");

								return 1;
							}
						}

						ShowPlayerDialogEx(playerid, PriekinisBamperisDialog, DIALOG_STYLE_LIST, "Priekinis bamperis", String, "Pasirinkti", "Atgal");
					}

					case 3: // Galinis bamperis
					{
						switch(modelid)
						{
							case 565, 561, 559, 558, 560, 562:
							{
								strcat(String, "Alien\n");
								strcat(String, "X-Flow");
							}

							case 575, 534: // Broadway, Remington, Savanna, Tornado, Blade
							{
								strcat(String, "Chrome\n");
								strcat(String, "Slamin");
							}

							default:
							{
								SendClientMessage(playerid, -1, "{ffffff} Ðiam transportui tai daryti negalite!");

								OnDialogResponse(playerid, MechDialog, true, 3, "");

								return 1;
							}
						}

						ShowPlayerDialogEx(playerid, GalinisBamperisDialog, DIALOG_STYLE_LIST, "Galinis bamperis", String, "Pasirinkti", "Atgal");
					}

					case 4: // Spoileris
					{
						switch(modelid)
						{
							case 565, 561, 559, 558, 560, 562:
							{
								strcat(String, "Alien\n");
								strcat(String, "X-Flow");
							}

							default:
							{
								SendClientMessage(playerid, -1, "{ffffff} Ðiam transportui tai daryti negalite!");

								OnDialogResponse(playerid, MechDialog, true, 3, "");

								return 1;
							}
						}

						ShowPlayerDialogEx(playerid, SpoilerisDialog, DIALOG_STYLE_LIST, "Spoileris", String, "Pasirinkti", "Atgal");
					}

					case 5: // Iðmetimas
					{
						switch(modelid)
						{
							case 565, 561, 559, 558, 560, 562:
							{
								strcat(String, "Alien\n");
								strcat(String, "X-Flow");
							}

							case 575, 536, 535, 534, 567, 576: // Broadway, 
							{
								strcat(String, "Chrome\n");
								strcat(String, "Slamin");
							}

							default:
							{
								SendClientMessage(playerid, -1, "{ffffff} Ðiam transportui tai daryti negalite!");

								OnDialogResponse(playerid, MechDialog, true, 3, "");

								return 1;
							}
						}

						ShowPlayerDialogEx(playerid, IsmetimasDialog, DIALOG_STYLE_LIST, "Iðmetimas", String, "Pasirinkti", "Atgal");
					}

					case 6: // Stogas
					{
						switch(modelid)
						{
							case 565, 561, 559, 558, 560, 562:
							{
								strcat(String, "Alien\n");
								strcat(String, "X-Flow");
							}

							case 567: // Savanna
							{
								strcat(String, "Hardtop\n");
								strcat(String, "Softtop");
							}

							case 536: // Blade
							{
								strcat(String, "Hardtop\n");
								strcat(String, "Covertible");
							}

							default:
							{
								SendClientMessage(playerid, -1, "{ffffff} Ðiam transportui tai daryti negalite!");

								OnDialogResponse(playerid, MechDialog, true, 3, "");

								return 1;
							}
						}

						ShowPlayerDialogEx(playerid, StogasDialog, DIALOG_STYLE_LIST, "Stogas", String, "Pasirinkti", "Atgal");
					}

					case 7: // Hydraulika
					{
						if(GetPlayerMoneyA(playerid) < 3000)
						{
							SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

							OnDialogResponse(playerid, MechDialog, true, 3, "");

							return 1;
						}

						GivePlayerMoneyA 	(playerid, -3000);
						AddVehicleComponent (vehicleid, 1087);	
						OnDialogResponse 	(playerid, MechDialog, true, 3, "");
						if(WhoIsDriver(vehicleid) != playerid) PlaySound(WhoIsDriver(vehicleid), 1133);
						PlaySound(playerid, 1133);	
					}

					case 8: // Nitro
					{
						strcat(String, "Pasirinkimas\tKaina\n");
						strcat(String, "2x Nitro\t{FFAF00}$500\n");
						strcat(String, "5x Nitro\t{FFAF00}$1,250\n");
						strcat(String, "10x Nitro\t{FFAF00}$2,500");

						ShowPlayerDialogEx(playerid, NitroDialog, DIALOG_STYLE_TABLIST_HEADERS, "Nitro", String, "Pasirinkti", "Atgal");
					}
				}
			}
			else
			{
				pc_cmd_tune(playerid);
			}
		}

		case StogasDialog:
		{
			new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);

			if(response)
			{
				if(GetPlayerMoneyA(playerid) < 700)
				{
					SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					OnDialogResponse(playerid, MechDialog, true, 3, "");

					return 1;
				}

				GivePlayerMoneyA(playerid, -700);
				OnDialogResponse(playerid, MechDialog, true, 3, "");
				if(WhoIsDriver(vehicleid) != playerid) PlaySound(WhoIsDriver(vehicleid), 1133);
				PlaySound(playerid, 1133);

				switch(listitem)
				{
					case 0: // Alien
					{
						switch(modelid)
						{
							case 558: // Uranus
							{
								AddVehicleComponent(vehicleid, 1088);
							}

							case 559: // Jester
							{
								AddVehicleComponent(vehicleid, 1067);
							}

							case 560: // Sultan
							{
								AddVehicleComponent(vehicleid, 1032);
							}

							case 561: // Stratum
							{
								AddVehicleComponent(vehicleid, 1055);
							}

							case 562: // Elegy
							{
								AddVehicleComponent(vehicleid, 1038);
							}

							case 565: // Flash
							{
								AddVehicleComponent(vehicleid, 1054);
							}

							case 536: // Blade
							{
								AddVehicleComponent(vehicleid, 1128);
							}

							case 567: // Savanna
							{
								AddVehicleComponent(vehicleid, 1130);
							}
						}
					}

					case 1: // X-Flow
					{
						switch(modelid)
						{
							case 558: // Uranus
							{
								AddVehicleComponent(vehicleid, 1091);
							}

							case 559: // Jester
							{
								AddVehicleComponent(vehicleid, 1068);
							}

							case 560: // Sultan
							{
								AddVehicleComponent(vehicleid, 1033);
							}

							case 561: // Stratum
							{
								AddVehicleComponent(vehicleid, 1061);
							}

							case 562: // Elegy
							{
								AddVehicleComponent(vehicleid, 1035);
							}

							case 565: // Flash
							{
								AddVehicleComponent(vehicleid, 1053);
							}

							case 536: // Blade
							{
								AddVehicleComponent(vehicleid, 1103);
							}

							case 567: // Savanna
							{
								AddVehicleComponent(vehicleid, 1131);
							}
						}
					}
				}
			}
			else
			{
				OnDialogResponse(playerid, MechDialog, true, 3, "");
			}
		}

		case IsmetimasDialog:
		{
			new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);

			if(response)
			{
				if(GetPlayerMoneyA(playerid) < 1500)
				{
					SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					OnDialogResponse(playerid, MechDialog, true, 3, "");

					return 1;
				}

				GivePlayerMoneyA(playerid, -1500);
				OnDialogResponse(playerid, MechDialog, true, 3, "");
				if(WhoIsDriver(vehicleid) != playerid) PlaySound(WhoIsDriver(vehicleid), 1133);
				PlaySound(playerid, 1133);

				switch(listitem)
				{
					case 0: // Alien
					{
						switch(modelid)
						{
							case 558: // Uranus
							{
								AddVehicleComponent(vehicleid, 1092);
							}

							case 559: // Jester
							{
								AddVehicleComponent(vehicleid, 1065);
							}

							case 560: // Sultan
							{
								AddVehicleComponent(vehicleid, 1028);
							}

							case 561: // Stratum
							{
								AddVehicleComponent(vehicleid, 1064);
							}

							case 562: // Elegy
							{
								AddVehicleComponent(vehicleid, 1034);
							}

							case 565: // Flash
							{
								AddVehicleComponent(vehicleid, 1046);
							}

							case 575: // Broadway
							{
								AddVehicleComponent(vehicleid, 1044);
							}

							case 534: // Remington
							{
								AddVehicleComponent(vehicleid, 1126);
							}

							case 536: // Blade
							{
								AddVehicleComponent(vehicleid, 1104);
							}

							case 567: // Savanna
							{
								AddVehicleComponent(vehicleid, 1129);
							}

							case 576: // Tornado
							{
								AddVehicleComponent(vehicleid, 1136);
							}

							case 535: // Slamvan
							{
								AddVehicleComponent(vehicleid, 1113);
							}
						}
					}

					case 1: // X-Flow
					{
						switch(modelid)
						{
							case 558: // Uranus
							{
								AddVehicleComponent(vehicleid, 1089);
							}

							case 559: // Jester
							{
								AddVehicleComponent(vehicleid, 1066);
							}

							case 560: // Sultan
							{
								AddVehicleComponent(vehicleid, 1029);
							}

							case 561: // Stratum
							{
								AddVehicleComponent(vehicleid, 1059);
							}

							case 562: // Elegy
							{
								AddVehicleComponent(vehicleid, 1037);
							}

							case 565: // Flash
							{
								AddVehicleComponent(vehicleid, 1045);
							}

							case 575: // Broadway
							{
								AddVehicleComponent(vehicleid, 1043);
							}

							case 534: // Remington
							{
								AddVehicleComponent(vehicleid, 1127);
							}

							case 536: // Blade
							{
								AddVehicleComponent(vehicleid, 1105);
							}

							case 567: // Savanna
							{
								AddVehicleComponent(vehicleid, 1132);
							}

							case 576: // Tornado
							{
								AddVehicleComponent(vehicleid, 1135);
							}

							case 535: // Slamvan
							{
								AddVehicleComponent(vehicleid, 1114);
							}
						}
					}
				}
			}
			else
			{
				OnDialogResponse(playerid, MechDialog, true, 3, "");
			}
		}

		case SpoilerisDialog:
		{
			new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);

			if(response)
			{
				if(GetPlayerMoneyA(playerid) < 2000)
				{
					SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					OnDialogResponse(playerid, MechDialog, true, 3, "");

					return 1;
				}

				GivePlayerMoneyA(playerid, -2000);
				OnDialogResponse(playerid, MechDialog, true, 3, "");
				if(WhoIsDriver(vehicleid) != playerid) PlaySound(WhoIsDriver(vehicleid), 1133);
				PlaySound(playerid, 1133);

				switch(listitem)
				{
					case 0: // Alien
					{
						switch(modelid)
						{
							case 558: // Uranus
							{
								AddVehicleComponent(vehicleid, 1164);
							}

							case 559: // Jester
							{
								AddVehicleComponent(vehicleid, 1162);
							}

							case 560: // Sultan
							{
								AddVehicleComponent(vehicleid, 1138);
							}

							case 561: // Stratum
							{
								AddVehicleComponent(vehicleid, 1058);
							}

							case 562: // Elegy
							{
								AddVehicleComponent(vehicleid, 1147);
							}

							case 565: // Flash
							{
								AddVehicleComponent(vehicleid, 1049);
							}
						}
					}

					case 1: // X-Flow
					{
						switch(modelid)
						{
							case 558: // Uranus
							{
								AddVehicleComponent(vehicleid, 1163);
							}

							case 559: // Jester
							{
								AddVehicleComponent(vehicleid, 1158);
							}

							case 560: // Sultan
							{
								AddVehicleComponent(vehicleid, 1139);
							}

							case 561: // Stratum
							{
								AddVehicleComponent(vehicleid, 1060);
							}

							case 562: // Elegy
							{
								AddVehicleComponent(vehicleid, 1146);
							}

							case 565: // Flash
							{
								AddVehicleComponent(vehicleid, 1050);
							}
						}
					}
				}
			}
			else
			{
				OnDialogResponse(playerid, MechDialog, true, 3, "");
			}
		}

		case GalinisBamperisDialog:
		{
			new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);

			if(response)
			{
				if(GetPlayerMoneyA(playerid) < 1000)
				{
					SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					OnDialogResponse(playerid, MechDialog, true, 3, "");

					return 1;
				}

				GivePlayerMoneyA(playerid, -1000);
				OnDialogResponse(playerid, MechDialog, true, 3, "");
				if(WhoIsDriver(vehicleid) != playerid) PlaySound(WhoIsDriver(vehicleid), 1133);
				PlaySound(playerid, 1133);

				switch(listitem)
				{
					case 0: // Alien
					{
						switch(modelid)
						{
							case 558: // Uranus
							{
								AddVehicleComponent(vehicleid, 1168);
							}

							case 559: // Jester
							{
								AddVehicleComponent(vehicleid, 1159);
							}

							case 560: // Sultan
							{
								AddVehicleComponent(vehicleid, 1141);
							}

							case 561: // Stratum
							{
								AddVehicleComponent(vehicleid, 1154);
							}

							case 562: // Elegy
							{
								AddVehicleComponent(vehicleid, 1149);
							}

							case 565: // Flash
							{
								AddVehicleComponent(vehicleid, 1150);
							}

							case 575: // Broadway
							{
								AddVehicleComponent(vehicleid, 1176);
							}

							case 534: // Remington
							{
								AddVehicleComponent(vehicleid, 1180);
							}

							case 536: // Blade
							{
								AddVehicleComponent(vehicleid, 1184);
							}

							case 567: // Savanna
							{
								AddVehicleComponent(vehicleid, 1187);
							}

							case 576: // Tornado
							{
								AddVehicleComponent(vehicleid, 1192);
							}
						}
					}

					case 1: // X-Flow, Chrome Arches, Wheelcovers
					{
						switch(modelid)
						{
							case 558: // Uranus
							{
								AddVehicleComponent(vehicleid, 1167);
							}

							case 559: // Jester
							{
								AddVehicleComponent(vehicleid, 1161);
							}

							case 560: // Sultan
							{
								AddVehicleComponent(vehicleid, 1140);
							}

							case 561: // Stratum
							{
								AddVehicleComponent(vehicleid, 1156);
							}

							case 562: // Elegy
							{
								AddVehicleComponent(vehicleid, 1148);
							}

							case 565: // Flash
							{
								AddVehicleComponent(vehicleid, 1151);
							}

							case 575: // Broadway
							{
								AddVehicleComponent(vehicleid, 1177);
							}

							case 534: // Remington
							{
								AddVehicleComponent(vehicleid, 1178);
							}

							case 536: // Blade
							{
								AddVehicleComponent(vehicleid, 1183);
							}

							case 567: // Savanna
							{
								AddVehicleComponent(vehicleid, 1186);
							}

							case 576: // Tornado
							{
								AddVehicleComponent(vehicleid, 1193);
							}
						}
					}
				}
			}
			else
			{
				OnDialogResponse(playerid, MechDialog, true, 3, "");
			}
		}

		case PriekinisBamperisDialog:
		{
			new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);

			if(response)
			{
				if(GetPlayerMoneyA(playerid) < 1000)
				{
					SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					OnDialogResponse(playerid, MechDialog, true, 3, "");

					return 1;
				}

				GivePlayerMoneyA(playerid, -1000);
				OnDialogResponse(playerid, MechDialog, true, 3, "");
				if(WhoIsDriver(vehicleid) != playerid) PlaySound(WhoIsDriver(vehicleid), 1133);
				PlaySound(playerid, 1133);

				switch(listitem)
				{
					case 0: // Alien
					{
						switch(modelid)
						{
							case 558: // Uranus
							{
								AddVehicleComponent(vehicleid, 1166);
							}

							case 559: // Jester
							{
								AddVehicleComponent(vehicleid, 1160);
							}

							case 560: // Sultan
							{
								AddVehicleComponent(vehicleid, 1169);
							}

							case 561: // Stratum
							{
								AddVehicleComponent(vehicleid, 1155);
							}

							case 562: // Elegy
							{
								AddVehicleComponent(vehicleid, 1171);
							}

							case 565: // Flash
							{
								AddVehicleComponent(vehicleid, 1153);
							}

							case 575: // Broadway
							{
								AddVehicleComponent(vehicleid, 1174);
							}

							case 534: // Remington
							{
								AddVehicleComponent(vehicleid, 1101);
							}

							case 536: // Blade
							{
								AddVehicleComponent(vehicleid, 1182);
							}

							case 567: // Savanna
							{
								AddVehicleComponent(vehicleid, 1189);
							}

							case 576: // Tornado
							{
								AddVehicleComponent(vehicleid, 1191);
							}

							case 535: // Slamvan
							{
								AddVehicleComponent(vehicleid, 1117);
							}
						}
					}

					case 1: // X-Flow, Chrome Arches, Wheelcovers
					{
						switch(modelid)
						{
							case 558: // Uranus
							{
								AddVehicleComponent(vehicleid, 1165);
							}

							case 559: // Jester
							{
								AddVehicleComponent(vehicleid, 1173);
							}

							case 560: // Sultan
							{
								AddVehicleComponent(vehicleid, 1170);
							}

							case 561: // Stratum
							{
								AddVehicleComponent(vehicleid, 1157);
							}

							case 562: // Elegy
							{
								AddVehicleComponent(vehicleid, 1172);
							}

							case 565: // Flash
							{
								AddVehicleComponent(vehicleid, 1152);
							}

							case 575: // Broadway
							{
								AddVehicleComponent(vehicleid, 1175);
							}

							case 534: // Remington
							{
								AddVehicleComponent(vehicleid, 1185);
							}

							case 536: // Blade
							{
								AddVehicleComponent(vehicleid, 1181);
							}

							case 567: // Savanna
							{
								AddVehicleComponent(vehicleid, 1188);
							}

							case 576: // Tornado
							{
								AddVehicleComponent(vehicleid, 1190);
							}
						}
					}
				}
			}
			else
			{
				OnDialogResponse(playerid, MechDialog, true, 3, "");
			}
		}

		case SideskirtsDialog:
		{
			new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);

			if(response)
			{
				if(GetPlayerMoneyA(playerid) < 600)
				{
					SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					OnDialogResponse(playerid, MechDialog, true, 3, "");

					return 1;
				}

				GivePlayerMoneyA(playerid, -600);
				OnDialogResponse(playerid, MechDialog, true, 3, "");
				if(WhoIsDriver(vehicleid) != playerid) PlaySound(WhoIsDriver(vehicleid), 1133);
				PlaySound(playerid, 1133);

				switch(listitem)
				{
					case 0: // Alien, Chrome, Chrome Flames, Chrome Strip, Chrome Trim
					{
						switch(modelid)
						{
							case 558: // Uranus
							{
								AddVehicleComponent(vehicleid, 1090);
								AddVehicleComponent(vehicleid, 1094);
							}

							case 559: // Jester
							{
								AddVehicleComponent(vehicleid, 1069);
								AddVehicleComponent(vehicleid, 1071);
							}

							case 560: // Sultan
							{
								AddVehicleComponent(vehicleid, 1026);
								AddVehicleComponent(vehicleid, 1027);
							}

							case 561: // Stratum
							{
								AddVehicleComponent(vehicleid, 1056);
								AddVehicleComponent(vehicleid, 1062);
							}

							case 562: // Elegy
							{
								AddVehicleComponent(vehicleid, 1036);
								AddVehicleComponent(vehicleid, 1040);
							}

							case 565: // Flash
							{
								AddVehicleComponent(vehicleid, 1047);
								AddVehicleComponent(vehicleid, 1050);
							}

							case 575: // Broadway
							{
								AddVehicleComponent(vehicleid, 1099);
								AddVehicleComponent(vehicleid, 1042);
							}

							case 534: // Remington
							{
								AddVehicleComponent(vehicleid, 1101);
								AddVehicleComponent(vehicleid, 1122);
							}

							case 536: // Blade
							{
								AddVehicleComponent(vehicleid, 1107);
								AddVehicleComponent(vehicleid, 1108);
							}

							case 567: // Savanna
							{
								AddVehicleComponent(vehicleid, 1133);
								AddVehicleComponent(vehicleid, 1102);
							}

							case 576: // Tornado
							{
								AddVehicleComponent(vehicleid, 1134);
								AddVehicleComponent(vehicleid, 1137);
							}

							case 535: // Slamvan
							{
								AddVehicleComponent(vehicleid, 1118);
								AddVehicleComponent(vehicleid, 1120);
							}
						}
					}

					case 1: // X-Flow, Chrome Arches, Wheelcovers
					{
						switch(modelid)
						{
							case 558: // Uranus
							{
								AddVehicleComponent(vehicleid, 1093);
								AddVehicleComponent(vehicleid, 1095);
							}

							case 559: // Jester
							{
								AddVehicleComponent(vehicleid, 1070);
								AddVehicleComponent(vehicleid, 1072);
							}

							case 560: // Sultan
							{
								AddVehicleComponent(vehicleid, 1030);
								AddVehicleComponent(vehicleid, 1031);
							}

							case 561: // Stratum
							{
								AddVehicleComponent(vehicleid, 1057);
								AddVehicleComponent(vehicleid, 1063);
							}

							case 562: // Elegy
							{
								AddVehicleComponent(vehicleid, 1039);
								AddVehicleComponent(vehicleid, 1041);
							}

							case 565: // Flash
							{
								AddVehicleComponent(vehicleid, 1048);
								AddVehicleComponent(vehicleid, 1052);
							}

							case 534: // Remington
							{
								AddVehicleComponent(vehicleid, 1124);
								AddVehicleComponent(vehicleid, 1106);
							}

							case 535: // Slamvan
							{
								AddVehicleComponent(vehicleid, 1119);
								AddVehicleComponent(vehicleid, 1121);
							}
						}
					}
				}
			}
			else
			{
				OnDialogResponse(playerid, MechDialog, true, 3, "");
			}
		}

		case PaintjobDialog:
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			if(response)
			{
				if(GetPlayerMoneyA(playerid) < 700)
				{
					SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					OnDialogResponse(playerid, MechDialog, true, 3, "");

					return 1;
				}

				GivePlayerMoneyA(playerid, -700);
				OnDialogResponse(playerid, MechDialog, true, 3, "");
				if(WhoIsDriver(vehicleid) != playerid) PlaySound(WhoIsDriver(vehicleid), 1134);
				PlaySound(playerid, 1134);

				switch(listitem)
				{
					case 0: ChangeVehiclePaintjob(vehicleid, 0);
					case 1: ChangeVehiclePaintjob(vehicleid, 1);
					case 2: ChangeVehiclePaintjob(vehicleid, 2);
				}
			}
			else
			{
		 		OnDialogResponse(playerid, MechDialog, true, 3, "");
			}
		}

		case MechColorDialog:
		{
			pc_cmd_tune(playerid);
		}

		case 8965:
		{
			if(response)
			{
				new giveplayerid = ChoosedPlayer[playerid], String[216];

				if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

				if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Sau reputacijos taðkø uþsidëti negali!");

				if(PI[playerid][DaveRepTaska] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Reputacijos taðkus galima dëti tik kas minutæ!");

				PI[playerid][DaveRepTaska] = gettime() + 60;

				PI[giveplayerid][KiekTuriRepTasku] ++;

				format(String, sizeof(String), "{ffffff} Sëkmingai uþdëjote +rep þaidëjui {FFAF00}%s{FFFFFF}! Dabar jis turi: {FFAF00}%i{FFFFFF}.", GetPlayerNameEx(giveplayerid), PI[giveplayerid][KiekTuriRepTasku]);
				SendClientMessage(playerid, -1, String);

				format(String, sizeof(String), "{ffffff} Gavote +rep ið þaidëjo {FFAF00}%s{FFFFFF}! Dabar turite: {FFAF00}%i{FFFFFF} +rep.", GetPlayerNameEx(playerid), PI[giveplayerid][KiekTuriRepTasku]);
				SendClientMessage(giveplayerid, -1, String);
			}
		}

		case GaujuValdymoDialog:
		{	
			new String[200];

			if(response)
			{
				KokiaGaujaValdo[playerid] = listitem + 1;

				format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[KokiaGaujaValdo[playerid]][gTitle]);

				ShowPlayerDialogEx(playerid, GaujuKeitimoDialog, DIALOG_STYLE_LIST, String,
				"1. Keisti gaujos pavadinimà\n2. Iðmesti lyderá\n3. Paskirti lyderá\n4. Gaujos nariai", "Pasirinkti", "Atgal");
			}
		}

		case GaujuKeitimoDialog:
		{
			new Query[200], String[1000], Stringas[1000], Gang = KokiaGaujaValdo[playerid];

			if(response)
			{
				switch(listitem)
				{
					case 0: // Pakeisti pavadinimà
					{
						format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);
						format(Stringas, sizeof(Stringas), "{ffffff}Áraðykite naujà pavadinimà {FFAF00}%s{ffffff} gaujai:", GangInfo[Gang][gTitle]);

						ShowPlayerDialogEx(playerid, KeistiPavadinima, DIALOG_STYLE_INPUT, String, Stringas, "Keisti", "Atgal");
					}

					case 1: // iðmesti lyderá
					{
						if(!strcmp("Nera", GangInfo[Gang][gLeader], true))
						{
							SendClientMessage(playerid, -1, "{ffffff} Gauja neturi lyderio!");

							format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);

							ShowPlayerDialogEx(playerid, GaujuKeitimoDialog, DIALOG_STYLE_LIST, String,
							"1. Keisti gaujos pavadinimà\n2. Iðmesti lyderá\n3. Paskirti lyderá\n4. Gaujos nariai", "Pasirinkti", "Atgal");

							return 1;
						}

						new LeaderName[MAX_PLAYER_NAME], resultline[50];

						format(Query, sizeof(Query), "SELECT `gLeader` FROM `gaujuinfo` WHERE `ID` = '%d'", Gang);
						mysql_query(Query);

						mysql_store_result();

						while(mysql_fetch_row_format(resultline))
						{
							sscanf(resultline, "p<|>s[24]", LeaderName);
						}

						format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);
						format(Stringas, sizeof(Stringas), "{ffffff}Ar tikrai norite iðmesti þaidëjà {FFAF00}%s{ffffff} ið gaujos {FFAF00}%s{ffffff} lyderio posto?", LeaderName, GangInfo[Gang][gTitle]);

						ShowPlayerDialogEx(playerid, IsmestiLyderi, DIALOG_STYLE_MSGBOX, String, Stringas, "Iðmesti", "Atgal");
					}

					case 2: // Paskirti lyderá
					{
						if(strcmp("Nera", GangInfo[Gang][gLeader], true))
						{
							SendClientMessage(playerid, -1, "{ffffff} Gauja jau turi lyderá!");

							format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);

							ShowPlayerDialogEx(playerid, GaujuKeitimoDialog, DIALOG_STYLE_LIST, String,
							"1. Keisti gaujos pavadinimà\n2. Iðmesti lyderá\n3. Paskirti lyderá\n4. Gaujos nariai", "Pasirinkti", "Atgal");

							return 1;
						}

						format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);
						format(Stringas, sizeof(Stringas), "{ffffff}Áraðykite naujo gaujos {FFAF00}%s{ffffff} lyderio Vardà_Pavardæ:", GangInfo[Gang][gTitle]);

						ShowPlayerDialogEx(playerid, PaskirtiLyderi, DIALOG_STYLE_INPUT, String, Stringas, "Paskirti", "Atgal");
					}

					case 3: // Gaujos nariai
					{
						new pName[MAX_PLAYER_NAME], pID = -1, GangCount, String1[128], IsConnected[64];

						if(!strcmp("Nera", GangInfo[Gang][gLeader], true))
						{
							SendClientMessage(playerid, -1, "{ffffff} Gauja neturi nariø!");

							format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);

							ShowPlayerDialogEx(playerid, GaujuKeitimoDialog, DIALOG_STYLE_LIST, String,
							"1. Keisti gaujos pavadinimà\n2. Iðmesti lyderá\n3. Paskirti lyderá\n4. Gaujos nariai", "Pasirinkti", "Atgal");

							return 1;
						}

						format(Query, sizeof(Query), "SELECT * FROM `players` WHERE `gMember` = '%d'", Gang);
						mysql_query(Query);

						mysql_store_result();

						strcat(String, "Vardas_Pavardë\tBûsena\n");

						if(mysql_num_rows() != 0)
						{
							while(mysql_retrieve_row())
							{
							    GangCount ++;

							    mysql_get_field("Vardas", pName);

							    pID = GetPlayeridMid(pName);

							    if(pID != INVALID_PLAYER_ID ) 	IsConnected = "{19F14F}ONLINE";
							    else 							IsConnected = "{FFAF00}OFFLINE";

							    format(Stringas, sizeof(Stringas), "{ffffff}%d. %s\t%s\n", GangCount, pName, IsConnected);
								strcat(String, Stringas);
							}
						}

						format(String1, sizeof(String1), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);
						ShowPlayerDialogEx(playerid, GaujosNariai, DIALOG_STYLE_TABLIST_HEADERS, String1, String, "Atgal", "");

						mysql_free_result();
					}
				}
			}
			else
			{
				pc_cmd_gaujos(playerid);
			}
		}

		case GaujosNariai:
		{
			new Gang = KokiaGaujaValdo[playerid], String[216];

			format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);

			ShowPlayerDialogEx(playerid, GaujuKeitimoDialog, DIALOG_STYLE_LIST, String,
			"1. Keisti gaujos pavadinimà\n2. Iðmesti lyderá\n3. Paskirti lyderá\n4. Gaujos nariai", "Pasirinkti", "Atgal");
		}

		case Uzstatas1:
		{
			new String[250];

			if(response)
			{
				new giveplayerid;

				if(sscanf(inputtext, "u", giveplayerid))
				{
					SendClientMessage(playerid, -1, "{ffffff} Kaþkas blogai ávesta!");

					ShowPlayerDialogEx(playerid, Uzstatas1, DIALOG_STYLE_INPUT, "Uþstato mokëjimas",
					"{ffffff}Áveskite þaidëjo vardà (arba ID) uþ kurá norite sumokëti iðpirkà:\n \nPavyzdys: Domka_Quattro", "Toliau", "Uþdaryti");

					return 1;
				}

				if(strfind(inputtext, "%") != -1)
				{
					SendClientMessage(playerid, -1, "{ffffff} Kaþkas blogai ávesta!");

					ShowPlayerDialogEx(playerid, Uzstatas1, DIALOG_STYLE_INPUT, "Uþstato mokëjimas",
					"{ffffff}Áveskite þaidëjo vardà (arba ID) uþ kurá norite sumokëti iðpirkà:\n \nPavyzdys: Domka_Quattro", "Toliau", "Uþdaryti");

					return 1;
				}

				if(giveplayerid == INVALID_PLAYER_ID)
				{
					SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

					ShowPlayerDialogEx(playerid, Uzstatas1, DIALOG_STYLE_INPUT, "Uþstato mokëjimas",
					"{ffffff}Áveskite þaidëjo vardà (arba ID) uþ kurá norite sumokëti iðpirkà:\n \nPavyzdys: Domka_Quattro", "Toliau", "Uþdaryti");

					return 1;
				}

				if(giveplayerid == playerid)
				{
					SendClientMessage(playerid, -1, "{ffffff} Savæs iðlaisvinti negalite!");

					ShowPlayerDialogEx(playerid, Uzstatas1, DIALOG_STYLE_INPUT, "Uþstato mokëjimas",
					"{ffffff}Áveskite þaidëjo vardà (arba ID) uþ kurá norite sumokëti iðpirkà:\n \nPavyzdys: Domka_Quattro", "Toliau", "Uþdaryti");

					return 1;
				}

				if(PI[giveplayerid][kalejimo_laikas] == 0)
				{
					SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nëra kalëjime!");

					ShowPlayerDialogEx(playerid, Uzstatas1, DIALOG_STYLE_INPUT, "Uþstato mokëjimas",
					"{ffffff}Áveskite þaidëjo vardà (arba ID) uþ kurá norite sumokëti iðpirkà:\n \nPavyzdys: Domka_Quattro", "Toliau", "Uþdaryti");

					return 1;
				}

				ChoosedPlayer[playerid] = giveplayerid;

				new uzstatas = PI[giveplayerid][kalejimo_laikas] * 25;

				format(String, sizeof(String), "{ffffff}Atsiþvelgiant á þaidëjo kalëjimo laikà, sistema apskaièiavo, kad uþstatas\n{ffffff}uþ þaidëjà {FFAF00}%s {ffffff}jums kainuos {FFAF00}$%s{ffffff}.\n\n{ffffff}Ar sutinkate mokëti?",
				GetPlayerNameEx(giveplayerid), konvertuoti_pinigus(uzstatas));

				ShowPlayerDialogEx(playerid, Uzstatas2, DIALOG_STYLE_MSGBOX, "Uþstato mokëjimas",
				String, "Mokëti", "Atgal");
			}
		}

		case Uzstatas2:
		{
			if(response)
			{
				new Kalinys = ChoosedPlayer[playerid], uzstatas = PI[Kalinys][kalejimo_laikas] * 25, String[216];

				if(GetPlayerMoneyA(playerid) < uzstatas) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

				if(Kalinys == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Kalinys atsijungë!");

				if(PI[Kalinys][kalejimo_laikas] == 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nëra kalëjime!");

				GivePlayerMoneyA(playerid, -uzstatas);
				UnjailPlayer 	(Kalinys);

				format(String, sizeof(String), "{ffffff} Sëkmingai sumokëjote uþstatà uþ þaidëjà {FFAF00}%s{ffffff}. Þaidëjas paleistas ið kalëjimo!", GetPlayerNameEx(Kalinys));
				SendClientMessage(playerid, -1, String);

				format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s{ffffff} sumokëjo uþstatà, kad paleisti jus ið kalëjimo!", GetPlayerNameEx(playerid));
				SendClientMessage(Kalinys, -1, String);
			}
			else
			{
				OnPlayerPickUpPickup(playerid, PickupsInfo[IspirkosMokejimas]);
			}
		}

		case PaskirtiLyderi:
		{
			new String[200], Stringas[300], Gang = KokiaGaujaValdo[playerid];

			if(response)
			{
				new giveplayerid;

				if(sscanf(inputtext, "u", giveplayerid))
				{
					SendClientMessage(playerid, -1, "{ffffff} Kaþkas blogai ávesta!");

					format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);
					format(Stringas, sizeof(Stringas), "{ffffff}Áraðykite naujo gaujos {FFAF00}%s{ffffff} lyderio Vardà_Pavardæ:", GangInfo[Gang][gTitle]);

					ShowPlayerDialogEx(playerid, PaskirtiLyderi, DIALOG_STYLE_INPUT, String, Stringas, "Paskirti", "Atgal");

					return 1;
				}

				if(strfind(inputtext, "%") != -1)
				{
					SendClientMessage(playerid, -1, "{ffffff} Kaþkas blogai ávesta!");

					format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);
					format(Stringas, sizeof(Stringas), "{ffffff}Áraðykite naujo gaujos {FFAF00}%s{ffffff} lyderio Vardà_Pavardæ:", GangInfo[Gang][gTitle]);

					ShowPlayerDialogEx(playerid, PaskirtiLyderi, DIALOG_STYLE_INPUT, String, Stringas, "Paskirti", "Atgal");

					return 1;
				}

				if(giveplayerid == INVALID_PLAYER_ID)
				{
					SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

					format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);
					format(Stringas, sizeof(Stringas), "{ffffff}Áraðykite naujo gaujos {FFAF00}%s{ffffff} lyderio Vardà_Pavardæ:", GangInfo[Gang][gTitle]);

					ShowPlayerDialogEx(playerid, PaskirtiLyderi, DIALOG_STYLE_INPUT, String, Stringas, "Paskirti", "Atgal");

					return 1;
				}

				/*if(giveplayerid == playerid)
				{
					SendClientMessage(playerid, -1, "{ffffff} Jus negalite bûti gaujos lyderiu!");

					format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);
					format(Stringas, sizeof(Stringas), "{ffffff}Áraðykite naujo gaujos {FFAF00}%s{ffffff} lyderio Vardà_Pavardæ:", GangInfo[Gang][gTitle]);

					ShowPlayerDialogEx(playerid, PaskirtiLyderi, DIALOG_STYLE_INPUT, String, Stringas, "Paskirti", "Atgal");

					return 1;
				}*/

				if(PI[giveplayerid][gMember] != -1)
				{
					SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra kitos gaujos narys!");

					format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);
					format(Stringas, sizeof(Stringas), "{ffffff}Áraðykite naujo gaujos {FFAF00}%s{ffffff} lyderio Vardà_Pavardæ:", GangInfo[Gang][gTitle]);

					ShowPlayerDialogEx(playerid, PaskirtiLyderi, DIALOG_STYLE_INPUT, String, Stringas, "Paskirti", "Atgal");

					return 1;
				}

				format(String, sizeof(String), "{ffffff} Gaujø priþiûrëtojas {FFAF00}%s {ffffff}paskyrë jus {FFAF00}%s{ffffff} gaujos lyderiu!", GetPlayerNameEx(playerid), GangInfo[Gang][gTitle]);
				SendClientMessage(giveplayerid, -1, String);

				format(String, sizeof(String), "{ffffff} Paskyrëte þaidëjà {FFAF00}%s {ffffff}gaujos {FFAF00}%s{ffffff} lyderiu!", GetPlayerNameEx(giveplayerid), GangInfo[Gang][gTitle]);
				SendClientMessage(playerid, -1, String);

				strdel(GangInfo[Gang][gLeader], 0,         						24);
				strcat(GangInfo[Gang][gLeader], GetPlayerNameEx(giveplayerid), 	24);

				PI[giveplayerid][gMember] = Gang;

				UpdateGangLabel(Gang);

				SaveGang(Gang);
			}
			else
			{
				format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);

				ShowPlayerDialogEx(playerid, GaujuKeitimoDialog, DIALOG_STYLE_LIST, String,
				"1. Keisti gaujos pavadinimà\n2. Iðmesti lyderá\n3. Paskirti lyderá\n4. Gaujos nariai", "Pasirinkti", "Atgal");
			}
		}

		case IsmestiLyderi:
		{
			new Query[200], String[200], Gang = KokiaGaujaValdo[playerid];

			if(response)
			{
				format(Query, sizeof(Query), "SELECT * FROM `players` WHERE `gMember` = '%d'", Gang);
			    mysql_query(Query);

				mysql_store_result();

				if(mysql_num_rows() != 0)
				{
				    while(mysql_retrieve_row())
				    {
				        format(Query, sizeof(Query), "UPDATE `players` SET `gMember` = '-1' WHERE `gMember` = '%d'", Gang);
				        mysql_query(Query);
				    }
				}

				mysql_free_result( );

				strdel(GangInfo[Gang][gLeader], 0,         	24);
				strcat(GangInfo[Gang][gLeader], "Nera", 	24);

				GangInfo[Gang][gChest] 		= 0;
				GangInfo[Gang][gPoints] 	= 0;
				GangInfo[Gang][Ginklai1]	= 0;
				GangInfo[Gang][Ginklai2]	= 0;
				GangInfo[Gang][Ginklai3]	= 0;
				GangInfo[Gang][Narkai1]		= 0;
				GangInfo[Gang][Narkai2]		= 0;
				GangInfo[Gang][Narkai3]		= 0;
				GangInfo[Gang][Narkai4]		= 0;
				GangInfo[Gang][gTele]		= false;
				GangInfo[Gang][gVirve]		= false;
				GangInfo[Gang][gIsodinti]	= false;
				GangInfo[Gang][gClosed] 	= true;

				for(new p = 0; p < MAX_PLAYERS; p ++)
				{
					if(PI[p][gMember] == Gang)
					{
					    PI[p][gMember] = -1;

					    format(String, sizeof(String), "{ffffff} Gaujø priþiûrëtojas {FFAF00}%s {ffffff}iðmëtë jûsø gaujos lyderá, todël jus buvote automatiðkai iðmestas ið jos!", GetPlayerNameEx(playerid));
					    SendClientMessage(p, -1, String);
					}
				}

				PI[playerid][gMember] = -1;

				SendClientMessage(playerid, -1, "{ffffff} Gaujos lyderis iðmestas, taip pat buvo iðmesti visi gaujos nariai!");

				UpdateGangLabel(Gang);

				SaveGang(Gang);
			}
			else
			{
				format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);

				ShowPlayerDialogEx(playerid, GaujuKeitimoDialog, DIALOG_STYLE_LIST, String,
				"1. Keisti gaujos pavadinimà\n2. Iðmesti lyderá\n3. Paskirti lyderá\n4. Gaujos nariai", "Pasirinkti", "Atgal");
			}
		}

		case KeistiPavadinima:
		{
			new String[200], Gang = KokiaGaujaValdo[playerid];

			if(response)
			{
				if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			   	if(strlen(inputtext) > 24) return SendClientMessage(playerid, -1, "{ffffff} Pavadinimas per ilgas!");

			   	strdel(GangInfo[Gang][gTitle], 0,         24);
				strcat(GangInfo[Gang][gTitle], inputtext, 24);

				format(String, sizeof(String), "{ffffff} Pakeitëte gaujai pavadinimà á {FFAF00}%s {ffffff}gaujà!", inputtext);
				SendClientMessage(playerid, -1, String);

				UpdateGangLabel(Gang);

				SaveGang(Gang);
			}
			else
			{
				format(String, sizeof(String), "{ffffff}Gaujos {FFAF00}%s {ffffff}valdymas", GangInfo[Gang][gTitle]);

				ShowPlayerDialogEx(playerid, GaujuKeitimoDialog, DIALOG_STYLE_LIST, String,
				"1. Keisti gaujos pavadinimà\n2. Iðmesti lyderá\n3. Paskirti lyderá\n4. Gaujos nariai", "Pasirinkti", "Atgal");
			}
		}

		case PlayerTelphoneInboxDialog:
		{
		    if(response)
		    {
		        if(strlen(PlayerTelphoneInbox[playerid][listitem]) != 0)
				{
				    new String[1000], SendDate[24], Message[800];

				    sscanf(PlayerTelphoneInbox[playerid][listitem], "p<|>s[24]s[24]s[800]", PI[playerid][SelectedString], SendDate, Message);

				    format(String, sizeof(String),
				    "{ffffff}Data: {FFAF00}%s{ffffff}\nSiuntëjas: {FFAF00}%s{ffffff}\n\nTekstas: {ffffff} %s\n", SendDate, PI[playerid][SelectedString], Message);
					ShowPlayerDialog(playerid, PlayerTelphoneInboxWatch, DIALOG_STYLE_MSGBOX, "Gautos SMS þinutës skaitymas", String, "Atgal", "Uþdaryti");
				}
		    }
		}

		case PlayerTelphoneInboxWatch:
		{
			if(response) pc_cmd_gautieji(playerid);
		}

		case 6842:
		{
			if(response)
			{
				new String[500];

				switch(listitem)
				{
					case 0:
					{
						strcat(String, "{ffffff} Pirmasis elnias pabëgo kaþkur link Angel-Pine miestelio paplûdimio,\n");
						strcat(String, "{ffffff} skubëk já surasti kol jis nepabëgo!");
					}

					case 1:
					{
						strcat(String, "{ffffff} Antrasis elnias paskutiná karta buvo pastebëtas kaþkur tarp 4 miesteliø\n");
						strcat(String, "{ffffff} EasterBoard fermoje, skubëk já surasti kol jis nepabëgo!");
					}

					case 2:
					{
						strcat(String, "{ffffff} Treèiasis elnias iðkeliavo á El Quebrados apylinkes, jo niekas nematë,\n");
						strcat(String, "{ffffff} todël pasistenk aktyviai jo ieðkoti kol jis neiðkeliavo dar toliau!");
					}

					case 3:
					{
						strcat(String, "{ffffff} Ketvirtasis elnias iðkeliavo kaþkur link FortCarson naftos platformos,\n");
						strcat(String, "{ffffff} skubëk já surasti kol neapsinuodijo nuodingomis medþiagomis!");
					}

					case 4:
					{
						strcat(String, "{ffffff} Penktasis elnias buvo pastebëtas Palomino Creek miestelio\n");
						strcat(String, "{ffffff} apylinkëse, skubëk já surasti kol jis nepabëgo!");
					}
				}

				ShowPlayerDialogEx(playerid, 6843, DIALOG_STYLE_MSGBOX, "{ffffff} Kalëdø event", String, "Uþdaryti", "Atgal");
			}
		}

		//case 6843: if(!response) pc_cmd_elniai(playerid, " ");

		case 31001:
		{
			if(response)
			{
				new String[128], Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

				switch(listitem)
				{
					case 0:
					{
						for(new EventCar = 0, size = GetVehiclePoolSize(); EventCar < size; EventCar ++)
						{
							if(EventCar >= EventMasinos[0] && EventCar <= EventMasinos[7])
							{
								ac_SetVehicleToRespawn(EventCar);
							}
						}

						format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}atstatë buliø kautyniø transportà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}

					case 1:
					{
						for(new EventCar = 0, size = GetVehiclePoolSize(); EventCar < size; EventCar ++)
						{
							if(EventCar >= EventMasinos[0] && EventCar <= EventMasinos[7])
							{
								GetVehicleParamsEx(EventCar, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
								SetVehicleParamsEx(EventCar, Engine, Lights, Alarm, false, Bonnet, Boot, Objective);
							}
						}

						GameTextForPlayer (playerid,"~R~ATRAKINAI DURIS", 2000, 4);

						format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}atrakino buliø kautyniø transportà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}

					case 2:
					{
						for(new EventCar = 0, size = GetVehiclePoolSize(); EventCar < size; EventCar ++)
						{
							if(EventCar >= EventMasinos[0] && EventCar <= EventMasinos[7])
							{
								GetVehicleParamsEx(EventCar, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
								SetVehicleParamsEx(EventCar, Engine, Lights, Alarm, true, Bonnet, Boot, Objective);
							}
						}

						GameTextForPlayer (playerid,"~R~UZRAKINAI DURIS", 2000, 4);

						format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}uþrakino buliø kautyniø transportà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}
			}
			else
			{
				pc_cmd_eventcar(playerid);
			}
		}

		case 31002:
		{
			if(response)
			{
				new String[128], Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

				switch(listitem)
				{
					case 0:
					{
						for(new EventCar = 0, size = GetVehiclePoolSize(); EventCar < size; EventCar ++)
						{
							if(EventCar >= EventMasinos[8] && EventCar <= EventMasinos[10])
							{
								ac_SetVehicleToRespawn(EventCar);
							}
						}

						format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}atstatë DRIFT transportà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}

					case 1:
					{
						for(new EventCar = 0, size = GetVehiclePoolSize(); EventCar < size; EventCar ++)
						{
							if(EventCar >= EventMasinos[8] && EventCar <= EventMasinos[10])
							{
								GetVehicleParamsEx(EventCar, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
								SetVehicleParamsEx(EventCar, Engine, Lights, Alarm, false, Bonnet, Boot, Objective);
							}
						}

						GameTextForPlayer (playerid,"~R~ATRAKINAI DURIS", 2000, 4);

						format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}atrakino DRIFT transportà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}

					case 2:
					{
						for(new EventCar = 0, size = GetVehiclePoolSize(); EventCar < size; EventCar ++)
						{
							if(EventCar >= EventMasinos[8] && EventCar <= EventMasinos[10])
							{
								GetVehicleParamsEx(EventCar, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
								SetVehicleParamsEx(EventCar, Engine, Lights, Alarm, true, Bonnet, Boot, Objective);
							}
						}

						GameTextForPlayer (playerid,"~R~UZRAKINAI DURIS", 2000, 4);

						format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}uþrakino DRIFT transportà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}
			}
			else
			{
				pc_cmd_eventcar(playerid);
			}
		}

		case 31003:
		{
			if(response)
			{
				new String[128], Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

				switch(listitem)
				{
					case 0:
					{
						for(new EventCar = 0, size = GetVehiclePoolSize(); EventCar < size; EventCar ++)
						{
							if(EventCar >= EventMasinos[11] && EventCar <= EventMasinos[25])
							{
								ac_SetVehicleToRespawn(EventCar);
							}
						}

						format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}atstatë kartingø transportà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}

					case 1:
					{
						for(new EventCar = 0, size = GetVehiclePoolSize(); EventCar < size; EventCar ++)
						{
							if(EventCar >= EventMasinos[11] && EventCar <= EventMasinos[25])
							{
								GetVehicleParamsEx(EventCar, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
								SetVehicleParamsEx(EventCar, Engine, Lights, Alarm, false, Bonnet, Boot, Objective);
							}
						}

						GameTextForPlayer (playerid,"~R~ATRAKINAI DURIS", 2000, 4);

						format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}atrakino kartingø transportà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}

					case 2:
					{
						for(new EventCar = 0, size = GetVehiclePoolSize(); EventCar < size; EventCar ++)
						{
							if(EventCar >= EventMasinos[11] && EventCar <= EventMasinos[25])
							{
								GetVehicleParamsEx(EventCar, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
								SetVehicleParamsEx(EventCar, Engine, Lights, Alarm, true, Bonnet, Boot, Objective);
							}
						}

						GameTextForPlayer (playerid,"~R~UZRAKINAI DURIS", 2000, 4);

						format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}uþrakino kartingø transportà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}
			}
			else
			{
				pc_cmd_eventcar(playerid);
			}
		}

		case 31004:
		{
			if(response)
			{
				new String[128], Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

				switch(listitem)
				{
					case 0:
					{
						for(new EventCar = 0, size = GetVehiclePoolSize(); EventCar < size; EventCar ++)
						{
							if(EventCar >= EventMasinos[26] && EventCar <= EventMasinos[27])
							{
								ac_SetVehicleToRespawn(EventCar);
							}
						}

						format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}atstatë DRAG transportà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}

					case 1:
					{
						for(new EventCar = 0, size = GetVehiclePoolSize(); EventCar < size; EventCar ++)
						{
							if(EventCar >= EventMasinos[26] && EventCar <= EventMasinos[27])
							{
								GetVehicleParamsEx(EventCar, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
								SetVehicleParamsEx(EventCar, Engine, Lights, Alarm, false, Bonnet, Boot, Objective);
							}
						}

						GameTextForPlayer (playerid,"~R~ATRAKINAI DURIS", 2000, 4);

						format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}atrakino DRAG transportà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}

					case 2:
					{
						for(new EventCar = 0, size = GetVehiclePoolSize(); EventCar < size; EventCar ++)
						{
							if(EventCar >= EventMasinos[26] && EventCar <= EventMasinos[27])
							{
								GetVehicleParamsEx(EventCar, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
								SetVehicleParamsEx(EventCar, Engine, Lights, Alarm, true, Bonnet, Boot, Objective);
							}
						}

						GameTextForPlayer (playerid,"~R~UZRAKINAI DURIS", 2000, 4);

						format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}uþrakino DRAG transportà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}
			}
			else
			{
				pc_cmd_eventcar(playerid);
			}
		}

		case 31005:
		{
			if(response)
			{
				new String[128], Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

				switch(listitem)
				{
					case 0:
					{
						for(new EventCar = 0, size = GetVehiclePoolSize(); EventCar < size; EventCar ++)
						{
							if(EventCar >= EventMasinos[28] && EventCar <= EventMasinos[40])
							{
								ac_SetVehicleToRespawn(EventCar);
							}
						}

						format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}atstatë motokrosø transportà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}

					case 1:
					{
						for(new EventCar = 0, size = GetVehiclePoolSize(); EventCar < size; EventCar ++)
						{
							if(EventCar >= EventMasinos[28] && EventCar <= EventMasinos[40])
							{
								GetVehicleParamsEx(EventCar, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
								SetVehicleParamsEx(EventCar, Engine, Lights, Alarm, false, Bonnet, Boot, Objective);
							}
						}

						GameTextForPlayer (playerid,"~R~ATRAKINAI DURIS", 2000, 4);

						format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}atrakino motokrosø transportà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}

					case 2:
					{
						for(new EventCar = 0, size = GetVehiclePoolSize(); EventCar < size; EventCar ++)
						{
							if(EventCar >= EventMasinos[28] && EventCar <= EventMasinos[40])
							{
								GetVehicleParamsEx(EventCar, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
								SetVehicleParamsEx(EventCar, Engine, Lights, Alarm, true, Bonnet, Boot, Objective);
							}
						}

						GameTextForPlayer (playerid,"~R~UZRAKINAI DURIS", 2000, 4);

						format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}uþrakino motokrosø transportà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}
			}
			else
			{
				pc_cmd_eventcar(playerid);
			}
		}

		case 31000:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialogEx(playerid, 31001, DIALOG_STYLE_LIST, "Buliø kautyniø transportas",
						"1. Atstatyti transportà\n2. Atrakinti transportà\n3. Uþrakinti transportà", "Pasirinkti", "Atgal");
					}

					case 1:
					{
						ShowPlayerDialogEx(playerid, 31002, DIALOG_STYLE_LIST, "DRIFT transportas",
						"1. Atstatyti transportà\n2. Atrakinti transportà\n3. Uþrakinti transportà", "Pasirinkti", "Atgal");
					}

					case 2:
					{
						ShowPlayerDialogEx(playerid, 31003, DIALOG_STYLE_LIST, "Kartingø transportas",
						"1. Atstatyti transportà\n2. Atrakinti transportà\n3. Uþrakinti transportà", "Pasirinkti", "Atgal");
					}

					case 3:
					{
						ShowPlayerDialogEx(playerid, 31004, DIALOG_STYLE_LIST, "DRAG transportas",
						"1. Atstatyti transportà\n2. Atrakinti transportà\n3. Uþrakinti transportà", "Pasirinkti", "Atgal");
					}

					case 4:
					{
						ShowPlayerDialogEx(playerid, 31005, DIALOG_STYLE_LIST, "Motokrosø transportas",
						"1. Atstatyti transportà\n2. Atrakinti transportà\n3. Uþrakinti transportà", "Pasirinkti", "Atgal");
					}
				}
			}
		}

		case FALDialog:
		{
			if(response)
			{
				new giveplayerid = ChoosedPlayer[playerid], String[216];

				//for(new i = 0; i < sizeof(FAL); i ++)
				{
					switch(listitem)
					{
						case 1..5:
						{
							format(String, sizeof(String),
							"{ffffff} Administratorius {FFAF00}%s {ffffff}uþtildë þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String),
							"{ffffff} Prieþastis: {FFAF00}%s {ffffff}| Laikas: {FFAF00}%s{ffffff} min!", FAL[listitem][Bausme], konvertuoti_pinigus(FAL[listitem][bLaikas]));
							SendClientMessageToAll(-1, String);

							PI[giveplayerid][Muted] = gettime() + (FAL[listitem][bLaikas] * 60);
						}

						case 8..17:
						{
							format(String, sizeof(String),
							"{ffffff} Administratorius {FFAF00}%s {ffffff}ákalino þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String),
							"{ffffff} Prieþastis: {FFAF00}%s {ffffff}| Laikas: {FFAF00}%s{ffffff} min!", FAL[listitem][Bausme], konvertuoti_pinigus(FAL[listitem][bLaikas]));
							SendClientMessageToAll(-1, String);

							JailPlayer(giveplayerid, FAL[listitem][bLaikas]);
						}

						case 20..22:
						{
							format(String, sizeof(String),
							"{ffffff} Administratorius {FFAF00}%s {ffffff}iðmetë þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String),
							"{ffffff} Prieþastis: {FFAF00}%s{ffffff}!", FAL[listitem][Bausme]);
							SendClientMessageToAll(-1, String);

							IsmestiZaideja(giveplayerid, 100);
						}

						case 25..28:
						{
							if(PI[playerid][baninolaikui] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Dar nepraëjo 10 minuèiø nuo praeito uþblokavimo!");

							format(String, sizeof(String),
							"{ffffff} Administratorius {FFAF00}%s {ffffff}laikinai uþblokavo þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String),
							"{ffffff} Prieþastis: {FFAF00}%s {ffffff}| Laikas: {FFAF00}%s{ffffff} min!", FAL[listitem][Bausme], konvertuoti_pinigus(FAL[listitem][bLaikas]));
							SendClientMessageToAll(-1, String);

							PI[giveplayerid][BanLaikas] = gettime() + (FAL[listitem][bLaikas] * 60);

							IsmestiZaideja(giveplayerid, 100);

							if(PI[playerid][AdminLevel] <= LEVEL_THIRD)
							{
								PI[playerid][baninolaikui] = gettime() + 300;
							}
						}
					}
				}
			}
		}

		case SALDialog:
		{
			if(response)
			{
				new giveplayerid = ChoosedPlayer[playerid], String[216];

				//for(new i = 0; i < sizeof(SAL); i ++)
				{
					switch(listitem)
					{
						case 1..5:
						{
							format(String, sizeof(String),
							"{ffffff} Administratorius {FFAF00}%s {ffffff}uþtildë þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String),
							"{ffffff} Prieþastis: {FFAF00}%s {ffffff}| Laikas: {FFAF00}%s{ffffff} min!", SAL[listitem][Bausme], konvertuoti_pinigus(SAL[listitem][bLaikas]));
							SendClientMessageToAll(-1, String);

							PI[giveplayerid][Muted] = gettime() + (SAL[listitem][bLaikas] * 60);
						}

						case 8..17:
						{
							format(String, sizeof(String),
							"{ffffff} Administratorius {FFAF00}%s {ffffff}ákalino þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String),
							"{ffffff} Prieþastis: {FFAF00}%s {ffffff}| Laikas: {FFAF00}%s{ffffff} min!", SAL[listitem][Bausme], konvertuoti_pinigus(SAL[listitem][bLaikas]));
							SendClientMessageToAll(-1, String);

							JailPlayer(giveplayerid, SAL[listitem][bLaikas]);
						}

						case 20..22:
						{
							format(String, sizeof(String),
							"{ffffff} Administratorius {FFAF00}%s {ffffff}iðmetë þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String),
							"{ffffff} Prieþastis: {FFAF00}%s{ffffff}!", SAL[listitem][Bausme]);
							SendClientMessageToAll(-1, String);

							IsmestiZaideja(giveplayerid, 100);
						}

						case 25..28:
						{
							if(PI[playerid][baninolaikui] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Dar nepraëjo 10 minuèiø nuo praeito uþblokavimo!");

							format(String, sizeof(String),
							"{ffffff} Administratorius {FFAF00}%s {ffffff}laikinai uþblokavo þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String),
							"{ffffff} Prieþastis: {FFAF00}%s {ffffff}| Laikas: {FFAF00}%s{ffffff} min!", SAL[listitem][Bausme], konvertuoti_pinigus(SAL[listitem][bLaikas]));
							SendClientMessageToAll(-1, String);

							PI[giveplayerid][BanLaikas] = gettime() + (SAL[listitem][bLaikas] * 60);

							IsmestiZaideja(giveplayerid, 100);

							if(PI[playerid][AdminLevel] <= LEVEL_THIRD)
							{
								PI[playerid][baninolaikui] = gettime() + 300;
							}
						}
					}
				}
			}
		}

		case TALDialog:
		{
			if(response)
			{
				new giveplayerid = ChoosedPlayer[playerid], String[216];

				//for(new i = 0; i < sizeof(TAL); i ++)
				{
					switch(listitem)
					{
						case 1..5:
						{
							format(String, sizeof(String),
							"{ffffff} Administratorius {FFAF00}%s {ffffff}uþtildë þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String),
							"{ffffff} Prieþastis: {FFAF00}%s {ffffff}| Laikas: {FFAF00}%s{ffffff} min!", TAL[listitem][Bausme], konvertuoti_pinigus(TAL[listitem][bLaikas]));
							SendClientMessageToAll(-1, String);

							PI[giveplayerid][Muted] = gettime() + (TAL[listitem][bLaikas] * 60);
						}

						case 8..17:
						{
							format(String, sizeof(String),
							"{ffffff} Administratorius {FFAF00}%s {ffffff}ákalino þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String),
							"{ffffff} Prieþastis: {FFAF00}%s {ffffff}| Laikas: {FFAF00}%s{ffffff} min!", TAL[listitem][Bausme], konvertuoti_pinigus(TAL[listitem][bLaikas]));
							SendClientMessageToAll(-1, String);

							JailPlayer(giveplayerid, TAL[listitem][bLaikas]);
						}

						case 20..22:
						{
							format(String, sizeof(String),
							"{ffffff} Administratorius {FFAF00}%s {ffffff}iðmetë þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String),
							"{ffffff} Prieþastis: {FFAF00}%s{ffffff}!", TAL[listitem][Bausme]);
							SendClientMessageToAll(-1, String);

							IsmestiZaideja(giveplayerid, 100);
						}

						case 25..28:
						{
							if(PI[playerid][baninolaikui] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Dar nepraëjo 10 minuèiø nuo praeito uþblokavimo!");

							format(String, sizeof(String),
							"{ffffff} Administratorius {FFAF00}%s {ffffff}laikinai uþblokavo þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String),
							"{ffffff} Prieþastis: {FFAF00}%s {ffffff}| Laikas: {FFAF00}%s{ffffff} min!", TAL[listitem][Bausme], konvertuoti_pinigus(TAL[listitem][bLaikas]));
							SendClientMessageToAll(-1, String);

							PI[giveplayerid][BanLaikas] = gettime() + (TAL[listitem][bLaikas] * 60);

							IsmestiZaideja(giveplayerid, 100);

							if(PI[playerid][AdminLevel] <= LEVEL_THIRD)
							{
								PI[playerid][baninolaikui] = gettime() + 300;
							}
						}

						case 31..35:
						{
							if(PI[playerid][baninopaprastai] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Dar nepraëjo 10 minuèiø nuo praeito uþblokavimo!");

							format(String, sizeof(String),
							"{ffffff} Administratorius {FFAF00}%s {ffffff}uþblokavo þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String),
							"{ffffff} Prieþastis: {FFAF00}%s{ffffff}!", TAL[listitem][Bausme]);
							SendClientMessageToAll(-1, String);

							BanPlayer(playerid, giveplayerid, TAL[listitem][Bausme]);

							if(PI[playerid][AdminLevel] <= LEVEL_THIRD)
							{
								PI[playerid][baninopaprastai] = gettime() + 300;
							}
						}
					}
				}
			}
		}

		case CluckinBellDialogas:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(GetPlayerMoneyA(playerid) < 15) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -15);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote sumuðtiná su sûriu ir bulvytes!");
						Sotumas				(playerid, 15);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[CLUCKIN1][pBuyed])
						{
							PropertyInfo[CLUCKIN1][pProfit] += 15;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case CLUCKIN1:
							{
								if(PropertyInfo[CLUCKIN1][pBuyed])
								{
									PropertyInfo[CLUCKIN1][pProfit] += 15;
								}
							}

							case CLUCKIN2:
							{
								if(PropertyInfo[CLUCKIN2][pBuyed])
								{
									PropertyInfo[CLUCKIN2][pProfit] += 15;
								}
							}

							case CLUCKIN3:
							{
								if(PropertyInfo[CLUCKIN3][pBuyed])
								{
									PropertyInfo[CLUCKIN3][pProfit] += 15;
								}
							}

							case CLUCKIN4:
							{
								if(PropertyInfo[CLUCKIN4][pBuyed])
								{
									PropertyInfo[CLUCKIN4][pProfit] += 15;
								}
							}
						}*/
					}

					case 1:
					{
						if(GetPlayerMoneyA(playerid) < 20) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -20);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote dvigubà sumuðtiná su sûriu ir bulvytes!");
						Sotumas				(playerid, 20);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[CLUCKIN1][pBuyed])
						{
							PropertyInfo[CLUCKIN1][pProfit] += 20;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case CLUCKIN1:
							{
								if(PropertyInfo[CLUCKIN1][pBuyed])
								{
									PropertyInfo[CLUCKIN1][pProfit] += 20;
								}
							}

							case CLUCKIN2:
							{
								if(PropertyInfo[CLUCKIN2][pBuyed])
								{
									PropertyInfo[CLUCKIN2][pProfit] += 20;
								}
							}

							case CLUCKIN3:
							{
								if(PropertyInfo[CLUCKIN3][pBuyed])
								{
									PropertyInfo[CLUCKIN3][pProfit] += 20;
								}
							}

							case CLUCKIN4:
							{
								if(PropertyInfo[CLUCKIN4][pBuyed])
								{
									PropertyInfo[CLUCKIN4][pProfit] += 20;
								}
							}
						}*/
					}

					case 2:
					{
						if(GetPlayerMoneyA(playerid) < 17) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -17);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote maþà keptø viðtienos blauzdeliø kompleksà!");
						Sotumas				(playerid, 17);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[CLUCKIN1][pBuyed])
						{
							PropertyInfo[CLUCKIN1][pProfit] += 17;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case CLUCKIN1:
							{
								if(PropertyInfo[CLUCKIN1][pBuyed])
								{
									PropertyInfo[CLUCKIN1][pProfit] += 17;
								}
							}

							case CLUCKIN2:
							{
								if(PropertyInfo[CLUCKIN2][pBuyed])
								{
									PropertyInfo[CLUCKIN2][pProfit] += 17;
								}
							}

							case CLUCKIN3:
							{
								if(PropertyInfo[CLUCKIN3][pBuyed])
								{
									PropertyInfo[CLUCKIN3][pProfit] += 17;
								}
							}

							case CLUCKIN4:
							{
								if(PropertyInfo[CLUCKIN4][pBuyed])
								{
									PropertyInfo[CLUCKIN4][pProfit] += 17;
								}
							}
						}*/
					}

					case 3:
					{
						if(GetPlayerMoneyA(playerid) < 21) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -21);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote didelá keptø viðtienos blauzdeliø kompleksà!");
						Sotumas				(playerid, 21);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[CLUCKIN1][pBuyed])
						{
							PropertyInfo[CLUCKIN1][pProfit] += 21;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case CLUCKIN1:
							{
								if(PropertyInfo[CLUCKIN1][pBuyed])
								{
									PropertyInfo[CLUCKIN1][pProfit] += 21;
								}
							}

							case CLUCKIN2:
							{
								if(PropertyInfo[CLUCKIN2][pBuyed])
								{
									PropertyInfo[CLUCKIN2][pProfit] += 21;
								}
							}

							case CLUCKIN3:
							{
								if(PropertyInfo[CLUCKIN3][pBuyed])
								{
									PropertyInfo[CLUCKIN3][pProfit] += 21;
								}
							}

							case CLUCKIN4:
							{
								if(PropertyInfo[CLUCKIN4][pBuyed])
								{
									PropertyInfo[CLUCKIN4][pProfit] += 21;
								}
							}
						}*/
					}

					case 4:
					{
						if(GetPlayerMoneyA(playerid) < 22) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -22);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote keptø viðtienos blauzdeliø ir bulvyèiø kompleksà!");
						Sotumas				(playerid, 22);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[CLUCKIN1][pBuyed])
						{
							PropertyInfo[CLUCKIN1][pProfit] += 22;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case CLUCKIN1:
							{
								if(PropertyInfo[CLUCKIN1][pBuyed])
								{
									PropertyInfo[CLUCKIN1][pProfit] += 22;
								}
							}

							case CLUCKIN2:
							{
								if(PropertyInfo[CLUCKIN2][pBuyed])
								{
									PropertyInfo[CLUCKIN2][pProfit] += 22;
								}
							}

							case CLUCKIN3:
							{
								if(PropertyInfo[CLUCKIN3][pBuyed])
								{
									PropertyInfo[CLUCKIN3][pProfit] += 22;
								}
							}

							case CLUCKIN4:
							{
								if(PropertyInfo[CLUCKIN4][pBuyed])
								{
									PropertyInfo[CLUCKIN4][pProfit] += 22;
								}
							}
						}*/
					}

					case 5:
					{
						if(GetPlayerMoneyA(playerid) < 14) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -14);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote McWrap suktinukà su viðtiena!");
						Sotumas				(playerid, 14);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[CLUCKIN1][pBuyed])
						{
							PropertyInfo[CLUCKIN1][pProfit] += 14;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case CLUCKIN1:
							{
								if(PropertyInfo[CLUCKIN1][pBuyed])
								{
									PropertyInfo[CLUCKIN1][pProfit] += 14;
								}
							}

							case CLUCKIN2:
							{
								if(PropertyInfo[CLUCKIN2][pBuyed])
								{
									PropertyInfo[CLUCKIN2][pProfit] += 14;
								}
							}

							case CLUCKIN3:
							{
								if(PropertyInfo[CLUCKIN3][pBuyed])
								{
									PropertyInfo[CLUCKIN3][pProfit] += 14;
								}
							}

							case CLUCKIN4:
							{
								if(PropertyInfo[CLUCKIN4][pBuyed])
								{
									PropertyInfo[CLUCKIN4][pProfit] += 14;
								}
							}
						}*/
					}

					case 6:
					{
						if(GetPlayerMoneyA(playerid) < 12) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -12);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote cezario salotas su traðkia viðtiena!");
						Sotumas				(playerid, 12);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[CLUCKIN1][pBuyed])
						{
							PropertyInfo[CLUCKIN1][pProfit] += 12;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case CLUCKIN1:
							{
								if(PropertyInfo[CLUCKIN1][pBuyed])
								{
									PropertyInfo[CLUCKIN1][pProfit] += 12;
								}
							}

							case CLUCKIN2:
							{
								if(PropertyInfo[CLUCKIN2][pBuyed])
								{
									PropertyInfo[CLUCKIN2][pProfit] += 12;
								}
							}

							case CLUCKIN3:
							{
								if(PropertyInfo[CLUCKIN3][pBuyed])
								{
									PropertyInfo[CLUCKIN3][pProfit] += 12;
								}
							}

							case CLUCKIN4:
							{
								if(PropertyInfo[CLUCKIN4][pBuyed])
								{
									PropertyInfo[CLUCKIN4][pProfit] += 12;
								}
							}
						}*/
					}
				}
			}
		}

		case BurgerShotDialogas:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(GetPlayerMoneyA(playerid) < 15) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -15);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote sumuðtiná su sûriu ir bulvytes!");
						Sotumas				(playerid, 15);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[BURGER1][pBuyed])
						{
							PropertyInfo[BURGER1][pProfit] += 15;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case BURGER1:
							{
								if(PropertyInfo[BURGER1][pBuyed])
								{
									PropertyInfo[BURGER1][pProfit] += 15;
								}
							}

							case BURGER2:
							{
								if(PropertyInfo[BURGER2][pBuyed])
								{
									PropertyInfo[BURGER2][pProfit] += 15;
								}
							}

							case BURGER3:
							{
								if(PropertyInfo[BURGER3][pBuyed])
								{
									PropertyInfo[BURGER3][pProfit] += 15;
								}
							}
						}*/
					}

					case 1:
					{
						if(GetPlayerMoneyA(playerid) < 20) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -20);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote dvigubà sumuðtiná su sûriu ir bulvytes!");
						Sotumas				(playerid, 20);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[BURGER1][pBuyed])
						{
							PropertyInfo[BURGER1][pProfit] += 20;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case BURGER1:
							{
								if(PropertyInfo[BURGER1][pBuyed])
								{
									PropertyInfo[BURGER1][pProfit] += 20;
								}
							}

							case BURGER2:
							{
								if(PropertyInfo[BURGER2][pBuyed])
								{
									PropertyInfo[BURGER2][pProfit] += 20;
								}
							}

							case BURGER3:
							{
								if(PropertyInfo[BURGER3][pBuyed])
								{
									PropertyInfo[BURGER3][pProfit] += 20;
								}
							}
						}*/
					}

					case 2:
					{
						if(GetPlayerMoneyA(playerid) < 18) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -18);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote maþà BigMac kompleksà!");
						Sotumas				(playerid, 18);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[BURGER1][pBuyed])
						{
							PropertyInfo[BURGER1][pProfit] += 18;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case BURGER1:
							{
								if(PropertyInfo[BURGER1][pBuyed])
								{
									PropertyInfo[BURGER1][pProfit] += 18;
								}
							}

							case BURGER2:
							{
								if(PropertyInfo[BURGER2][pBuyed])
								{
									PropertyInfo[BURGER2][pProfit] += 18;
								}
							}

							case BURGER3:
							{
								if(PropertyInfo[BURGER3][pBuyed])
								{
									PropertyInfo[BURGER3][pProfit] += 18;
								}
							}
						}*/
					}

					case 3:
					{
						if(GetPlayerMoneyA(playerid) < 22) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -22);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote didelá BigMac kompleksà!");
						Sotumas				(playerid, 22);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[BURGER1][pBuyed])
						{
							PropertyInfo[BURGER1][pProfit] += 22;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case BURGER1:
							{
								if(PropertyInfo[BURGER1][pBuyed])
								{
									PropertyInfo[BURGER1][pProfit] += 22;
								}
							}

							case BURGER2:
							{
								if(PropertyInfo[BURGER2][pBuyed])
								{
									PropertyInfo[BURGER2][pProfit] += 22;
								}
							}

							case BURGER3:
							{
								if(PropertyInfo[BURGER3][pBuyed])
								{
									PropertyInfo[BURGER3][pProfit] += 22;
								}
							}
						}*/
					}

					case 4:
					{
						if(GetPlayerMoneyA(playerid) < 13) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -13);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote McNuggets viðtienos kepsnelius!");
						Sotumas				(playerid, 13);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[BURGER1][pBuyed])
						{
							PropertyInfo[BURGER1][pProfit] += 13;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case BURGER1:
							{
								if(PropertyInfo[BURGER1][pBuyed])
								{
									PropertyInfo[BURGER1][pProfit] += 13;
								}
							}

							case BURGER2:
							{
								if(PropertyInfo[BURGER2][pBuyed])
								{
									PropertyInfo[BURGER2][pProfit] += 13;
								}
							}

							case BURGER3:
							{
								if(PropertyInfo[BURGER3][pBuyed])
								{
									PropertyInfo[BURGER3][pProfit] += 13;
								}
							}
						}*/
					}

					case 5:
					{
						if(GetPlayerMoneyA(playerid) < 11) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -11);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote Big Tasty sumuðtiná!");
						Sotumas				(playerid, 11);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[BURGER1][pBuyed])
						{
							PropertyInfo[BURGER1][pProfit] += 11;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case BURGER1:
							{
								if(PropertyInfo[BURGER1][pBuyed])
								{
									PropertyInfo[BURGER1][pProfit] += 11;
								}
							}

							case BURGER2:
							{
								if(PropertyInfo[BURGER2][pBuyed])
								{
									PropertyInfo[BURGER2][pProfit] += 11;
								}
							}

							case BURGER3:
							{
								if(PropertyInfo[BURGER3][pBuyed])
								{
									PropertyInfo[BURGER3][pProfit] += 11;
								}
							}
						}*/
					}

					case 6:
					{
						if(GetPlayerMoneyA(playerid) < 12) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -12);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote Royal sumuðtiná!");
						Sotumas				(playerid, 12);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[BURGER1][pBuyed])
						{
							PropertyInfo[BURGER1][pProfit] += 12;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case BURGER1:
							{
								if(PropertyInfo[BURGER1][pBuyed])
								{
									PropertyInfo[BURGER1][pProfit] += 12;
								}
							}

							case BURGER2:
							{
								if(PropertyInfo[BURGER2][pBuyed])
								{
									PropertyInfo[BURGER2][pProfit] += 12;
								}
							}

							case BURGER3:
							{
								if(PropertyInfo[BURGER3][pBuyed])
								{
									PropertyInfo[BURGER3][pProfit] += 12;
								}
							}
						}*/
					}
				}
			}
		}

		case PicerijosDialogas:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(GetPlayerMoneyA(playerid) < 8) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -8);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote Studentø picà!");
						Sotumas				(playerid, 8);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[PICERIJA1][pBuyed])
						{
							PropertyInfo[PICERIJA1][pProfit] += 8;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case PICERIJA1:
							{
								if(PropertyInfo[PICERIJA1][pBuyed])
								{
									PropertyInfo[PICERIJA1][pProfit] += 8;
								}
							}

							case PICERIJA2:
							{
								if(PropertyInfo[PICERIJA2][pBuyed])
								{
									PropertyInfo[PICERIJA2][pProfit] += 8;
								}
							}

							case PICERIJA3:
							{
								if(PropertyInfo[PICERIJA3][pBuyed])
								{
									PropertyInfo[PICERIJA3][pProfit] += 8;
								}
							}
						}*/
					}

					case 1:
					{
						if(GetPlayerMoneyA(playerid) < 11) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -11);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote Havajø picà!");
						Sotumas				(playerid, 11);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[PICERIJA1][pBuyed])
						{
							PropertyInfo[PICERIJA1][pProfit] += 11;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case PICERIJA1:
							{
								if(PropertyInfo[PICERIJA1][pBuyed])
								{
									PropertyInfo[PICERIJA1][pProfit] += 11;
								}
							}

							case PICERIJA2:
							{
								if(PropertyInfo[PICERIJA2][pBuyed])
								{
									PropertyInfo[PICERIJA2][pProfit] += 11;
								}
							}

							case PICERIJA3:
							{
								if(PropertyInfo[PICERIJA3][pBuyed])
								{
									PropertyInfo[PICERIJA3][pProfit] += 11;
								}
							}
						}*/
					}

					case 2:
					{
						if(GetPlayerMoneyA(playerid) < 16) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -16);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote Italiðkà picà!");
						Sotumas				(playerid, 16);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[PICERIJA1][pBuyed])
						{
							PropertyInfo[PICERIJA1][pProfit] += 16;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case PICERIJA1:
							{
								if(PropertyInfo[PICERIJA1][pBuyed])
								{
									PropertyInfo[PICERIJA1][pProfit] += 16;
								}
							}

							case PICERIJA2:
							{
								if(PropertyInfo[PICERIJA2][pBuyed])
								{
									PropertyInfo[PICERIJA2][pProfit] += 16;
								}
							}

							case PICERIJA3:
							{
								if(PropertyInfo[PICERIJA3][pBuyed])
								{
									PropertyInfo[PICERIJA3][pProfit] += 16;
								}
							}
						}*/
					}

					case 3:
					{
						if(GetPlayerMoneyA(playerid) < 7) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -7);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote Kaimiðkà picà!");
						Sotumas				(playerid, 7);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[PICERIJA1][pBuyed])
						{
							PropertyInfo[PICERIJA1][pProfit] += 7;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case PICERIJA1:
							{
								if(PropertyInfo[PICERIJA1][pBuyed])
								{
									PropertyInfo[PICERIJA1][pProfit] += 7;
								}
							}

							case PICERIJA2:
							{
								if(PropertyInfo[PICERIJA2][pBuyed])
								{
									PropertyInfo[PICERIJA2][pProfit] += 7;
								}
							}

							case PICERIJA3:
							{
								if(PropertyInfo[PICERIJA3][pBuyed])
								{
									PropertyInfo[PICERIJA3][pProfit] += 7;
								}
							}
						}*/
					}

					case 4:
					{
						if(GetPlayerMoneyA(playerid) < 13) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -13);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote Portobelo picà!");
						Sotumas				(playerid, 13);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[PICERIJA1][pBuyed])
						{
							PropertyInfo[PICERIJA1][pProfit] += 13;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case PICERIJA1:
							{
								if(PropertyInfo[PICERIJA1][pBuyed])
								{
									PropertyInfo[PICERIJA1][pProfit] += 13;
								}
							}

							case PICERIJA2:
							{
								if(PropertyInfo[PICERIJA2][pBuyed])
								{
									PropertyInfo[PICERIJA2][pProfit] += 13;
								}
							}

							case PICERIJA3:
							{
								if(PropertyInfo[PICERIJA3][pBuyed])
								{
									PropertyInfo[PICERIJA3][pProfit] += 13;
								}
							}
						}*/
					}

					case 5:
					{
						if(GetPlayerMoneyA(playerid) < 12) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -12);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote Sicilieèiø picà!");
						Sotumas				(playerid, 12);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[PICERIJA1][pBuyed])
						{
							PropertyInfo[PICERIJA1][pProfit] += 12;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case PICERIJA1:
							{
								if(PropertyInfo[PICERIJA1][pBuyed])
								{
									PropertyInfo[PICERIJA1][pProfit] += 12;
								}
							}

							case PICERIJA2:
							{
								if(PropertyInfo[PICERIJA2][pBuyed])
								{
									PropertyInfo[PICERIJA2][pProfit] += 12;
								}
							}

							case PICERIJA3:
							{
								if(PropertyInfo[PICERIJA3][pBuyed])
								{
									PropertyInfo[PICERIJA3][pProfit] += 12;
								}
							}
						}*/
					}

					case 6:
					{
						if(GetPlayerMoneyA(playerid) < 22) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -22);
						SendClientMessage 	(playerid, -1, "{ffffff} Valgote Ðefo specialioji picà!");
						Sotumas				(playerid, 22);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

						if(PropertyInfo[PICERIJA1][pBuyed])
						{
							PropertyInfo[PICERIJA1][pProfit] += 22;
						}

						/*switch(GetPlayerVirtualWorld(playerid))
						{
							case PICERIJA1:
							{
								if(PropertyInfo[PICERIJA1][pBuyed])
								{
									PropertyInfo[PICERIJA1][pProfit] += 22;
								}
							}

							case PICERIJA2:
							{
								if(PropertyInfo[PICERIJA2][pBuyed])
								{
									PropertyInfo[PICERIJA2][pProfit] += 22;
								}
							}

							case PICERIJA3:
							{
								if(PropertyInfo[PICERIJA3][pBuyed])
								{
									PropertyInfo[PICERIJA3][pProfit] += 22;
								}
							}
						}*/
					}
				}
			}
		}

		case 6645:
		{
			if(response)
			{
				if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
				
				if(strlen(inputtext) < 1)
				{
					SendClientMessage(playerid, -1, "{ffffff} Komentaras per trumpas!");

					new Tarnyba[128], String[128];

					switch(PI[playerid][KaKviecia])
					{
						case TELLPHONE_NUMBER_POLICE: 		Tarnyba = "Policijos departamentas klauso. Aiðkiai nurodykite atvykimo vietà:";
						case TELLPHONE_NUMBER_MECHANICS: 	Tarnyba = "Autoservisas ECO klauso. Aiðkiai nurodykite atvykimo vietà:";
						case TELLPHONE_NUMBER_MEDICS: 		Tarnyba = "Medicinos departamentas klauso. Aiðkiai nurodykite atvykimo vietà:";
						case TELLPHONE_NUMBER_TAXI: 		Tarnyba = "Taksi klauso. Aiðkiai nurodykite atvykimo vietà:";
					}

					format(String, 216, "{ffffff}%s", Tarnyba);
					ShowPlayerDialogEx(playerid, 6645, DIALOG_STYLE_INPUT, "Tarnybos kvietimas", String, "Kviesti", "Atðaukti");

					return 1;
				}

				if(strlen(inputtext) > 16)
				{
					SendClientMessage(playerid, -1, "{ffffff} Komentaras per ilgas!");

					new Tarnyba[128], String[128];

					switch(PI[playerid][KaKviecia])
					{
						case TELLPHONE_NUMBER_POLICE: 		Tarnyba = "Policijos departamentas klauso. Aiðkiai nurodykite atvykimo vietà:";
						case TELLPHONE_NUMBER_MECHANICS: 	Tarnyba = "Autoservisas ECO klauso. Aiðkiai nurodykite atvykimo vietà:";
						case TELLPHONE_NUMBER_MEDICS: 		Tarnyba = "Medicinos departamentas klauso. Aiðkiai nurodykite atvykimo vietà:";
						case TELLPHONE_NUMBER_TAXI: 		Tarnyba = "Taksi klauso. Aiðkiai nurodykite atvykimo vietà:";
					}

					format(String, 216, "{ffffff}%s", Tarnyba);
					ShowPlayerDialogEx(playerid, 6645, DIALOG_STYLE_INPUT, "Tarnybos kvietimas", String, "Kviesti", "Atðaukti");

					return 1;
				}

				SetTimerEx("TarnybosKvietimas", 3000, false, "ds[16]", playerid, inputtext);
			}
			else
			{
				SendClientMessage(playerid, -1, "{ffffff} Tarnybos kvietimas atðauktas!");

				PI[playerid][KaKviecia] = -1;
				KvieciaTarnyba[playerid] 		= false;
			}
		}

		case 8654:
		{
			if(response)
			{
				new String[128];

				switch(listitem)
				{
					case 5: OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusZuvis]);

					case 0: // Ungurys
					{
						if(PI[playerid][ungurys] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite unguriø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusZuvis]);

						GivePlayerMoneyA(playerid, PI[playerid][ungurys] * 8);

						format(String, 128, "{ffffff} Pardavëte visus savo ungurius uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(PI[playerid][ungurys] * 8));
						SendClientMessage(playerid, -1, String);

						PI[playerid][ungurys] = 0;

						OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusZuvis]);
					}

					case 1: // Karosas
					{
						if(PI[playerid][karosas] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite karosø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusZuvis]);

						GivePlayerMoneyA(playerid, PI[playerid][karosas] * 5);

						format(String, 128, "{ffffff} Pardavëte visus savo karosus uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(PI[playerid][karosas] * 5));
						SendClientMessage(playerid, -1, String);

						PI[playerid][karosas] = 0;

						OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusZuvis]);
					}

					case 2: // Karpis
					{
						if(PI[playerid][karpis] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite karpiø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusZuvis]);

						GivePlayerMoneyA(playerid, PI[playerid][karpis] * 15);

						format(String, 128, "{ffffff} Pardavëte visus savo karpius uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(PI[playerid][karpis] * 15));
						SendClientMessage(playerid, -1, String);

						PI[playerid][karpis] = 0;

						OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusZuvis]);
					}

					case 3: // Karsis
					{
						if(PI[playerid][karsis] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite karðiø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusZuvis]);

						GivePlayerMoneyA(playerid, PI[playerid][karsis] * 11);

						format(String, 128, "{ffffff} Pardavëte visus savo karðius uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(PI[playerid][karsis] * 11));
						SendClientMessage(playerid, -1, String);

						PI[playerid][karsis] = 0;

						OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusZuvis]);
					}

					case 4: // Lydeka
					{
						if(PI[playerid][lydeka] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite lydekø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusZuvis]);

						GivePlayerMoneyA(playerid, PI[playerid][lydeka] * 19);

						format(String, 128, "{ffffff} Pardavëte visas savo lydekas uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(PI[playerid][lydeka] * 19));
						SendClientMessage(playerid, -1, String);

						PI[playerid][lydeka] = 0;

						OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusZuvis]);
					}

					// -----------------------

					case 6: // Viskas
					{
						new unguriai = PI[playerid][ungurys];
						new karosai = PI[playerid][karosas];
						new karpiai = PI[playerid][karpis];
						new karsiai = PI[playerid][karsis];
						new lydekos = PI[playerid][lydeka];

						new visozuvies 	= unguriai + karosai + karpiai + karsiai + lydekos;
						new visogaus 	= unguriai * 8 + karosai * 5 + karpiai * 15 + karsiai * 11 + lydekos * 19;

						if(visozuvies == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite jokios þuvies!"), OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusZuvis]);

						GivePlayerMoneyA(playerid, visogaus);

						format(String, 128, "{ffffff} Pardavëte visas savo þuvis uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(visogaus));
						SendClientMessage(playerid, -1, String);

						PI[playerid][ungurys] = 0;
						PI[playerid][karosas] = 0;
						PI[playerid][karpis] = 0;
						PI[playerid][karsis] = 0;
						PI[playerid][lydeka] = 0;

						OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusZuvis]);
					}
				}
			}
		}

		case 8653:
		{
			if(response)
			{
				new String[128];

				switch(listitem)
				{
					case 6: OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusMetalas]);

					case 0: // Auksas
					{
						if(PI[playerid][Auksas] == 0.0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite aukso!"), OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusMetalas]);

						GivePlayerMoneyA(playerid, floatround(PI[playerid][Auksas]) * AUKSAS);

						format(String, 128, "{ffffff} Pardavëte visà savo auksà uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(floatround(PI[playerid][Auksas]) * AUKSAS));
						SendClientMessage(playerid, -1, String);

						PI[playerid][Auksas] = 0.0;

						OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusMetalas]);
					}

					case 1: // Sidabras
					{
						if(PI[playerid][Sidabras] == 0.0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite sidabro!"), OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusMetalas]);

						GivePlayerMoneyA(playerid, floatround(PI[playerid][Sidabras]) * SIDABRAS);

						format(String, 128, "{ffffff} Pardavëte visà savo sidabrà uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(floatround(PI[playerid][Sidabras]) * SIDABRAS));
						SendClientMessage(playerid, -1, String);

						PI[playerid][Sidabras] = 0.0;

						OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusMetalas]);
					}

					case 2: // Aliuminis
					{
						if(PI[playerid][Aliuminis] == 0.0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite aliuminio!"), OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusMetalas]);

						GivePlayerMoneyA(playerid, floatround(PI[playerid][Aliuminis]) * ALIUMINIS);

						format(String, 128, "{ffffff} Pardavëte visà savo aliuminá uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(floatround(PI[playerid][Aliuminis]) * ALIUMINIS));
						SendClientMessage(playerid, -1, String);

						PI[playerid][Aliuminis] = 0.0;

						OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusMetalas]);
					}

					case 3: // Varis
					{
						if(PI[playerid][Varis] == 0.0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite vario!"), OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusMetalas]);

						GivePlayerMoneyA(playerid, floatround(PI[playerid][Varis]) * VARIS);

						format(String, 128, "{ffffff} Pardavëte visà savo vará uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(floatround(PI[playerid][Varis]) * VARIS));
						SendClientMessage(playerid, -1, String);

						PI[playerid][Varis] = 0.0;

						OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusMetalas]);
					}

					case 4: // Þalvaris
					{
						if(PI[playerid][Zalvaris] == 0.0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite þalvario!"), OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusMetalas]);

						GivePlayerMoneyA(playerid, floatround(PI[playerid][Zalvaris]) * ZALVARIS);

						format(String, 128, "{ffffff} Pardavëte visà savo þalvará uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(floatround(PI[playerid][Zalvaris]) * ZALVARIS));
						SendClientMessage(playerid, -1, String);

						PI[playerid][Zalvaris] = 0.0;

						OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusMetalas]);
					}

					case 5: // Titanas
					{
						if(PI[playerid][Titanas] == 0.0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite titano!"), OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusMetalas]);

						GivePlayerMoneyA(playerid, floatround(PI[playerid][Titanas]) * TITANAS);

						format(String, 128, "{ffffff} Pardavëte visà savo titanà uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(floatround(PI[playerid][Titanas]) * TITANAS));
						SendClientMessage(playerid, -1, String);

						PI[playerid][Titanas] = 0.0;

						OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusMetalas]);
					}

					// -----------------------

					case 7: // Viskas
					{
						new Float: visometalo = PI[playerid][Auksas] + PI[playerid][Sidabras] + PI[playerid][Aliuminis] + PI[playerid][Varis] + PI[playerid][Zalvaris] + PI[playerid][Titanas];
						new visogaus = (floatround(PI[playerid][Auksas]) * AUKSAS) + (floatround(PI[playerid][Sidabras]) * SIDABRAS) + (floatround(PI[playerid][Aliuminis]) * ALIUMINIS) +
						(floatround(PI[playerid][Varis]) * VARIS) + (floatround(PI[playerid][Zalvaris]) * ZALVARIS) + (floatround(PI[playerid][Titanas]) * TITANAS);

						if(visometalo == 0.0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite jokio metalo!"), OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusMetalas]);

						GivePlayerMoneyA(playerid, visogaus);

						format(String, 128, "{ffffff} Pardavëte visà savo metalà uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(visogaus));
						SendClientMessage(playerid, -1, String);

						PI[playerid][Auksas] 		= 0.0;
						PI[playerid][Sidabras] 		= 0.0;
						PI[playerid][Aliuminis] 	= 0.0;
						PI[playerid][Varis] 		= 0.0;
						PI[playerid][Zalvaris] 		= 0.0;
						PI[playerid][Titanas] 		= 0.0;

						OnPlayerPickUpPickup(playerid, PickupsInfo[MetroCityTurgusMetalas]);
					}
				}
			}
		}

		case 4590:
		{
			if(response)
			{
				if(PI[playerid][stebuklas7] == 1)
				{
					if(PI[playerid][AtsiemePriza] == true) return SendClientMessage(playerid, -1, "{ffffff} Jus jau ávykdëte ðias uþduotis ir prizà atsiemëte!");

					/*strcat(String, "- Pasirinkite norimà prizà:\n \n");
					strcat(String, "1. Pinigai ({FFAF00}$25,000{ffffff})\n");
					strcat(String, "2. Patirties taðkai ({FFAF00}2,000{ffffff})\n");
					strcat(String, "3. Kreditai ({FFAF00}80{ffffff})\n \n");
					strcat(String, "4. Viskas kartu ({FFAF00}$10,000{ffffff}, {FFAF00}1,000{ffffff}EXP, {FFAF00}40{ffffff} kreditø)");
					ShowPlayerDialogEx(playerid, 4591, DIALOG_STYLE_LIST, "7 MetroCity Stebuklai", String, "Atsiimti", "");*/

					switch(random(4))
					{
						case 0:
						{
							GivePlayerMoneyA (playerid, 25000);
							SendClientMessage(playerid, -1, "{ffffff} Sëkmingai atsiemëte savo prizà (pinigai)!");
						}

						case 1:
						{
							GivePlayerExperience(playerid, 2000);
							SendClientMessage(playerid, -1, "{ffffff} Sëkmingai atsiemëte savo prizà (patirties taðkai!");
						}

						case 2:
						{
							new krd = HowMuchHaveCredits(GetPlayerNameEx(playerid)), bQuery[185];

							krd += 80;

							format(bQuery, 185, "UPDATE `players` SET Kreditai = '%d' WHERE Vardas = '%s'", krd, GetPlayerNameEx(playerid));
							mysql_query(bQuery);

							SendClientMessage(playerid, -1, "{ffffff} Sëkmingai atsiemëte savo prizà (kreditai)!");
						}

						case 3:
						{
							new krd = HowMuchHaveCredits(GetPlayerNameEx(playerid)), bQuery[185];

							krd += 40;

							format(bQuery, 185, "UPDATE `players` SET Kreditai = '%d' WHERE Vardas = '%s'", krd, GetPlayerNameEx(playerid));
							mysql_query(bQuery);

							GivePlayerMoneyA (playerid, 10000);
							GivePlayerExperience(playerid, 1000);
							SendClientMessage(playerid, -1, "{ffffff} Sëkmingai atsiemëte savo prizà (pinigai, patirties ta6kai, kreditai)!");
						}
					}

					PI[playerid][AtsiemePriza] = true;
				}
			}
		}

		case 4591:
		{
			if(response)
			{
				new String[250];

				switch(listitem)
				{
					case 0, 1, 5:
					{
						strcat(String, "- Pasirinkite norimà prizà:\n \n");
						ShowPlayerDialogEx(playerid, 4591, DIALOG_STYLE_LIST, "7 uliunø Stebuklai", String, "Atsiimti", "");
					}

					case 2:
					{
						PI[playerid][AtsiemePriza] = true;

						GivePlayerMoneyA (playerid, 25000);
						SendClientMessage(playerid, -1, "{ffffff} Sëkmingai atsiemëte savo prizà!");
					}

					case 3:
					{
						PI[playerid][AtsiemePriza] = true;

						GivePlayerExperience(playerid, 2000);
						SendClientMessage(playerid, -1, "{ffffff} Sëkmingai atsiemëte savo prizà!");
					}

					case 4:
					{
						PI[playerid][AtsiemePriza] = true;

						new krd = HowMuchHaveCredits(GetPlayerNameEx(playerid)), bQuery[185];

						krd += 80;

						format(bQuery, 185, "UPDATE `players` SET Kreditai = '%d' WHERE Vardas = '%s'", krd, GetPlayerNameEx(playerid));
						mysql_query(bQuery);

						SendClientMessage(playerid, -1, "{ffffff} Sëkmingai atsiemëte savo prizà!");
					}

					case 6:
					{
						PI[playerid][AtsiemePriza] = true;

						new krd = HowMuchHaveCredits(GetPlayerNameEx(playerid)), bQuery[185];

						krd += 40;

						format(bQuery, 185, "UPDATE `players` SET Kreditai = '%d' WHERE Vardas = '%s'", krd, GetPlayerNameEx(playerid));
						mysql_query(bQuery);

						GivePlayerMoneyA (playerid, 10000);
						GivePlayerExperience(playerid, 1000);
						SendClientMessage(playerid, -1, "{ffffff} Sëkmingai atsiemëte savo prizà!");
					}
				}
			}
		}

		case 4588:
		{
			if(response)
			{
				new String[800];

				switch(listitem)
				{
					case 0: // MetroCity stebuklai
					{
						strcat(String, "{ffffff}Tai sistema leidþianti smagiai praleisti laikà serveryje.\n");
						strcat(String, "{ffffff}Jûsø tikslas yra paeiliui surasti visus 7 stebuklus, kurie\n");
						strcat(String, "{ffffff}yra iðmëtyti po visà San Andreas valstijà, nuvykæ á þemiau\n");
						strcat(String, "{ffffff}pateiktà vietà gausite uþuomenas apie tam tikrà stebuklà\n");
						strcat(String, "{ffffff}ir galësite pradëti vykdyti uþduotá. Prizà uþ visus 7\n");
						strcat(String, "{ffffff}rastus stebuklus galësite atsiimti ten pat, kur skaitëte\n");
						strcat(String, "{ffffff}uþuomenas. Prizai bus skirtingi, juos pasirinkti galësite pats.\n \n");
						strcat(String, "{ffffff}Pradëti vykdyti uþduotá galite nusigavæ èia: {FFAF00} /gps > Kitos vietovës > 7 uliunø Stebuklai{ffffff}.");
						ShowPlayerDialogEx(playerid, 4589, DIALOG_STYLE_MSGBOX, "7 uliunø Stebuklai", String, "Uþdaryti", "Atgal");
					}

					case 1: // Serverio misijos
					{
						strcat(String, "{ffffff}Tai sistema kuri reikalauja turëti kantrybës. Paraðius\n");
						strcat(String, "{ffffff}komandà {FFAF00} /misija {ffffff}jums bus pateikta informacija kokià misijà\n");
						strcat(String, "{ffffff}jums dabar reikia vykdyti, taip pat iðkart bus paraðytas\n");
						strcat(String, "{ffffff}prizas, kurá gausite ávykdæ ðià misijà. Ávykdþius misijà\n");
						strcat(String, "{ffffff}jums iðkart bus pateikta informacija apie sekanèià misijà.\n");
						strcat(String, "{ffffff}Administracija draudþia praðyti/keistis kaþkuo ar dar kaþkokiais\n");
						strcat(String, "{ffffff}bûdais sukèiauti norint greièiau ávykdyti misijà ir gauti prizà!\n");
						ShowPlayerDialogEx(playerid, 4589, DIALOG_STYLE_MSGBOX, "Serverio misijos", String, "Uþdaryti", "Atgal");
					}
				}
			}
		}

		case 4589:
		{
			if(!response)
			{
				pc_cmd_uzduotys(playerid);
			}
		}

		case 4711:
		{
			if(!response)
			{
				new String[2000];

				strcat(String, "Komanda\tInformacija\n");
				strcat(String, "{FFAF00} /darbai\t{ffffff}Iðvysite visus serverio darbus bei jø informacijà\n");
				strcat(String, "{FFAF00} /taisykles\t{ffffff}Iðvysite visas serverio taisykles kuriø privaloma laikytis\n");
				strcat(String, "{FFAF00} /akomandos\t{ffffff}Iðvysite visas VIP nariø bei administratoriø komandas\n");
				strcat(String, "{FFAF00} /ispejimai\t{ffffff}Iðvysite visus savo turimus áspëjimus\n");
				strcat(String, "{FFAF00} /paliktidarba\t{ffffff}Paliksite ðiuo metu dirbamà darbà\n");
				strcat(String, "{FFAF00} /kauliukas\t{ffffff}Þaisti kauliukà ið pinigø\n");
				strcat(String, "{FFAF00} /salmas\t{ffffff}Uþsidësite/nusiimsite ðalmà jeigu já turite\n");
				strcat(String, "{FFAF00} /nustatymai\t{ffffff}Iðjungsite/ájungsite serverio tekstûras (Textdrawus)\n");
				strcat(String, "{FFAF00} /gkomandos\t{ffffff}Iðvysite visas neoficialiø gaujø komandas\n");
				strcat(String, "{FFAF00} /misija\t{ffffff}Galësite vykdyti serverio misijas uþ kurias gausite prizus\n");
				strcat(String, "{FFAF00} /cpass\t{ffffff}Pakeisite savo prisijungimo á þaidimà slaptaþodá\n");
				strcat(String, "{FFAF00} /duotirep\t{ffffff}Duosite +1 reputacijos taðkà pasirinktam þaidëjui\n");
				strcat(String, "{FFAF00} /parduotig\t{ffffff}Pasiûlysite pasirinktam þaidëjui nusipirkti ginklus\n");
				strcat(String, "{FFAF00} /vartotih\t{ffffff}Pradësite vartoti heroinà\n");
				strcat(String, "{FFAF00} /vartotic\t{ffffff}Pradësite vartoti kokainà");
				ShowPlayerDialogEx(playerid, 4712, DIALOG_STYLE_TABLIST_HEADERS, "Serverio komandos. 2 puslapis", String, "1 puslapis", "3 puslapis");
			}
		}

		case 4712:
		{
			new String[2000];

			if(!response)
			{
				strcat(String, "Komanda\tInformacija\n");
				strcat(String, "{FFAF00} /vartotie\t{ffffff}Pradësite vartoti ekstazá\n");
				strcat(String, "{FFAF00} /vartotiz\t{ffffff}Pradësite vartoti þolæ\n");
				strcat(String, "{FFAF00} /parduotih\t{ffffff}Pasiûlysite pasirinktam þaidëjui nusipirkti heroino\n");
				strcat(String, "{FFAF00} /parduotic\t{ffffff}Pasiûlysite pasirinktam þaidëjui nusipirkti kokaino\n");
				strcat(String, "{FFAF00} /parduotie\t{ffffff}Pasiûlysite pasirinktam þaidëjui nusipirkti ekstazio\n");
				strcat(String, "{FFAF00} /parduotiz\t{ffffff}Pasiûlysite pasirinktam þaidëjui nusipirkti þolës\n");
				strcat(String, "{FFAF00} /nametag\t{ffffff}Iðjungsite/ájungsite þaidëjo vardø rodymà\n");
				strcat(String, "{FFAF00} /maistas\t{ffffff}Pavalgysite pasirinktà maistà (jeigu jo turite)\n");
				strcat(String, "{FFAF00} /priziuretojai\t{ffffff}Iðvysite visus serverio priþiûrëtojus\n");
				strcat(String, "{FFAF00} /nkauliukas\t{ffffff}Mesti kauliukà\n");
				strcat(String, "{FFAF00} /atristi\t{ffffff}Bandysite atriðti gaujos suriðtà þaidëjà\n");
				strcat(String, "{FFAF00} /dirbtitaksi\t{ffffff}Pradësite taksisto darbà (jeigu turite licenzijà\n");
				strcat(String, "{FFAF00} /uzduotys\t{ffffff}Informacija apie serverio uþduotis");
				ShowPlayerDialogEx(playerid, 4713, DIALOG_STYLE_TABLIST_HEADERS, "Serverio komandos. 3 puslapis", String, "2 puslapis", "Uþdaryti");
			}
			else
			{
				strcat(String, "Komanda\tInformacija\n");
				strcat(String, "{FFAF00} /info\t{ffffff}Iðvysite jûsø þaidëjo informacijà\n");
				strcat(String, "{FFAF00} /kviesti\t{ffffff}Iðkviesite policijà, taksá, autoserviso ECO darbuotojus arba medikus\n");
				strcat(String, "{FFAF00} /paslaugos\t{ffffff}Iðvysite mûsø teikiamas paslaugas uþ kreditus\n");
				strcat(String, "{FFAF00} /persirengti\t{ffffff}Persirengsite ið paprastø drabuþiø á darbinius ir atvirkðèiai\n");
				strcat(String, "{FFAF00} /alga\t{ffffff}Iðvysite jûsø uþdirbtà algà kurià atsiimti galima savivaldybëje\n");
				strcat(String, "{FFAF00} /mapp\t{ffffff}Suþinosite tam tikro þaidëjo buvimo vietà\n");
				strcat(String, "{FFAF00} /admin\t{ffffff}Iðvysite prisijungusià serverio administracijà\n");
				strcat(String, "{FFAF00} /direktoriai\t{ffffff}Iðvysite prisijungusius serverio darbø direktorius\n");
				strcat(String, "{FFAF00} /zvejyba\t{ffffff}Informacija apie jûsø þvejybos lygá bei patirtá\n");
				strcat(String, "{FFAF00} /direktoriams\t{ffffff}Paraðysite norimà þinutæ serverio darbø direktoriams\n");
				strcat(String, "{FFAF00} /pavaduotojams\t{ffffff}Paraðysite norimà þinutæ serverio darbø pavaduotojams\n");
				strcat(String, "{FFAF00} /navigacija | /gps\t{ffffff}Surasite svarbiausias serverio vietoves bei darbus\n");
				strcat(String, "{FFAF00} /veiksmai\t{ffffff}Iðvysite visas serverio veiksmø komandas\n");
				strcat(String, "{FFAF00} /telefonas\t{ffffff}Iðvysite visà telefonø valdymo lentelæ\n");
				strcat(String, "{FFAF00} /stiliai\t{ffffff}Galësite pasirinkti norimà muðimosi stiliø");
				ShowPlayerDialogEx(playerid, 4711, DIALOG_STYLE_TABLIST_HEADERS, "Serverio komandos. 1 puslapis", String, "Uþdaryti", "2 puslapis");
			}
		}

		case 4713:
		{
			if(response)
			{
				new String[2000];

				strcat(String, "Komanda\tInformacija\n");
				strcat(String, "{FFAF00} /darbai\t{ffffff}Iðvysite visus serverio darbus bei jø informacijà\n");
				strcat(String, "{FFAF00} /taisykles\t{ffffff}Iðvysite visas serverio taisykles kuriø privaloma laikytis\n");
				strcat(String, "{FFAF00} /akomandos\t{ffffff}Iðvysite visas VIP nariø bei administratoriø komandas\n");
				strcat(String, "{FFAF00} /ispejimai\t{ffffff}Iðvysite visus savo turimus áspëjimus\n");
				strcat(String, "{FFAF00} /paliktidarba\t{ffffff}Paliksite ðiuo metu dirbamà darbà\n");
				//strcat(String, "{FFAF00} /giedra\t{ffffff}Pasikeisite orà á giedrà\n");
				strcat(String, "{FFAF00} /salmas\t{ffffff}Uþsidësite/nusiimsite ðalmà jeigu já turite\n");
				strcat(String, "{FFAF00} /nustatymai\t{ffffff}Iðjungsite/ájungsite serverio tekstûras (Textdrawus)\n");
				strcat(String, "{FFAF00} /gkomandos\t{ffffff}Iðvysite visas neoficialiø gaujø komandas\n");
				strcat(String, "{FFAF00} /misija\t{ffffff}Galësite vykdyti serverio misijas uþ kurias gausite prizus\n");
				strcat(String, "{FFAF00} /cpass\t{ffffff}Pakeisite savo prisijungimo á þaidimà slaptaþodá\n");
				strcat(String, "{FFAF00} /duotirep\t{ffffff}Duosite +1 reputacijos taðkà pasirinktam þaidëjui\n");
				//strcat(String, "{FFAF00} /bausmes\t{ffffff}Iðvysite sàraðà uþ kà galite bûti baudþiamas\n");
				strcat(String, "{FFAF00} /vartotih\t{ffffff}Pradësite vartoti heroinà\n");
				strcat(String, "{FFAF00} /vartotic\t{ffffff}Pradësite vartoti kokainà");
				ShowPlayerDialogEx(playerid, 4712, DIALOG_STYLE_TABLIST_HEADERS, "Serverio komandos. 2 puslapis", String, "1 puslapis", "3 puslapis");
			}
		}

		case GaujosTobulininimas:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new Gang = GangMember(playerid);

						if(GangInfo[Gang][gPoints] < GangBandPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka taðkø nusipirkti ðá patobulinimà!");

						if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

						if(strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gaujos lyderis!");

						if(GangInfo[Gang][gVirve] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðis patobulinimas jûsø gaujoje jau yra!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote gaujos patobulinimà!");

						GangInfo[Gang][gVirve] = true;

						GangInfo[Gang][gPoints] -= GangBandPrice;
					}

					case 1:
					{
						new Gang = GangMember(playerid);

						if(GangInfo[Gang][gPoints] < GangTeleportPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka taðkø nusipirkti ðá patobulinimà!");

						if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

						if(strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gaujos lyderis!");

						if(GangInfo[Gang][gTele] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðis patobulinimas jûsø gaujoje jau yra!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote gaujos patobulinimà!");

						GangInfo[Gang][gTele] = true;

						GangInfo[Gang][gPoints] -= GangTeleportPrice;
					}

					case 2:
					{
						new Gang = GangMember(playerid);

						if(GangInfo[Gang][gPoints] < GangIsodintiPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka taðkø nusipirkti ðá patobulinimà!");

						if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

						if(strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gaujos lyderis!");

						if(GangInfo[Gang][gIsodinti] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðis patobulinimas jûsø gaujoje jau yra!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote gaujos patobulinimà!");

						GangInfo[Gang][gIsodinti] = true;

						GangInfo[Gang][gPoints] -= GangIsodintiPrice;
					}
					
					case 3:
					{
						new Gang = GangMember(playerid);

						if(GangInfo[Gang][gPoints] < GangKaukePrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka taðkø nusipirkti ðá patobulinimà!");

						if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

						if(strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gaujos lyderis!");

						if(GangInfo[Gang][gKauke] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðis patobulinimas jûsø gaujoje jau yra!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote gaujos patobulinimà!");

						GangInfo[Gang][gKauke] = true;

						GangInfo[Gang][gPoints] -= GangKaukePrice;
					}
					
					case 4:
					{
						new Gang = GangMember(playerid);

						if(GangInfo[Gang][gPoints] < GangKliutisPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka taðkø nusipirkti ðá patobulinimà!");

						if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

						if(strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gaujos lyderis!");

						if(GangInfo[Gang][gKliutis] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðis patobulinimas jûsø gaujoje jau yra!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote gaujos patobulinimà!");

						GangInfo[Gang][gKliutis] = true;

						GangInfo[Gang][gPoints] -= GangKliutisPrice;
					}
				}
			}
		}

		case AtsiskaitymasUzMaista:
		{
			if(response)
			{
				if(PI[playerid][PardSaskaita] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite uþ kà susimokëti!");

				if(GetPlayerMoneyA(playerid) < PI[playerid][PardSaskaita]) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

				GivePlayerMoneyA	(playerid, -PI[playerid][PardSaskaita]);
				SendClientMessage 	(playerid, -1, "{ffffff} Sëkmingai susimokëjote uþ savo prekes. Naudojimas - {FFAF00} /maistas{ffffff}!");

				switch(GetPlayerVirtualWorld(playerid))
				{
					case MAISTO_PARDUOTUVE1:
					{
						if(PropertyInfo[MAISTO_PARDUOTUVE1][pBuyed])
						{
							PropertyInfo[MAISTO_PARDUOTUVE1][pProfit] += PI[playerid][PardSaskaita];
						}
					}

					case MAISTO_PARDUOTUVE2:
					{
						if(PropertyInfo[MAISTO_PARDUOTUVE2][pBuyed])
						{
							PropertyInfo[MAISTO_PARDUOTUVE2][pProfit] += PI[playerid][PardSaskaita];
						}
					}
				}

				PI[playerid][PardSaskaita] = 0;
			}
		}

		case AtsiskaitymasUzKura:
		{
			if(response)
			{
				if(IpyleSuma[playerid] == 0.0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite uþ kà susimokëti!");

				if(GetPlayerMoneyA(playerid) < IpyleSuma[playerid]) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

				GivePlayerMoneyA	(playerid, -IpyleSuma[playerid]);
				SendClientMessage 	(playerid, -1, "{ffffff} Sëkmingai susimokëjote uþ ásipiltà kurà!");

				switch(GetPlayerVirtualWorld(playerid))
				{
					case STOTIES_DEGALINE:
					{
						if(PropertyInfo[STOTIES_DEGALINE][pBuyed])
						{
							PropertyInfo[STOTIES_DEGALINE][pProfit] += IpyleSuma[playerid];
						}
					}

					/*case VM_DEGALINE:
					{
						if(PropertyInfo[VM_DEGALINE][pBuyed])
						{
							PropertyInfo[VM_DEGALINE][pProfit] += IpyleSuma[playerid];
						}
					}*/

					case VIDUTINE_DEGALINE:
					{
						if(PropertyInfo[VIDUTINE_DEGALINE][pBuyed])
						{
							PropertyInfo[VIDUTINE_DEGALINE][pProfit] += IpyleSuma[playerid];
						}
					}

					case DIDELE_DEGALINE:
					{
						if(PropertyInfo[DIDELE_DEGALINE][pBuyed])
						{
							PropertyInfo[DIDELE_DEGALINE][pProfit] += IpyleSuma[playerid];
						}
					}
				}

				IpyleSuma[playerid] = 0;
			}
		}

		case ValgytiMaista:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(PI[playerid][Ledai] <= 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite ledø!");

						PI[playerid][Ledai] --;

						SendClientMessage 	(playerid, -1, "{ffffff} Valgote ledus!");
						Sotumas				(playerid, LEDU_KAINA * 2);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);
					}

					case 1:
					{
						if(PI[playerid][Sokoladas] <= 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite ðokolado!");

						PI[playerid][Sokoladas] --;

						SendClientMessage 	(playerid, -1, "{ffffff} Valgote ðokoladà!");
						Sotumas				(playerid, SOKOLADO_KAINA * 2);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);
					}

					case 2:
					{
						if(PI[playerid][Duona] <= 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite duonos!");

						PI[playerid][Duona] --;

						SendClientMessage 	(playerid, -1, "{ffffff} Valgote duonà!");
						Sotumas				(playerid, DUONOS_KAINA * 2);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);
					}

					case 3:
					{
						if(PI[playerid][Desra] <= 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite deðros!");

						PI[playerid][Desra] --;

						SendClientMessage 	(playerid, -1, "{ffffff} Valgote deðrà!");
						Sotumas				(playerid, DESROS_KAINA * 2);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);
					}

					case 4:
					{
						if(PI[playerid][Surelis] <= 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite sûrelio!");

						PI[playerid][Surelis] --;

						SendClientMessage 	(playerid, -1, "{ffffff} Valgote sûrelá!");
						Sotumas				(playerid, SURELIO_KAINA * 2);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);
					}

					case 5:
					{
						if(PI[playerid][Pizza] <= 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite picos!");

						PI[playerid][Pizza] --;

						SendClientMessage 	(playerid, -1, "{ffffff} Valgote picà!");
						Sotumas				(playerid, PICOS_KAINA * 2);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);
					}

					case 6:
					{
						if(PI[playerid][Sultys] <= 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite sulèiø!");

						PI[playerid][Sultys] --;

						SendClientMessage 			(playerid, -1, "{ffffff} Geriate sultis!");
						Sotumas						(playerid, SULCIU_KAINA * 2);
						Fix_SetPlayerSpecialAction	(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
					}
				}

				pc_cmd_maistas(playerid);
			}
		}

		case LeduPirkimoDialogas:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: // Nykðtukas $2
					{
						if(GetPlayerMoneyA(playerid) < 2) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -2);
						SendClientMessage 	(playerid, -1, "{ffffff} Suvalgëte ledus Nykðtukas!");
						Sotumas				(playerid, 2);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);
					}

					case 1: // Pols $4
					{
						if(GetPlayerMoneyA(playerid) < 4) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -4);
						SendClientMessage 	(playerid, -1, "{ffffff} Suvalgëte ledus Pols!");
						Sotumas				(playerid, 4);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);
					}

					case 2: // Dadu $3
					{
						if(GetPlayerMoneyA(playerid) < 3) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -3);
						SendClientMessage 	(playerid, -1, "{ffffff} Suvalgëte ledus Dadu!");
						Sotumas				(playerid, 3);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);
					}

					case 3: // Baltija $5
					{
						if(GetPlayerMoneyA(playerid) < 5) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -5);
						SendClientMessage 	(playerid, -1, "{ffffff} Suvalgëte ledus Baltija!");
						Sotumas				(playerid, 5);
						ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);
					}
				}
			}
		}

		case HotDogPirkimoDialogas:
		{
			if(response)
			{
				if(GetPlayerMoneyA(playerid) < 5) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

				GivePlayerMoneyA 	(playerid, -5);
				SendClientMessage 	(playerid, -1, "{ffffff} Suvalgëte Hot-Dog'à!");
				Sotumas				(playerid, 5);
				ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);
			}
		}

		case FastFoodPirkimoDialogas:
		{
			if(response)
			{
				if(GetPlayerMoneyA(playerid) < 10) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

				GivePlayerMoneyA 	(playerid, -10);
				SendClientMessage 	(playerid, -1, "{ffffff} Suvalgëte makaronø sriubà!");
				Sotumas				(playerid, 10);
				ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);
			}
		}

		case PatikrinimoDialogas:
		{
			if(response)
			{
				new str[1100];

				strcat(str, "Prieþastis\tÁtarimo lygis\n");
				strcat(str, "1. Vairavimas NON-RP \t10\n2. Vairavimas be teisiø \t15\n3. Vairavimas neblaiviam \t4\n4. Vaþiavimas be ðviesø bet kuriuo paros metu \t5\n");
				strcat(str, "5. Avarijos sukëlimas \t6\n6. Pabëgimas ið avarijos vietos \t8\n7. Greièio virðijimas (virð "#LEISTINAS_GREITIS" KM/H) \t8\n8. Civilio áþeidimas \t5\n");
				strcat(str, "9. Civilio suþeidimas \t15\n10. Civilio nuþudymas \t25\n11. Pareigûno áþeidimas \t10\n12. Pareigûno suþeidimas \t20\n");
				strcat(str, "13. Pareigûno nuþudymas \t30\n14. Narkotikø platinimas \t17\n15. Narkotikø vartojimas/laikymas \t15\n16. Ginklø platinimas \t12\n");
				strcat(str, "17. Necenzûriniø þodþiø vartojimas \t3\n18. Gràsinimai \t5\n19. Alkoholio vartojimas vieðai \t3\n20. Ðlapinimasis vieðai \t3\n");
				strcat(str, "21. Civilio suriðimas/pagrobimas \t30\n22. Pareigûno suriðimas/pagrobimas \t40\n23. Trukdymas policijos darbui \t15\n24. Bëgimas nuo policijos \t20\n");
				strcat(str, "25. Vairavimas be dirþo/ðalmo \t5\n26. Neregistruotos transp. priemonës eksploatacija \t20\n27. Techniðkai netvarkingos transp. priemonës eksploatacija \t15\n");
				ShowPlayerDialogEx(playerid, ItaDialog, DIALOG_STYLE_TABLIST_HEADERS, "Átarimas", str, "Átarti", "Uþdaryti");
			}
		}

		case ItaDialog:
		{
			if(response)
			{
				new Itariamas 	= ItariamasZaidejas[playerid];
				new Pareigunas	= ItariamasZaidejas[Itariamas];
				new str[200];

				if(Itariamas == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas atsijungë!");

				switch(listitem)
				{
					case 0: // Vairavimas NON-RP 10
					{
						GiveStars(Itariamas, 10);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}10 {ffffff}lygiu uþ: Vairavimas NON-RP.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}10 {ffffff}lygiu uþ: Vairavimas NON-RP.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 1: // Vairavimas be teisiø 15
					{
						GiveStars(Itariamas, 15);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}15 {ffffff}lygiu uþ: Vairavimas be teisiø.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}15 {ffffff}lygiu uþ: Vairavimas be teisiø.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 2: // Vairavimas neblaiviam 4
					{
						GiveStars(Itariamas, 4);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}4 {ffffff}lygiais uþ: Vairavimas neblaiviam.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}4 {ffffff}lygiais uþ: Vairavimas neblaiviam.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 3: // Vaþiavimas be ðviesø bet kuriuo paros metu 5
					{
						GiveStars(Itariamas, 5);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}5 {ffffff}lygiais uþ: Vaþiavimas be ðviesø.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}5 {ffffff}lygiais uþ: Vaþiavimas be ðviesø.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 4: // Avarijos sukëlimas 6
					{
						GiveStars(Itariamas, 6);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}6 {ffffff}lygiais uþ: Avarijos sukëlimas.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}6 {ffffff}lygiais uþ: Avarijos sukëlimas.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 5: // Pabëgimas ið avarijos vietos 8
					{
						GiveStars(Itariamas, 8);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}8 {ffffff}lygiais uþ: Pabëgimas ið avarijos vietos.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}8 {ffffff}lygiais uþ: Pabëgimas ið avarijos vietos.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 6: // Greièio virðijimas (virð 90 KM/H) 8
					{
						GiveStars(Itariamas, 8);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}8 {ffffff}lygiais uþ: Greièio virðijimas (virð "#LEISTINAS_GREITIS").", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}8 {ffffff}lygiais uþ: Greièio virðijimas.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 7: // Civilio áþeidimas 5
					{
						GiveStars(Itariamas, 5);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}5 {ffffff}lygiais uþ: Civilio áþeidimas.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}5 {ffffff}lygiais uþ: Civilio áþeidimas.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 8: // Civilio suþeidimas 15
					{
						GiveStars(Itariamas, 15);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}15 {ffffff}lygiu uþ: Civilio suþeidimas.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}15 {ffffff}lygiu uþ: Civilio suþeidimas.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 9: // Civilio nuþudymas 25
					{
						GiveStars(Itariamas, 25);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}25 {ffffff}lygiais uþ: Civilio nuþudymas.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}25 {ffffff}lygiais uþ: Civilio nuþudymas.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 10: // Pareigûno áþeidimas 10
					{
						GiveStars(Itariamas, 10);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}10 {ffffff}lygiu uþ: Pareigûno áþeidimas.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}10 {ffffff}lygiu uþ: Pareigûno áþeidimas.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 11: // Pareigûno suþeidimas 20
					{
						GiveStars(Itariamas, 20);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}20 {ffffff}lygiu uþ: Pareigûno suþeidimas.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}20 {ffffff}lygiu uþ: Pareigûno suþeidimas.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 12: // Pareigûno nuþudymas 30
					{
						GiveStars(Itariamas, 30);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}30 {ffffff}lygiu uþ: Pareigûno nuþudymas.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}30 {ffffff}lygiu uþ: Pareigûno nuþudymas.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 13: // Narkotikø platinimas 17
					{
						GiveStars(Itariamas, 17);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}17 {ffffff}lygiu uþ: Narkotikø platinimas.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}17 {ffffff}lygiu uþ: Narkotikø platinimas.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 14: // Narkotikø vartojimas/laikymas 15
					{
						GiveStars(Itariamas, 15);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}15 {ffffff}lygiu uþ: Narkotikø vartojimas/laikymas.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}15 {ffffff}lygiu uþ: Narkotikø vartojimas/laikymas.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 15: // Ginklø platinimas 12
					{
						GiveStars(Itariamas, 12);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}12 {ffffff}lygiu uþ: Ginklø platinimas.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}12 {ffffff}lygiu uþ: Ginklø platinimas.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 16: // Necenzûriniø þodþiø vartojimas 3
					{
						GiveStars(Itariamas, 3);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}3 {ffffff}lygiais uþ: Necenzûriniø þodþiø vartojimas.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}3 {ffffff}lygiais uþ: Necenzûriniø þodþiø vartojimas.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 17: // Gràsinimai 5
					{
						GiveStars(Itariamas, 5);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}5 {ffffff}lygiais uþ: Gràsinimai.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}5 {ffffff}lygiais uþ: Gràsinimai.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 18: // Alkoholio vartojimas vieðai 3
					{
						GiveStars(Itariamas, 3);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}3 {ffffff}lygiais uþ: Alkoholio vartojimas vieðai.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}3 {ffffff}lygiais uþ: Alkoholio vartojimas vieðai.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 19: // Ðlapinimasis vieðai 3
					{
						GiveStars(Itariamas, 3);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}3 {ffffff}lygiais uþ: Ðlapinimasis vieðai.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}3 {ffffff}lygiais uþ: Ðlapinimasis vieðai.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 20: // Civilio suriðimas/pagrobimas 30
					{
						GiveStars(Itariamas, 30);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}30 {ffffff}lygiu uþ: Civilio suriðimas/pagrobimas.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}30 {ffffff}lygiu uþ: Civilio suriðimas/pagrobimas.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 21: // Pareigûno suriðimas/pagrobimas 40
					{
						GiveStars(Itariamas, 40);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}40 {ffffff}lygiu uþ: Pareigûno suriðimas/pagrobimas.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}40 {ffffff}lygiu uþ: Pareigûno suriðimas/pagrobimas.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 22: // Trukdymas policijos darbui 15
					{
						GiveStars(Itariamas, 15);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}15 {ffffff}lygiu uþ: Trukdymas policijos darbui.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}15 {ffffff}lygiu uþ: Trukdymas policijos darbui.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 23: // Bëgimas nuo policijos 20
					{
						GiveStars(Itariamas, 20);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}20 {ffffff}lygiu uþ: Bëgimas nuo policijos.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}20 {ffffff}lygiu uþ: Bëgimas nuo policijos.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 24: // Vairavimas be dirþo/ðalmo 5
					{
						GiveStars(Itariamas, 5);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}5 {ffffff}lygiais uþ: Vairavimas be dirþo/ðalmo.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}5 {ffffff}lygiais uþ: Vairavimas be dirþo/ðalmo.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 25: // Neregistruotos transp. priemonës eksploatacija 20
					{
						GiveStars(Itariamas, 20);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}20 {ffffff}lygiu uþ: Neregistruota transp. priemonë.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}20 {ffffff}lygiu uþ: Neregistruota transp. priemonë.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}

					case 26: // Techniðkai netvarkingos transp. priemonës eksploatacija 15
					{
						GiveStars(Itariamas, 15);

						format(str, 170, "{ffffff} Pareigûnas {FFAF00}%s {ffffff}átarë jus {FFAF00}15 {ffffff}lygiais uþ: Nëra tech. apþiûros.", GetPlayerNameEx(Pareigunas));
						SendClientMessage(Itariamas, -1, str);

						format(str, 170, "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Átariau {FFAF00}%s {FFAF00}15 {ffffff}lygiais uþ: Nëra tech. apþiûros.", GetPlayerNameEx(Pareigunas), Pareigunas, GetPlayerNameEx(Itariamas));
						switch(PI[Pareigunas][specialybe])
						{
							case 1: ZinuteRacija(str, POLICIJA);
							case 5: ZinuteRacija(str, 5);
						}
					}
				}
			}
		}

		case LigoninesIsejimas:
		{
			if(response)
			{
				if(PI[playerid][JustDie] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gydomas, todël ið ligoninës galite iðeiti paprastai!");

				if(GetPlayerMoneyA(playerid) < 500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

				GivePlayerMoneyA(playerid, -500);

				PI[playerid][JustDie]            = 0;
				PI[playerid][HaveTimeUntilDeath] = 0;

				if(PI[playerid][uniformd])
			    {
			    	SetPlayerSkin(playerid, PI[playerid][uniforma]);
			    }
			    else
			    {
			    	SetPlayerSkin(playerid, PI[playerid][drabuziai]);
			    }

			    AC_SetPlayerPos 	(playerid, -2663.8132,598.2012,15.0553);
			    SetPlayerInterior 	(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
			}
		}

		case GinkluParduotuvesDialog:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(!PI[playerid][gLicenzija]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite ginklø licenzijos!");

						if(GetPlayerMoneyA(playerid) < 340) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						ac_GivePlayerWeapon 		(playerid, 5, 1);
						GivePlayerMoneyA 	(playerid, -340);
						OnPlayerPickUpPickup(playerid, PickupsInfo[GinkluParduotuve]);
						SendClientMessage 	(playerid, -1, "{ffffff} Nusipirkote ginklà {ffffff} Baseball Bat {ffffff}uþ {FFAF00}$340{ffffff}!");

						if(PropertyInfo[GINKLU_PARDUOTUVE][pBuyed])
						{
							PropertyInfo[GINKLU_PARDUOTUVE][pProfit] += 340;
						}
					}

					case 1:
					{
						if(!PI[playerid][gLicenzija]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite ginklø licenzijos!");

						if(GetPlayerMoneyA(playerid) < 1800) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						ac_GivePlayerWeapon 		(playerid, 22, 50);
						GivePlayerMoneyA 	(playerid, -1800);
						OnPlayerPickUpPickup(playerid, PickupsInfo[GinkluParduotuve]);
						SendClientMessage 	(playerid, -1, "{ffffff} Nusipirkote ginklà {ffffff} 9mm {ffffff}uþ {FFAF00}$1,800{ffffff}!");

						if(PropertyInfo[GINKLU_PARDUOTUVE][pBuyed])
						{
							PropertyInfo[GINKLU_PARDUOTUVE][pProfit] += 1800;
						}
					}

					case 2:
					{
						if(!PI[playerid][gLicenzija]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite ginklø licenzijos!");

						if(GetPlayerMoneyA(playerid) < 2200) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						ac_GivePlayerWeapon 		(playerid, 25, 30);
						GivePlayerMoneyA 	(playerid, -2200);
						OnPlayerPickUpPickup(playerid, PickupsInfo[GinkluParduotuve]);
						SendClientMessage 	(playerid, -1, "{ffffff} Nusipirkote ginklà {ffffff} Shotgun {ffffff}uþ {FFAF00}$2,200{ffffff}!");

						if(PropertyInfo[GINKLU_PARDUOTUVE][pBuyed])
						{
							PropertyInfo[GINKLU_PARDUOTUVE][pProfit] += 2200;
						}
					}

					case 3:
					{
						if(!PI[playerid][gLicenzija]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite ginklø licenzijos!");

						if(GetPlayerMoneyA(playerid) < 1100) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						ac_GivePlayerWeapon 		(playerid, 33, 50);
						GivePlayerMoneyA 	(playerid, -1100);
						OnPlayerPickUpPickup(playerid, PickupsInfo[GinkluParduotuve]);
						SendClientMessage 	(playerid, -1, "{ffffff} Nusipirkote ginklà {ffffff} Country Rifle {ffffff}uþ {FFAF00}$1,600{ffffff}!");

						if(PropertyInfo[GINKLU_PARDUOTUVE][pBuyed])
						{
							PropertyInfo[GINKLU_PARDUOTUVE][pProfit] += 1100;
						}
					}

					case 4:
					{
						if(GetPlayerMoneyA(playerid) < 800) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						SetPlayerArmourEx	(playerid, 100);
						GivePlayerMoneyA 	(playerid, -800);
						OnPlayerPickUpPickup(playerid, PickupsInfo[GinkluParduotuve]);
						SendClientMessage 	(playerid, -1, "{ffffff} Nusipirkote {ffffff} Ðarvai {ffffff}uþ {FFAF00}$800{ffffff}!");

						if(PropertyInfo[GINKLU_PARDUOTUVE][pBuyed])
						{
							PropertyInfo[GINKLU_PARDUOTUVE][pProfit] += 800;
						}
					}

					case 5:
					{
						if(PI[playerid][gLicenzija]) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite ginklø licenzijà!");

						if(PI[playerid][VisoPrazaide] < 120)
						{
							SendClientMessage(playerid, -1, "{ffffff} Ginklø licenzijà nusipirkti galësite tik praþaidus {FFAF00}120{ffffff} minuèiø!");

							return 1;
						}

						if(GetPlayerMoneyA(playerid) < 15000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA 	(playerid, -15000);
						OnPlayerPickUpPickup(playerid, PickupsInfo[GinkluParduotuve]);
						SendClientMessage 	(playerid, -1, "{ffffff} Nusipirkote {ffffff} ginklø licenzijà {ffffff}uþ {FFAF00}$15,000{ffffff}!");

						PI[playerid][gLicenzija] = true;

						if(PropertyInfo[GINKLU_PARDUOTUVE][pBuyed])
						{
							PropertyInfo[GINKLU_PARDUOTUVE][pProfit] += 5000;
						}
					}
				}
			}
		}

		case PakrautiMasina:
		{
			if(response)
			{
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti fûroje!");

				new vehicleid = GetPlayerVehicleID(playerid);

				if(!(FuristuMasina[0] <= vehicleid <= FuristuMasina[sizeof(FuristuMasina) - 1])) return SendClientMessage(playerid, -1, "{ffffff} Turite atvaþiuoti su fûra!");

				if(!IsTrailerAttachedToVehicle(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Turite atvaþiuoti su priekaba!");

				if(GetPlayerMoneyA(playerid) < 10000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

				new trailerid = GetVehicleTrailer(vehicleid);

				switch(listitem)
				{
					case 0:
					{
						//if(GetPlayerMoneyA(playerid) < 12000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -12000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 401);
					}

					case 1:
					{
						//if(GetPlayerMoneyA(playerid) < 3000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -3000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 404);
					}

					case 2:
					{
						//if(GetPlayerMoneyA(playerid) < 10000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -10000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 410);
					}

					case 3:
					{
						//if(GetPlayerMoneyA(playerid) < 18000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -18000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 412);
					}

					case 4:
					{
						//if(GetPlayerMoneyA(playerid) < 7000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -7000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 419);
					}

					case 5:
					{
						//if(GetPlayerMoneyA(playerid) < 5000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -5000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 436);
					}

					case 6:
					{
						//if(GetPlayerMoneyA(playerid) < 13000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -13000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 439);
					}

					case 7:
					{
						//if(GetPlayerMoneyA(playerid) < 10000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -10000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 445);
					}

					case 8:
					{
						//if(GetPlayerMoneyA(playerid) < 10000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -10000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 458);
					}

					case 9:
					{
						//if(GetPlayerMoneyA(playerid) < 3000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -3000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 466);
					}

					case 10:
					{
						//if(GetPlayerMoneyA(playerid) < 3000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -3000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 467);
					}

					case 11:
					{
						//if(GetPlayerMoneyA(playerid) < 10000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -10000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 479);
					}

					case 12:
					{
						//if(GetPlayerMoneyA(playerid) < 15000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -15000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 480);
					}

					case 13:
					{
						//if(GetPlayerMoneyA(playerid) < 8000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -8000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 491);
					}

					case 14:
					{
						//if(GetPlayerMoneyA(playerid) < 8000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -8000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 492);
					}

					case 15:
					{
						//if(GetPlayerMoneyA(playerid) < 8000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -8000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 507);
					}

					case 16:
					{
						//if(GetPlayerMoneyA(playerid) < 8000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -8000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 516);
					}

					case 17:
					{
						//if(GetPlayerMoneyA(playerid) < 8000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -8000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 517);
					}

					case 18:
					{
						//if(GetPlayerMoneyA(playerid) < 5000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -5000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 518);
					}

					case 19:
					{
						//if(GetPlayerMoneyA(playerid) < 5000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -5000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 526);
					}

					case 20:
					{
						//if(GetPlayerMoneyA(playerid) < 1500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -1500);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 580);
					}

					case 21:
					{
						//if(GetPlayerMoneyA(playerid) < 5000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -5000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 529);
					}

					case 22:
					{
						//if(GetPlayerMoneyA(playerid) < 8000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -8000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 533);
					}

					case 23:
					{
						//if(GetPlayerMoneyA(playerid) < 8000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -8000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 534);
					}

					case 24:
					{
						//if(GetPlayerMoneyA(playerid) < 13000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -13000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 536);
					}

					case 25:
					{
						//if(GetPlayerMoneyA(playerid) < 3000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -3000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 542);
					}

					case 26:
					{
						//if(GetPlayerMoneyA(playerid) < 1500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -1500);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 575);
					}

					case 27:
					{
						//if(GetPlayerMoneyA(playerid) < 4000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						//GivePlayerMoneyA(playerid, -4000);

						KraunamMasina[playerid] = SetTimerEx("KraunamMasinaEx", 1000, true, "dd", playerid, 576);
					}
				}

				SendClientMessage 			(playerid, -1, "{ffffff} Pradëjome krauti transp. priemonæ, teks truputi palaukti...");
				TogglePlayerControllable 	(playerid, false);
				GivePlayerMoneyA 			(playerid, -10000);
				RemovePlayerMapIcon 		(playerid, 99);

				VehicleInfo[trailerid][KiekPriekaboje] 	= 0;
				VehicleInfo[trailerid][KasPriekaboje] 	= -1;
			}
		}

		case GarazasDialog:
		{
			if(response)
			{
				new str[200];
		
				new Masina1[64], Masina2[64], Masina3[64];

				if(PI[playerid][Transportas1] == -1)		Masina1 = "-";
				else										format(Masina1, sizeof(Masina1), "%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas1]) - 400]);

				if(PI[playerid][Transportas2] == -1)		Masina2 = "-";
				else										format(Masina2, sizeof(Masina2), "%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas2]) - 400]);

				if(!PI[playerid][TransportoSlotas])
				{
					format(str, sizeof(str), "1. %s\n2. %s", Masina1, Masina2);
					ShowPlayerDialogEx(playerid, TSRegDialog, DIALOG_STYLE_LIST, "MetroCity.lt Garaþas", str, "Registruoti", "Atgal");
				}
				else
				{
					if(PI[playerid][Transportas3] == -1)	Masina3 = "-";
					else									format(Masina3, sizeof(Masina3), "%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas3]) - 400]);

					format(str, sizeof(str), "1. %s\n2. %s\n3. %s", Masina1, Masina2, Masina3);
					ShowPlayerDialogEx(playerid, TSRegDialog, DIALOG_STYLE_LIST, "MetroCity.lt Garaþas", str, "Registruoti", "Atgal");
				}

				switch(listitem)
				{
					case 0:
					{
						if(!PI[playerid][TransportoSlotas])
						{
							format(str, sizeof(str), "1. %s\n2. %s", Masina1, Masina2);
							ShowPlayerDialogEx(playerid, TSRegDialog, DIALOG_STYLE_LIST, "MetroCity.lt Garaþas", str, "Registruoti", "Atgal");
						}
						else
						{
							if(PI[playerid][Transportas3] == -1)	Masina3 = "-";
							else									format(Masina3, sizeof(Masina3), "%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas3]) - 400]);

							format(str, sizeof(str), "1. %s\n2. %s\n3. %s", Masina1, Masina2, Masina3);
							ShowPlayerDialogEx(playerid, TSRegDialog, DIALOG_STYLE_LIST, "MetroCity.lt Garaþas", str, "Registruoti", "Atgal");
						}
					}

					case 1:
					{
						if(!PI[playerid][TransportoSlotas])
						{
							format(str, sizeof(str), "1. %s\n2. %s", Masina1, Masina2);
							ShowPlayerDialogEx(playerid, DraudimoDialog, DIALOG_STYLE_LIST, "MetroCity.lt Garaþas", str, "Apdrausti", "Atgal");
						}
						else
						{
							if(PI[playerid][Transportas3] == -1)	Masina3 = "-";
							else									format(Masina3, sizeof(Masina3), "%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas3]) - 400]);

							format(str, sizeof(str), "1. %s\n2. %s\n3. %s", Masina1, Masina2, Masina3);
							ShowPlayerDialogEx(playerid, DraudimoDialog, DIALOG_STYLE_LIST, "MetroCity.lt Garaþas", str, "Apdrausti", "Atgal");
						}
					}
				}
			}
		}

		case DraudimoDialog:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new vehicleid = PI[playerid][Transportas1];

						if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(!strcmp("Neregistruota", VehicleInfo[vehicleid][vNumeriai], true)) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë yra neregistruota, todël apdrausti jos negalite!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(GetPlayerMoneyA(playerid) < 1500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(VehicleInfo[vehicleid][vSprogusi]) return SendClientMessage(playerid, -1, "{ffffff} Tr. priemonë yra sudauþyta, todël apdrausti dabar negalite!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						VehicleInfo[vehicleid][Draudimas] = gettime() + 259200;

						new str[128];
						format(str, sizeof(str), "{ffffff} Transp. priemonë sëkmingai apdrausta. Draudimas galios iki: {FFAF00}%s{ffffff}!", TimestampToDate(VehicleInfo[vehicleid][Draudimas]));
						SendClientMessage 	(playerid, -1, str);
						SavePlayerVehicle1 	(playerid);
						GivePlayerMoneyA 	(playerid, -1500);
						//OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(PropertyInfo[GARAZHAS][pBuyed])
						{
							PropertyInfo[GARAZHAS][pProfit] += 1500;
						}
					}

					case 1:
					{
						new vehicleid = PI[playerid][Transportas2];

						if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(!strcmp("Neregistruota", VehicleInfo[vehicleid][vNumeriai], true)) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë yra neregistruota, todël apdrausti jos negalite!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(GetPlayerMoneyA(playerid) < 1500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(VehicleInfo[vehicleid][vSprogusi]) return SendClientMessage(playerid, -1, "{ffffff} Tr. priemonë yra sudauþyta, todël apdrausti dabar negalite!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						VehicleInfo[vehicleid][Draudimas] = gettime() + 259200;

						new str[128];
						format(str, sizeof(str), "{ffffff} Transp. priemonë sëkmingai apdrausta. Draudimas galios iki: {FFAF00}%s{ffffff}!", TimestampToDate(VehicleInfo[vehicleid][Draudimas]));
						SendClientMessage 	(playerid, -1, str);
						SavePlayerVehicle1 	(playerid);
						GivePlayerMoneyA 	(playerid, -1500);
						//OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(PropertyInfo[GARAZHAS][pBuyed])
						{
							PropertyInfo[GARAZHAS][pProfit] += 1500;
						}
					}

					case 2:
					{
						new vehicleid = PI[playerid][Transportas3];

						if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(!strcmp("Neregistruota", VehicleInfo[vehicleid][vNumeriai], true)) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë yra neregistruota, todël apdrausti jos negalite!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(GetPlayerMoneyA(playerid) < 1500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(VehicleInfo[vehicleid][vSprogusi]) return SendClientMessage(playerid, -1, "{ffffff} Tr. priemonë yra sudauþyta, todël apdrausti dabar negalite!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						VehicleInfo[vehicleid][Draudimas] = gettime() + 259200;

						new str[128];
						format(str, sizeof(str), "{ffffff} Transp. priemonë sëkmingai apdrausta. Draudimas galios iki: {FFAF00}%s{ffffff}!", TimestampToDate(VehicleInfo[vehicleid][Draudimas]));
						SendClientMessage 	(playerid, -1, str);
						SavePlayerVehicle1 	(playerid);
						GivePlayerMoneyA 	(playerid, -1500);
						//OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(PropertyInfo[GARAZHAS][pBuyed])
						{
							PropertyInfo[GARAZHAS][pProfit] += 1500;
						}
					}
				}
			}
			else
			{
				OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);
			}
		}

		case TSRegDialog:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new vehicleid = PI[playerid][Transportas1];

						if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(strcmp("Neregistruota", VehicleInfo[vehicleid][vNumeriai], true)) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë jau uþregistruota!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(GetPlayerMoneyA(playerid) < 600) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						format(VehicleInfo[vehicleid][vNumeriai], 9, "%s", CreateLtuNumberPlate());
						SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

						new Float: V_Pos[4];
						GetVehiclePos 	(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);
						GetVehicleZAngle(vehicleid, V_Pos[3]);

						VehicleInfo[vehicleid][vLastPos][0] = V_Pos[0];
						VehicleInfo[vehicleid][vLastPos][1] = V_Pos[1];
						VehicleInfo[vehicleid][vLastPos][2] = V_Pos[2];
						VehicleInfo[vehicleid][vLastPos][3] = V_Pos[3];

						new str[128];
						format(str, sizeof(str), "{ffffff} Transp. priemonë sëkmingai uþregistruota. Jos numeriai: {FFAF00}%s{ffffff}!", VehicleInfo[vehicleid][vNumeriai]);
						SendClientMessage 	(playerid, -1, str);
						SavePlayerVehicle1 	(playerid);
						GivePlayerMoneyA 	(playerid, -600);
						ac_SetVehicleToRespawn (vehicleid);
					//	OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(PropertyInfo[GARAZHAS][pBuyed])
						{
							PropertyInfo[GARAZHAS][pProfit] += 600;
						}
					}

					case 1:
					{
						new vehicleid = PI[playerid][Transportas2];

						if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 2-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(strcmp("Neregistruota", VehicleInfo[vehicleid][vNumeriai], true)) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë jau uþregistruota!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(GetPlayerMoneyA(playerid) < 600) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						format(VehicleInfo[vehicleid][vNumeriai], 9, "%s", CreateLtuNumberPlate());
						SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

						new Float: V_Pos[4];
						GetVehiclePos 	(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);
						GetVehicleZAngle(vehicleid, V_Pos[3]);

						VehicleInfo[vehicleid][vLastPos][0] = V_Pos[0];
						VehicleInfo[vehicleid][vLastPos][1] = V_Pos[1];
						VehicleInfo[vehicleid][vLastPos][2] = V_Pos[2];
						VehicleInfo[vehicleid][vLastPos][3] = V_Pos[3];

						new str[128];
						format(str, sizeof(str), "{ffffff} Transp. priemonë sëkmingai uþregistruota. Jos numeriai: {FFAF00}%s{ffffff}!", VehicleInfo[vehicleid][vNumeriai]);
						SendClientMessage 	(playerid, -1, str);
						SavePlayerVehicle2 	(playerid);
						GivePlayerMoneyA 			(playerid, -600);
						ac_SetVehicleToRespawn (vehicleid);
						///OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(PropertyInfo[GARAZHAS][pBuyed])
						{
							PropertyInfo[GARAZHAS][pProfit] += 600;
						}
					}

					case 2:
					{
						new vehicleid = PI[playerid][Transportas3];

						if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 3-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(strcmp("Neregistruota", VehicleInfo[vehicleid][vNumeriai], true)) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë jau uþregistruota!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(GetPlayerMoneyA(playerid) < 600) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						format(VehicleInfo[vehicleid][vNumeriai], 9, "%s", CreateLtuNumberPlate());
						SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

						new Float: V_Pos[4];
						GetVehiclePos 	(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);
						GetVehicleZAngle(vehicleid, V_Pos[3]);

						VehicleInfo[vehicleid][vLastPos][0] = V_Pos[0];
						VehicleInfo[vehicleid][vLastPos][1] = V_Pos[1];
						VehicleInfo[vehicleid][vLastPos][2] = V_Pos[2];
						VehicleInfo[vehicleid][vLastPos][3] = V_Pos[3];

						new str[128];
						format(str, sizeof(str), "{ffffff} Transp. priemonë sëkmingai uþregistruota. Jos numeriai: {FFAF00}%s{ffffff}!", VehicleInfo[vehicleid][vNumeriai]);
						SendClientMessage 	(playerid, -1, str);
						SavePlayerVehicle3 	(playerid);
						GivePlayerMoneyA 			(playerid, -600);
						ac_SetVehicleToRespawn (vehicleid);
						///OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);

						if(PropertyInfo[GARAZHAS][pBuyed])
						{
							PropertyInfo[GARAZHAS][pProfit] += 600;
						}
					}
				}
			}
			else
			{
				OnPlayerPickUpPickup(playerid, PickupsInfo[Registracija]);
			}
		}

		case PagrTAdialog1:
		{
			new vehicleid = PI[playerid][masina], Float: V_Pos[3], Float: V_Health;

			if(response)
			{
				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Álipkite ir iðlipkite ið transp. priemonës, kuriai norite atlikti TA!");

				GetVehiclePos 	(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);
				GetVehicleHealth(vehicleid, V_Health);

				if(!IsPointInRangeOfPoint(V_Pos[0], V_Pos[1], V_Pos[2], -2343.8518,-96.6035,34.2190, 2.5))
				{
					return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë turi stovëti ant estakados!");
				}

				if(!VehicleInfo[vehicleid][vNupirkta]) return SendClientMessage(playerid, -1, "{ffffff} Ðiai transp. priemonei TA atlikti negalite!");

				if(VehicleInfo[vehicleid][vTA] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} TA ðioje transp. priemonëje dar galioja!");

				if(!strcmp("Neregistruota", VehicleInfo[vehicleid][vNumeriai], true)) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë yra neregistruota, todël TA atlikti negalime!");

				if(V_Health < 900.0) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonë yra per daug sudauþyta, bandykite kità kartà!");

				if(GetPlayerMoneyA(playerid) < 550) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

				VehicleInfo[vehicleid][vTA] = gettime() + 604800; // 7 dienos

				GivePlayerMoneyA 	(playerid, -550);
				SendClientMessage 	(playerid, -1, "{ffffff} Techninë apþiûra sëkmingai atlikta. Jos galiojimas: {FFAF00}7{ffffff} dienos!");
				SavePlayerVehicle1 	(playerid);
				SavePlayerVehicle2 	(playerid);
				SavePlayerVehicle3 	(playerid);

				if(PropertyInfo[GARAZHAS][pBuyed])
				{
					PropertyInfo[GARAZHAS][pProfit] += 550;
				}

				Pelnas[1] += 550;
			}
		}

		case PagrTAdialog:
		{
			new vehicleid = PI[playerid][masina], Float: V_Pos[3], Float: V_Health;

			if(response)
			{
				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Álipkite ir iðlipkite ið transp. priemonës, kuriai norite ámontuoti dujø árangà!");

				GetVehiclePos 	(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);
				GetVehicleHealth(vehicleid, V_Health);

				if(!IsPointInRangeOfPoint(V_Pos[0], V_Pos[1], V_Pos[2], -2343.8518,-96.6035,34.2190, 2.5))
				{
					return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë turi stovëti ant estakados!");
				}

				if(IsAMoto(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Ðiai transp. priemonei dujø árangos ámontuoti negalite!");

				if(!VehicleInfo[vehicleid][vNupirkta]) return SendClientMessage(playerid, -1, "{ffffff} Ðiai transp. priemonei dujø árangos ámontuoti negalite!");

				if(VehicleInfo[vehicleid][vKuroTipas] == DYZELIS) return SendClientMessage(playerid, -1, "{ffffff} Dyzeliniams varikliams dujø árangos ámontuoti negalima!");

				if(VehicleInfo[vehicleid][vDujos]) return SendClientMessage(playerid, -1, "{ffffff} Ðiai transp. priemonei dujø áranga jau ámontuota!");

				if(GetPlayerMoneyA(playerid) < 1200) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

				VehicleInfo[vehicleid][vDujos] 			= true;
				VehicleInfo[vehicleid][vDujuBakas]		= 50.0 + randomfloat(100.0);
				VehicleInfo[vehicleid][vDujuLikutis] 	= 0.0;

				GivePlayerMoneyA 	(playerid, -1200);
				SendClientMessage 	(playerid, -1, "{ffffff} Dujø áranga sëkmingai ámontuota á jûsø automobilá!");
				SavePlayerVehicle1 	(playerid);
				SavePlayerVehicle2 	(playerid);
				SavePlayerVehicle3 	(playerid);

				if(PropertyInfo[GARAZHAS][pBuyed])
				{
					PropertyInfo[GARAZHAS][pProfit] += 1200;
				}

				Pelnas[1] += 1200;
			}
		}

		case TurgausDialog:
		{
			if(response)
			{
				new String[400];
				new tvehicleid 	= PI[playerid][TurgausMasina];
				new model     	= GetVehicleModel(tvehicleid);

	        	if(PI[playerid][Transportas1] != -1 && PI[playerid][Transportas2] != -1)
	        	{
	        		if(!PI[playerid][TransportoSlotas]) return SendClientMessage(playerid, -1, "{ffffff} Treèio transporto slotà galite ásigyti paraðæ /paslaugos!");
			        else
			        {
			        	if(PI[playerid][Transportas3] != -1) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite 3 transp. priemones!");
			        }
	        	}

				if(TurgausInfo[tvehicleid][tKiekis] < 1) return SendClientMessage(playerid, -1, "{ffffff} Turguje nebëra ðios rûðies transporto!");

				if(GetPlayerMoneyA(playerid) < TurgausInfo[tvehicleid][tKaina]) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

				format(String, sizeof(String), "{ffffff} Nusipirkote {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff}!", VehicleNames[GetVehicleModel(tvehicleid) - 400], konvertuoti_pinigus(TurgausInfo[tvehicleid][tKaina]));
	   	        SendClientMessage(playerid, -1, String);

	   	        SendClientMessage(playerid, -1, "{ffffff} Transporto valdymas: {FFAF00} /transportas{ffffff}.");

	   	        TurgausInfo[tvehicleid][tKiekis] --;

				new KoksKuras[64];

				switch(VehicleInfo[tvehicleid][vKuroTipas])
				{
					case BENZINAS: 	KoksKuras = "Benzinas";
					case DYZELIS: 	KoksKuras = "Dyzelis";
				}

				new str[300];
				format(str, sizeof(str), "{ffffff}Pavadinimas: {FFAF00}%s\n{ffffff}Kaina: {FFAF00}$%s\n{ffffff}Kuro tipas: {ffffff} %s\n{ffffff}Kuro sànaudos: {FFAF00}%.2f L/10 KM\n{ffffff}Bako tûris: {FFAF00}%.2f L\n{ffffff}Turimas kiekis: {FFAF00}%d",
				VehicleNames[GetVehicleModel(tvehicleid) - 400], konvertuoti_pinigus(TurgausInfo[tvehicleid][tKaina]), KoksKuras, VehicleInfo[tvehicleid][vSanaudos], VehicleInfo[tvehicleid][vBakas], TurgausInfo[tvehicleid][tKiekis]);
	   	        //Update3DTextLabelText(TurgausInfo[tvehicleid][tText], -1, str);
	   	        UpdateDynamic3DTextLabelText(TurgausInfo[tvehicleid][tText], -1, str);

	   	        new Colors[2];

	   	        Colors[0] = random(126);
	   	        Colors[1] = random(126);

	   	        if(PI[playerid][Transportas1] == -1)
	   	        {
	   	        	new iRandom = random(sizeof(RandomTurgausSpawn));
    		  	    PI[playerid][Transportas1] = AC_CreateVehicle(model, RandomTurgausSpawn[iRandom][0], RandomTurgausSpawn[iRandom][1], RandomTurgausSpawn[iRandom][2] + 2, RandomTurgausSpawn[iRandom][3], Colors[0], Colors[1], -1);

	   	        	new vehicleid = PI[playerid][Transportas1];

	   	        	ac_SetVehicleToRespawn(vehicleid);

	   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
					format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

					VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
					VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
					VehicleInfo[vehicleid][vPaintjob] 	= -1;
					VehicleInfo[vehicleid][vUzraktas] 	= true;
					VehicleInfo[vehicleid][vNupirkta] 	= true;
					VehicleInfo[vehicleid][vRida] 		= 0.0;
					VehicleInfo[vehicleid][vSprogusi]  	= false;
					VehicleInfo[vehicleid][vDujos]		= false;
					VehicleInfo[vehicleid][vIjungta]	= false;
					VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
					VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
					VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
					VehicleInfo[vehicleid][vKaina]		= TurgausInfo[tvehicleid][tKaina];
					VehicleInfo[vehicleid][vTA]			= 0;

					switch(GetVehicleCategory(vehicleid))
					{
			    		case SPORT_VEHICLES:
			    		{
			    			VehicleInfo[vehicleid][vBakas]		= VehicleInfo[tvehicleid][vBakas];
			    			VehicleInfo[vehicleid][vKuroTipas] 	= VehicleInfo[tvehicleid][vKuroTipas];
		    		    	VehicleInfo[vehicleid][vSanaudos] 	= VehicleInfo[tvehicleid][vSanaudos];
			    		}

			    		case BIKES:
			    		{
			    			VehicleInfo[vehicleid][vBakas]		= VehicleInfo[tvehicleid][vBakas];
			    			VehicleInfo[vehicleid][vKuroTipas] 	= VehicleInfo[tvehicleid][vKuroTipas];
		    		    	VehicleInfo[vehicleid][vSanaudos] 	= VehicleInfo[tvehicleid][vSanaudos];
			    		}

			    		case NORMAL_VEHICLES:
			    		{
			    			VehicleInfo[vehicleid][vBakas]		= VehicleInfo[tvehicleid][vBakas];
			    			VehicleInfo[vehicleid][vKuroTipas] 	= VehicleInfo[tvehicleid][vKuroTipas];
		    		    	VehicleInfo[vehicleid][vSanaudos] 	= VehicleInfo[tvehicleid][vSanaudos];
			    		}

			    		case HEAVY_VEHICLES:
			    		{
			    			VehicleInfo[vehicleid][vBakas]		= VehicleInfo[tvehicleid][vBakas];
			    			VehicleInfo[vehicleid][vKuroTipas] 	= VehicleInfo[tvehicleid][vKuroTipas];
		    		    	VehicleInfo[vehicleid][vSanaudos] 	= VehicleInfo[tvehicleid][vSanaudos];
			    		}

			    		case BOATS:
			    		{
			    			VehicleInfo[vehicleid][vBakas]		= VehicleInfo[tvehicleid][vBakas];
			    			VehicleInfo[vehicleid][vKuroTipas] 	= VehicleInfo[tvehicleid][vKuroTipas];
		    		    	VehicleInfo[vehicleid][vSanaudos] 	= VehicleInfo[tvehicleid][vSanaudos];
			    		}
					}

					SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
					SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

					SavePlayerVehicle1(playerid);

	   	        	GivePlayerMoneyA 		(playerid, -TurgausInfo[tvehicleid][tKaina]);

	   	        	return 1;
	   	        }

	   	        if(PI[playerid][Transportas2] == -1)
	   	        {
	   	        	new iRandom = random(sizeof(RandomTurgausSpawn));
    		  	    PI[playerid][Transportas2] = AC_CreateVehicle(model, RandomTurgausSpawn[iRandom][0], RandomTurgausSpawn[iRandom][1], RandomTurgausSpawn[iRandom][2] + 2, RandomTurgausSpawn[iRandom][3], Colors[0], Colors[1], -1);

	   	        	new vehicleid = PI[playerid][Transportas2];

	   	        	ac_SetVehicleToRespawn(vehicleid);

	   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
					format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

					VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
					VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
					VehicleInfo[vehicleid][vPaintjob] 	= -1;
					VehicleInfo[vehicleid][vUzraktas] 	= true;
					VehicleInfo[vehicleid][vNupirkta] 	= true;
					VehicleInfo[vehicleid][vRida] 		= 0.0;
					VehicleInfo[vehicleid][vSprogusi]  	= false;
					VehicleInfo[vehicleid][vDujos]		= false;
					VehicleInfo[vehicleid][vIjungta]	= false;
					VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
					VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
					VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
					VehicleInfo[vehicleid][vKaina]		= TurgausInfo[tvehicleid][tKaina];
					VehicleInfo[vehicleid][vTA]			= 0;

					switch(GetVehicleCategory(vehicleid))
					{
			    		case SPORT_VEHICLES:
			    		{
			    			VehicleInfo[vehicleid][vBakas]		= VehicleInfo[tvehicleid][vBakas];
			    			VehicleInfo[vehicleid][vKuroTipas] 	= VehicleInfo[tvehicleid][vKuroTipas];
		    		    	VehicleInfo[vehicleid][vSanaudos] 	= VehicleInfo[tvehicleid][vSanaudos];
			    		}

			    		case BIKES:
			    		{
			    			VehicleInfo[vehicleid][vBakas]		= VehicleInfo[tvehicleid][vBakas];
			    			VehicleInfo[vehicleid][vKuroTipas] 	= VehicleInfo[tvehicleid][vKuroTipas];
		    		    	VehicleInfo[vehicleid][vSanaudos] 	= VehicleInfo[tvehicleid][vSanaudos];
			    		}

			    		case NORMAL_VEHICLES:
			    		{
			    			VehicleInfo[vehicleid][vBakas]		= VehicleInfo[tvehicleid][vBakas];
			    			VehicleInfo[vehicleid][vKuroTipas] 	= VehicleInfo[tvehicleid][vKuroTipas];
		    		    	VehicleInfo[vehicleid][vSanaudos] 	= VehicleInfo[tvehicleid][vSanaudos];
			    		}

			    		case HEAVY_VEHICLES:
			    		{
			    			VehicleInfo[vehicleid][vBakas]		= VehicleInfo[tvehicleid][vBakas];
			    			VehicleInfo[vehicleid][vKuroTipas] 	= VehicleInfo[tvehicleid][vKuroTipas];
		    		    	VehicleInfo[vehicleid][vSanaudos] 	= VehicleInfo[tvehicleid][vSanaudos];
			    		}

			    		case BOATS:
			    		{
			    			VehicleInfo[vehicleid][vBakas]		= VehicleInfo[tvehicleid][vBakas];
			    			VehicleInfo[vehicleid][vKuroTipas] 	= VehicleInfo[tvehicleid][vKuroTipas];
		    		    	VehicleInfo[vehicleid][vSanaudos] 	= VehicleInfo[tvehicleid][vSanaudos];
			    		}
					}

					SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
					SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

					SavePlayerVehicle2(playerid);

	   	        	GivePlayerMoneyA 		(playerid, -TurgausInfo[tvehicleid][tKaina]);

	   	        	return 1;
	   	        }

	   	        if(PI[playerid][Transportas3] == -1)
	   	        {
	   	        	new iRandom = random(sizeof(RandomTurgausSpawn));
    		  	    PI[playerid][Transportas3] = AC_CreateVehicle(model, RandomTurgausSpawn[iRandom][0], RandomTurgausSpawn[iRandom][1], RandomTurgausSpawn[iRandom][2] + 2, RandomTurgausSpawn[iRandom][3], Colors[0], Colors[1], -1);

	   	        	new vehicleid = PI[playerid][Transportas3];

	   	        	ac_SetVehicleToRespawn(vehicleid);

	   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
					format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

					VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
					VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
					VehicleInfo[vehicleid][vPaintjob] 	= -1;
					VehicleInfo[vehicleid][vUzraktas] 	= true;
					VehicleInfo[vehicleid][vNupirkta] 	= true;
					VehicleInfo[vehicleid][vRida] 		= 0.0;
					VehicleInfo[vehicleid][vSprogusi]  	= false;
					VehicleInfo[vehicleid][vDujos]		= false;
					VehicleInfo[vehicleid][vIjungta]	= false;
					VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
					VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
					VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
					VehicleInfo[vehicleid][vKaina]		= TurgausInfo[tvehicleid][tKaina];
					VehicleInfo[vehicleid][vTA]			= 0;

					switch(GetVehicleCategory(vehicleid))
					{
			    		case SPORT_VEHICLES:
			    		{
			    			VehicleInfo[vehicleid][vBakas]		= VehicleInfo[tvehicleid][vBakas];
			    			VehicleInfo[vehicleid][vKuroTipas] 	= VehicleInfo[tvehicleid][vKuroTipas];
		    		    	VehicleInfo[vehicleid][vSanaudos] 	= VehicleInfo[tvehicleid][vSanaudos];
			    		}

			    		case BIKES:
			    		{
			    			VehicleInfo[vehicleid][vBakas]		= VehicleInfo[tvehicleid][vBakas];
			    			VehicleInfo[vehicleid][vKuroTipas] 	= VehicleInfo[tvehicleid][vKuroTipas];
		    		    	VehicleInfo[vehicleid][vSanaudos] 	= VehicleInfo[tvehicleid][vSanaudos];
			    		}

			    		case NORMAL_VEHICLES:
			    		{
			    			VehicleInfo[vehicleid][vBakas]		= VehicleInfo[tvehicleid][vBakas];
			    			VehicleInfo[vehicleid][vKuroTipas] 	= VehicleInfo[tvehicleid][vKuroTipas];
		    		    	VehicleInfo[vehicleid][vSanaudos] 	= VehicleInfo[tvehicleid][vSanaudos];
			    		}

			    		case HEAVY_VEHICLES:
			    		{
			    			VehicleInfo[vehicleid][vBakas]		= VehicleInfo[tvehicleid][vBakas];
			    			VehicleInfo[vehicleid][vKuroTipas] 	= VehicleInfo[tvehicleid][vKuroTipas];
		    		    	VehicleInfo[vehicleid][vSanaudos] 	= VehicleInfo[tvehicleid][vSanaudos];
			    		}

			    		case BOATS:
			    		{
			    			VehicleInfo[vehicleid][vBakas]		= VehicleInfo[tvehicleid][vBakas];
			    			VehicleInfo[vehicleid][vKuroTipas] 	= VehicleInfo[tvehicleid][vKuroTipas];
		    		    	VehicleInfo[vehicleid][vSanaudos] 	= VehicleInfo[tvehicleid][vSanaudos];
			    		}
					}

					SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
					SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);
					SavePlayerVehicle3		(playerid);
	   	        	GivePlayerMoneyA 		(playerid, -TurgausInfo[tvehicleid][tKaina]);

	   	        	return 1;
	   	        }
			}
		}

		case PiltiKuraDialog:
		{
			if(response)
			{
				new vehicleid = PI[playerid][masina], String[128];

				ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.000000, 0, 0, 0, 0, -1);

				switch(listitem)
				{
					case 0: // Benzinas
					{
						if(VehicleInfo[vehicleid][vKuroTipas] == DYZELIS) return SendClientMessage(playerid, -1, "{ffffff} Ði transp. priemonë yra dyzelinio variklio!");

						PI[playerid][PasirinktasKuras] = BENZINAS;

						for(new s = 0; s < 6; s ++) 	TextDrawShowForPlayer(playerid, kuro_pilimas_g[s]);
						for(new s = 0; s < 3; s ++) 	PlayerTextDrawShow(playerid, kuro_pilimas_p[playerid][s]);

						FuelTimer[playerid] = SetTimerEx("PilamKura", 2000, true, "d", playerid);

						TogglePlayerControllable(playerid, false);
						SelectTextDraw			(playerid, 0x336633FF);

						switch(PI[playerid][PasirinktasKuras])
						{
							case BENZINAS:
							{
								if(GetPlayerMoneyA(playerid) < 3)
								{
									SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø kuro pilimui!");
									CancelSelectTextDraw	(playerid);
									KillTimer				(FuelTimer[playerid]);
									TogglePlayerControllable(playerid, true);

									KiekIpyle[playerid] = 0.0;

									for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
									for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

									return 1;
								}

								KiekIpyle[playerid] += 1.0;

								IpyleSuma[playerid] = 3 * floatround(KiekIpyle[playerid]);

								VehicleInfo[vehicleid][vKuras] += 1.0;

								format(String, sizeof(String), "Kuro tipas:~y~ benzinas~w~~n~Tarifas:~y~ $3/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
								PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);
							}

							case DYZELIS:
							{
								if(GetPlayerMoneyA(playerid) < 2)
								{
									SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø kuro pilimui!");
									CancelSelectTextDraw	(playerid);
									KillTimer				(FuelTimer[playerid]);
									TogglePlayerControllable(playerid, true);

									KiekIpyle[playerid] = 0.0;

									for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
									for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

									return 1;
								}

								KiekIpyle[playerid] += 1.0;

								IpyleSuma[playerid] = 2 * floatround(KiekIpyle[playerid]);

								VehicleInfo[vehicleid][vKuras] += 1.0;

								format(String, sizeof(String), "Kuro tipas:~y~ dyzelis~w~~n~Tarifas:~y~ $2/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
								PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);
							}

							case DUJOS:
							{
								if(GetPlayerMoneyA(playerid) < 2)
								{
									SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø dujø pilimui!");
									CancelSelectTextDraw	(playerid);
									KillTimer				(FuelTimer[playerid]);
									TogglePlayerControllable(playerid, true);

									KiekIpyle[playerid] = 0.0;

									for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
									for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

									return 1;
								}

								KiekIpyle[playerid] += 1.0;

								IpyleSuma[playerid] = 2 * floatround(KiekIpyle[playerid]);

								VehicleInfo[vehicleid][vDujuLikutis] += 1.0;

								format(String, sizeof(String), "Kuro tipas:~y~ dujos~w~~n~Tarifas:~y~ $2/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
								PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);

								PlayerTextDrawSetPreviewModel(playerid, kuro_pilimas_p[playerid][0], 3287);/// 3465 yra degalu o 3287 yra duju
							}
						}
					}

					case 1: // Dyzelis
					{
						if(VehicleInfo[vehicleid][vKuroTipas] == BENZINAS) return SendClientMessage(playerid, -1, "{ffffff} Ði transp. priemonë yra benzininio variklio!");

						PI[playerid][PasirinktasKuras] = DYZELIS;

						for(new s = 0; s < 6; s ++) 	TextDrawShowForPlayer(playerid, kuro_pilimas_g[s]);
						for(new s = 0; s < 3; s ++) 	PlayerTextDrawShow(playerid, kuro_pilimas_p[playerid][s]);

						FuelTimer[playerid] = SetTimerEx("PilamKura", 2000, true, "d", playerid);

						TogglePlayerControllable(playerid, false);
						SelectTextDraw			(playerid, 0x336633FF);

						switch(PI[playerid][PasirinktasKuras])
						{
							case BENZINAS:
							{
								if(GetPlayerMoneyA(playerid) < 3)
								{
									SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø kuro pilimui!");
									CancelSelectTextDraw	(playerid);
									KillTimer				(FuelTimer[playerid]);
									TogglePlayerControllable(playerid, true);

									KiekIpyle[playerid] = 0.0;

									for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
									for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

									return 1;
								}

								KiekIpyle[playerid] += 1.0;

								IpyleSuma[playerid] = 3 * floatround(KiekIpyle[playerid]);

								VehicleInfo[vehicleid][vKuras] += 1.0;

								format(String, sizeof(String), "Kuro tipas:~y~ benzinas~w~~n~Tarifas:~y~ $3/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
								PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);
							}

							case DYZELIS:
							{
								if(GetPlayerMoneyA(playerid) < 2)
								{
									SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø kuro pilimui!");
									CancelSelectTextDraw	(playerid);
									KillTimer				(FuelTimer[playerid]);
									TogglePlayerControllable(playerid, true);

									KiekIpyle[playerid] = 0.0;

									for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
									for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

									return 1;
								}

								KiekIpyle[playerid] += 1.0;

								IpyleSuma[playerid] = 2 * floatround(KiekIpyle[playerid]);

								VehicleInfo[vehicleid][vKuras] += 1.0;

								format(String, sizeof(String), "Kuro tipas:~y~ dyzelis~w~~n~Tarifas:~y~ $2/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
								PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);
							}

							case DUJOS:
							{
								if(GetPlayerMoneyA(playerid) < 2)
								{
									SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø dujø pilimui!");
									CancelSelectTextDraw	(playerid);
									KillTimer				(FuelTimer[playerid]);
									TogglePlayerControllable(playerid, true);

									KiekIpyle[playerid] = 0.0;

									for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
									for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

									return 1;
								}

								KiekIpyle[playerid] += 1.0;

								IpyleSuma[playerid] = 2 * floatround(KiekIpyle[playerid]);

								VehicleInfo[vehicleid][vDujuLikutis] += 1.0;

								format(String, sizeof(String), "Kuro tipas:~y~ dujos~w~~n~Tarifas:~y~ $2/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
								PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);

								PlayerTextDrawSetPreviewModel(playerid, kuro_pilimas_p[playerid][0], 3287);/// 3465 yra degalu o 3287 yra duju
							}
						}
					}
				}
			}
		}

		case MasinuValdymoDialogas3:
		{
			if(response)
			{
				new String[400];
				new vehicleid = PI[playerid][Transportas3];

				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 3-ojo transporto!");

				switch(listitem)
				{
					case 0, 1:
					{
						format(String, sizeof(String), "{F0EA2B}» Transportas: {FFAF00}%s\n \n\t{F0EA2B} Atrakinti/uþrakinti transportà\n\t{F0EA2B} Iðgauti transporto pozicijà\
						\n\t{F0EA2B} Parduoti transportà\n\t{F0EA2B} Atiduoti transportà\n\t{F0EA2B} Iðmesti visus þaidëjus ið transporto\n\t{F0EA2B} Transporto informacija", VehicleNames[GetVehicleModel(vehicleid) - 400]);
						ShowPlayerDialogEx(playerid, MasinuValdymoDialogas3, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Atgal");
					}

					case 2: // Atrakinti/uþrakinti transportà
					{
						if(VehicleInfo[vehicleid][vUzraktas])
						{
							GameTextForPlayer(playerid, "~w~Transp. priemone ~g~atrakinta!", 2000, 4);

							VehicleInfo[vehicleid][vUzraktas] = false;
						}
						else
						{
							GameTextForPlayer(playerid, "~w~Transp. priemone ~r~uzrakinta!", 2000, 4);

							VehicleInfo[vehicleid][vUzraktas] = true;
						}
					}

					case 3: // Iðgauti transporto pozicijà
					{
						new Float: V_Pos[3];	GetVehiclePos(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);

						SetPlayerCheckpointEx 	(playerid, 1, V_Pos[0], V_Pos[1], V_Pos[2], 3.0);
						SendClientMessage 		(playerid, -1, "{ffffff} Transp. priemonës pozicija paþymëta þemëlapyje.");
					}

					case 4: // Parduoti transportà
					{
						ShowPlayerDialogEx(playerid, MasinosPardDialogas3, DIALOG_STYLE_LIST, " ",
						"{F0EA2B} Parduoti transportà þaidëjui\n{F0EA2B} Parduoti transportà serveriui", "Pasirinkti", "Atgal");
					}

					case 5: // Atiduoti transportà
					{
						ShowPlayerDialogEx(playerid, MasinosAtidDialogas3, DIALOG_STYLE_INPUT, " ",
						"{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");
					}

					case 6: // Iðmesti visus þaidëjus ið transporto
					{
						for(new p = 0; p < MAX_PLAYERS; p ++)
						{
							if(p == playerid) continue;

							if(IsPlayerInVehicle(p, vehicleid))
							{
								RemovePlayerFromVehicle(p);
							}
						}

						SendClientMessage(playerid, -1, "{ffffff} Visi þaidëjai buvo iðmesti ið jûsø transp. priemonës.");

						return 1;
					}

					case 7: // Transporto informacija
					{
						ShowPlayerDialogEx(playerid, MasinosInfo3, DIALOG_STYLE_MSGBOX, " ", ShowVehicleInfo(vehicleid), "Atgal", "");
					}
				}
			}
			else
			{
				pc_cmd_transportas(playerid);
			}
		}

		case MasinosInfo3:
		{
			new String[400];
			new vehicleid = PI[playerid][Transportas3];

			if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 3-ojo transporto!");

			format(String, sizeof(String), "{F0EA2B}» Transportas: {FFAF00}%s\n \n\t{F0EA2B} Atrakinti/uþrakinti transportà\n\t{F0EA2B} Iðgauti transporto pozicijà\
			\n\t{F0EA2B} Parduoti transportà\n\t{F0EA2B} Atiduoti transportà\n\t{F0EA2B} Iðmesti visus þaidëjus ið transporto\n\t{F0EA2B} Transporto informacija", VehicleNames[GetVehicleModel(vehicleid) - 400]);
			ShowPlayerDialogEx(playerid, MasinuValdymoDialogas3, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Atgal");
		}

		case MasinosAtidDialogas3:
		{
			new String[400];
			new vehicleid = PI[playerid][Transportas3];

			if(response)
			{
				new giveplayerid, Float: P_Pos[3];

				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 3-ojo transporto!");

				if(sscanf(inputtext, "u", giveplayerid))
				{
					ShowPlayerDialogEx(playerid, MasinosAtidDialogas3, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Kaþkas blogai ávesta!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(strfind(inputtext, "%") != -1)
				{
					ShowPlayerDialogEx(playerid, MasinosAtidDialogas3, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Tekste rasta neleistinø simboliø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == INVALID_PLAYER_ID)
				{
					ShowPlayerDialogEx(playerid, MasinosAtidDialogas3, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Tokio þaidëjo nëra!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == playerid)
				{
					ShowPlayerDialogEx(playerid, MasinosAtidDialogas3, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Sau transporto atiduoti negalite!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(PI[giveplayerid][Transportas1] != -1 && PI[giveplayerid][Transportas2] != -1)
	        	{
	        		if(!PI[giveplayerid][TransportoSlotas])
			        {
	        			ShowPlayerDialogEx(playerid, MasinosAtidDialogas3, DIALOG_STYLE_INPUT, " ",
						"{FFAF00}Ðis þaidëjas jau nebegali turëti transp. priemoniø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

						return 1;
			        }
			        else
			        {
			        	if(PI[playerid][Transportas3] != -1)
			        	{
			        		ShowPlayerDialogEx(playerid, MasinosAtidDialogas3, DIALOG_STYLE_INPUT, " ",
							"{FFAF00}Ðis þaidëjas jau nebegali turëti transp. priemoniø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

							return 1;
			        	}
			        }
	        	}

				GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 5.0, P_Pos[0], P_Pos[1], P_Pos[2]))
				{
					ShowPlayerDialogEx(playerid, MasinosAtidDialogas3, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Þaidëjas per toli nuo jûsø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(PI[giveplayerid][Transportas1] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(giveplayerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Atidavëte transportà {FFAF00}%s {ffffff}þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], GetPlayerNameEx(giveplayerid));
	        		SendClientMessage(playerid, -1, String);

	        		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}atidavë jums savo transportà {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(vehicleid) - 400]);
	        		SendClientMessage(playerid, -1, String);

	        		PI[playerid][Transportas3] 		= -1;
	        		PI[giveplayerid][Transportas1]	= vehicleid;

					SavePlayerVehicle3 	(playerid);
					SavePlayerVehicle1 	(giveplayerid);

					return 1;
				}

				if(PI[giveplayerid][Transportas2] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(giveplayerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Atidavëte transportà {FFAF00}%s {ffffff}þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], GetPlayerNameEx(giveplayerid));
	        		SendClientMessage(playerid, -1, String);

	        		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}atidavë jums savo transportà {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(vehicleid) - 400]);
	        		SendClientMessage(playerid, -1, String);

	        		PI[playerid][Transportas3] 		= -1;
	        		PI[giveplayerid][Transportas2]	= vehicleid;

					SavePlayerVehicle3 	(playerid);
					SavePlayerVehicle2 	(giveplayerid);

					return 1;
				}

				if(PI[giveplayerid][Transportas3] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(giveplayerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Atidavëte transportà {FFAF00}%s {ffffff}þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], GetPlayerNameEx(giveplayerid));
	        		SendClientMessage(playerid, -1, String);

	        		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}atidavë jums savo transportà {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(vehicleid) - 400]);
	        		SendClientMessage(playerid, -1, String);

	        		PI[playerid][Transportas3] 		= -1;
	        		PI[giveplayerid][Transportas3]	= vehicleid;

					SavePlayerVehicle3 	(playerid);
					SavePlayerVehicle3 	(giveplayerid);

					return 1;
				}
			}
			else
			{
				pc_cmd_transportas(playerid);
			}
		}

		case MasinosPardDialogas3:
		{
			new String[400];
			new vehicleid = PI[playerid][Transportas3];

			if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 3-ojo transporto!");

			if(response)
			{
				switch(listitem)
				{
					case 0: // Parduoti transportà þaidëjui
					{
						ShowPlayerDialogEx(playerid, MasinosPardZaidejui3, DIALOG_STYLE_INPUT, " ",
						"{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");
					}

					case 1: // Parduoti transportà serveriui
					{
						format(String, sizeof(String), "{ffffff}Ar tikrai norite parduoti transportà {02FF5B}%s {ffffff}uþ {02FF5B}$%s{ffffff}?", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(VehicleInfo[vehicleid][vKaina] / 2));
						ShowPlayerDialogEx(playerid, MasinosPardavimas3, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");
					}
				}
			}
			else
			{
				format(String, sizeof(String), "{F0EA2B}» Transportas: {FFAF00}%s\n \n\t{F0EA2B} Atrakinti/uþrakinti transportà\n\t{F0EA2B} Iðgauti transporto pozicijà\
				\n\t{F0EA2B} Parduoti transportà\n\t{F0EA2B} Atiduoti transportà\n\t{F0EA2B} Iðmesti visus þaidëjus ið transporto\n\t{F0EA2B} Transporto informacija", VehicleNames[GetVehicleModel(vehicleid) - 400]);
				ShowPlayerDialogEx(playerid, MasinuValdymoDialogas3, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Atgal");
			}
		}

		case MasinosPardavimas3:
		{
			new String[400];
			if(response)
			{
				new vehicleid = PI[playerid][Transportas3], modelid = GetVehicleModel(vehicleid);

				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 3-ojo transporto!");

				if(!IsVehicleInZone(vehicleid, PardavimoZona))
				{
					SendClientMessage(playerid, -1, "{ffffff} Jûsø transportas stovi ne pardavimo zonoje!");
					SendClientMessage(playerid, -1, "{ffffff} Transporto pardavimo zonà rasite: {FFAF00} /gps > Kitos vietovës > Transporto pardavimo zona{ffffff}!");

					return 1;
				}

				new MoneyCount = floatround(VehicleInfo[vehicleid][vKaina] / 2);

				GivePlayerMoneyA(playerid, MoneyCount);

				PI[playerid][Transportas3] = -1;

				DestroyVehicle			(vehicleid);
				ClearVehicleVariables 	(vehicleid);
                SavePlayerVehicle3 		(playerid);

                format(String, sizeof(String), "{ffffff} Pardavëte transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff}.", (modelid) ? (VehicleNames[modelid - 400]) : ("N/A"), konvertuoti_pinigus(MoneyCount));
        		SendClientMessage(playerid, -1, String);
			}
			else
			{
				ShowPlayerDialogEx(playerid, MasinosPardDialogas3, DIALOG_STYLE_LIST, " ",
				"{F0EA2B} Parduoti transportà þaidëjui\n{F0EA2B} Parduoti transportà serveriui", "Pasirinkti", "Atgal");
			}
		}

		case MasinosPirkimoDialogas3:
		{
			new String[400];
			new Pardavejas = PasirinktasZaidejas[playerid], MoneyCount = MasinosKainaEx[playerid], vehicleid = PI[Pardavejas][Transportas3];

			if(Pardavejas == INVALID_PLAYER_ID)
			{
				SendClientMessage(playerid, -1, "{ffffff} Transporto nusipirkti nepavyko, kadangi pardavëjas atsijungë!");

				return 1;
			}

			if(response)
			{
				if(vehicleid == -1)
				{
					SendClientMessage(Pardavejas, -1, "{ffffff} Transporto parduoti nepavyko, kadangi jo jau nebeturite!");
					SendClientMessage(playerid, -1, "{ffffff} Transporto nusipirkti nepavyko, kadangi pardavëjas jo nebeturi!");

					return 1;
				}


				if(GetPlayerMoneyA(playerid) < MoneyCount)
				{
					SendClientMessage(Pardavejas, -1, "{ffffff} Transporto parduoti nepavyko, kadangi þaidëjui neuþtenka pinigø!");
					SendClientMessage(playerid, -1, "{ffffff} Transporto nusipirkti nepavyko, kadangi jums neuþtenka pinigø!");

					return 1;
				}

				if(PI[playerid][Transportas1] != -1 && PI[playerid][Transportas2] != -1)
	        	{
	        		if(!PI[playerid][TransportoSlotas])
			        {
	        			SendClientMessage(Pardavejas, -1, "{ffffff} Transporto parduoti nepavyko, kadangi þaidëjas nebegali turëti daugiau transp. priemoniø!");
						SendClientMessage(playerid, -1, "{ffffff} Transporto nusipirkti nepavyko, kadangi jus nebegalite turëti daugiau transp. priemoniø!");

						return 1;
			        }
			        else
			        {
			        	if(PI[playerid][Transportas3] != -1)
			        	{
			        		SendClientMessage(Pardavejas, -1, "{ffffff} Transporto parduoti nepavyko, kadangi þaidëjas nebegali turëti daugiau transp. priemoniø!");
							SendClientMessage(playerid, -1, "{ffffff} Transporto nusipirkti nepavyko, kadangi jus nebegalite turëti daugiau transp. priemoniø!");

							return 1;
			        	}
			        }
	        	}

				if(PI[playerid][Transportas1] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Pardavëte transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(playerid));
	        		SendClientMessage(Pardavejas, -1, String);

	        		format(String, sizeof(String), "{ffffff} Nusipirkote transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} ið {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(Pardavejas));
	        		SendClientMessage(playerid, -1, String);

	        		PI[Pardavejas][Transportas3] 	= -1;
	        		PI[playerid][Transportas1]		= vehicleid;

					GivePlayerMoneyA 			(Pardavejas, MoneyCount);
					GivePlayerMoneyA 			(playerid, -MoneyCount);
					SavePlayerVehicle3 	(Pardavejas);
					SavePlayerVehicle1 	(playerid);

					return 1;
				}

				if(PI[playerid][Transportas2] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Pardavëte transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(playerid));
	        		SendClientMessage(Pardavejas, -1, String);

	        		format(String, sizeof(String), "{ffffff} Nusipirkote transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} ið {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(Pardavejas));
	        		SendClientMessage(playerid, -1, String);

	        		PI[Pardavejas][Transportas3] 	= -1;
	        		PI[playerid][Transportas2]		= vehicleid;

					GivePlayerMoneyA 			(Pardavejas, MoneyCount);
					GivePlayerMoneyA 			(playerid, -MoneyCount);
					SavePlayerVehicle3 	(Pardavejas);
					SavePlayerVehicle2 	(playerid);

					return 1;
				}

				if(PI[playerid][Transportas3] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Pardavëte transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(playerid));
	        		SendClientMessage(Pardavejas, -1, String);

	        		format(String, sizeof(String), "{ffffff} Nusipirkote transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} ið {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(Pardavejas));
	        		SendClientMessage(playerid, -1, String);

	        		PI[Pardavejas][Transportas3] 	= -1;
	        		PI[playerid][Transportas3]		= vehicleid;

					GivePlayerMoneyA 			(Pardavejas, MoneyCount);
					GivePlayerMoneyA 			(playerid, -MoneyCount);
					SavePlayerVehicle3 	(Pardavejas);
					SavePlayerVehicle3 	(playerid);

					return 1;
				}
			}
			else
			{
				SendClientMessage(Pardavejas, -1, "{ffffff} Þaidëjas atsisakë nusipirkti jûsø siûlomà transportà!");
				SendClientMessage(playerid, -1, "{ffffff} Atsisakëte nusipirkti siûlomà transportà!");
			}
		}

		case MasinosPardZaidejui3:
		{
			new String[400];
			if(response)
			{
				new vehicleid = PI[playerid][Transportas3];

				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 3-ojo transporto!");

				new giveplayerid, MoneyCount, Float: P_Pos[3];

				if(sscanf(inputtext, "ud", giveplayerid, MoneyCount))
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui3, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Kaþkas blogai ávesta!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(strfind(inputtext, "%") != -1)
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui3, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Tekste rasta neleistinø simboliø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == INVALID_PLAYER_ID)
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui3, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Tokio þaidëjo nëra!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == playerid)
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui3, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Sau transporto parduoti negalite!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(PI[giveplayerid][Transportas1] != -1 && PI[giveplayerid][Transportas2] != -1)
	        	{
	        		if(!PI[giveplayerid][TransportoSlotas])
			        {
	        			ShowPlayerDialogEx(playerid, MasinosPardZaidejui3, DIALOG_STYLE_INPUT, " ",
						"{FFAF00}Ðis þaidëjas jau nebegali turëti transp. priemoniø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

	        			return 1;
			        }
			        else
			        {
			        	if(PI[playerid][Transportas3] != -1)
			        	{
			        		ShowPlayerDialogEx(playerid, MasinosPardZaidejui3, DIALOG_STYLE_INPUT, " ",
							"{FFAF00}Ðis þaidëjas jau nebegali turëti transp. priemoniø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

			        		return 1;
			        	}
			        }
	        	}

				if(MoneyCount < 1)
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui3, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Blogai nurodëte pardavimo kainà!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 5.0, P_Pos[0], P_Pos[1], P_Pos[2]))
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui3, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Þaidëjas per toli nuo jûsø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				PasirinktasZaidejas[playerid] 		= giveplayerid;
				PasirinktasZaidejas[giveplayerid]	= playerid;
				MasinosKainaEx[playerid]			= MoneyCount;
				MasinosKainaEx[giveplayerid]		= MoneyCount;

				new KoksKuras[64];

				switch(VehicleInfo[vehicleid][vKuroTipas])
				{
					case BENZINAS: 	KoksKuras = "Benzinas";
					case DYZELIS: 	KoksKuras = "Dyzelis";
				}

				new ArDujos[64];

				if(VehicleInfo[vehicleid][vDujos] == true)	ArDujos = "Yra";
				else 										ArDujos = "Nëra";

				format(String, sizeof(String), "{ffffff}Þaidëjas {02FF5B}%s {ffffff}siûlo jums pirkti jo transportà uþ {02FF5B}$%s{ffffff}:\n \n \t{ffffff}Pavadinimas: {02FF5B}%s\n\t{ffffff}Rida: {02FF5B}%.2f KM\n\t{ffffff}Kuro tipas: {02FF5B}%s\n\t{ffffff}Kuro sànaudos: {02FF5B}%.2f L/10 KM\n\t{ffffff}Bako tûris: {02FF5B}%.2f L\n\t{ffffff}Dujø áranga: {02FF5B}%s\n \n{ffffff}Ar tikrai norite pirkti ðá transportà?",
				GetPlayerNameEx(playerid), konvertuoti_pinigus(MoneyCount), VehicleNames[GetVehicleModel(vehicleid) - 400], VehicleInfo[vehicleid][vRida], KoksKuras, VehicleInfo[vehicleid][vSanaudos], VehicleInfo[vehicleid][vBakas], ArDujos);
				ShowPlayerDialogEx(giveplayerid, MasinosPirkimoDialogas3, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");
			}
			else
			{
				ShowPlayerDialogEx(playerid, MasinosPardDialogas3, DIALOG_STYLE_LIST, " ",
				"{F0EA2B} Parduoti transportà þaidëjui\n{F0EA2B} Parduoti transportà serveriui", "Pasirinkti", "Atgal");
			}
		}

		case MasinuValdymoDialogas2:
		{
			new String[400];
			if(response)
			{
				new vehicleid = PI[playerid][Transportas2];

				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 2-ojo transporto!");

				switch(listitem)
				{
					case 0, 1:
					{
						format(String, sizeof(String), "{F0EA2B}» Transportas: {FFAF00}%s\n \n\t{F0EA2B} Atrakinti/uþrakinti transportà\n\t{F0EA2B} Iðgauti transporto pozicijà\
						\n\t{F0EA2B} Parduoti transportà\n\t{F0EA2B} Atiduoti transportà\n\t{F0EA2B} Iðmesti visus þaidëjus ið transporto\n\t{F0EA2B} Transporto informacija", VehicleNames[GetVehicleModel(vehicleid) - 400]);
						ShowPlayerDialogEx(playerid, MasinuValdymoDialogas2, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Atgal");
					}

					case 2: // Atrakinti/uþrakinti transportà
					{
						if(VehicleInfo[vehicleid][vUzraktas])
						{
							GameTextForPlayer(playerid, "~w~Transp. priemone ~g~atrakinta!", 2000, 4);

							VehicleInfo[vehicleid][vUzraktas] = false;
						}
						else
						{
							GameTextForPlayer(playerid, "~w~Transp. priemone ~r~uzrakinta!", 2000, 4);

							VehicleInfo[vehicleid][vUzraktas] = true;
						}
					}

					case 3: // Iðgauti transporto pozicijà
					{
						new Float: V_Pos[3];	GetVehiclePos(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);

						SetPlayerCheckpointEx 	(playerid, 1, V_Pos[0], V_Pos[1], V_Pos[2], 3.0);
						SendClientMessage 		(playerid, -1, "{ffffff} Transp. priemonës pozicija paþymëta þemëlapyje.");
					}

					case 4: // Parduoti transportà
					{
						ShowPlayerDialogEx(playerid, MasinosPardDialogas2, DIALOG_STYLE_LIST, " ",
						"{F0EA2B} Parduoti transportà þaidëjui\n{F0EA2B} Parduoti transportà serveriui", "Pasirinkti", "Atgal");
					}

					case 5: // Atiduoti transportà
					{
						ShowPlayerDialogEx(playerid, MasinosAtidDialogas2, DIALOG_STYLE_INPUT, " ",
						"{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");
					}

					case 6: // Iðmesti visus þaidëjus ið transporto
					{
						for(new p = 0; p < MAX_PLAYERS; p ++)
						{
							if(p == playerid) continue;

							if(IsPlayerInVehicle(p, vehicleid))
							{
								RemovePlayerFromVehicle(p);
							}
						}

						SendClientMessage(playerid, -1, "{ffffff} Visi þaidëjai buvo iðmesti ið jûsø transp. priemonës.");

						return 1;
					}

					case 7: // Transporto informacija
					{
						ShowPlayerDialogEx(playerid, MasinosInfo2, DIALOG_STYLE_MSGBOX, " ", ShowVehicleInfo(vehicleid), "Atgal", "");
					}
				}
			}
			else
			{
				pc_cmd_transportas(playerid);
			}
		}

		case MasinosInfo2:
		{
			new String[400];
			new vehicleid = PI[playerid][Transportas2];

			if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 2-ojo transporto!");

			format(String, sizeof(String), "{F0EA2B}» Transportas: {FFAF00}%s\n \n\t{F0EA2B} Atrakinti/uþrakinti transportà\n\t{F0EA2B} Iðgauti transporto pozicijà\
			\n\t{F0EA2B} Parduoti transportà\n\t{F0EA2B} Atiduoti transportà\n\t{F0EA2B} Iðmesti visus þaidëjus ið transporto\n\t{F0EA2B} Transporto informacija", VehicleNames[GetVehicleModel(vehicleid) - 400]);
			ShowPlayerDialogEx(playerid, MasinuValdymoDialogas2, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Atgal");
		}

		case MasinosAtidDialogas2:
		{
			new String[400];
			new vehicleid = PI[playerid][Transportas2];

			if(response)
			{
				new giveplayerid, Float: P_Pos[3];

				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 2-ojo transporto!");

				if(sscanf(inputtext, "u", giveplayerid))
				{
					ShowPlayerDialogEx(playerid, MasinosAtidDialogas2, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Kaþkas blogai ávesta!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(strfind(inputtext, "%") != -1)
				{
					ShowPlayerDialogEx(playerid, MasinosAtidDialogas2, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Tekste rasta neleistinø simboliø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == INVALID_PLAYER_ID)
				{
					ShowPlayerDialogEx(playerid, MasinosAtidDialogas2, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Tokio þaidëjo nëra!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == playerid)
				{
					ShowPlayerDialogEx(playerid, MasinosAtidDialogas2, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Sau transporto atiduoti negalite!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(PI[giveplayerid][Transportas1] != -1 && PI[giveplayerid][Transportas2] != -1)
	        	{
	        		if(!PI[giveplayerid][TransportoSlotas])
			        {
	        			ShowPlayerDialogEx(playerid, MasinosAtidDialogas2, DIALOG_STYLE_INPUT, " ",
						"{FFAF00}Ðis þaidëjas jau nebegali turëti transp. priemoniø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

						return 1;
			        }
			        else
			        {
			        	if(PI[playerid][Transportas3] != -1)
			        	{
			        		ShowPlayerDialogEx(playerid, MasinosAtidDialogas2, DIALOG_STYLE_INPUT, " ",
							"{FFAF00}Ðis þaidëjas jau nebegali turëti transp. priemoniø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

							return 1;
			        	}
			        }
	        	}

				GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 5.0, P_Pos[0], P_Pos[1], P_Pos[2]))
				{
					ShowPlayerDialogEx(playerid, MasinosAtidDialogas2, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Þaidëjas per toli nuo jûsø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(PI[giveplayerid][Transportas1] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(giveplayerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Atidavëte transportà {FFAF00}%s {ffffff}þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], GetPlayerNameEx(giveplayerid));
	        		SendClientMessage(playerid, -1, String);

	        		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}atidavë jums savo transportà {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(vehicleid) - 400]);
	        		SendClientMessage(playerid, -1, String);

	        		PI[playerid][Transportas2] 		= -1;
	        		PI[giveplayerid][Transportas1]	= vehicleid;

					SavePlayerVehicle2 	(playerid);
					SavePlayerVehicle1 	(giveplayerid);

					return 1;
				}

				if(PI[giveplayerid][Transportas2] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(giveplayerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Atidavëte transportà {FFAF00}%s {ffffff}þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], GetPlayerNameEx(giveplayerid));
	        		SendClientMessage(playerid, -1, String);

	        		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}atidavë jums savo transportà {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(vehicleid) - 400]);
	        		SendClientMessage(playerid, -1, String);

	        		PI[playerid][Transportas2] 		= -1;
	        		PI[giveplayerid][Transportas2]	= vehicleid;

					SavePlayerVehicle2 	(playerid);
					SavePlayerVehicle2 	(giveplayerid);

					return 1;
				}

				if(PI[giveplayerid][Transportas3] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(giveplayerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Atidavëte transportà {FFAF00}%s {ffffff}þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], GetPlayerNameEx(giveplayerid));
	        		SendClientMessage(playerid, -1, String);

	        		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}atidavë jums savo transportà {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(vehicleid) - 400]);
	        		SendClientMessage(playerid, -1, String);

	        		PI[playerid][Transportas2] 		= -1;
	        		PI[giveplayerid][Transportas3]	= vehicleid;

					SavePlayerVehicle2 	(playerid);
					SavePlayerVehicle3 	(giveplayerid);

					return 1;
				}
			}
			else
			{
				pc_cmd_transportas(playerid);
			}
		}

		case MasinosPardDialogas2:
		{
			new String[400];
			new vehicleid = PI[playerid][Transportas2];

			if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 2-ojo transporto!");

			if(response)
			{
				switch(listitem)
				{
					case 0: // Parduoti transportà þaidëjui
					{
						ShowPlayerDialogEx(playerid, MasinosPardZaidejui2, DIALOG_STYLE_INPUT, " ",
						"{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");
					}

					case 1: // Parduoti transportà serveriui
					{
						format(String, sizeof(String), "{ffffff}Ar tikrai norite parduoti transportà {02FF5B}%s {ffffff}uþ {02FF5B}$%s{ffffff}?", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(VehicleInfo[vehicleid][vKaina] / 2));
						ShowPlayerDialogEx(playerid, MasinosPardavimas2, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");
					}
				}
			}
			else
			{
				format(String, sizeof(String), "{F0EA2B}» Transportas: {FFAF00}%s\n \n\t{F0EA2B} Atrakinti/uþrakinti transportà\n\t{F0EA2B} Iðgauti transporto pozicijà\
				\n\t{F0EA2B} Parduoti transportà\n\t{F0EA2B} Atiduoti transportà\n\t{F0EA2B} Iðmesti visus þaidëjus ið transporto\n\t{F0EA2B} Transporto informacija", VehicleNames[GetVehicleModel(vehicleid) - 400]);
				ShowPlayerDialogEx(playerid, MasinuValdymoDialogas2, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Atgal");
			}
		}

		case MasinosPardavimas2:
		{
			new String[400];
			if(response)
			{
				new vehicleid = PI[playerid][Transportas2], modelid = GetVehicleModel(vehicleid);

				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 2-ojo transporto!");

				if(!IsVehicleInZone(vehicleid, PardavimoZona))
				{
					SendClientMessage(playerid, -1, "{ffffff} Jûsø transportas stovi ne pardavimo zonoje!");
					SendClientMessage(playerid, -1, "{ffffff} Transporto pardavimo zonà rasite: {FFAF00} /gps > Kitos vietovës > Transporto pardavimo zona{ffffff}!");

					return 1;
				}

				new MoneyCount = floatround(VehicleInfo[vehicleid][vKaina] / 2);

				GivePlayerMoneyA(playerid, MoneyCount);

				PI[playerid][Transportas2] = -1;

				DestroyVehicle			(vehicleid);
				ClearVehicleVariables 	(vehicleid);
                SavePlayerVehicle2 		(playerid);

                format(String, sizeof(String), "{ffffff} Pardavëte transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff}.", (modelid) ? (VehicleNames[modelid - 400]) : ("N/A"), konvertuoti_pinigus(MoneyCount));
        		SendClientMessage(playerid, -1, String);
			}
			else
			{
				ShowPlayerDialogEx(playerid, MasinosPardDialogas2, DIALOG_STYLE_LIST, " ",
				"{F0EA2B} Parduoti transportà þaidëjui\n{F0EA2B} Parduoti transportà serveriui", "Pasirinkti", "Atgal");
			}
		}

		case MasinosPirkimoDialogas2:
		{
			new String[400];
			new Pardavejas = PasirinktasZaidejas[playerid], MoneyCount = MasinosKainaEx[playerid], vehicleid = PI[Pardavejas][Transportas2];

			if(Pardavejas == INVALID_PLAYER_ID)
			{
				SendClientMessage(playerid, -1, "{ffffff} Transporto nusipirkti nepavyko, kadangi pardavëjas atsijungë!");

				return 1;
			}

			if(response)
			{
				if(vehicleid == -1)
				{
					SendClientMessage(Pardavejas, -1, "{ffffff} Transporto parduoti nepavyko, kadangi jo jau nebeturite!");
					SendClientMessage(playerid, -1, "{ffffff} Transporto nusipirkti nepavyko, kadangi pardavëjas jo nebeturi!");

					return 1;
				}


				if(GetPlayerMoneyA(playerid) < MoneyCount)
				{
					SendClientMessage(Pardavejas, -1, "{ffffff} Transporto parduoti nepavyko, kadangi þaidëjui neuþtenka pinigø!");
					SendClientMessage(playerid, -1, "{ffffff} Transporto nusipirkti nepavyko, kadangi jums neuþtenka pinigø!");

					return 1;
				}

				if(PI[playerid][Transportas1] != -1 && PI[playerid][Transportas2] != -1)
	        	{
	        		if(!PI[playerid][TransportoSlotas])
			        {
	        			SendClientMessage(Pardavejas, -1, "{ffffff} Transporto parduoti nepavyko, kadangi þaidëjas nebegali turëti daugiau transp. priemoniø!");
						SendClientMessage(playerid, -1, "{ffffff} Transporto nusipirkti nepavyko, kadangi jus nebegalite turëti daugiau transp. priemoniø!");

						return 1;
			        }
			        else
			        {
			        	if(PI[playerid][Transportas3] != -1)
			        	{
			        		SendClientMessage(Pardavejas, -1, "{ffffff} Transporto parduoti nepavyko, kadangi þaidëjas nebegali turëti daugiau transp. priemoniø!");
							SendClientMessage(playerid, -1, "{ffffff} Transporto nusipirkti nepavyko, kadangi jus nebegalite turëti daugiau transp. priemoniø!");

							return 1;
			        	}
			        }
	        	}

				if(PI[playerid][Transportas1] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Pardavëte transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(playerid));
	        		SendClientMessage(Pardavejas, -1, String);

	        		format(String, sizeof(String), "{ffffff} Nusipirkote transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} ið {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(Pardavejas));
	        		SendClientMessage(playerid, -1, String);

	        		PI[Pardavejas][Transportas2] 	= -1;
	        		PI[playerid][Transportas1]		= vehicleid;

					GivePlayerMoneyA 			(Pardavejas, MoneyCount);
					GivePlayerMoneyA 			(playerid, -MoneyCount);
					SavePlayerVehicle2 	(Pardavejas);
					SavePlayerVehicle1 	(playerid);

					return 1;
				}

				if(PI[playerid][Transportas2] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Pardavëte transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(playerid));
	        		SendClientMessage(Pardavejas, -1, String);

	        		format(String, sizeof(String), "{ffffff} Nusipirkote transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} ið {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(Pardavejas));
	        		SendClientMessage(playerid, -1, String);

	        		PI[Pardavejas][Transportas2] 	= -1;
	        		PI[playerid][Transportas2]		= vehicleid;

					GivePlayerMoneyA 			(Pardavejas, MoneyCount);
					GivePlayerMoneyA 			(playerid, -MoneyCount);
					SavePlayerVehicle2 	(Pardavejas);
					SavePlayerVehicle2 	(playerid);

					return 1;
				}

				if(PI[playerid][Transportas3] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Pardavëte transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(playerid));
	        		SendClientMessage(Pardavejas, -1, String);

	        		format(String, sizeof(String), "{ffffff} Nusipirkote transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} ið {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(Pardavejas));
	        		SendClientMessage(playerid, -1, String);

	        		PI[Pardavejas][Transportas2] 	= -1;
	        		PI[playerid][Transportas3]		= vehicleid;

					GivePlayerMoneyA 			(Pardavejas, MoneyCount);
					GivePlayerMoneyA 			(playerid, -MoneyCount);
					SavePlayerVehicle2 	(Pardavejas);
					SavePlayerVehicle3 	(playerid);

					return 1;
				}
			}
			else
			{
				SendClientMessage(Pardavejas, -1, "{ffffff} Þaidëjas atsisakë nusipirkti jûsø siûlomà transportà!");
				SendClientMessage(playerid, -1, "{ffffff} Atsisakëte nusipirkti siûlomà transportà!");
			}
		}

		case MasinosPardZaidejui2:
		{
			new String[400];
			if(response)
			{
				new vehicleid = PI[playerid][Transportas2];

				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 2-ojo transporto!");

				new giveplayerid, MoneyCount, Float: P_Pos[3];

				if(sscanf(inputtext, "ud", giveplayerid, MoneyCount))
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui2, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Kaþkas blogai ávesta!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(strfind(inputtext, "%") != -1)
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui2, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Tekste rasta neleistinø simboliø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == INVALID_PLAYER_ID)
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui2, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Tokio þaidëjo nëra!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == playerid)
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui2, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Sau transporto parduoti negalite!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(PI[giveplayerid][Transportas1] != -1 && PI[giveplayerid][Transportas2] != -1)
	        	{
	        		if(!PI[giveplayerid][TransportoSlotas])
			        {
	        			ShowPlayerDialogEx(playerid, MasinosPardZaidejui2, DIALOG_STYLE_INPUT, " ",
						"{FFAF00}Ðis þaidëjas jau nebegali turëti transp. priemoniø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

	        			return 1;
			        }
			        else
			        {
			        	if(PI[playerid][Transportas3] != -1)
			        	{
			        		ShowPlayerDialogEx(playerid, MasinosPardZaidejui2, DIALOG_STYLE_INPUT, " ",
							"{FFAF00}Ðis þaidëjas jau nebegali turëti transp. priemoniø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

			        		return 1;
			        	}
			        }
	        	}

				if(MoneyCount < 1)
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui2, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Blogai nurodëte pardavimo kainà!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 5.0, P_Pos[0], P_Pos[1], P_Pos[2]))
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui2, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Þaidëjas per toli nuo jûsø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				PasirinktasZaidejas[playerid] 		= giveplayerid;
				PasirinktasZaidejas[giveplayerid]	= playerid;
				MasinosKainaEx[playerid]			= MoneyCount;
				MasinosKainaEx[giveplayerid]		= MoneyCount;

				new KoksKuras[64];

				switch(VehicleInfo[vehicleid][vKuroTipas])
				{
					case BENZINAS: 	KoksKuras = "Benzinas";
					case DYZELIS: 	KoksKuras = "Dyzelis";
				}

				new ArDujos[64];

				if(VehicleInfo[vehicleid][vDujos] == true)	ArDujos = "Yra";
				else 										ArDujos = "Nëra";

				format(String, sizeof(String), "{ffffff}Þaidëjas {02FF5B}%s {ffffff}siûlo jums pirkti jo transportà uþ {02FF5B}$%s{ffffff}:\n \n \t{ffffff}Pavadinimas: {02FF5B}%s\n\t{ffffff}Rida: {02FF5B}%.2f KM\n\t{ffffff}Kuro tipas: {02FF5B}%s\n\t{ffffff}Kuro sànaudos: {02FF5B}%.2f L/10 KM\n\t{ffffff}Bako tûris: {02FF5B}%.2f L\n\t{ffffff}Dujø áranga: {02FF5B}%s\n \n{ffffff}Ar tikrai norite pirkti ðá transportà?",
				GetPlayerNameEx(playerid), konvertuoti_pinigus(MoneyCount), VehicleNames[GetVehicleModel(vehicleid) - 400], VehicleInfo[vehicleid][vRida], KoksKuras, VehicleInfo[vehicleid][vSanaudos], VehicleInfo[vehicleid][vBakas], ArDujos);
				ShowPlayerDialogEx(giveplayerid, MasinosPirkimoDialogas2, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");

				format(String, sizeof(String), "{ffffff} Pasiûlëte nusipirkti þaidëjui {FFAF00}%s {ffffff}savo transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff}.",
				GetPlayerNameEx(giveplayerid), VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount));
				SendClientMessage(playerid, -1, String);
			}
			else
			{
				ShowPlayerDialogEx(playerid, MasinosPardDialogas2, DIALOG_STYLE_LIST, " ",
				"{F0EA2B} Parduoti transportà þaidëjui\n{F0EA2B} Parduoti transportà serveriui", "Pasirinkti", "Atgal");
			}
		}

		case MasinuValdymoDialogas1:
		{
			new String[400];
			if(response)
			{
				new vehicleid = PI[playerid][Transportas1];

				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!");

				switch(listitem)
				{
					case 0, 1:
					{
						format(String, sizeof(String), "{F0EA2B}» Transportas: {FFAF00}%s\n \n\t{F0EA2B} Atrakinti/uþrakinti transportà\n\t{F0EA2B} Iðgauti transporto pozicijà\
						\n\t{F0EA2B} Parduoti transportà\n\t{F0EA2B} Atiduoti transportà\n\t{F0EA2B} Iðmesti visus þaidëjus ið transporto\n\t{F0EA2B} Transporto informacija", VehicleNames[GetVehicleModel(vehicleid) - 400]);
						ShowPlayerDialogEx(playerid, MasinuValdymoDialogas1, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Atgal");
					}

					case 2: // Atrakinti/uþrakinti transportà
					{
						if(VehicleInfo[vehicleid][vUzraktas])
						{
							GameTextForPlayer(playerid, "~w~Transp. priemone ~g~atrakinta!", 2000, 4);

							VehicleInfo[vehicleid][vUzraktas] = false;
						}
						else
						{
							GameTextForPlayer(playerid, "~w~Transp. priemone ~r~uzrakinta!", 2000, 4);

							VehicleInfo[vehicleid][vUzraktas] = true;
						}
					}

					case 3: // Iðgauti transporto pozicijà
					{
						new Float: V_Pos[3];	GetVehiclePos(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);

						SetPlayerCheckpointEx 	(playerid, 1, V_Pos[0], V_Pos[1], V_Pos[2], 3.0);
						SendClientMessage 		(playerid, -1, "{ffffff} Transp. priemonës pozicija paþymëta þemëlapyje.");
					}

					case 4: // Parduoti transportà
					{
						ShowPlayerDialogEx(playerid, MasinosPardDialogas1, DIALOG_STYLE_LIST, " ",
						"{F0EA2B} Parduoti transportà þaidëjui\n{F0EA2B} Parduoti transportà serveriui", "Pasirinkti", "Atgal");
					}

					case 5: // Atiduoti transportà
					{
						ShowPlayerDialogEx(playerid, MasinosAtidDialogas1, DIALOG_STYLE_INPUT, " ",
						"{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");
					}

					case 6: // Iðmesti visus þaidëjus ið transporto
					{
						for(new p = 0; p < MAX_PLAYERS; p ++)
						{
							if(p == playerid) continue;

							if(IsPlayerInVehicle(p, vehicleid))
							{
								RemovePlayerFromVehicle(p);
							}
						}

						SendClientMessage(playerid, -1, "{ffffff} Visi þaidëjai buvo iðmesti ið jûsø transp. priemonës.");

						return 1;
					}

					case 7: // Transporto informacija
					{
						ShowPlayerDialogEx(playerid, MasinosInfo1, DIALOG_STYLE_MSGBOX, " ", ShowVehicleInfo(vehicleid), "Atgal", "");
					}
				}
			}
			else
			{
				pc_cmd_transportas(playerid);
			}
		}

		case MasinosInfo1:
		{
			new String[400];
			new vehicleid = PI[playerid][Transportas1];

			if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!");

			format(String, sizeof(String), "{F0EA2B}» Transportas: {FFAF00}%s\n \n\t{F0EA2B} Atrakinti/uþrakinti transportà\n\t{F0EA2B} Iðgauti transporto pozicijà\
			\n\t{F0EA2B} Parduoti transportà\n\t{F0EA2B} Atiduoti transportà\n\t{F0EA2B} Iðmesti visus þaidëjus ið transporto\n\t{F0EA2B} Transporto informacija", VehicleNames[GetVehicleModel(vehicleid) - 400]);
			ShowPlayerDialogEx(playerid, MasinuValdymoDialogas1, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Atgal");
		}

		case MasinosAtidDialogas1:
		{
			new String[400];
			new vehicleid = PI[playerid][Transportas1];

			if(response)
			{
				new giveplayerid, Float: P_Pos[3];

				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!");

				if(sscanf(inputtext, "u", giveplayerid))
				{
					ShowPlayerDialogEx(playerid, MasinosAtidDialogas1, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Kaþkas blogai ávesta!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(strfind(inputtext, "%") != -1)
				{
					ShowPlayerDialogEx(playerid, MasinosAtidDialogas1, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Tekste rasta neleistinø simboliø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == INVALID_PLAYER_ID)
				{
					ShowPlayerDialogEx(playerid, MasinosAtidDialogas1, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Tokio þaidëjo nëra!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == playerid)
				{
					ShowPlayerDialogEx(playerid, MasinosAtidDialogas1, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Sau transporto atiduoti negalite!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(PI[giveplayerid][Transportas1] != -1 && PI[giveplayerid][Transportas2] != -1)
	        	{
	        		if(!PI[giveplayerid][TransportoSlotas])
			        {
	        			ShowPlayerDialogEx(playerid, MasinosAtidDialogas1, DIALOG_STYLE_INPUT, " ",
						"{FFAF00}Ðis þaidëjas jau nebegali turëti transp. priemoniø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

						return 1;
			        }
			        else
			        {
			        	if(PI[playerid][Transportas3] != -1)
			        	{
			        		ShowPlayerDialogEx(playerid, MasinosAtidDialogas1, DIALOG_STYLE_INPUT, " ",
							"{FFAF00}Ðis þaidëjas jau nebegali turëti transp. priemoniø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

							return 1;
			        	}
			        }
	        	}

				GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 5.0, P_Pos[0], P_Pos[1], P_Pos[2]))
				{
					ShowPlayerDialogEx(playerid, MasinosAtidDialogas1, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Þaidëjas per toli nuo jûsø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(PI[giveplayerid][Transportas1] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(giveplayerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Atidavëte transportà {FFAF00}%s {ffffff}þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], GetPlayerNameEx(giveplayerid));
	        		SendClientMessage(playerid, -1, String);

	        		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}atidavë jums savo transportà {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(vehicleid) - 400]);
	        		SendClientMessage(playerid, -1, String);

	        		PI[playerid][Transportas1] 		= -1;
	        		PI[giveplayerid][Transportas1]	= vehicleid;

					SavePlayerVehicle1 	(playerid);
					SavePlayerVehicle1 	(giveplayerid);

					return 1;
				}

				if(PI[giveplayerid][Transportas2] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(giveplayerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Atidavëte transportà {FFAF00}%s {ffffff}þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], GetPlayerNameEx(giveplayerid));
	        		SendClientMessage(playerid, -1, String);

	        		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}atidavë jums savo transportà {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(vehicleid) - 400]);
	        		SendClientMessage(playerid, -1, String);

	        		PI[playerid][Transportas1] 		= -1;
	        		PI[giveplayerid][Transportas2]	= vehicleid;

					SavePlayerVehicle1 	(playerid);
					SavePlayerVehicle2 	(giveplayerid);

					return 1;
				}

				if(PI[giveplayerid][Transportas3] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(giveplayerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Atidavëte transportà {FFAF00}%s {ffffff}þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], GetPlayerNameEx(giveplayerid));
	        		SendClientMessage(playerid, -1, String);

	        		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}atidavë jums savo transportà {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(vehicleid) - 400]);
	        		SendClientMessage(playerid, -1, String);

	        		PI[playerid][Transportas1] 		= -1;
	        		PI[giveplayerid][Transportas3]	= vehicleid;

					SavePlayerVehicle1 	(playerid);
					SavePlayerVehicle3 	(giveplayerid);

					return 1;
				}
			}
			else
			{
				pc_cmd_transportas(playerid);
			}
		}

		case MasinosPardDialogas1:
		{
			new String[400];
			new vehicleid = PI[playerid][Transportas1];

			if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!");

			if(response)
			{
				switch(listitem)
				{
					case 0: // Parduoti transportà þaidëjui
					{
						ShowPlayerDialogEx(playerid, MasinosPardZaidejui1, DIALOG_STYLE_INPUT, " ",
						"{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");
					}

					case 1: // Parduoti transportà serveriui
					{
						format(String, sizeof(String), "{ffffff}Ar tikrai norite parduoti transportà {02FF5B}%s {ffffff}uþ {02FF5B}$%s{ffffff}?", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(VehicleInfo[vehicleid][vKaina] / 2));
						ShowPlayerDialogEx(playerid, MasinosPardavimas1, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");
					}
				}
			}
			else
			{
				format(String, sizeof(String), "{F0EA2B}» Transportas: {FFAF00}%s\n \n\t{F0EA2B} Atrakinti/uþrakinti transportà\n\t{F0EA2B} Iðgauti transporto pozicijà\
				\n\t{F0EA2B} Parduoti transportà\n\t{F0EA2B} Atiduoti transportà\n\t{F0EA2B} Iðmesti visus þaidëjus ið transporto\n\t{F0EA2B} Transporto informacija", VehicleNames[GetVehicleModel(vehicleid) - 400]);
				ShowPlayerDialogEx(playerid, MasinuValdymoDialogas1, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Atgal");
			}
		}

		case MasinosPardavimas1:
		{
			new String[400];
			if(response)
			{
				new vehicleid = PI[playerid][Transportas1], modelid = GetVehicleModel(vehicleid);

				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!");

				if(!IsVehicleInZone(vehicleid, PardavimoZona))
				{
					SendClientMessage(playerid, -1, "{ffffff} Jûsø transportas stovi ne pardavimo zonoje!");
					SendClientMessage(playerid, -1, "{ffffff} Transporto pardavimo zonà rasite: {FFAF00} /gps > Kitos vietovës > Transporto pardavimo zona{ffffff}!");

					return 1;
				}

				new MoneyCount = floatround(VehicleInfo[vehicleid][vKaina] / 2);

				GivePlayerMoneyA(playerid, MoneyCount);

				PI[playerid][Transportas1] = -1;

				DestroyVehicle			(vehicleid);
				ClearVehicleVariables 	(vehicleid);
                SavePlayerVehicle1 		(playerid);

                format(String, sizeof(String), "{ffffff} Pardavëte transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff}.", (modelid) ? (VehicleNames[modelid - 400]) : ("N/A"), konvertuoti_pinigus(MoneyCount));
        		SendClientMessage(playerid, -1, String);
			}
			else
			{
				ShowPlayerDialogEx(playerid, MasinosPardDialogas1, DIALOG_STYLE_LIST, " ",
				"{F0EA2B} Parduoti transportà þaidëjui\n{F0EA2B} Parduoti transportà serveriui", "Pasirinkti", "Atgal");
			}
		}

		case MasinosPirkimoDialogas1:
		{
			new String[400];
			new Pardavejas = PasirinktasZaidejas[playerid], MoneyCount = MasinosKainaEx[playerid], vehicleid = PI[Pardavejas][Transportas1];

			if(Pardavejas == INVALID_PLAYER_ID)
			{
				SendClientMessage(playerid, -1, "{ffffff} Transporto nusipirkti nepavyko, kadangi pardavëjas atsijungë!");

				return 1;
			}

			if(response)
			{
				if(vehicleid == -1)
				{
					SendClientMessage(Pardavejas, -1, "{ffffff} Transporto parduoti nepavyko, kadangi jo jau nebeturite!");
					SendClientMessage(playerid, -1, "{ffffff} Transporto nusipirkti nepavyko, kadangi pardavëjas jo nebeturi!");

					return 1;
				}


				if(GetPlayerMoneyA(playerid) < MoneyCount)
				{
					SendClientMessage(Pardavejas, -1, "{ffffff} Transporto parduoti nepavyko, kadangi þaidëjui neuþtenka pinigø!");
					SendClientMessage(playerid, -1, "{ffffff} Transporto nusipirkti nepavyko, kadangi jums neuþtenka pinigø!");

					return 1;
				}

				if(PI[playerid][Transportas1] != -1 && PI[playerid][Transportas2] != -1)
	        	{
	        		if(!PI[playerid][TransportoSlotas])
			        {
	        			SendClientMessage(Pardavejas, -1, "{ffffff} Transporto parduoti nepavyko, kadangi þaidëjas nebegali turëti daugiau transp. priemoniø!");
						SendClientMessage(playerid, -1, "{ffffff} Transporto nusipirkti nepavyko, kadangi jus nebegalite turëti daugiau transp. priemoniø!");

						return 1;
			        }
			        else
			        {
			        	if(PI[playerid][Transportas3] != -1)
			        	{
			        		SendClientMessage(Pardavejas, -1, "{ffffff} Transporto parduoti nepavyko, kadangi þaidëjas nebegali turëti daugiau transp. priemoniø!");
							SendClientMessage(playerid, -1, "{ffffff} Transporto nusipirkti nepavyko, kadangi jus nebegalite turëti daugiau transp. priemoniø!");

							return 1;
			        	}
			        }
	        	}

				if(PI[playerid][Transportas1] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Pardavëte transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(playerid));
	        		SendClientMessage(Pardavejas, -1, String);

	        		format(String, sizeof(String), "{ffffff} Nusipirkote transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} ið {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(Pardavejas));
	        		SendClientMessage(playerid, -1, String);

	        		PI[Pardavejas][Transportas1] 	= -1;
	        		PI[playerid][Transportas1]		= vehicleid;

					GivePlayerMoneyA 			(Pardavejas, MoneyCount);
					GivePlayerMoneyA 			(playerid, -MoneyCount);
					SavePlayerVehicle1 	(Pardavejas);
					SavePlayerVehicle1 	(playerid);

					return 1;
				}

				if(PI[playerid][Transportas2] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Pardavëte transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(playerid));
	        		SendClientMessage(Pardavejas, -1, String);

	        		format(String, sizeof(String), "{ffffff} Nusipirkote transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} ið {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(Pardavejas));
	        		SendClientMessage(playerid, -1, String);

	        		PI[Pardavejas][Transportas1] 	= -1;
	        		PI[playerid][Transportas2]		= vehicleid;

					GivePlayerMoneyA 			(Pardavejas, MoneyCount);
					GivePlayerMoneyA 			(playerid, -MoneyCount);
					SavePlayerVehicle1 	(Pardavejas);
					SavePlayerVehicle2 	(playerid);

					return 1;
				}

				if(PI[playerid][Transportas3] == -1)
				{
					format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
					format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

					format(String, sizeof(String), "{ffffff} Pardavëte transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} þaidëjui {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(playerid));
	        		SendClientMessage(Pardavejas, -1, String);

	        		format(String, sizeof(String), "{ffffff} Nusipirkote transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff} ið {FFAF00}%s{ffffff}.", VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(Pardavejas));
	        		SendClientMessage(playerid, -1, String);

	        		PI[Pardavejas][Transportas1] 	= -1;
	        		PI[playerid][Transportas3]		= vehicleid;

					GivePlayerMoneyA 			(Pardavejas, MoneyCount);
					GivePlayerMoneyA 			(playerid, -MoneyCount);
					SavePlayerVehicle1 	(Pardavejas);
					SavePlayerVehicle3 	(playerid);

					return 1;
				}
			}
			else
			{
				SendClientMessage(Pardavejas, -1, "{ffffff} Þaidëjas atsisakë nusipirkti jûsø siûlomà transportà!");
				SendClientMessage(playerid, -1, "{ffffff} Atsisakëte nusipirkti siûlomà transportà!");
			}
		}

		case MasinosPardZaidejui1:
		{
			new String[400];
			if(response)
			{
				new vehicleid = PI[playerid][Transportas1];

				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!");

				new giveplayerid, MoneyCount, Float: P_Pos[3];

				if(sscanf(inputtext, "ud", giveplayerid, MoneyCount))
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui1, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Kaþkas blogai ávesta!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(strfind(inputtext, "%") != -1)
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui1, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Tekste rasta neleistinø simboliø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == INVALID_PLAYER_ID)
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui1, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Tokio þaidëjo nëra!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == playerid)
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui1, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Sau transporto parduoti negalite!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(PI[giveplayerid][Transportas1] != -1 && PI[giveplayerid][Transportas2] != -1)
	        	{
	        		if(!PI[giveplayerid][TransportoSlotas])
			        {
	        			ShowPlayerDialogEx(playerid, MasinosPardZaidejui1, DIALOG_STYLE_INPUT, " ",
						"{FFAF00}Ðis þaidëjas jau nebegali turëti transp. priemoniø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

	        			return 1;
			        }
			        else
			        {
			        	if(PI[playerid][Transportas3] != -1)
			        	{
			        		ShowPlayerDialogEx(playerid, MasinosPardZaidejui1, DIALOG_STYLE_INPUT, " ",
							"{FFAF00}Ðis þaidëjas jau nebegali turëti transp. priemoniø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

			        		return 1;
			        	}
			        }
	        	}

				if(MoneyCount < 1)
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui1, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Blogai nurodëte pardavimo kainà!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 5.0, P_Pos[0], P_Pos[1], P_Pos[2]))
				{
					ShowPlayerDialogEx(playerid, MasinosPardZaidejui1, DIALOG_STYLE_INPUT, " ",
					"{FFAF00}Þaidëjas per toli nuo jûsø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				PasirinktasZaidejas[playerid] 		= giveplayerid;
				PasirinktasZaidejas[giveplayerid]	= playerid;
				MasinosKainaEx[playerid]			= MoneyCount;
				MasinosKainaEx[giveplayerid]		= MoneyCount;

				new KoksKuras[64];

				switch(VehicleInfo[vehicleid][vKuroTipas])
				{
					case BENZINAS: 	KoksKuras = "Benzinas";
					case DYZELIS: 	KoksKuras = "Dyzelis";
				}

				new ArDujos[64];

				if(VehicleInfo[vehicleid][vDujos] == true)	ArDujos = "Yra";
				else 										ArDujos = "Nëra";

				format(String, sizeof(String), "{ffffff}Þaidëjas {02FF5B}%s {ffffff}siûlo jums pirkti jo transportà uþ {02FF5B}$%s{ffffff}:\n \n \t{ffffff}Pavadinimas: {02FF5B}%s\n\t{ffffff}Rida: {02FF5B}%.2f KM\n\t{ffffff}Kuro tipas: {02FF5B}%s\n\t{ffffff}Kuro sànaudos: {02FF5B}%.2f L/10 KM\n\t{ffffff}Bako tûris: {02FF5B}%.2f L\n\t{ffffff}Dujø áranga: {02FF5B}%s\n \n{ffffff}Ar tikrai norite pirkti ðá transportà?",
				GetPlayerNameEx(playerid), konvertuoti_pinigus(MoneyCount), VehicleNames[GetVehicleModel(vehicleid) - 400], VehicleInfo[vehicleid][vRida], KoksKuras, VehicleInfo[vehicleid][vSanaudos], VehicleInfo[vehicleid][vBakas], ArDujos);
				ShowPlayerDialogEx(giveplayerid, MasinosPirkimoDialogas1, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");

				format(String, sizeof(String), "{ffffff} Pasiûlëte nusipirkti þaidëjui {FFAF00}%s {ffffff}savo transportà {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff}.",
				GetPlayerNameEx(giveplayerid), VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(MoneyCount));
				SendClientMessage(playerid, -1, String);
			}
			else
			{
				ShowPlayerDialogEx(playerid, MasinosPardDialogas1, DIALOG_STYLE_LIST, " ",
				"{F0EA2B} Parduoti transportà þaidëjui\n{F0EA2B} Parduoti transportà serveriui", "Pasirinkti", "Atgal");
			}
		}

		case MasinuPagrDialogas:
		{
			new String[400];
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new vehicleid = PI[playerid][Transportas1];

						if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!");

						if(!VehicleInfo[vehicleid][vSprogusi])
						{
							format(String, sizeof(String), "{F0EA2B}» Transportas: {FFAF00}%s\n \n\t{F0EA2B} Atrakinti/uþrakinti transportà\n\t{F0EA2B} Iðgauti transporto pozicijà\
							\n\t{F0EA2B} Parduoti transportà\n\t{F0EA2B} Atiduoti transportà\n\t{F0EA2B} Iðmesti visus þaidëjus ið transporto\n\t{F0EA2B} Transporto informacija", VehicleNames[GetVehicleModel(vehicleid) - 400]);
							ShowPlayerDialogEx(playerid, MasinuValdymoDialogas1, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Atgal");
						}
						else
						{
							SendClientMessage 			(playerid, -1, "{ffffff} Jûsø 1-oji transp. priemonë yra sudauþyta!");
							SendClientMessage 			(playerid, -1, "{ffffff} Atstatyti jà galite nuvaþiavæ á paþymëtà vietà!");
							DisableAllPlayerCheckpoints	(playerid);
							//SetPlayerCheckpointEx 		(playerid, 7, -2077.0305,-6.0640,35.4240, 2);

							switch(GetVehicleCategory(vehicleid))
							{
								case BOATS: SetPlayerCheckpointEx(playerid, 7, -2985.6343,469.6664,6.4299, 2);
								default: 	SetPlayerCheckpointEx(playerid, 7, -2077.0305,-6.0640,35.4240, 2);
							}
						}
					}

					case 1:
					{
						new vehicleid = PI[playerid][Transportas2];

						if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 2-ojo transporto!");

						if(!VehicleInfo[vehicleid][vSprogusi])
						{
							format(String, sizeof(String), "{F0EA2B}» Transportas: {FFAF00}%s\n \n\t{F0EA2B} Atrakinti/uþrakinti transportà\n\t{F0EA2B} Iðgauti transporto pozicijà\
							\n\t{F0EA2B} Parduoti transportà\n\t{F0EA2B} Atiduoti transportà\n\t{F0EA2B} Iðmesti visus þaidëjus ið transporto\n\t{F0EA2B} Transporto informacija", VehicleNames[GetVehicleModel(vehicleid) - 400]);
							ShowPlayerDialogEx(playerid, MasinuValdymoDialogas2, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Atgal");
						}
						else
						{
							SendClientMessage 			(playerid, -1, "{ffffff} Jûsø 2-oji transp. priemonë yra sudauþyta!");
							SendClientMessage 			(playerid, -1, "{ffffff} Atstatyti jà galite nuvaþiavæ á paþymëtà vietà!");
							DisableAllPlayerCheckpoints	(playerid);
							//SetPlayerCheckpointEx 		(playerid, 7, -2077.0305,-6.0640,35.4240, 2);

							switch(GetVehicleCategory(vehicleid))
							{
								case BOATS: SetPlayerCheckpointEx(playerid, 7, -2985.6343,469.6664,6.4299, 2);
								default: 	SetPlayerCheckpointEx(playerid, 7, -2077.0305,-6.0640,35.4240, 2);
							}
						}
					}

					case 2:
					{
						new vehicleid = PI[playerid][Transportas3];

						if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 3-ojo transporto!");

						if(!VehicleInfo[vehicleid][vSprogusi])
						{
							format(String, sizeof(String), "{F0EA2B}» Transportas: {FFAF00}%s\n \n\t{F0EA2B} Atrakinti/uþrakinti transportà\n\t{F0EA2B} Iðgauti transporto pozicijà\
							\n\t{F0EA2B} Parduoti transportà\n\t{F0EA2B} Atiduoti transportà\n\t{F0EA2B} Iðmesti visus þaidëjus ið transporto\n\t{F0EA2B} Transporto informacija", VehicleNames[GetVehicleModel(vehicleid) - 400]);
							ShowPlayerDialogEx(playerid, MasinuValdymoDialogas3, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Atgal");
						}
						else
						{
							SendClientMessage 			(playerid, -1, "{ffffff} Jûsø 3-oji transp. priemonë yra sudauþyta!");
							SendClientMessage 			(playerid, -1, "{ffffff} Atstatyti jà galite nuvaþiavæ á paþymëtà vietà!");
							DisableAllPlayerCheckpoints	(playerid);
							//SetPlayerCheckpointEx 		(playerid, 7, -2077.0305,-6.0640,35.4240, 2);

							switch(GetVehicleCategory(vehicleid))
							{
								case BOATS: SetPlayerCheckpointEx(playerid, 7, -2985.6343,469.6664,6.4299, 2);
								default: 	SetPlayerCheckpointEx(playerid, 7, -2077.0305,-6.0640,35.4240, 2);
							}
						}
					}
				}
			}
		}

		case MasinuPagrDialogas2:
		{
			new String[400];
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new vehicleid = PI[playerid][Transportas1];

						if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);

						if(GetVehicleCategory(vehicleid) == BOATS) return SendClientMessage(playerid, -1, "{ffffff} Laivus galima atstayti laivø parduotuvëje!");

						if(!VehicleInfo[vehicleid][vSprogusi])
						{
							SendClientMessage(playerid, -1, "{ffffff} Jûsø 1-oji transp. priemonë nëra sudauþyta!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);
						}
						else
						{
							if(VehicleInfo[vehicleid][Draudimas] < gettime())
							{
								format(String, sizeof(String), "{ffffff}Jûsø transp. priemonë {FFAF00}%s {ffffff}yra sudauþyta! Jos atstatymas kainuoja {FFAF00}$%s{ffffff}, kadangi ji nëra apdrausta.\n\n\tAr norite jà atstatyti?",
								VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(floatround(VehicleInfo[vehicleid][vKaina] / 8)));
								ShowPlayerDialogEx(playerid, MasinuAtstatymoDialogas1, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");
							}
							else
							{
								format(String, sizeof(String), "{ffffff}Jûsø transp. priemonë {FFAF00}%s {ffffff}yra sudauþyta! Jos atstatymas kainuoja {FFAF00}$%s{ffffff}, kadangi ji yra apdrausta.\n\n\tAr norite jà atstatyti?",
								VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(floatround(VehicleInfo[vehicleid][vKaina] / 12)));
								ShowPlayerDialogEx(playerid, MasinuAtstatymoDialogas1, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");
							}
						}
					}

					case 1:
					{
						new vehicleid = PI[playerid][Transportas2];

						if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 2-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);

						if(GetVehicleCategory(vehicleid) == BOATS) return SendClientMessage(playerid, -1, "{ffffff} Laivus galima atstayti laivø parduotuvëje!");

						if(!VehicleInfo[vehicleid][vSprogusi])
						{
							SendClientMessage(playerid, -1, "{ffffff} Jûsø 2-oji transp. priemonë nëra sudauþyta!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);
						}
						else
						{
							if(VehicleInfo[vehicleid][Draudimas] < gettime())
							{
								format(String, sizeof(String), "{ffffff}Jûsø transp. priemonë {FFAF00}%s {ffffff}yra sudauþyta! Jos atstatymas kainuoja {FFAF00}$%s{ffffff}, kadangi ji nëra apdrausta.\n\n\tAr norite jà atstatyti?",
								VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(floatround(VehicleInfo[vehicleid][vKaina] / 8)));
								ShowPlayerDialogEx(playerid, MasinuAtstatymoDialogas2, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");
							}
							else
							{
								format(String, sizeof(String), "{ffffff}Jûsø transp. priemonë {FFAF00}%s {ffffff}yra sudauþyta! Jos atstatymas kainuoja {FFAF00}$%s{ffffff}, kadangi ji yra apdrausta.\n\n\tAr norite jà atstatyti?",
								VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(floatround(VehicleInfo[vehicleid][vKaina] / 12)));
								ShowPlayerDialogEx(playerid, MasinuAtstatymoDialogas2, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");
							}
						}
					}

					case 2:
					{
						new vehicleid = PI[playerid][Transportas3];

						if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 3-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);

						if(GetVehicleCategory(vehicleid) == BOATS) return SendClientMessage(playerid, -1, "{ffffff} Laivus galima atstayti laivø parduotuvëje!");

						if(!VehicleInfo[vehicleid][vSprogusi])
						{
							SendClientMessage(playerid, -1, "{ffffff} Jûsø 3-oji transp. priemonë nëra sudauþyta!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);
						}
						else
						{
							if(VehicleInfo[vehicleid][Draudimas] < gettime())
							{
								format(String, sizeof(String), "{ffffff}Jûsø transp. priemonë {FFAF00}%s {ffffff}yra sudauþyta! Jos atstatymas kainuoja {FFAF00}$%s{ffffff}, kadangi ji nëra apdrausta.\n\n\tAr norite jà atstatyti?",
								VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(floatround(VehicleInfo[vehicleid][vKaina] / 8)));
								ShowPlayerDialogEx(playerid, MasinuAtstatymoDialogas3, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");
							}
							else
							{
								format(String, sizeof(String), "{ffffff}Jûsø transp. priemonë {FFAF00}%s {ffffff}yra sudauþyta! Jos atstatymas kainuoja {FFAF00}$%s{ffffff}, kadangi ji yra apdrausta.\n\n\tAr norite jà atstatyti?",
								VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(floatround(VehicleInfo[vehicleid][vKaina] / 12)));
								ShowPlayerDialogEx(playerid, MasinuAtstatymoDialogas3, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");
							}
						}
					}
				}
			}
		}

		case MasinuPagrDialogas3:
		{
			new String[400];
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new vehicleid = PI[playerid][Transportas1];

						if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[lAtstatymas]);

						if(GetVehicleCategory(vehicleid) != BOATS) return SendClientMessage(playerid, -1, "{ffffff} Automobilius atstatyti galima MetroCity.lt Garaþe!");

						if(!VehicleInfo[vehicleid][vSprogusi])
						{
							SendClientMessage(playerid, -1, "{ffffff} Jûsø 1-oji transp. priemonë nëra sudauþyta!"), OnPlayerPickUpPickup(playerid, PickupsInfo[lAtstatymas]);
						}
						else
						{
							format(String, sizeof(String), "{ffffff}Jûsø transp. priemonë {FFAF00}%s {ffffff}yra sudauþyta! Jos atstatymas kainuoja {FFAF00}$%s{ffffff}.\n\n\tAr norite jà atstatyti?",
							VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(floatround(VehicleInfo[vehicleid][vKaina] / 8)));
							ShowPlayerDialogEx(playerid, MasinuAtstatymoDialogas4, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");
						}
					}

					case 1:
					{
						new vehicleid = PI[playerid][Transportas2];

						if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 2-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[lAtstatymas]);

						if(GetVehicleCategory(vehicleid) != BOATS) return SendClientMessage(playerid, -1, "{ffffff} Automobilius atstatyti galima MetroCity.lt Garaþe!");

						if(!VehicleInfo[vehicleid][vSprogusi])
						{
							SendClientMessage(playerid, -1, "{ffffff} Jûsø 2-oji transp. priemonë nëra sudauþyta!"), OnPlayerPickUpPickup(playerid, PickupsInfo[lAtstatymas]);
						}
						else
						{
							format(String, sizeof(String), "{ffffff}Jûsø transp. priemonë {FFAF00}%s {ffffff}yra sudauþyta! Jos atstatymas kainuoja {FFAF00}$%s{ffffff}.\n\n\tAr norite jà atstatyti?",
							VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(VehicleInfo[vehicleid][vKaina] / 8));
							ShowPlayerDialogEx(playerid, MasinuAtstatymoDialogas5, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");
						}
					}

					case 2:
					{
						new vehicleid = PI[playerid][Transportas3];

						if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 3-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[lAtstatymas]);

						if(GetVehicleCategory(vehicleid) != BOATS) return SendClientMessage(playerid, -1, "{ffffff} Automobilius atstatyti galima MetroCity.lt Garaþe!");

						if(!VehicleInfo[vehicleid][vSprogusi])
						{
							SendClientMessage(playerid, -1, "{ffffff} Jûsø 3-oji transp. priemonë nëra sudauþyta!"), OnPlayerPickUpPickup(playerid, PickupsInfo[lAtstatymas]);
						}
						else
						{
							format(String, sizeof(String), "{ffffff}Jûsø transp. priemonë {FFAF00}%s {ffffff}yra sudauþyta! Jos atstatymas kainuoja {FFAF00}$%s{ffffff}.\n\n\tAr norite jà atstatyti?",
							VehicleNames[GetVehicleModel(vehicleid) - 400], konvertuoti_pinigus(VehicleInfo[vehicleid][vKaina] / 8));
							ShowPlayerDialogEx(playerid, MasinuAtstatymoDialogas6, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");
						}
					}
				}
			}
		}

		case MasinuAtstatymoDialogas4:
		{
			new String[400];
			new vehicleid = PI[playerid][Transportas1];

			if(response)
			{
				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[lAtstatymas]);

				if(GetPlayerMoneyA(playerid) < floatround(VehicleInfo[vehicleid][vKaina] / 8)) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[lAtstatymas]);

				GivePlayerMoneyA(playerid, -floatround(VehicleInfo[vehicleid][vKaina] / 8));

				format(String, sizeof(String), "{ffffff} Transp. priemonë {FFAF00}%s {ffffff}sëkmingai atstatyta.", VehicleNames[GetVehicleModel(vehicleid) - 400]);
				SendClientMessage(playerid, -1, String);

				new iRandom = random(sizeof(RandomLaivuSpawn));

				VehicleInfo[vehicleid][vSprogusi] = false;

				VehicleInfo[vehicleid][vLastPos][0] = RandomLaivuSpawn[iRandom][0];
				VehicleInfo[vehicleid][vLastPos][1] = RandomLaivuSpawn[iRandom][1];
				VehicleInfo[vehicleid][vLastPos][2] = RandomLaivuSpawn[iRandom][2];
				VehicleInfo[vehicleid][vLastPos][3] = RandomLaivuSpawn[iRandom][3];

				ac_SetVehicleToRespawn(vehicleid);

				if(PropertyInfo[LAIVU_SALONAS][pBuyed])
				{
					PropertyInfo[LAIVU_SALONAS][pProfit] += floatround(VehicleInfo[vehicleid][vKaina] / 4);
				}
			}
			else
			{
				OnPlayerPickUpPickup(playerid, PickupsInfo[lAtstatymas]);
			}
		}

		case MasinuAtstatymoDialogas5:
		{
			new String[400];
			new vehicleid = PI[playerid][Transportas2];

			if(response)
			{
				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 2-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[lAtstatymas]);

				if(GetPlayerMoneyA(playerid) < floatround(VehicleInfo[vehicleid][vKaina] / 8)) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[lAtstatymas]);

				GivePlayerMoneyA(playerid, -floatround(VehicleInfo[vehicleid][vKaina] / 8));

				format(String, sizeof(String), "{ffffff} Transp. priemonë {FFAF00}%s {ffffff}sëkmingai atstatyta.", VehicleNames[GetVehicleModel(vehicleid) - 400]);
				SendClientMessage(playerid, -1, String);

				new iRandom = random(sizeof(RandomLaivuSpawn));

				VehicleInfo[vehicleid][vSprogusi] = false;

				VehicleInfo[vehicleid][vLastPos][0] = RandomLaivuSpawn[iRandom][0];
				VehicleInfo[vehicleid][vLastPos][1] = RandomLaivuSpawn[iRandom][1];
				VehicleInfo[vehicleid][vLastPos][2] = RandomLaivuSpawn[iRandom][2];
				VehicleInfo[vehicleid][vLastPos][3] = RandomLaivuSpawn[iRandom][3];

				ac_SetVehicleToRespawn(vehicleid);

				if(PropertyInfo[LAIVU_SALONAS][pBuyed])
				{
					PropertyInfo[LAIVU_SALONAS][pProfit] += floatround(VehicleInfo[vehicleid][vKaina] / 4);
				}
			}
			else
			{
				OnPlayerPickUpPickup(playerid, PickupsInfo[lAtstatymas]);
			}
		}

		case MasinuAtstatymoDialogas6:
		{
			new String[400];
			new vehicleid = PI[playerid][Transportas3];

			if(response)
			{
				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 3-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[lAtstatymas]);

				if(GetPlayerMoneyA(playerid) < floatround(VehicleInfo[vehicleid][vKaina] / 8)) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[lAtstatymas]);

				GivePlayerMoneyA(playerid, -floatround(VehicleInfo[vehicleid][vKaina] / 8));

				format(String, sizeof(String), "{ffffff} Transp. priemonë {FFAF00}%s {ffffff}sëkmingai atstatyta.", VehicleNames[GetVehicleModel(vehicleid) - 400]);
				SendClientMessage(playerid, -1, String);

				new iRandom = random(sizeof(RandomLaivuSpawn));

				VehicleInfo[vehicleid][vSprogusi] = false;

				VehicleInfo[vehicleid][vLastPos][0] = RandomLaivuSpawn[iRandom][0];
				VehicleInfo[vehicleid][vLastPos][1] = RandomLaivuSpawn[iRandom][1];
				VehicleInfo[vehicleid][vLastPos][2] = RandomLaivuSpawn[iRandom][2];
				VehicleInfo[vehicleid][vLastPos][3] = RandomLaivuSpawn[iRandom][3];

				ac_SetVehicleToRespawn(vehicleid);

				if(PropertyInfo[LAIVU_SALONAS][pBuyed])
				{
					PropertyInfo[LAIVU_SALONAS][pProfit] += floatround(VehicleInfo[vehicleid][vKaina] / 4);
				}
			}
			else
			{
				OnPlayerPickUpPickup(playerid, PickupsInfo[lAtstatymas]);
			}
		}

		case MasinuAtstatymoDialogas3:
		{
			new String[400], akaina;
			new vehicleid = PI[playerid][Transportas3];

			if(response)
			{
				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 3-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);

				if(VehicleInfo[vehicleid][Draudimas] < gettime()) 	akaina = floatround(VehicleInfo[vehicleid][vKaina] / 8);
				else 												akaina = floatround(VehicleInfo[vehicleid][vKaina] / 12);

				if(GetVehicleCategory(vehicleid) == BOATS) return SendClientMessage(playerid, -1, "{ffffff} Laivus galima atstayti laivø parduotuvëje!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);

				if(GetPlayerMoneyA(playerid) < akaina) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);

				GivePlayerMoneyA(playerid, -akaina);

				format(String, sizeof(String), "{ffffff} Transp. priemonë {FFAF00}%s {ffffff}sëkmingai atstatyta.", VehicleNames[GetVehicleModel(vehicleid) - 400]);
				SendClientMessage(playerid, -1, String);

				new iRandom = random(sizeof(RandomAtstatymas));

				VehicleInfo[vehicleid][vSprogusi] = false;

				VehicleInfo[vehicleid][vLastPos][0] = RandomAtstatymas[iRandom][0];
				VehicleInfo[vehicleid][vLastPos][1] = RandomAtstatymas[iRandom][1];
				VehicleInfo[vehicleid][vLastPos][2] = RandomAtstatymas[iRandom][2];
				VehicleInfo[vehicleid][vLastPos][3] = RandomAtstatymas[iRandom][3];

				ac_SetVehicleToRespawn(vehicleid);

				if(PropertyInfo[GARAZHAS][pBuyed])
				{
					PropertyInfo[GARAZHAS][pProfit] += 500;
				}
			}
			else
			{
				OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);
			}
		}

		case MasinuAtstatymoDialogas2:
		{
			new String[400], akaina;
			new vehicleid = PI[playerid][Transportas2];

			if(response)
			{
				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 2-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);

				if(VehicleInfo[vehicleid][Draudimas] < gettime()) 	akaina = floatround(VehicleInfo[vehicleid][vKaina] / 8);
				else 												akaina = floatround(VehicleInfo[vehicleid][vKaina] / 12);

				if(GetVehicleCategory(vehicleid) == BOATS) return SendClientMessage(playerid, -1, "{ffffff} Laivus galima atstayti laivø parduotuvëje!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);

				if(GetPlayerMoneyA(playerid) < akaina) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);

				GivePlayerMoneyA(playerid, -akaina);

				format(String, sizeof(String), "{ffffff} Transp. priemonë {FFAF00}%s {ffffff}sëkmingai atstatyta.", VehicleNames[GetVehicleModel(vehicleid) - 400]);
				SendClientMessage(playerid, -1, String);

				new iRandom = random(sizeof(RandomAtstatymas));

				VehicleInfo[vehicleid][vSprogusi] = false;

				VehicleInfo[vehicleid][vLastPos][0] = RandomAtstatymas[iRandom][0];
				VehicleInfo[vehicleid][vLastPos][1] = RandomAtstatymas[iRandom][1];
				VehicleInfo[vehicleid][vLastPos][2] = RandomAtstatymas[iRandom][2];
				VehicleInfo[vehicleid][vLastPos][3] = RandomAtstatymas[iRandom][3];

				ac_SetVehicleToRespawn(vehicleid);

				if(PropertyInfo[GARAZHAS][pBuyed])
				{
					PropertyInfo[GARAZHAS][pProfit] += 500;
				}
			}
			else
			{
				OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);
			}
		}

		case MasinuAtstatymoDialogas1:
		{
			new String[400], akaina;
			new vehicleid = PI[playerid][Transportas1];

			if(response)
			{
				if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);

				if(VehicleInfo[vehicleid][Draudimas] < gettime()) 	akaina = floatround(VehicleInfo[vehicleid][vKaina] / 8);
				else 												akaina = floatround(VehicleInfo[vehicleid][vKaina] / 12);

				if(GetVehicleCategory(vehicleid) == BOATS) return SendClientMessage(playerid, -1, "{ffffff} Laivus galima atstayti laivø parduotuvëje!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);

				if(GetPlayerMoneyA(playerid) < akaina) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!"), OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);

				GivePlayerMoneyA(playerid, -akaina);

				format(String, sizeof(String), "{ffffff} Transp. priemonë {FFAF00}%s {ffffff}sëkmingai atstatyta.", VehicleNames[GetVehicleModel(vehicleid) - 400]);
				SendClientMessage(playerid, -1, String);

				new iRandom = random(sizeof(RandomAtstatymas));

				VehicleInfo[vehicleid][vSprogusi] = false;

				VehicleInfo[vehicleid][vLastPos][0] = RandomAtstatymas[iRandom][0];
				VehicleInfo[vehicleid][vLastPos][1] = RandomAtstatymas[iRandom][1];
				VehicleInfo[vehicleid][vLastPos][2] = RandomAtstatymas[iRandom][2];
				VehicleInfo[vehicleid][vLastPos][3] = RandomAtstatymas[iRandom][3];

				ac_SetVehicleToRespawn(vehicleid);

				if(PropertyInfo[GARAZHAS][pBuyed])
				{
					PropertyInfo[GARAZHAS][pProfit] += 500;
				}
			}
			else
			{
				OnPlayerPickUpPickup(playerid, PickupsInfo[Atstatymas]);
			}
		}

		case PolicijosDarboValdymasDialogas:
		{
			new String[300];

			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Policininkas[NuoKiekEXP]));
						ShowPlayerDialogEx(playerid, PolicijosEXPDialogas, DIALOG_STYLE_INPUT, "Policijos darbo valdymas", String, "Keisti", "Atgal");
					}

					case 1:
					{
						if(Policininkas[TeisesA]) 	Policininkas[TeisesA] = false;
						else 						Policininkas[TeisesA] = true;

						PolicijosDarboValdymas(playerid);
					}

					case 2:
					{
						if(Policininkas[TeisesB]) 	Policininkas[TeisesB] = false;
						else 						Policininkas[TeisesB] = true;

						PolicijosDarboValdymas(playerid);
					}

					case 3:
					{
						if(Policininkas[TeisesC]) 	Policininkas[TeisesC] = false;
						else 						Policininkas[TeisesC] = true;

						PolicijosDarboValdymas(playerid);
					}

					case 4:
					{
						if(Policininkas[sPazyma]) 	Policininkas[sPazyma] = false;
						else 						Policininkas[sPazyma] = true;

						PolicijosDarboValdymas(playerid);
					}
				}
			}
		}

		case PolicijosEXPDialogas:
		{
			if(response)
			{
				new String[300];

				if(IsNumeric(inputtext, true))
				{
					new InputedEXP = strval(inputtext);

					if(InputedEXP < 0)
					{
						format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Policininkas[NuoKiekEXP]));
						ShowPlayerDialogEx(playerid, PolicijosEXPDialogas, DIALOG_STYLE_INPUT, "Policijos darbo valdymas", String, "Keisti", "Atgal");

						return 1;
					}

					Policininkas[NuoKiekEXP] = InputedEXP;

					PolicijosDarboValdymas(playerid);
				}
				else
				{
					format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Policininkas[NuoKiekEXP]));
					ShowPlayerDialogEx(playerid, PolicijosEXPDialogas, DIALOG_STYLE_INPUT, "Policijos darbo valdymas", String, "Keisti", "Atgal");
				}
			}
			else
			{
				PolicijosDarboValdymas(playerid);
			}
		}

		case MedikuDarboValdymasDialogas:
		{
			new String[300];

			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Medikas[NuoKiekEXP]));
						ShowPlayerDialogEx(playerid, MedikuEXPDialogas, DIALOG_STYLE_INPUT, "Medikø darbo valdymas", String, "Keisti", "Atgal");
					}

					case 1:
					{
						if(Medikas[TeisesA]) 	Medikas[TeisesA] = false;
						else 					Medikas[TeisesA] = true;

						MedikuDarboValdymas(playerid);
					}

					case 2:
					{
						if(Medikas[TeisesB]) 	Medikas[TeisesB] = false;
						else 					Medikas[TeisesB] = true;

						MedikuDarboValdymas(playerid);
					}

					case 3:
					{
						if(Medikas[TeisesC]) 	Medikas[TeisesC] = false;
						else 					Medikas[TeisesC] = true;

						MedikuDarboValdymas(playerid);
					}

					case 4:
					{
						if(Medikas[sPazyma]) 	Medikas[sPazyma] = false;
						else 					Medikas[sPazyma] = true;

						MedikuDarboValdymas(playerid);
					}
				}
			}
		}

		case MedikuEXPDialogas:
		{
			if(response)
			{
				new String[300];

				if(IsNumeric(inputtext, true))
				{
					new InputedEXP = strval(inputtext);

					if(InputedEXP < 0)
					{
						format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Medikas[NuoKiekEXP]));
						ShowPlayerDialogEx(playerid, MedikuEXPDialogas, DIALOG_STYLE_INPUT, "Medikø darbo valdymas", String, "Keisti", "Atgal");

						return 1;
					}

					Medikas[NuoKiekEXP] = InputedEXP;

					MedikuDarboValdymas(playerid);
				}
				else
				{
					format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Medikas[NuoKiekEXP]));
					ShowPlayerDialogEx(playerid, MedikuEXPDialogas, DIALOG_STYLE_INPUT, "Medikø darbo valdymas", String, "Keisti", "Atgal");
				}
			}
			else
			{
				MedikuDarboValdymas(playerid);
			}
		}

		case KurjeriuDarboValdymasDialogas:
		{
			new String[300];

			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Kurjeris[NuoKiekEXP]));
						ShowPlayerDialogEx(playerid, KurjeriuEXPDialogas, DIALOG_STYLE_INPUT, "Kurjeriø darbo valdymas", String, "Keisti", "Atgal");
					}

					case 1:
					{
						if(Kurjeris[TeisesA]) 	Kurjeris[TeisesA] = false;
						else 					Kurjeris[TeisesA] = true;

						KurjeriuDarboValdymas(playerid);
					}

					case 2:
					{
						if(Kurjeris[TeisesB]) 	Kurjeris[TeisesB] = false;
						else 					Kurjeris[TeisesB] = true;

						KurjeriuDarboValdymas(playerid);
					}

					case 3:
					{
						if(Kurjeris[TeisesC]) 	Kurjeris[TeisesC] = false;
						else 					Kurjeris[TeisesC] = true;

						KurjeriuDarboValdymas(playerid);
					}

					case 4:
					{
						if(Kurjeris[sPazyma]) 	Kurjeris[sPazyma] = false;
						else 					Kurjeris[sPazyma] = true;

						KurjeriuDarboValdymas(playerid);
					}
				}
			}
		}

		case KurjeriuEXPDialogas:
		{
			if(response)
			{
				new String[300];

				if(IsNumeric(inputtext, true))
				{
					new InputedEXP = strval(inputtext);

					if(InputedEXP < 0)
					{
						format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Kurjeris[NuoKiekEXP]));
						ShowPlayerDialogEx(playerid, KurjeriuEXPDialogas, DIALOG_STYLE_INPUT, "Kurjeriø darbo valdymas", String, "Keisti", "Atgal");

						return 1;
					}

					Kurjeris[NuoKiekEXP] = InputedEXP;

					KurjeriuDarboValdymas(playerid);
				}
				else
				{
					format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Kurjeris[NuoKiekEXP]));
					ShowPlayerDialogEx(playerid, KurjeriuEXPDialogas, DIALOG_STYLE_INPUT, "Kurjeriø darbo valdymas", String, "Keisti", "Atgal");
				}
			}
			else
			{
				KurjeriuDarboValdymas(playerid);
			}
		}
		case TaxiDarboValdymasDialogas:
		{
			new String[300];

			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Taxi[NuoKiekEXP]));
						ShowPlayerDialogEx(playerid, TaxiEXPDialogas, DIALOG_STYLE_INPUT, "Taksi darbo valdymas", String, "Keisti", "Atgal");
					}

					case 1:
					{
						if(Taxi[TeisesA]) 		Taxi[TeisesA] = false;
						else 					Taxi[TeisesA] = true;

						TaxiDarboValdymas(playerid);
					}

					case 2:
					{
						if(Taxi[TeisesB]) 		Taxi[TeisesB] = false;
						else 					Taxi[TeisesB] = true;

						TaxiDarboValdymas(playerid);
					}

					case 3:
					{
						if(Taxi[TeisesC]) 		Taxi[TeisesC] = false;
						else 					Taxi[TeisesC] = true;

						TaxiDarboValdymas(playerid);
					}

					case 4:
					{
						if(Taxi[sPazyma]) 		Taxi[sPazyma] = false;
						else 					Taxi[sPazyma] = true;

						TaxiDarboValdymas(playerid);
					}
				}
			}
		}

		case TaxiEXPDialogas:
		{
			if(response)
			{
				new String[300];

				if(IsNumeric(inputtext, true))
				{
					new InputedEXP = strval(inputtext);

					if(InputedEXP < 0)
					{
						format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Taxi[NuoKiekEXP]));
						ShowPlayerDialogEx(playerid, TaxiEXPDialogas, DIALOG_STYLE_INPUT, "Taksi darbo valdymas", String, "Keisti", "Atgal");

						return 1;
					}

					Taxi[NuoKiekEXP] = InputedEXP;

					TaxiDarboValdymas(playerid);
				}
				else
				{
					format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Taxi[NuoKiekEXP]));
					ShowPlayerDialogEx(playerid, TaxiEXPDialogas, DIALOG_STYLE_INPUT, "Taksi darbo valdymas", String, "Keisti", "Atgal");
				}
			}
			else
			{
				TaxiDarboValdymas(playerid);
			}
		}

		case MechanikuDarboValdymasDialogas:
		{
			new String[300];

			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Mechanikas[NuoKiekEXP]));
						ShowPlayerDialogEx(playerid, MechanikuEXPDialogas, DIALOG_STYLE_INPUT, "Autoserviso ECO darbo valdymas", String, "Keisti", "Atgal");
					}

					case 1:
					{
						if(Mechanikas[TeisesA]) 	Mechanikas[TeisesA] = false;
						else 						Mechanikas[TeisesA] = true;

						MechanikuDarboValdymas(playerid);
					}

					case 2:
					{
						if(Mechanikas[TeisesB]) 	Mechanikas[TeisesB] = false;
						else 						Mechanikas[TeisesB] = true;

						MechanikuDarboValdymas(playerid);
					}

					case 3:
					{
						if(Mechanikas[TeisesC]) 	Mechanikas[TeisesC] = false;
						else 						Mechanikas[TeisesC] = true;

						MechanikuDarboValdymas(playerid);
					}

					case 4:
					{
						if(Mechanikas[sPazyma]) 	Mechanikas[sPazyma] = false;
						else 						Mechanikas[sPazyma] = true;

						MechanikuDarboValdymas(playerid);
					}
				}
			}
		}

		case MechanikuEXPDialogas:
		{
			if(response)
			{
				new String[300];

				if(IsNumeric(inputtext, true))
				{
					new InputedEXP = strval(inputtext);

					if(InputedEXP < 0)
					{
						format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Mechanikas[NuoKiekEXP]));
						ShowPlayerDialogEx(playerid, MechanikuEXPDialogas, DIALOG_STYLE_INPUT, "Autoserviso ECO darbo valdymas", String, "Keisti", "Atgal");

						return 1;
					}

					Mechanikas[NuoKiekEXP] = InputedEXP;

					MechanikuDarboValdymas(playerid);
				}
				else
				{
					format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Mechanikas[NuoKiekEXP]));
					ShowPlayerDialogEx(playerid, MechanikuEXPDialogas, DIALOG_STYLE_INPUT, "Autoserviso ECO darbo valdymas", String, "Keisti", "Atgal");
				}
			}
			else
			{
				MechanikuDarboValdymas(playerid);
			}
		}

		case DyleriuDarboValdymasDialogas:
		{
			new String[300];

			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Dyleris[NuoKiekEXP]));
						ShowPlayerDialogEx(playerid, DyleriuEXPDialogas, DIALOG_STYLE_INPUT, "Spec. bûrio pajëgø ARAS darbo valdymas", String, "Keisti", "Atgal");
					}

					case 1:
					{
						if(Dyleris[TeisesA]) 	Dyleris[TeisesA] = false;
						else 					Dyleris[TeisesA] = true;

						DyleriuDarboValdymas(playerid);
					}

					case 2:
					{
						if(Dyleris[TeisesB]) 	Dyleris[TeisesB] = false;
						else 					Dyleris[TeisesB] = true;

						DyleriuDarboValdymas(playerid);
					}

					case 3:
					{
						if(Dyleris[TeisesC]) 	Dyleris[TeisesC] = false;
						else 					Dyleris[TeisesC] = true;

						DyleriuDarboValdymas(playerid);
					}

					case 4:
					{
						if(Dyleris[sPazyma]) 	Dyleris[sPazyma] = false;
						else 					Dyleris[sPazyma] = true;

						DyleriuDarboValdymas(playerid);
					}
				}
			}
		}

		case DyleriuEXPDialogas:
		{
			if(response)
			{
				new String[300];

				if(IsNumeric(inputtext, true))
				{
					new InputedEXP = strval(inputtext);

					if(InputedEXP < 0)
					{
						format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Dyleris[NuoKiekEXP]));
						ShowPlayerDialogEx(playerid, DyleriuEXPDialogas, DIALOG_STYLE_INPUT, "Spec. bûrio pajëgø ARAS darbo valdymas", String, "Keisti", "Atgal");

						return 1;
					}

					Dyleris[NuoKiekEXP] = InputedEXP;

					DyleriuDarboValdymas(playerid);
				}
				else
				{
					format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Dyleris[NuoKiekEXP]));
					ShowPlayerDialogEx(playerid, DyleriuEXPDialogas, DIALOG_STYLE_INPUT, "Spec. bûrio pajëgø ARAS darbo valdymas", String, "Keisti", "Atgal");
				}
			}
			else
			{
				DyleriuDarboValdymas(playerid);
			}
		}

		case FuristuDarboValdymasDialogas:
		{
			new String[300];

			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Furistas[NuoKiekEXP]));
						ShowPlayerDialogEx(playerid, FuristuEXPDialogas, DIALOG_STYLE_INPUT, "Fûristø darbo valdymas", String, "Keisti", "Atgal");
					}

					case 1:
					{
						if(Furistas[TeisesA]) 	Furistas[TeisesA] = false;
						else 					Furistas[TeisesA] = true;

						FuristuDarboValdymas(playerid);
					}

					case 2:
					{
						if(Furistas[TeisesB]) 	Furistas[TeisesB] = false;
						else 					Furistas[TeisesB] = true;

						FuristuDarboValdymas(playerid);
					}

					case 3:
					{
						if(Furistas[TeisesC]) 	Furistas[TeisesC] = false;
						else 					Furistas[TeisesC] = true;

						FuristuDarboValdymas(playerid);
					}

					case 4:
					{
						if(Furistas[sPazyma]) 	Furistas[sPazyma] = false;
						else 					Furistas[sPazyma] = true;

						FuristuDarboValdymas(playerid);
					}
				}
			}
		}

		case FuristuEXPDialogas:
		{
			if(response)
			{
				new String[300];

				if(IsNumeric(inputtext, true))
				{
					new InputedEXP = strval(inputtext);

					if(InputedEXP < 0)
					{
						format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Furistas[NuoKiekEXP]));
						ShowPlayerDialogEx(playerid, FuristuEXPDialogas, DIALOG_STYLE_INPUT, "Fûristø darbo valdymas", String, "Keisti", "Atgal");

						return 1;
					}

					Furistas[NuoKiekEXP] = InputedEXP;

					FuristuDarboValdymas(playerid);
				}
				else
				{
					format(String, sizeof(String), "{ffffff}Nustatykite nuo kiek EXP bus galima ásidarbinti jûsø darbe:\n\n\tDabar galima ásidarbinti nuo: {FFAF00}%s{ffffff} EXP.", konvertuoti_pinigus(Furistas[NuoKiekEXP]));
					ShowPlayerDialogEx(playerid, FuristuEXPDialogas, DIALOG_STYLE_INPUT, "Fûristø darbo valdymas", String, "Keisti", "Atgal");
				}
			}
			else
			{
				FuristuDarboValdymas(playerid);
			}
		}

		case PropertyBuyDialog:
		{
			if(response)
			{
				new Property = VersloID[playerid], String[300];

				switch(listitem)
				{
					case 0:
					{
						if(PlayerHaveProperty(playerid) != -1) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite verslà!");

						if(GetPlayerMoneyA(playerid) < PropertyInfo[Property][pPrice]) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA(playerid, -PropertyInfo[Property][pPrice]);

						PropertyInfo[Property][pBuyed] = true;

						format(PropertyInfo[Property][pOwner], 24, "%s", GetPlayerNameEx(playerid));
						format(PropertyInfo[Property][pBuyDate], 32, "%s", GetDateEx());

						new Query[128];
						format(Query, sizeof(Query), "UPDATE `verslai` SET `Data` = '%s' WHERE `ID` = '%d'", PropertyInfo[Property][pBuyDate], Property);
						mysql_query(Query);

						new papildomas[10];
						if(PropertyInfo[Property][pPelnas] == true) papildomas = "yra";
						else										papildomas = "nëra";

						format(String, sizeof(String), "{ffffff}Verslas: {ffffff} %s\n \n{ffffff}Unikalus ID: {FFAF00}%d\n{ffffff}Savininkas: {FFAF00}%s\n{ffffff}Kaina: {FFAF00}$%s\n{ffffff}Uþdarbis: {FFAF00}$%s/1 min\n{ffffff}Papildomas pelnas: {ffffff} %s\n \n{ffffff}Norëdami valdyti verslà spauskite ALT",
						PropertyInfo[Property][pTitle], Property + 1, PropertyInfo[Property][pOwner], konvertuoti_pinigus(PropertyInfo[Property][pPrice]), konvertuoti_pinigus(PropertyInfo[Property][pEarning]), papildomas);
						Update3DTextLabelText(PropertyInfo[Property][pText], -1, String);

			            SaveProperty(Property);

			            SendClientMessage(playerid, -1, "{ffffff} Sëkmingai nusipirkote verslà. Já valdyti galite paspaudæ mygtukà ALT stovint prie jo!");
					}

					case 1:
					{
						if(PropertyInfo[Property][pPelnas] == false) return SendClientMessage(playerid, -1, "{ffffff} Ðis verslas neturi papildomo pelno!");

						switch(Property)
						{
							case STOTIES_DEGALINE, DIDELE_DEGALINE, VIDUTINE_DEGALINE:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø ásipilto kuro (ðioje degalinëje).");
							}

							case DRABUZIU_PARDUOTUVE:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø nusipirktø drabuþiø bei akiniø.");
							}

							case MAISTO_PARDUOTUVE1, MAISTO_PARDUOTUVE2:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø nusipirkto maisto (ðioje parduotuvëje).");
							}

							case EL_PARDUOTUVE:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø nusipirktø el. prekiø.");
							}

							case VM_MOKYKLA:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø teorijos bei vairavimo egzaminø.");
							}

							case TR_SALONAS:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø nusipirktø maðinø bei motociklø.\n");
								strcat(String, "{ffffff}Þaidëjui nupirkus maðinà/motociklà, dalis pinigø (tr. priemonës kaina/300) keliauja á verslo pelnà.");
							}

							case LAIVU_SALONAS:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø nusipirktø laivø.\n");
								strcat(String, "{ffffff}Þaidëjui nupirkus laivà, dalis pinigø (laivo kaina/300) keliauja á verslo pelnà.");
							}

							case SKELBIMU_CENTRAS:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø aktyvumo skelbiant skelbimus.");
							}

							case NAKTINIS_KLUBAS:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø aktyvumo geriant alkoholá ðiame klube.");
							}

							case GARAZHAS:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo tr. priemoniø atstatymø, registravimø,\n");
								strcat(String, "{ffffff}dujø árangos montavimo bei tech. apþiûros atlikimø.");
							}

							case CLUCKIN1:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø aktyvumo lankantis ðiose uþkandinëse.\n");
								strcat(String, "{ffffff}Pelnas kyla valgant visuose Cluckin Bell uþkandinëse.");
							}

							case BURGER1:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø aktyvumo lankantis ðiose uþkandinëse.\n");
								strcat(String, "{ffffff}Pelnas kyla valgant visuose Burger Shot uþkandinëse.");
							}

							case PICERIJA1:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø aktyvumo lankantis ðiose uþkandinëse.\n");
								strcat(String, "{ffffff}Pelnas kyla valgant visuose The Well Stacked Pizza picerijose.");
							}

							case ZVEJYBOS_TURGUS:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø aktyvumo perkant meðkeres, valus bei masalà.");
							}

							case GINKLU_PARDUOTUVE:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø aktyvumo perkant ginklus, ðarvus bei ginklø licenzijas.");
							}
						}

						ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Papildomo pelno informacija", String, "Uþdaryti", "");
					}
				}
	        }
		}

		case GangChestWitdrawMoney:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					if(GangInfo[Gang][gChest] >= strval(inputtext))
					{
						new WitdrawedMoney = strval(inputtext);

						if(WitdrawedMoney <= 0)
						{
							format(String, sizeof(String), "{ffffff} Áraðykite kiek pinigø norite paimti ið gaujos pelno.\n\n\tDabar yra: {FFAF00}$%s{ffffff} .", konvertuoti_pinigus(GangInfo[Gang][gChest]));
							ShowPlayerDialogEx(playerid, GangChestWitdrawMoney, DIALOG_STYLE_INPUT, " ", String, "Paimti", "Atgal");

							return 1;
						}

						GivePlayerMoneyA(playerid, WitdrawedMoney);

						GangInfo[Gang][gChest] -= WitdrawedMoney;

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}pasiëme ið gaujos pelno {FFAF00}$%s{ffffff}!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
						SendMessageToGangMembers(Gang, String);

						SaveGang(Gang);
					}
					else
					{
						format(String, sizeof(String), "{ffffff} Áraðykite kiek pinigø norite paimti ið gaujos pelno.\n\n\tDabar yra: {FFAF00}$%s{ffffff} .", konvertuoti_pinigus(GangInfo[Gang][gChest]));
						ShowPlayerDialogEx(playerid, GangChestWitdrawMoney, DIALOG_STYLE_INPUT, " ", String, "Paimti", "Atgal");
					}
				}
				else
				{
					format(String, sizeof(String), "{ffffff} Áraðykite kiek pinigø norite paimti ið gaujos pelno.\n\n\tDabar yra: {FFAF00}$%s{ffffff} .", konvertuoti_pinigus(GangInfo[Gang][gChest]));
					ShowPlayerDialogEx(playerid, GangChestWitdrawMoney, DIALOG_STYLE_INPUT, " ", String, "Paimti", "Atgal");
				}
			}
			else
			{
				format(String, sizeof(String), "{ffffff} Gaujos pelne ðiuo metu yra: {FFAF00}$%s{ffffff} .\n \n1. Paimti pinigus ið pelno (gaujos lyderiui)\n2. Padëti pinigus á pelnà", konvertuoti_pinigus(GangInfo[Gang][gChest]));
				ShowPlayerDialogEx(playerid, GangChestDialog, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Uþdaryti");
			}
		}

		case GangChestInputMoney:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					if(GetPlayerMoneyA(playerid) >= strval(inputtext))
					{
						new WitdrawedMoney = strval(inputtext);

						if(WitdrawedMoney <= 0)
						{
							format(String, sizeof(String), "{ffffff} Áraðykite kiek pinigø norite padëti á gaujos pelnà.\n\n\tDabar yra: {FFAF00}$%s{ffffff} .", konvertuoti_pinigus(GangInfo[Gang][gChest]));
							ShowPlayerDialogEx(playerid, GangChestInputMoney, DIALOG_STYLE_INPUT, " ", String, "Padëti", "Atgal");

							return 1;
						}

						GivePlayerMoneyA(playerid, -WitdrawedMoney);

						GangInfo[Gang][gChest] += WitdrawedMoney;

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}padëjo á gaujos pelnà {FFAF00}$%s{ffffff}!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
						SendMessageToGangMembers(Gang, String);

						SaveGang(Gang);
					}
					else
					{
						format(String, sizeof(String), "{ffffff} Áraðykite kiek pinigø norite padëti á gaujos pelnà.\n\n\tDabar yra: {FFAF00}$%s{ffffff} .", konvertuoti_pinigus(GangInfo[Gang][gChest]));
						ShowPlayerDialogEx(playerid, GangChestInputMoney, DIALOG_STYLE_INPUT, " ", String, "Padëti", "Atgal");
					}
				}
				else
				{
					format(String, sizeof(String), "{ffffff} Áraðykite kiek pinigø norite padëti á gaujos pelnà.\n\n\tDabar yra: {FFAF00}$%s{ffffff} .", konvertuoti_pinigus(GangInfo[Gang][gChest]));
					ShowPlayerDialogEx(playerid, GangChestInputMoney, DIALOG_STYLE_INPUT, " ", String, "Padëti", "Atgal");
				}
			}
			else
			{
				format(String, sizeof(String), "{ffffff} Gaujos pelne ðiuo metu yra: {FFAF00}$%s{ffffff} .\n \n1. Paimti pinigus ið pelno (gaujos lyderiui)\n2. Padëti pinigus á pelnà", konvertuoti_pinigus(GangInfo[Gang][gChest]));
				ShowPlayerDialogEx(playerid, GangChestDialog, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Uþdaryti");
			}
		}

		case GinkluSandelis:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowPlayerDialogEx(playerid, SGValdymas, DIALOG_STYLE_LIST, " ", "1. Paimti kulkas\n2. Padëti kulkas", "Pasirinkti", "Uþdaryti");
					case 1: ShowPlayerDialogEx(playerid, AKValdymas, DIALOG_STYLE_LIST, " ", "1. Paimti kulkas\n2. Padëti kulkas", "Pasirinkti", "Uþdaryti");
					case 2: ShowPlayerDialogEx(playerid, DGLValdymas, DIALOG_STYLE_LIST, " ", "1. Paimti kulkas\n2. Padëti kulkas", "Pasirinkti", "Uþdaryti");
				}
			}
		}

		case NarkSandelis:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowPlayerDialogEx(playerid, HeroValdymas, DIALOG_STYLE_LIST, " ", "1. Paimti narkotikus\n2. Padëti narkotikus", "Pasirinkti", "Uþdaryti");
					case 1: ShowPlayerDialogEx(playerid, KoksoValdymas, DIALOG_STYLE_LIST, " ", "1. Paimti narkotikus\n2. Padëti narkotikus", "Pasirinkti", "Uþdaryti");
					case 2: ShowPlayerDialogEx(playerid, WeedValdymas, DIALOG_STYLE_LIST, " ", "1. Paimti narkotikus\n2. Padëti narkotikus", "Pasirinkti", "Uþdaryti");
					case 3: ShowPlayerDialogEx(playerid, EkstValdymas, DIALOG_STYLE_LIST, " ", "1. Paimti narkotikus\n2. Padëti narkotikus", "Pasirinkti", "Uþdaryti");
				}
			}
		}

		case EkstValdymas:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialogEx(playerid, PaimtiEkst, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
					}

					case 1:
					{
						ShowPlayerDialogEx(playerid, PadetiEkst, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
					}
				}
			}
		}

		case PaimtiEkst:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					/*new weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid);

					if(weapon != 25)
					{*/
						new WitdrawedMoney = strval(inputtext);

						if(WitdrawedMoney <= 0)
						{
							ShowPlayerDialogEx(playerid, PaimtiEkst, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");

							return 1;
						}

						if(WitdrawedMoney > GangInfo[Gang][Narkai4])
						{
							ShowPlayerDialogEx(playerid, PaimtiEkst, DIALOG_STYLE_INPUT, " ", "{FFAF00}Sandelyje tiek narkotikø nëra!\n{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");

							return 1;
						}

						PI[playerid][Ekstazi] += WitdrawedMoney;

						GangInfo[Gang][Narkai4] -= WitdrawedMoney;

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}pasieme ið gaujos sandëlio {FFAF00}%s mg{ffffff} ekstazio!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
						SendMessageToGangMembers(Gang, String);

						SaveGang(Gang);
					/*}
					else
					{
						ShowPlayerDialogEx(playerid, PaimtiSG, DIALOG_STYLE_INPUT, " ", "{FFAF00}Shotgun turite laikyti rankoje!\n{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
					}*/
				}
				else
				{
					ShowPlayerDialogEx(playerid, PaimtiEkst, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
				}
			}
		}

		case PadetiEkst:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					new WitdrawedMoney = strval(inputtext);

					if(WitdrawedMoney <= 0)
					{
						ShowPlayerDialogEx(playerid, PadetiEkst, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");

						return 1;
					}

					if(WitdrawedMoney > PI[playerid][Ekstazi])
					{
						ShowPlayerDialogEx(playerid, PadetiEkst, DIALOG_STYLE_INPUT, " ", "{FFAF00}Jus neturite tiek narkotikø!\n{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");

						return 1;
					}

					PI[playerid][Ekstazi] -= WitdrawedMoney;

					GangInfo[Gang][Narkai4] += WitdrawedMoney;

					format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}padëjo á gaujos sandëlá {FFAF00}%s ml{ffffff} ekstazio!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
					SendMessageToGangMembers(Gang, String);

					SaveGang(Gang);
				}
				else
				{
					ShowPlayerDialogEx(playerid, PadetiEkst, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
				}
			}
		}

		case WeedValdymas:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialogEx(playerid, PaimtiWeed, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
					}

					case 1:
					{
						ShowPlayerDialogEx(playerid, PadetiWeed, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
					}
				}
			}
		}

		case PaimtiWeed:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					/*new weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid);

					if(weapon != 25)
					{*/
						new WitdrawedMoney = strval(inputtext);

						if(WitdrawedMoney <= 0)
						{
							ShowPlayerDialogEx(playerid, PaimtiWeed, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");

							return 1;
						}

						if(WitdrawedMoney > GangInfo[Gang][Narkai3])
						{
							ShowPlayerDialogEx(playerid, PaimtiWeed, DIALOG_STYLE_INPUT, " ", "{FFAF00}Sandelyje tiek narkotikø nëra!\n{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");

							return 1;
						}

						PI[playerid][Weed] += WitdrawedMoney;

						GangInfo[Gang][Narkai3] -= WitdrawedMoney;

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}pasieme ið gaujos sandëlio {FFAF00}%s mg{ffffff} þolës!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
						SendMessageToGangMembers(Gang, String);

						SaveGang(Gang);
					/*}
					else
					{
						ShowPlayerDialogEx(playerid, PaimtiSG, DIALOG_STYLE_INPUT, " ", "{FFAF00}Shotgun turite laikyti rankoje!\n{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
					}*/
				}
				else
				{
					ShowPlayerDialogEx(playerid, PaimtiWeed, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
				}
			}
		}

		case PadetiWeed:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					new WitdrawedMoney = strval(inputtext);

					if(WitdrawedMoney <= 0)
					{
						ShowPlayerDialogEx(playerid, PadetiWeed, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");

						return 1;
					}

					if(WitdrawedMoney > PI[playerid][Weed])
					{
						ShowPlayerDialogEx(playerid, PadetiWeed, DIALOG_STYLE_INPUT, " ", "{FFAF00}Jus neturite tiek narkotikø!\n{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");

						return 1;
					}

					PI[playerid][Weed] -= WitdrawedMoney;

					GangInfo[Gang][Narkai3] += WitdrawedMoney;

					format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}padëjo á gaujos sandëlá {FFAF00}%s ml{ffffff} þolës!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
					SendMessageToGangMembers(Gang, String);

					SaveGang(Gang);
				}
				else
				{
					ShowPlayerDialogEx(playerid, PadetiWeed, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
				}
			}
		}

		case KoksoValdymas:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialogEx(playerid, PaimtiKokso, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
					}

					case 1:
					{
						ShowPlayerDialogEx(playerid, PadetiKokso, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
					}
				}
			}
		}

		case PaimtiKokso:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					/*new weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid);

					if(weapon != 25)
					{*/
						new WitdrawedMoney = strval(inputtext);

						if(WitdrawedMoney <= 0)
						{
							ShowPlayerDialogEx(playerid, PaimtiKokso, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");

							return 1;
						}

						if(WitdrawedMoney > GangInfo[Gang][Narkai2])
						{
							ShowPlayerDialogEx(playerid, PaimtiKokso, DIALOG_STYLE_INPUT, " ", "{FFAF00}Sandelyje tiek narkotikø nëra!\n{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");

							return 1;
						}

						PI[playerid][Kokainas] += WitdrawedMoney;

						GangInfo[Gang][Narkai2] -= WitdrawedMoney;

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}pasieme ið gaujos sandëlio {FFAF00}%s mg{ffffff} kokaino!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
						SendMessageToGangMembers(Gang, String);

						SaveGang(Gang);
					/*}
					else
					{
						ShowPlayerDialogEx(playerid, PaimtiSG, DIALOG_STYLE_INPUT, " ", "{FFAF00}Shotgun turite laikyti rankoje!\n{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
					}*/
				}
				else
				{
					ShowPlayerDialogEx(playerid, PaimtiKokso, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
				}
			}
		}

		case PadetiKokso:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					new WitdrawedMoney = strval(inputtext);

					if(WitdrawedMoney <= 0)
					{
						ShowPlayerDialogEx(playerid, PadetiKokso, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");

						return 1;
					}

					if(WitdrawedMoney > PI[playerid][Kokainas])
					{
						ShowPlayerDialogEx(playerid, PadetiKokso, DIALOG_STYLE_INPUT, " ", "{FFAF00}Jus neturite tiek narkotikø!\n{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");

						return 1;
					}

					PI[playerid][Kokainas] -= WitdrawedMoney;

					GangInfo[Gang][Narkai2] += WitdrawedMoney;

					format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}padëjo á gaujos sandëlá {FFAF00}%s ml{ffffff} kokaino!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
					SendMessageToGangMembers(Gang, String);

					SaveGang(Gang);
				}
				else
				{
					ShowPlayerDialogEx(playerid, PadetiKokso, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
				}
			}
		}

		case HeroValdymas:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialogEx(playerid, PaimtiHero, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
					}

					case 1:
					{
						ShowPlayerDialogEx(playerid, PadetiHero, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
					}
				}
			}
		}

		case PaimtiHero:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					/*new weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid);

					if(weapon != 25)
					{*/
						new WitdrawedMoney = strval(inputtext);

						if(WitdrawedMoney <= 0)
						{
							ShowPlayerDialogEx(playerid, PaimtiHero, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");

							return 1;
						}

						if(WitdrawedMoney > GangInfo[Gang][Narkai1])
						{
							ShowPlayerDialogEx(playerid, PaimtiHero, DIALOG_STYLE_INPUT, " ", "{FFAF00}Sandelyje tiek narkotikø nëra!\n{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");

							return 1;
						}

						PI[playerid][Heroinas] += WitdrawedMoney;

						GangInfo[Gang][Narkai1] -= WitdrawedMoney;

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}pasieme ið gaujos sandëlio {FFAF00}%s ml{ffffff} heroino!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
						SendMessageToGangMembers(Gang, String);

						SaveGang(Gang);
					/*}
					else
					{
						ShowPlayerDialogEx(playerid, PaimtiSG, DIALOG_STYLE_INPUT, " ", "{FFAF00}Shotgun turite laikyti rankoje!\n{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
					}*/
				}
				else
				{
					ShowPlayerDialogEx(playerid, PaimtiHero, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
				}
			}
		}

		case PadetiHero:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					new WitdrawedMoney = strval(inputtext);

					if(WitdrawedMoney <= 0)
					{
						ShowPlayerDialogEx(playerid, PadetiHero, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");

						return 1;
					}

					if(WitdrawedMoney > PI[playerid][Heroinas])
					{
						ShowPlayerDialogEx(playerid, PadetiHero, DIALOG_STYLE_INPUT, " ", "{FFAF00}Jus neturite tiek narkotikø!\n{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");

						return 1;
					}

					PI[playerid][Heroinas] -= WitdrawedMoney;

					GangInfo[Gang][Narkai1] += WitdrawedMoney;

					format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}padëjo á gaujos sandëlá {FFAF00}%s ml{ffffff} heroino!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
					SendMessageToGangMembers(Gang, String);

					SaveGang(Gang);
				}
				else
				{
					ShowPlayerDialogEx(playerid, PadetiHero, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek narkotikø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
				}
			}
		}

		case DGLValdymas:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialogEx(playerid, PaimtiDGL, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
					}

					case 1:
					{
						ShowPlayerDialogEx(playerid, PadetiDGL, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
					}
				}
			}
		}

		case AKValdymas:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialogEx(playerid, PaimtiAK, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
					}

					case 1:
					{
						ShowPlayerDialogEx(playerid, PadetiAK, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
					}
				}
			}
		}

		case SGValdymas:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialogEx(playerid, PaimtiSG, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
					}

					case 1:
					{
						ShowPlayerDialogEx(playerid, PadetiSG, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
					}
				}
			}
		}

		case PaimtiAK:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					/*new weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid);

					if(weapon != 25)
					{*/
						new WitdrawedMoney = strval(inputtext);

						if(WitdrawedMoney <= 0)
						{
							ShowPlayerDialogEx(playerid, PaimtiAK, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");

							return 1;
						}

						if(WitdrawedMoney > GangInfo[Gang][Ginklai2])
						{
							ShowPlayerDialogEx(playerid, PaimtiAK, DIALOG_STYLE_INPUT, " ", "{FFAF00}Sandelyje tiek kulkø nëra!\n{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");

							return 1;
						}

						ac_GivePlayerWeapon(playerid, 30, WitdrawedMoney);

						GangInfo[Gang][Ginklai2] -= WitdrawedMoney;

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}pasieme ið gaujos sandëlio {FFAF00}%s{ffffff} kulkø AK-47!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
						SendMessageToGangMembers(Gang, String);

						SaveGang(Gang);
					/*}
					else
					{
						ShowPlayerDialogEx(playerid, PaimtiSG, DIALOG_STYLE_INPUT, " ", "{FFAF00}Shotgun turite laikyti rankoje!\n{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
					}*/
				}
				else
				{
					ShowPlayerDialogEx(playerid, PaimtiAK, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
				}
			}
		}

		case PadetiAK:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					new weapon = GetPlayerWeapon(playerid), ammo = ac_GetPlayerAmmo(playerid, weapon);

					if(weapon == 30)
					{
						new WitdrawedMoney = strval(inputtext);

						if(WitdrawedMoney <= 0)
						{
							ShowPlayerDialogEx(playerid, PadetiAK, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");

							return 1;
						}

						if(WitdrawedMoney > ammo)
						{
							ShowPlayerDialogEx(playerid, PadetiAK, DIALOG_STYLE_INPUT, " ", "{FFAF00}Jus neturite tiek kulkø!\n{ffffff} Áraðykite kiek kulkø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");

							return 1;
						}

						ac_GivePlayerWeapon(playerid, 30, -WitdrawedMoney);

						GangInfo[Gang][Ginklai2] += WitdrawedMoney;

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}padëjo á gaujos sandëlá {FFAF00}%s{ffffff} kulkø AK-47!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
						SendMessageToGangMembers(Gang, String);

						SaveGang(Gang);
					}
					else
					{
						ShowPlayerDialogEx(playerid, PadetiAK, DIALOG_STYLE_INPUT, " ", "{FFAF00}AK-47 turite laikyti rankoje!\n{ffffff} Áraðykite kiek kulkø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid, PadetiAK, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
				}
			}
		}

		case PaimtiSG:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					/*new weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid);

					if(weapon != 25)
					{*/
						new WitdrawedMoney = strval(inputtext);

						if(WitdrawedMoney <= 0)
						{
							ShowPlayerDialogEx(playerid, PaimtiSG, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");

							return 1;
						}

						if(WitdrawedMoney > GangInfo[Gang][Ginklai1])
						{
							ShowPlayerDialogEx(playerid, PaimtiSG, DIALOG_STYLE_INPUT, " ", "{FFAF00}Sandelyje tiek kulkø nëra!\n{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");

							return 1;
						}

						ac_GivePlayerWeapon(playerid, 25, WitdrawedMoney);

						GangInfo[Gang][Ginklai1] -= WitdrawedMoney;

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}pasieme ið gaujos sandëlio {FFAF00}%s{ffffff} kulkø Shotgun!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
						SendMessageToGangMembers(Gang, String);

						SaveGang(Gang);
					/*}
					else
					{
						ShowPlayerDialogEx(playerid, PaimtiSG, DIALOG_STYLE_INPUT, " ", "{FFAF00}Shotgun turite laikyti rankoje!\n{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
					}*/
				}
				else
				{
					ShowPlayerDialogEx(playerid, PaimtiSG, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
				}
			}
		}

		case PadetiSG:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					new weapon = GetPlayerWeapon(playerid), ammo = ac_GetPlayerAmmo(playerid, weapon);

					if(weapon == 25)
					{
						new WitdrawedMoney = strval(inputtext);

						if(WitdrawedMoney <= 0)
						{
							ShowPlayerDialogEx(playerid, PadetiSG, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");

							return 1;
						}

						if(WitdrawedMoney > ammo)
						{
							ShowPlayerDialogEx(playerid, PadetiSG, DIALOG_STYLE_INPUT, " ", "{FFAF00}Jus neturite tiek kulkø!\n{ffffff} Áraðykite kiek kulkø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");

							return 1;
						}

						ac_GivePlayerWeapon(playerid, 25, -WitdrawedMoney);

						GangInfo[Gang][Ginklai1] += WitdrawedMoney;

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}padëjo á gaujos sandëlá {FFAF00}%s{ffffff} kulkø Shotgun!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
						SendMessageToGangMembers(Gang, String);

						SaveGang(Gang);
					}
					else
					{
						ShowPlayerDialogEx(playerid, PadetiSG, DIALOG_STYLE_INPUT, " ", "{FFAF00}Shotgun turite laikyti rankoje!\n{ffffff} Áraðykite kiek kulkø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid, PadetiSG, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
				}
			}
		}

		case PaimtiDGL:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					new WitdrawedMoney = strval(inputtext);

					if(WitdrawedMoney <= 0)
					{
						ShowPlayerDialogEx(playerid, PaimtiDGL, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");

						return 1;
					}

					if(WitdrawedMoney > GangInfo[Gang][Ginklai3])
					{
						ShowPlayerDialogEx(playerid, PaimtiDGL, DIALOG_STYLE_INPUT, " ", "{FFAF00}Sandelyje tiek kulkø nëra!\n{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");

						return 1;
					}

					ac_GivePlayerWeapon(playerid, 24, WitdrawedMoney);

					GangInfo[Gang][Ginklai3] -= WitdrawedMoney;

					format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}pasieme ið gaujos sandëlio {FFAF00}%s{ffffff} kulkø Deagle!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
					SendMessageToGangMembers(Gang, String);

					SaveGang(Gang);
				}
				else
				{
					ShowPlayerDialogEx(playerid, PaimtiDGL, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite paimti ið gaujos sandëlio.", "Paimti", "Uþdaryti");
				}
			}
		}

		case PadetiDGL:
		{
			new String[300], Gang = GangMember(playerid);
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(response)
			{
				if(IsNumeric(inputtext, true))
				{
					new weapon = GetPlayerWeapon(playerid), ammo = ac_GetPlayerAmmo(playerid, weapon);

					if(weapon == 24)
					{
						new WitdrawedMoney = strval(inputtext);

						if(WitdrawedMoney <= 0)
						{
							ShowPlayerDialogEx(playerid, PadetiDGL, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");

							return 1;
						}

						if(WitdrawedMoney > ammo)
						{
							ShowPlayerDialogEx(playerid, PadetiDGL, DIALOG_STYLE_INPUT, " ", "{FFAF00}Jus neturite tiek kulkø!\n{ffffff} Áraðykite kiek kulkø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");

							return 1;
						}

						ac_GivePlayerWeapon(playerid, 24, -WitdrawedMoney);

						GangInfo[Gang][Ginklai3] += WitdrawedMoney;

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {FFAF00}%s {ffffff}padëjo á gaujos sandëlá {FFAF00}%s{ffffff} kulkø Deagle!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), konvertuoti_pinigus(WitdrawedMoney));
						SendMessageToGangMembers(Gang, String);

						SaveGang(Gang);
					}
					else
					{
						ShowPlayerDialogEx(playerid, PadetiDGL, DIALOG_STYLE_INPUT, " ", "{FFAF00}Deagle turite laikyti rankoje!\n{ffffff} Áraðykite kiek kulkø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid, PadetiDGL, DIALOG_STYLE_INPUT, " ", "{ffffff} Áraðykite kiek kulkø norite padëti á gaujos sandëlá.", "Padëti", "Uþdaryti");
				}
			}
		}

		case GangChestDialog:
		{
			new String[300], Gang = GangMember(playerid);

			if(response)
			{
				switch(listitem)
				{
					case 0..1:
					{
						format(String, sizeof(String), "{ffffff} Gaujos pelne ðiuo metu yra: {FFAF00}$%s{ffffff} .\n \n1. Paimti pinigus ið pelno (gaujos lyderiui)\n2. Padëti pinigus á pelnà", konvertuoti_pinigus(GangInfo[Gang][gChest]));
						ShowPlayerDialogEx(playerid, GangChestDialog, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Uþdaryti");
					}

					case 2:
					{
						if(strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gaujos lyderis!");

						format(String, sizeof(String), "{ffffff} Áraðykite kiek pinigø norite paimti ið gaujos pelno.\n\n\tDabar yra: {FFAF00}$%s{ffffff} .", konvertuoti_pinigus(GangInfo[Gang][gChest]));
						ShowPlayerDialogEx(playerid, GangChestWitdrawMoney, DIALOG_STYLE_INPUT, " ", String, "Paimti", "Atgal");
					}

					case 3:
					{
						format(String, sizeof(String), "{ffffff} Áraðykite kiek pinigø norite padëti á gaujos pelnà.\n\n\tDabar yra: {FFAF00}$%s{ffffff} .", konvertuoti_pinigus(GangInfo[Gang][gChest]));
						ShowPlayerDialogEx(playerid, GangChestInputMoney, DIALOG_STYLE_INPUT, " ", String, "Padëti", "Atgal");
					}

					case 4:
					{
						format(String, sizeof(String), "Pavadinimas\tKulkø kiekis\n1. Shotgun\t{FFAF00}%s\n2. AK-47\t{FFAF00}%s\n3. Deagle\t{FFAF00}%s",
						konvertuoti_pinigus(GangInfo[Gang][Ginklai1]), konvertuoti_pinigus(GangInfo[Gang][Ginklai2]), konvertuoti_pinigus(GangInfo[Gang][Ginklai3]));
						ShowPlayerDialogEx(playerid, GinkluSandelis, DIALOG_STYLE_TABLIST_HEADERS, " ", String, "Pasirinkti", "Uþdaryti");
					}

					case 5:
					{
						format(String, sizeof(String), "Rûðis\tKiekis (ml, mg)\n1. Heroinas\t{FFAF00}%s ml\n2. Kokainas\t{FFAF00}%s mg\n3. Þolë\t{FFAF00}%s mg\n4. Ekstazi\t{FFAF00}%s mg",
						konvertuoti_pinigus(GangInfo[Gang][Narkai1]), konvertuoti_pinigus(GangInfo[Gang][Narkai2]), konvertuoti_pinigus(GangInfo[Gang][Narkai3]), konvertuoti_pinigus(GangInfo[Gang][Narkai4]));
						ShowPlayerDialogEx(playerid, NarkSandelis, DIALOG_STYLE_TABLIST_HEADERS, " ", String, "Pasirinkti", "Uþdaryti");
					}
				}
			}
		}

		case GangInviteDialog:
		{
			new Suggester = ChoosedPlayer[playerid], String[216];

			if(response)
			{
				new Gang = GangMember(Suggester);

				if(Suggester == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas kuris pakvietë jus á gaujà - atsijungë!");

				if(PI[playerid][gMember] != -1) return SendClientMessage(playerid, -1, "{ffffff} Jus priklausote kitai gaujai!");

				PI[playerid][gMember] = Gang;

				format(String, sizeof(String), "{ffffff} Sëkmingai prisijungëte prie {FFAF00}%s {ffffff}gaujos!", GangInfo[Gang][gTitle]);
				SendClientMessage(playerid, -1, String);

				format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}sutiko prisijungti prie jûsø gaujos!", GetPlayerNameEx(playerid));
				SendClientMessage(Suggester, -1, String);

				format(String, sizeof(String), "UPDATE `players` SET `gMember` = '%d' WHERE `Vardas` = '%s'", PI[playerid][gMember], GetPlayerNameEx(playerid));
				mysql_query(String);
			}
			else
			{
				format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}atsisakë prisijungti prie jûsø gaujos!", GetPlayerNameEx(playerid));
				SendClientMessage(Suggester, -1, String);
			}
		}

		case 9635:
		{
			if(response)
			{
				if(PI[playerid][KadaTelinosi] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Teleportuotis galimas tik kas 1 minutæ!");

				if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

				if(PI[playerid][beglys] == true) return SendClientMessage(playerid, -1, "{ffffff} Jus esate begliø sàraðe!");

				if(PI[playerid][Ieskomas] > 10) return SendClientMessage(playerid, -1, "{ffffff} Jus esate ieðkomas daugiau nei 10 lygiu!");

				switch(listitem)
				{
					case 0:
					{
						if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
						{
							AC_SetVehiclePos(GetPlayerVehicleID(playerid), -2029.6293,179.5702,27.4966);
						}
						else
						{
							AC_SetPlayerPos(playerid, -2035.5055,179.4148,27.6917);
						}

						SetPlayerInterior     	(playerid, 0);
						SetPlayerVirtualWorld 	(playerid, 0);
					}

					case 1:
					{
						AC_SetPlayerPos 		(playerid, -1646.3528, -186.7855, 15.1484);
						SetPlayerInterior     	(playerid, 0);
						SetPlayerVirtualWorld 	(playerid, 0);
					}

					case 2:
					{
						AC_SetPlayerPos 		(playerid, -310.8965, 1508.9871, 76.5625);
						SetPlayerInterior     	(playerid, 0);
						SetPlayerVirtualWorld 	(playerid, 0);
					}

					case 3:
					{
						AC_SetPlayerPos 		(playerid, -1651.9224,893.7057,136.0859);
						SetPlayerInterior     	(playerid, 0);
						SetPlayerVirtualWorld 	(playerid, 0);
					}

					case 4:
					{
						AC_SetPlayerPos 		(playerid, -5201.3687,507.8802,3.0579);
						SetPlayerInterior     	(playerid, 0);
						SetPlayerVirtualWorld 	(playerid, 0);
					}

					case 5:
					{
						AC_SetPlayerPos 		(playerid, 875.2482,-10.5656,63.3604);
						SetPlayerInterior     	(playerid, 0);
						SetPlayerVirtualWorld 	(playerid, 0);
					}

					case 6:
					{
						AC_SetPlayerPos 		(playerid, 1109.4127,1356.3192,10.8203);
						SetPlayerInterior     	(playerid, 0);
						SetPlayerVirtualWorld 	(playerid, 0);
					}

					case 7:
					{
						AC_SetPlayerPos 		(playerid, -2581.9646,307.3467,5.1797);
						SetPlayerInterior     	(playerid, 0);
						SetPlayerVirtualWorld 	(playerid, 0);
					}

					case 8:
					{
						AC_SetPlayerPos 		(playerid, 2836.9197,-2531.2263,17.9672);
						SetPlayerInterior     	(playerid, 0);
						SetPlayerVirtualWorld 	(playerid, 0);
					}
					
					case 9:
					{
						AC_SetPlayerPos 		(playerid, -1993.67126, -520.58496, 54.25150);
						SetPlayerInterior     	(playerid, 0);
						SetPlayerVirtualWorld 	(playerid, 0);
				}
				}

				PI[playerid][KadaTelinosi] = gettime() + 60;
				SelectedCreditHouseID[playerid] = -1;

				SetPlayerChatBubble (playerid, "Panaudojau komandà:\n{FFAF00} /tele", 0xFFFFFFFF, 15.0, 5000);
			}
		}

		case 9634:
		{
			new String[2048];

			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						strcat(String, "Komanda\tInformacija\n");
						strcat(String, "{FFAF00} /carfix\t{ffffff}iðtaisysite transp. priemonæ\n");
						strcat(String, "{FFAF00} /s\t{ffffff}paraðysite praneðimà, kurá visi matys\n");
						strcat(String, "{FFAF00} /ginklai\t{ffffff}gausite ginklø paketà ({FFAF00}$5000{ffffff})\n");
						strcat(String, "{FFAF00} /count\t{ffffff}pradëti skaièiavimà\n");
						strcat(String, "{FFAF00} /boom\t{ffffff}susprogdinsite darbine transp. priemonæ\n");
						strcat(String, "{FFAF00} /vc\t{ffffff}paraðysite á vip pokalbá\n");
						strcat(String, "{FFAF00} /pildyti\t{ffffff}pripildysite degalø á transp. priemonæ\n");
						strcat(String, "{FFAF00} /heal\t{ffffff}pagydysite þaidëjà\n");
						strcat(String, "{FFAF00} /tpm1\t{ffffff}nusiteliportuosite prie pirmosios transp. priemonës\n");
						strcat(String, "{FFAF00} /tpm2\t{ffffff}nusiteliportuosite prie antrosios transp. priemonës\n");
						strcat(String, "{FFAF00} /tpm3\t{ffffff}nusiteliportuosite prie treèiosios transp. priemonës\n");
						strcat(String, "{FFAF00} /tele\t{ffffff}teleportai á pasirinktas vietas\n \n");
						strcat(String, " \t{ffffff} Taip pat jus gausite 2 kartus daugiau patirties taðkø bei algos");

						ShowPlayerDialogEx(playerid, 8413, DIALOG_STYLE_TABLIST_HEADERS, "VIP statuso komandos", String, "Uþdaryti", "");
					}

					case 1:
					{
						strcat(String, "Komanda\tInformacija\n");
						strcat(String, "{FFAF00} /carfix\t{ffffff}iðtaisysite transp. priemonæ\n");
						strcat(String, "{FFAF00} /s\t{ffffff}paraðysite praneðimà, kurá visi matys\n");
						strcat(String, "{FFAF00} /pm\t{ffffff}nusiøsite asmeninæ þinutæ þaidëjui\n");
						strcat(String, "{FFAF00} /ginklai\t{ffffff}gausite ginklø paketà ({FFAF00}$1,000{ffffff})\n");
						strcat(String, "{FFAF00} /count\t{ffffff}pradëti skaièiavimà\n");
						strcat(String, "{FFAF00} /to\t{ffffff}nusiteliportuoti pas þaidëjà\n");
						strcat(String, "{FFAF00} /boom\t{ffffff}susprogdinsite darbine transp. priemonæ\n");
						strcat(String, "{FFAF00} /ac\t{ffffff}paraðysite á administratoriø pokalbá\n");
						strcat(String, "{FFAF00} /tpm1\t{ffffff}nusiteliportuosite prie pirmosios transp. priemonës\n");
						strcat(String, "{FFAF00} /tpm2\t{ffffff}nusiteliportuosite prie antrosios transp. priemonës\n");
						strcat(String, "{FFAF00} /tpm3\t{ffffff}nusiteliportuosite prie treèiosios transp. priemonës\n");
						strcat(String, "{FFAF00} /takew\t{ffffff}atimsite þaidëjui ginklus\n");
						strcat(String, "{FFAF00} /freeze\t{ffffff}uþðaldysite þaidëjà\n");
						strcat(String, "{FFAF00} /unfreeze\t{ffffff}atðaldysite þaidëjà\n");
						strcat(String, "{FFAF00} /kill\t{ffffff}nuþudysite þaidëjà\n");
						strcat(String, "{FFAF00} /pildyti\t{ffffff}pripildysite degalø á transp. priemonæ\n");
						strcat(String, "{FFAF00} /heal\t{ffffff}pagydysite þaidëjà\n");
						strcat(String, "{FFAF00} /tele\t{ffffff}teleportai á pasirinktas vietas\n");
						strcat(String, "{FFAF00} /spec\t{ffffff}pradëti/baigti priþiûrëti þaidëjà\n");
						strcat(String, "{FFAF00} /bausti\t{ffffff}nubausite pasirinktà þaidëjà\n");
						strcat(String, "{FFAF00} /eventcar\t{ffffff}event transporto valdymas\n \n");
						strcat(String, " \t{ffffff} Taip pat jus gausite 2 kartus daugiau patirties taðkø bei algos");

						ShowPlayerDialogEx(playerid, 8413, DIALOG_STYLE_TABLIST_HEADERS, "I lygio administratoriø komandos", String, "Uþdaryti", "");
					}

					case 2:
					{
						strcat(String, "Komanda\tInformacija\n");
						strcat(String, "{FFAF00} /carfix\t{ffffff}iðtaisysite transp. priemonæ\n");
						strcat(String, "{FFAF00} /unjail\t{ffffff}paleisite þaidëjà ið kalëjimo\n");
						strcat(String, "{FFAF00} /s\t{ffffff}paraðysite praneðimà, kurá visi matys\n");
						strcat(String, "{FFAF00} /pm\t{ffffff}nusiøsite asmeninæ þinutæ þaidëjui\n");
						strcat(String, "{FFAF00} /ginklai\t{ffffff}gausite ginklø paketà ({FFAF00}$1,500{ffffff})\n");
						strcat(String, "{FFAF00} /count\t{ffffff}pradëti skaièiavimà\n");
						strcat(String, "{FFAF00} /to\t{ffffff}nusiteliportuoti pas þaidëjà\n");
						strcat(String, "{FFAF00} /get\t{ffffff}atiteliportuoti þaidëjà pas save\n");
						strcat(String, "{FFAF00} /spec\t{ffffff}pradëti/baigti priþiûrëti þaidëjà\n");
						strcat(String, "{FFAF00} /boom\t{ffffff}susprogdinsite darbine transp. priemonæ\n");
						strcat(String, "{FFAF00} /ac\t{ffffff}paraðysite á administratoriø pokalbá\n");
						strcat(String, "{FFAF00} /tpm1\t{ffffff}nusiteliportuosite prie pirmosios transp. priemonës\n");
						strcat(String, "{FFAF00} /tpm2\t{ffffff}nusiteliportuosite prie antrosios transp. priemonës\n");
						strcat(String, "{FFAF00} /tpm3\t{ffffff}nusiteliportuosite prie treèiosios transp. priemonës\n");
						strcat(String, "{FFAF00} /takew\t{ffffff}atimsite þaidëjui ginklus\n");
						strcat(String, "{FFAF00} /freeze\t{ffffff}uþðaldysite þaidëjà\n");
						strcat(String, "{FFAF00} /unfreeze\t{ffffff}atðaldysite þaidëjà\n");
						strcat(String, "{FFAF00} /kill\t{ffffff}nuþudysite þaidëjà\n");
						strcat(String, "{FFAF00} /pildyti\t{ffffff}pripildysite degalø á transp. priemonæ\n");
						strcat(String, "{FFAF00} /heal\t{ffffff}pagydysite þaidëjà\n");
						strcat(String, "{FFAF00} /tele\t{ffffff}teleportai á pasirinktas vietas\n");
						strcat(String, "{FFAF00} /bausti\t{ffffff}nubausite pasirinktà þaidëjà\n");
						strcat(String, "{FFAF00} /eheal\t{ffffff}pagydysite visus ðalia esanèius þaidëjus\n");
						strcat(String, "{FFAF00} /egun\t{ffffff}duosite ginklø visiems ðalia esantiems þaidëjams\n \n");
						strcat(String, " \t{ffffff} Taip pat jus gausite 2 kartus daugiau patirties taðkø bei algos");

						ShowPlayerDialogEx(playerid, 8411, DIALOG_STYLE_TABLIST_HEADERS, "II lygio administratoriø komandos", String, "Uþdaryti", "");
					}

					case 3:
					{
						strcat(String, "Komanda\tInformacija\n");
						strcat(String, "{FFAF00} /carfix\t{ffffff}iðtaisysite transp. priemonæ\n");
						strcat(String, "{FFAF00} /afondas\t{ffffff}administratoriø fondo informacija\n");
						strcat(String, "{FFAF00} /unjail\t{ffffff}paleisite þaidëjà ið kalëjimo\n");
						strcat(String, "{FFAF00} /s\t{ffffff}paraðysite praneðimà, kurá visi matys\n");
						strcat(String, "{FFAF00} /pm\t{ffffff}nusiøsite asmeninæ þinutæ þaidëjui\n");
						strcat(String, "{FFAF00} /ginklai\t{ffffff}gausite ginklø paketà({FFAF00}$2,000{ffffff})\n");
						strcat(String, "{FFAF00} /count\t{ffffff}pradëti skaièiavimà\n");
						strcat(String, "{FFAF00} /to\t{ffffff}nusiteliportuoti pas þaidëjà\n");
						strcat(String, "{FFAF00} /get\t{ffffff}atiteliportuoti þaidëjà pas save\n");
						strcat(String, "{FFAF00} /spec\t{ffffff}pradëti/baigti priþiûrëti þaidëjà\n");
						strcat(String, "{FFAF00} /boom\t{ffffff}susprogdinsite darbine transp. priemonæ\n");
						strcat(String, "{FFAF00} /kick\t{ffffff}iðmesite þaidëjà ið serverio\n");
						strcat(String, "{FFAF00} /ac\t{ffffff}paraðysite á administratoriø pokalbá\n");
						strcat(String, "{FFAF00} /tpm1\t{ffffff}nusiteliportuosite prie pirmosios transp. priemonës\n");
						strcat(String, "{FFAF00} /tpm2\t{ffffff}nusiteliportuosite prie antrosios transp. priemonës\n");
						strcat(String, "{FFAF00} /tpm3\t{ffffff}nusiteliportuosite prie treèiosios transp. priemonës\n");
						strcat(String, "{FFAF00} /takew\t{ffffff}atimsite þaidëjui ginklus\n");
						strcat(String, "{FFAF00} /freeze\t{ffffff}uþðaldysite þaidëjà\n");
						strcat(String, "{FFAF00} /unfreeze\t{ffffff}atðaldysite þaidëjà\n");
						strcat(String, "{FFAF00} /kill\t{ffffff}nuþudysite þaidëjà\n");
						strcat(String, "{FFAF00} /pildyti\t{ffffff}pripildysite degalø á transp. priemonæ\n");
						strcat(String, "{FFAF00} /heal\t{ffffff}pagydysite þaidëjà\n");
						strcat(String, "{FFAF00} /unmute\t{ffffff}atitildisitë þaidëjà\n");
						strcat(String, "{FFAF00} /darbinesrr\t{ffffff}sunaikinsite visas darbines transp. priemones\n");
						strcat(String, "{FFAF00} /tele\t{ffffff}teleportai á pasirinktas vietas\n");
						strcat(String, "{FFAF00} /bausti\t{ffffff}nubausite pasirinktà þaidëjà\n");
						strcat(String, "{FFAF00} /eheal\t{ffffff}pagydysite visus ðalia esanèius þaidëjus\n");
						strcat(String, "{FFAF00} /egun\t{ffffff}duosite ginklø visiems ðalia esantiems þaidëjams\n");
						strcat(String, "{FFAF00} /eventcar\t{ffffff}event transporto valdymas\n \n");
						strcat(String, " \t{ffffff} Taip pat jus gausite 2 kartus daugiau patirties taðkø bei algos");

						ShowPlayerDialogEx(playerid, 8412, DIALOG_STYLE_TABLIST_HEADERS, "III lygio administratoriø komandos", String, "Uþdaryti", "");
					}
				}
			}
		}

		case MobilePhoneInfoDialog:
		{
			if(response)
			{
				switch(listitem)
				{
					case 1:
					{
						if(PI[playerid][PhoneStatus] == 0)
						{
							if(PI[playerid][Battery] < 1) return SendClientMessage(playerid, -1, "{ffffff} Jûsø telefonas iðsikrovæs!");

							PI[playerid][PhoneStatus] = 1;

							SendClientMessage(playerid, -1, "{ffffff} Telefonas buvo sëkmingai ájungtas!");
						}
						else if(PI[playerid][PhoneStatus] == 1)
						{
							PI[playerid][PhoneStatus] = 0;

							SendClientMessage(playerid, -1, "{ffffff} Telefonas buvo sëkmingai iðjungtas!");
						}

						new String[500], Pavadinimas[32], Statusas[64], tSutartis[128], Baterija[32];

						switch(PI[playerid][MobilePhone])
						{
							case 1: Pavadinimas = "iPhone";
							case 2: Pavadinimas = "Samsung";
							case 3: Pavadinimas = "Nokia";
							case 4: Pavadinimas = "Sony";
							case 5: Pavadinimas = "Alcatel";
							case 6: Pavadinimas = "HTC";
						}

						switch(PI[playerid][PhoneStatus])
						{
							case 0: Statusas = "{FFAF00}Iðjungtas. {ffffff}Ájungti.";
							case 1: Statusas = "{2D7F1F}Ájungtas. {ffffff}Iðjungti.";
						}

						switch(PI[playerid][Sutartis])
						{
							case 0:
							{
								tSutartis = "-";
							}

							case 1:
							{
								format(tSutartis, sizeof(tSutartis), "Mobiliojo ryðio kortelë (sàsk. likutis: {FFAF00}$%.2f{ffffff}, tel. numeris: {FFAF00}%d{ffffff})", PI[playerid][PhoneMoney], PI[playerid][MobilePhoneNumber]);
							}

							case 2:
							{
								format(tSutartis, sizeof(tSutartis), "Abonentinë sutartis (mokesèiai: {FFAF00}$%.2f{ffffff}, tel. numeris: {FFAF00}%d{ffffff})", PI[playerid][TelMokesciai], PI[playerid][MobilePhoneNumber]);
							}
						}

						switch(PI[playerid][Battery])
						{
							case 0..15: 	format(Baterija, sizeof(Baterija), "{FFAF00}%d%", PI[playerid][Battery]);
							case 16..40: 	format(Baterija, sizeof(Baterija), "{FF4444}%d%", PI[playerid][Battery]);
							case 41..70: 	format(Baterija, sizeof(Baterija), "{FFDA00}%d%", PI[playerid][Battery]);
							case 71..100: 	format(Baterija, sizeof(Baterija), "{2D7F1F}%d%", PI[playerid][Battery]);
						}

						format(String, sizeof(String), "1. Telefono pavadinimas: {FFAF00}%s\n2. Statusas: %s\n3. %s\n4. Baterijos likutis: %s\n \n5. Telefono komandos", Pavadinimas, Statusas, tSutartis, Baterija);
						ShowPlayerDialogEx(playerid, MobilePhoneInfoDialog, DIALOG_STYLE_LIST, "Telefono valdymas", String, "Pasirinkti", "Uþdaryti");
					}

					case 5:
					{
						new String[380];

						strcat(String, "{FFAF00} /skambinti - {ffffff}paskambinsite þaidëjui \t\t{FFAF00}$0.75\n");
						strcat(String, "{FFAF00} /sms - {ffffff}paraðysite SMS þinutæ þaidëjui \t{FFAF00}$0.30\n");
						strcat(String, "{FFAF00} /pakelti - {ffffff}pakelsite telefono ragelá\n");
						strcat(String, "{FFAF00} /padeti - {ffffff}padësite telefono ragelá\n");
						strcat(String, "{FFAF00} /krauti - {ffffff}pakrausite telefonà\n");
						strcat(String, "{FFAF00} /gautieji - {ffffff}pamatysite 15 paskutiniø gautø SMS þinuèiø\n");
						ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Telefono komandos", String, "Uþdaryti", "");
					}

					case 6:
					{
						PI[playerid][MobilePhone] 		= 0;
						PI[playerid][MobilePhoneNumber] = 0;
						PI[playerid][TelMokesciai]		= 0;
						PI[playerid][PhoneMoney]		= 0;
						PI[playerid][Sutartis]			= 0;

						SendClientMessage(playerid, -1, "{ffffff} Iðmetëte savo telefonà!");
					}
				}
			}
		}

		case MainMobilePhoneShopDialog:
		{
			if(response)
			{
				new String[300];

				switch(listitem)
				{
					case 0:
					{
						if(PI[playerid][MobilePhone] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite telefonà!");

						if(GetPlayerMoneyA(playerid) < iPhonePrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA(playerid, -iPhonePrice);

						if(PropertyInfo[EL_PARDUOTUVE][pBuyed])
						{
							PropertyInfo[EL_PARDUOTUVE][pProfit] += iPhonePrice;
						}

						PI[playerid][MobilePhone] 	= VIOLET_PHONE;
						PI[playerid][Sutartis] 		= 0;
						PI[playerid][Battery] 		= 50 + random(50);

						format(String, sizeof(String), "{ffffff} Sëkmingai nusipirkote {FFAF00}iPhone {ffffff}telefonà uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(iPhonePrice));
						SendClientMessage(playerid, -1, String);

						SendClientMessage(playerid, -1, "{ffffff} Telefono valdymas: {FFAF00} /telefonas{ffffff}!");
					}

					case 1:
					{
						if(PI[playerid][MobilePhone] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite telefonà!");

						if(GetPlayerMoneyA(playerid) < SamsungPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA(playerid, -SamsungPrice);

						if(PropertyInfo[EL_PARDUOTUVE][pBuyed])
						{
							PropertyInfo[EL_PARDUOTUVE][pProfit] += SamsungPrice;
						}

						PI[playerid][MobilePhone] 	= RED_PHONE;
						PI[playerid][Sutartis] 		= 0;
						PI[playerid][Battery] 		= 50 + random(50);

						format(String, sizeof(String), "{ffffff} Sëkmingai nusipirkote {FFAF00}Samsung {ffffff}telefonà uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(SamsungPrice));
						SendClientMessage(playerid, -1, String);

						SendClientMessage(playerid, -1, "{ffffff} Telefono valdymas: {FFAF00} /telefonas{ffffff}!");
					}

					case 2:
					{
						if(PI[playerid][MobilePhone] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite telefonà!");

						if(GetPlayerMoneyA(playerid) < NokiaPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA(playerid, -NokiaPrice);

						if(PropertyInfo[EL_PARDUOTUVE][pBuyed])
						{
							PropertyInfo[EL_PARDUOTUVE][pProfit] += NokiaPrice;
						}

						PI[playerid][MobilePhone] 	= GREEN_PHONE;
						PI[playerid][Sutartis] 		= 0;
						PI[playerid][Battery] 		= 50 + random(50);

						format(String, sizeof(String), "{ffffff} Sëkmingai nusipirkote {FFAF00}Nokia {ffffff}telefonà uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(NokiaPrice));
						SendClientMessage(playerid, -1, String);

						SendClientMessage(playerid, -1, "{ffffff} Telefono valdymas: {FFAF00} /telefonas{ffffff}!");
					}

					case 3:
					{
						if(PI[playerid][MobilePhone] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite telefonà!");

						if(GetPlayerMoneyA(playerid) < SonyPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA(playerid, -SonyPrice);

						if(PropertyInfo[EL_PARDUOTUVE][pBuyed])
						{
							PropertyInfo[EL_PARDUOTUVE][pProfit] += SonyPrice;
						}

						PI[playerid][MobilePhone] 	= BLUE_PHONE;
						PI[playerid][Sutartis] 		= 0;
						PI[playerid][Battery] 		= 50 + random(50);

						format(String, sizeof(String), "{ffffff} Sëkmingai nusipirkote {FFAF00}Sony {ffffff}telefonà uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(SonyPrice));
						SendClientMessage(playerid, -1, String);

						SendClientMessage(playerid, -1, "{ffffff} Telefono valdymas: {FFAF00} /telefonas{ffffff}!");
					}

					case 4:
					{
						if(PI[playerid][MobilePhone] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite telefonà!");

						if(GetPlayerMoneyA(playerid) < AlcatelPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA(playerid, -AlcatelPrice);

						if(PropertyInfo[EL_PARDUOTUVE][pBuyed])
						{
							PropertyInfo[EL_PARDUOTUVE][pProfit] += AlcatelPrice;
						}

						PI[playerid][MobilePhone] 	= YELLOW_PHONE;
						PI[playerid][Sutartis] 		= 0;
						PI[playerid][Battery] 		= 50 + random(50);

						format(String, sizeof(String), "{ffffff} Sëkmingai nusipirkote {FFAF00}Alcatel {ffffff}telefonà uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(AlcatelPrice));
						SendClientMessage(playerid, -1, String);

						SendClientMessage(playerid, -1, "{ffffff} Telefono valdymas: {FFAF00} /telefonas{ffffff}!");
					}

					case 5:
					{
						if(PI[playerid][MobilePhone] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite telefonà!");

						if(GetPlayerMoneyA(playerid) < HTCPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

						GivePlayerMoneyA(playerid, -HTCPrice);

						if(PropertyInfo[EL_PARDUOTUVE][pBuyed])
						{
							PropertyInfo[EL_PARDUOTUVE][pProfit] += HTCPrice;
						}

						PI[playerid][MobilePhone] 	= WHITE_PHONE;
						PI[playerid][Sutartis] 		= 0;
						PI[playerid][Battery] 		= 50 + random(50);

						format(String, sizeof(String), "{ffffff} Sëkmingai nusipirkote {FFAF00}HTC {ffffff}telefonà uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(HTCPrice));
						SendClientMessage(playerid, -1, String);

						SendClientMessage(playerid, -1, "{ffffff} Telefono valdymas: {FFAF00} /telefonas{ffffff}!");
					}

					case 6:
					{
						format(String, sizeof(String), "1. iPhone \t\t{FFAF00}$%s\n2. Samsung \t\t{FFAF00}$%s\n3. Nokia \t\t{FFAF00}$%s\n4. Sony \t\t\t{FFAF00}$%s\n5. Alcatel \t\t{FFAF00}$%s\n6. HTC \t\t\t{FFAF00}$%s\n \n7. Mobiliojo ryðio kortelës/sutartys",
						konvertuoti_pinigus(iPhonePrice), konvertuoti_pinigus(SamsungPrice), konvertuoti_pinigus(NokiaPrice), konvertuoti_pinigus(SonyPrice), konvertuoti_pinigus(AlcatelPrice), konvertuoti_pinigus(HTCPrice));
						ShowPlayerDialogEx(playerid, MainMobilePhoneShopDialog, DIALOG_STYLE_LIST, "Telefonø salonas", String, "Pasirinkti", "Uþdaryti");
					}

					case 7:
					{
						format(String, sizeof(String), "1. Mobiliojo ryðio kortelë \t\t{FFAF00}$%d\n2. Abonentinë sutartis \t\t\t{FFAF00}$%s",
						DefaultContractPrice, konvertuoti_pinigus(AbonentContractPrice));
						ShowPlayerDialogEx(playerid, SecondMobilePhoneShopDialog, DIALOG_STYLE_LIST, "Telefonø salonas", String, "Pasirinkti", "Atgal");
					}
				}
			}
		}

		case SecondMobilePhoneShopDialog:
		{
			new String[300], RandomNumber;

			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						switch(PI[playerid][Sutartis])
						{
							case 1:
							{
								ShowPlayerDialogEx(playerid, DefaultContractRenewDialog, DIALOG_STYLE_MSGBOX, "Telefonø salonas",
								"{ffffff}Jus jau turite mobiliojo ryðio kortelæ.\n\n\tAr norite jà iðmesti?", "Taip", "Ne");
							}

							case 2:
							{
								ShowPlayerDialogEx(playerid, DefaultContractErrorDialog, DIALOG_STYLE_MSGBOX, "Telefonø salonas",
								""COL_ERROR"Jus negalite nusipirkti mobiliojo ryðio kortelës, kadangi esate pasiraðæs abonentinæ sutartá.\n\n{ffffff}Ar norite nutraukti sutartá?", "Taip", "Ne");
							}

							default:
							{
								if(GetPlayerMoneyA(playerid) < DefaultContractPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

								GivePlayerMoneyA(playerid, -DefaultContractPrice);

								PI[playerid][Sutartis] = 1;

								format(String, sizeof(String), "{ffffff} Sëkmingai nusipirkote mobiliojo ryðio kortelæ uþ {FFAF00}$%d{ffffff}!", DefaultContractPrice);
								SendClientMessage(playerid, -1, String);

								RandomNumber = random(9999) + 100000;

								format(String, sizeof(String), "SELECT `ID` FROM `players` WHERE `MobilePhoneNumber` = '%d'", RandomNumber);
								mysql_query(String);

								mysql_store_result();

								if(mysql_num_rows()) // Toks numeris yra
								{
									RandomNumber = random(9999) + 100000;

									PI[playerid][MobilePhoneNumber] = RandomNumber;
								}
								else // Tokio numerio nëra
								{
									PI[playerid][MobilePhoneNumber] = RandomNumber;
								}
							}
						}
					}

					case 1:
					{
						switch(PI[playerid][Sutartis])
						{
							case 1:
							{
								ShowPlayerDialogEx(playerid, AbonentContractErrorDialog, DIALOG_STYLE_MSGBOX, "Telefonø salonas",
								""COL_ERROR"Jus negalite pasiraðyti abonentinës sutarties, kadangi pas jus yra paprasta mobiliojo ryðio kortelë.\n\n{ffffff}Ar norite iðmesti ðià kortelæ?", "Taip", "Ne");
							}

							case 2:
							{
								ShowPlayerDialogEx(playerid, AbonentContractRenewDialog, DIALOG_STYLE_MSGBOX, "Telefonø salonas",
								"{ffffff}Jus jau esate pasiraðæs abonentinæ sutartá.\n\n\tAr norite jà nutraukti?", "Taip", "Ne");
							}

							default:
							{
								if(GetPlayerMoneyA(playerid) < AbonentContractPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

								GivePlayerMoneyA(playerid, -AbonentContractPrice);

								PI[playerid][Sutartis] = 2;

								format(String, sizeof(String), "{ffffff} Sëkmingai pasiraðëte abonentinæ sutartá uþ {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(AbonentContractPrice));
								SendClientMessage(playerid, -1, String);

								RandomNumber = random(9999) + 100000;

								format(String, sizeof(String), "SELECT `ID` FROM `players` WHERE `MobilePhoneNumber` = '%d'", RandomNumber);
								mysql_query(String);

								mysql_store_result();

								if(mysql_num_rows()) // Toks numeris yra
								{
									RandomNumber = random(9999) + 100000;

									PI[playerid][MobilePhoneNumber] = RandomNumber;
								}
								else // Tokio numerio nëra
								{
									PI[playerid][MobilePhoneNumber] = RandomNumber;
								}
							}
						}
					}
				}
			}
			else
			{
				format(String, sizeof(String), "1. iPhone \t\t{FFAF00}$%s\n2. Samsung \t\t{FFAF00}$%s\n3. Nokia \t\t{FFAF00}$%s\n4. Sony \t\t\t{FFAF00}$%s\n5. Alcatel \t\t{FFAF00}$%s\n6. HTC \t\t\t{FFAF00}$%s\n \n7. Mobiliojo ryðio kortelës/sutartys",
				konvertuoti_pinigus(iPhonePrice), konvertuoti_pinigus(SamsungPrice), konvertuoti_pinigus(NokiaPrice), konvertuoti_pinigus(SonyPrice), konvertuoti_pinigus(AlcatelPrice), konvertuoti_pinigus(HTCPrice));
				ShowPlayerDialogEx(playerid, MainMobilePhoneShopDialog, DIALOG_STYLE_LIST, "Telefonø salonas", String, "Pasirinkti", "Uþdaryti");
			}
		}

		case DefaultContractRenewDialog:
		{
			if(response)
			{
				new String[216];

				SendClientMessage(playerid, -1, "{ffffff} Mobiliojo ryðio kortelë buvo sëkmingai iðmesta!");

				PI[playerid][Sutartis] 			= 0;
				PI[playerid][PhoneMoney]		= 0;
				PI[playerid][MobilePhoneNumber] = 0;

				format(String, sizeof(String), "1. Mobiliojo ryðio kortelë \t\t{FFAF00}$%d\n2. Abonentinë sutartis \t\t\t{FFAF00}$%s",
				DefaultContractPrice, konvertuoti_pinigus(AbonentContractPrice));
				ShowPlayerDialogEx(playerid, SecondMobilePhoneShopDialog, DIALOG_STYLE_LIST, "Telefonø salonas", String, "Pasirinkti", "Atgal");
			}
		}

		case DefaultContractErrorDialog:
		{
			if(response)
			{
				new String[216];

				SendClientMessage(playerid, -1, "{ffffff} Abonentinë sutartis buvo sëkmingai nutraukta!");

				PI[playerid][Sutartis] 			= 0;
				PI[playerid][TelMokesciai]		= 0;
				PI[playerid][MobilePhoneNumber] = 0;

				format(String, sizeof(String), "1. Mobiliojo ryðio kortelë \t\t{FFAF00}$%d\n2. Abonentinë sutartis \t\t\t{FFAF00}$%s",
				DefaultContractPrice, konvertuoti_pinigus(AbonentContractPrice));
				ShowPlayerDialogEx(playerid, SecondMobilePhoneShopDialog, DIALOG_STYLE_LIST, "Telefonø salonas", String, "Pasirinkti", "Atgal");
			}
		}

		case AbonentContractRenewDialog:
		{
			if(response)
			{
				new String[216];

				SendClientMessage(playerid, -1, "{ffffff} Abonentinë sutartis buvo sëkmingai nutraukta!");

				PI[playerid][Sutartis] = 0;
				PI[playerid][TelMokesciai]		= 0;
				PI[playerid][MobilePhoneNumber] = 0;

				format(String, sizeof(String), "1. Mobiliojo ryðio kortelë \t\t{FFAF00}$%d\n2. Abonentinë sutartis \t\t\t{FFAF00}$%s",
				DefaultContractPrice, konvertuoti_pinigus(AbonentContractPrice));
				ShowPlayerDialogEx(playerid, SecondMobilePhoneShopDialog, DIALOG_STYLE_LIST, "Telefonø salonas", String, "Pasirinkti", "Atgal");
			}
		}

		case AbonentContractErrorDialog:
		{
			if(response)
			{
				new String[216];

				SendClientMessage(playerid, -1, "{ffffff} Mobiliojo ryðio kortelë buvo sëkmingai iðmesta!");

				PI[playerid][Sutartis] 			= 0;
				PI[playerid][PhoneMoney]		= 0;
				PI[playerid][MobilePhoneNumber] = 0;

				format(String, sizeof(String), "1. Mobiliojo ryðio kortelë \t\t{FFAF00}$%d\n2. Abonentinë sutartis \t\t\t{FFAF00}$%s",
				DefaultContractPrice, konvertuoti_pinigus(AbonentContractPrice));
				ShowPlayerDialogEx(playerid, SecondMobilePhoneShopDialog, DIALOG_STYLE_LIST, "Telefonø salonas", String, "Pasirinkti", "Atgal");
			}
		}

		case PropertyGiveToPlayerDialog:
		{
			new String[400];
			new Property = VersloID[playerid];

			if(response)
			{
				if(PlayerHaveProperty(playerid) == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite verslo!");

				new giveplayerid, Float: P_Pos[3];

				if(sscanf(inputtext, "u", giveplayerid))
				{
					ShowPlayerDialogEx(playerid, PropertyGiveToPlayerDialog, DIALOG_STYLE_INPUT, "Perleisti verslà",
					"{FFAF00}Kaþkas blogai ávesta!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(strfind(inputtext, "%") != -1)
				{
					ShowPlayerDialogEx(playerid, PropertyGiveToPlayerDialog, DIALOG_STYLE_INPUT, "Perleisti verslà",
					"{FFAF00}Tekste rasta neleistinø simboliø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == INVALID_PLAYER_ID)
				{
					ShowPlayerDialogEx(playerid, PropertyGiveToPlayerDialog, DIALOG_STYLE_INPUT, "Perleisti verslà",
					"{FFAF00}Tokio þaidëjo nëra!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == playerid)
				{
					ShowPlayerDialogEx(playerid, PropertyGiveToPlayerDialog, DIALOG_STYLE_INPUT, "Perleisti verslà",
					"{FFAF00}Sau verslo atiduoti negalite!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				if(PlayerHaveProperty(giveplayerid) != -1)
				{
					ShowPlayerDialogEx(playerid, PropertyGiveToPlayerDialog, DIALOG_STYLE_INPUT, "Perleisti verslà",
					"{FFAF00}Ðis þaidëjas jau turi verslà!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 5.0, P_Pos[0], P_Pos[1], P_Pos[2]))
				{
					ShowPlayerDialogEx(playerid, PropertyGiveToPlayerDialog, DIALOG_STYLE_INPUT, "Perleisti verslà",
					"{FFAF00}Þaidëjas per toli nuo jûsø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");

					return 1;
				}

				format(PropertyInfo[Property][pOwner], 21, "%s", GetPlayerNameEx(giveplayerid));
				format(PropertyInfo[Property][pBuyDate], 32, "%s", GetDateEx());

				new papildomas[10];
				if(PropertyInfo[Property][pPelnas] == true) papildomas = "yra";
				else										papildomas = "nëra";

				format(String, sizeof(String), "{ffffff}Verslas: {ffffff} %s\n \n{ffffff}Unikalus ID: {FFAF00}%d\n{ffffff}Savininkas: {FFAF00}%s\n{ffffff}Kaina: {FFAF00}$%s\n{ffffff}Uþdarbis: {FFAF00}$%s/1 min\n{ffffff}Papildomas pelnas: {ffffff} %s\n \n{ffffff}Norëdami valdyti verslà spauskite ALT",
				PropertyInfo[Property][pTitle], Property + 1, PropertyInfo[Property][pOwner], konvertuoti_pinigus(PropertyInfo[Property][pPrice]), konvertuoti_pinigus(PropertyInfo[Property][pEarning]), papildomas);
				Update3DTextLabelText(PropertyInfo[Property][pText], -1, String);

                SaveProperty(Property);

                format(String, sizeof(String), "{ffffff} Atidavëte verslà {ffffff} %s {ffffff}þaidëjui {FFAF00}%s{ffffff}!", PropertyInfo[Property][pTitle], GetPlayerNameEx(giveplayerid));
        		SendClientMessage(playerid, -1, String);

        		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}atidavë jums savo verslà {ffffff} %s{ffffff}!", GetPlayerNameEx(playerid), PropertyInfo[Property][pTitle]);
        		SendClientMessage(giveplayerid, -1, String);
			}
			else
			{
				ShowPlayerDialogEx(playerid, MainPropertyDialog, DIALOG_STYLE_LIST, "Verslo valdymas",
				"1. Verslo nustatymai/valdymas\n2. Parduoti verslà\n3. Perleisti verslà\n4. Papildomo pelno informacija", "Pasirinkti", "Uþdaryti");
			}
		}

		case PropertySuggestionDialog:
		{
			new String[400];
			new Pardavejas = PasirinktasZaidejas[playerid], MoneyCount = VersloKaina[playerid], Property = VersloID[Pardavejas];

			if(Pardavejas == INVALID_PLAYER_ID)
			{
				SendClientMessage(playerid, -1, "{ffffff} Verslo nusipirkti nepavyko, kadangi pardavëjas atsijungë!");

				return 1;
			}

			if(response)
			{
				if(PlayerHaveProperty(Pardavejas) == -1)
				{
					SendClientMessage(Pardavejas, -1, "{ffffff} Verslo parduoti nepavyko, kadangi jo jau nebeturite!");
					SendClientMessage(playerid, -1, "{ffffff} Verslo nusipirkti nepavyko, kadangi pardavëjas jo nebeturi!");

					return 1;
				}

				if(PlayerHaveProperty(playerid) != -1)
				{
					SendClientMessage(Pardavejas, -1, "{ffffff} Verslo parduoti nepavyko, kadangi þaidëjas jau turi verslà!");
					SendClientMessage(playerid, -1, "{ffffff} Verslo nusipirkti nepavyko, kadangi jus jau turite verslà!");

					return 1;
				}

				if(GetPlayerMoneyA(playerid) < MoneyCount)
				{
					SendClientMessage(Pardavejas, -1, "{ffffff} Verslo parduoti nepavyko, kadangi þaidëjui neuþtenka pinigø!");
					SendClientMessage(playerid, -1, "{ffffff} Verslo nusipirkti nepavyko, kadangi jums neuþtenka pinigø!");

					return 1;
				}

				GivePlayerMoneyA(Pardavejas, MoneyCount);
				GivePlayerMoneyA(playerid, -MoneyCount);

				format(PropertyInfo[Property][pOwner], 21, "%s", GetPlayerNameEx(playerid));
				format(PropertyInfo[Property][pBuyDate], 32, "%s", GetDateEx());

				new papildomas[10];
				if(PropertyInfo[Property][pPelnas] == true) papildomas = "yra";
				else										papildomas = "nëra";

				format(String, sizeof(String), "{ffffff}Verslas: {ffffff} %s\n \n{ffffff}Unikalus ID: {FFAF00}%d\n{ffffff}Savininkas: {FFAF00}%s\n{ffffff}Kaina: {FFAF00}$%s\n{ffffff}Uþdarbis: {FFAF00}$%s/1 min\n{ffffff}Papildomas pelnas: {ffffff} %s\n \n{ffffff}Norëdami valdyti verslà spauskite ALT",
				PropertyInfo[Property][pTitle], Property + 1, PropertyInfo[Property][pOwner], konvertuoti_pinigus(PropertyInfo[Property][pPrice]), konvertuoti_pinigus(PropertyInfo[Property][pEarning]), papildomas);
				Update3DTextLabelText(PropertyInfo[Property][pText], -1, String);

                SaveProperty(Property);

                format(String, sizeof(String), "{ffffff} Pardavëte verslà {ffffff} %s {ffffff}uþ {FFAF00}$%s{94CB80} þaidëjui {FFAF00}%s{ffffff}!", PropertyInfo[Property][pTitle], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(playerid));
        		SendClientMessage(Pardavejas, -1, String);

        		format(String, sizeof(String), "{ffffff} Nusipirkote verslà {ffffff} %s {ffffff}uþ {FFAF00}$%s{94CB80} ið {FFAF00}%s{ffffff}!", PropertyInfo[Property][pTitle], konvertuoti_pinigus(MoneyCount), GetPlayerNameEx(Pardavejas));
        		SendClientMessage(playerid, -1, String);
			}
			else
			{
				SendClientMessage(Pardavejas, -1, "{ffffff} Þaidëjas atsisakë nusipirkti jûsø siûlomà verslà!");
				SendClientMessage(playerid, -1, "{ffffff} Atsisakëte nusipirkti siûlomà verslà!");
			}
		}

		case PropertySellToPlayerDialog:
		{
			new String[400];
			new Property = VersloID[playerid];

			if(response)
			{
				if(PlayerHaveProperty(playerid) == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite verslo!");

				new giveplayerid, MoneyCount, Float: P_Pos[3];

				if(sscanf(inputtext, "ud", giveplayerid, MoneyCount))
				{
					ShowPlayerDialogEx(playerid, PropertySellToPlayerDialog, DIALOG_STYLE_INPUT, "Parduoti verslà",
					"{FFAF00}Kaþkas blogai ávesta!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(strfind(inputtext, "%") != -1)
				{
					ShowPlayerDialogEx(playerid, PropertySellToPlayerDialog, DIALOG_STYLE_INPUT, "Parduoti verslà",
					"{FFAF00}Tekste rasta neleistinø simboliø!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == INVALID_PLAYER_ID)
				{
					ShowPlayerDialogEx(playerid, PropertySellToPlayerDialog, DIALOG_STYLE_INPUT, "Parduoti verslà",
					"{FFAF00}Tokio þaidëjo nëra!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(giveplayerid == playerid)
				{
					ShowPlayerDialogEx(playerid, PropertySellToPlayerDialog, DIALOG_STYLE_INPUT, "Parduoti verslà",
					"{FFAF00}Sau verslo parduoti negalite!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(PlayerHaveProperty(giveplayerid) != -1)
				{
					ShowPlayerDialogEx(playerid, PropertySellToPlayerDialog, DIALOG_STYLE_INPUT, "Parduoti verslà",
					"{FFAF00}Ðis þaidëjas jau turi verslà!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				if(MoneyCount < 1)
				{
					ShowPlayerDialogEx(playerid, PropertySellToPlayerDialog, DIALOG_STYLE_INPUT, "Parduoti verslà",
					"{FFAF00}Blogai nurodëte pardavimo kainà!\n \n{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 5.0, P_Pos[0], P_Pos[1], P_Pos[2]))
				{
					ShowPlayerDialogEx(playerid, PropertySellToPlayerDialog, DIALOG_STYLE_INPUT, "Parduoti verslà",
					"{FFAF00}Þaidëjas per toli nuo jûsø!\n \n{FFFFFF}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");

					return 1;
				}

				PasirinktasZaidejas[playerid] 		= giveplayerid;
				PasirinktasZaidejas[giveplayerid]	= playerid;
				VersloKaina[playerid]				= MoneyCount;
				VersloKaina[giveplayerid]			= MoneyCount;

				new papildomas[10];
				if(PropertyInfo[Property][pPelnas] == true) papildomas = "yra";
				else										papildomas = "nëra";

				format(String, sizeof(String), "{ffffff}Þaidëjas {FFAF00}%s {ffffff}siûlo jums pirkti jo verslà uþ {FFAF00}$%s{ffffff}:\n \n\t{ffffff}Pavadinimas: {ffffff} %s(%d)\n\t{ffffff}Kaina: {FFAF00}$%s\n\t{ffffff}Pelnas: {FFAF00}$%s/1 min\n\t{ffffff}Biudþetas: {FFAF00}$%s\n{ffffff}Papildomas pelnas: {ffffff} %s\n \n{ffffff}Ar tikrai norite pirkti ðá verslà?",
				GetPlayerNameEx(playerid), konvertuoti_pinigus(MoneyCount), PropertyInfo[Property][pTitle], Property, konvertuoti_pinigus(PropertyInfo[Property][pPrice]), konvertuoti_pinigus(PropertyInfo[Property][pEarning]), konvertuoti_pinigus(PropertyInfo[Property][pProfit]), papildomas);
				ShowPlayerDialogEx(giveplayerid, PropertySuggestionDialog, DIALOG_STYLE_MSGBOX, "Parduoti verslà", String, "Taip", "Ne");

				format(String, sizeof(String), "{ffffff} Pasiûlëte nusipirkti þaidëjui {FFAF00}%s {ffffff}savo verslà {ffffff} %s {ffffff}uþ {FFAF00}$%s{ffffff}!",
				GetPlayerNameEx(giveplayerid), PropertyInfo[Property][pTitle], konvertuoti_pinigus(MoneyCount));
				SendClientMessage(playerid, -1, String);
			}
			else
			{
				ShowPlayerDialogEx(playerid, MainPropertyDialog, DIALOG_STYLE_LIST, "Verslo valdymas",
				"1. Verslo nustatymai/valdymas\n2. Parduoti verslà\n3. Perleisti verslà\n4. Papildomo pelno informacija", "Pasirinkti", "Uþdaryti");
			}
		}

		case PropertyUpgradeDialog:
		{
			new String[400];
			new Property = VersloID[playerid];

			if(response)
			{
				if(PlayerHaveProperty(playerid) == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite verslo!");

				switch(listitem)
				{
					case 0:
					{
						format(String, sizeof(String), "{ffffff}Áveskite norimà verslo pavadinimà, dabartinis yra {ffffff} %s{ffffff}:\n \n\t{ffffff}Pavadinimas maksimaliai turi susidaryti ið {FFAF00}64 {ffffff}simboliø;\n\t\
						{ffffff}Pavadinime negali bûti keiksmaþodþiai ar kiti netoleruojami þodþiai;\n\t{ffffff}Pavadinime negali bûti kità þaidëjà áþeidþiantys þodþiai.\n \n\t{FFAF00}Uþ ðiø taisykliø nesilaikymà græsia verslo atëmimas.", PropertyInfo[Property][pTitle]);
						ShowPlayerDialogEx(playerid, PropertyChangeNameDialog, DIALOG_STYLE_INPUT, "Verslo nustatymai/valdymas", String, "Pakeisti", "Atgal");
					}

					case 1: // Biudþeto valdymas
					{
						format(String, sizeof(String), "{ffffff}Jûsø verslo biudþete yra: {FFAF00}$%s\n1. Padëti pinigø á biudþetà\n2. Pasiimti pinigø ið biudþeto",
						konvertuoti_pinigus(PropertyInfo[Property][pProfit]));
						ShowPlayerDialogEx(playerid, PropertyProfitControlDialog, DIALOG_STYLE_LIST, "Verslo nustatymai/valdymas", String, "Pasirinkti", "Atgal");
					}

					case 2: // Tobulinti verslà
					{
						format(String, sizeof(String), "{ffffff}Norint patobulinti verslà turite paraðyti skaièiø ant kiek $/1 min norite patobulinti.\n \n\t{FFAF00}+ $1/1 min {ffffff}kainuoja {FFAF00}"#PropertyUpgradePrice" {ffffff}kreditø!",
						konvertuoti_pinigus(PropertyInfo[Property][pProfit]));
						ShowPlayerDialogEx(playerid, PropertyUpgradeDialog2, DIALOG_STYLE_INPUT, "Verslo nustatymai/valdymas", String, "Tobulinti", "Atgal");
					}
				}
			}
			else
			{
				ShowPlayerDialogEx(playerid, MainPropertyDialog, DIALOG_STYLE_LIST, "Verslo valdymas",
				"1. Verslo nustatymai/valdymas\n2. Parduoti verslà\n3. Perleisti verslà\n4. Papildomo pelno informacija", "Pasirinkti", "Uþdaryti");
			}
		}

		case PropertyChangeNameDialog:
		{
			new String[400];
			new Property = VersloID[playerid];

			if(response)
			{
				if(PlayerHaveProperty(playerid) == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite verslo!");

				new Pavadinimass[64];

				if(sscanf(inputtext, "s[64]", Pavadinimass))
	    		{
					format(String, sizeof(String),
					"{FFAF00}Kaþkas blogai ávesta!\n \n{ffffff}Áveskite norimà verslo pavadinimà, dabartinis yra {ffffff} %s{ffffff}:\n \n\t{ffffff}Pavadinimas maksimaliai turi susidaryti ið {FFAF00}64 {ffffff}simboliø;\n\t\
					{ffffff}Pavadinime negali bûti keiksmaþodþiai ar kiti netoleruojami þodþiai;\n\t{ffffff}Pavadinime negali bûti kità þaidëjà áþeidþiantys þodþiai.\n \n\t{FFAF00}Uþ ðiø taisykliø nesilaikymà græsia verslo atëmimas.",
					PropertyInfo[Property][pTitle]);
					ShowPlayerDialogEx(playerid, PropertyChangeNameDialog, DIALOG_STYLE_INPUT, "Verslo nustatymai/valdymas", String, "Pakeisti", "Atgal");

					return 1;
				}

				if(strfind(inputtext, "%") != -1)
				{
					format(String, sizeof(String),
					"{FFAF00}Tekste rasta neleistinø simboliø!\n \n{ffffff}Áveskite norimà verslo pavadinimà, dabartinis yra {ffffff} %s{ffffff}:\n \n\t{ffffff}Pavadinimas maksimaliai turi susidaryti ið {FFAF00}64 {ffffff}simboliø;\n\t\
					{ffffff}Pavadinime negali bûti keiksmaþodþiai ar kiti netoleruojami þodþiai;\n\t{ffffff}Pavadinime negali bûti kità þaidëjà áþeidþiantys þodþiai.\n \n\t{FFAF00}Uþ ðiø taisykliø nesilaikymà græsia verslo atëmimas.",
					PropertyInfo[Property][pTitle]);
					ShowPlayerDialogEx(playerid, PropertyChangeNameDialog, DIALOG_STYLE_INPUT, "Verslo nustatymai/valdymas", String, "Pakeisti", "Atgal");

					return 1;
				}

				if(strlen(inputtext) > 64)
				{
					format(String, sizeof(String),
					"{FFAF00}Verslo pavadinimas per ilgas!\n \n{ffffff}Áveskite norimà verslo pavadinimà, dabartinis yra {ffffff} %s{ffffff}:\n \n\t{ffffff}Pavadinimas maksimaliai turi susidaryti ið {FFAF00}64 {ffffff}simboliø;\n\t\
					{ffffff}Pavadinime negali bûti keiksmaþodþiai ar kiti netoleruojami þodþiai;\n\t{ffffff}Pavadinime negali bûti kità þaidëjà áþeidþiantys þodþiai.\n \n\t{FFAF00}Uþ ðiø taisykliø nesilaikymà græsia verslo atëmimas.",
					PropertyInfo[Property][pTitle]);
					ShowPlayerDialogEx(playerid, PropertyChangeNameDialog, DIALOG_STYLE_INPUT, "Verslo nustatymai/valdymas", String, "Pakeisti", "Atgal");

					return 1;
				}

				strdel(PropertyInfo[Property][pTitle], 0,         64);
				strcat(PropertyInfo[Property][pTitle], Pavadinimass, 64);

				new papildomas[10];
				if(PropertyInfo[Property][pPelnas] == true) papildomas = "yra";
				else										papildomas = "nëra";

				format(String, sizeof(String), "{ffffff}Verslas: {ffffff} %s\n \n{ffffff}Unikalus ID: {FFAF00}%d\n{ffffff}Savininkas: {FFAF00}%s\n{ffffff}Kaina: {FFAF00}$%s\n{ffffff}Uþdarbis: {FFAF00}$%s/1 min\n{ffffff}Papildomas pelnas: {ffffff} %s\n \n{ffffff}Norëdami valdyti verslà spauskite ALT",
				PropertyInfo[Property][pTitle], Property + 1, PropertyInfo[Property][pOwner], konvertuoti_pinigus(PropertyInfo[Property][pPrice]), konvertuoti_pinigus(PropertyInfo[Property][pEarning]), papildomas);
				Update3DTextLabelText(PropertyInfo[Property][pText], -1, String);

                SaveProperty(Property);

                format(String, sizeof(String), "{ffffff} Verslo pavadinimas pakeistas á {ffffff} %s{ffffff}!", PropertyInfo[Property][pTitle]);
        		SendClientMessage(playerid, -1, String);
			}
			else
			{
				ShowPlayerDialogEx(playerid, MainPropertyDialog, DIALOG_STYLE_LIST, "Verslo valdymas",
				"1. Verslo nustatymai/valdymas\n2. Parduoti verslà\n3. Perleisti verslà\n4. Papildomo pelno informacija", "Pasirinkti", "Uþdaryti");
			}
		}

		case PropertyUpgradeDialog2:
		{
			new String[300], Credits = HowMuchHaveCredits(GetPlayerNameEx(playerid)), Property = VersloID[playerid];

			if(response)
			{
				if(PlayerHaveProperty(playerid) == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite verslo!");

				if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

				if(IsNumeric(inputtext, true))
				{
					if(Credits >= strval(inputtext) * PropertyUpgradePrice)
					{
						PropertyInfo[Property][pEarning] += strval(inputtext);

						new papildomas[10];
						if(PropertyInfo[Property][pPelnas] == true) papildomas = "yra";
						else										papildomas = "nëra";

						format(String, sizeof(String), "{ffffff}Verslas: {ffffff} %s\n \n{ffffff}Unikalus ID: {FFAF00}%d\n{ffffff}Savininkas: {FFAF00}%s\n{ffffff}Kaina: {FFAF00}$%s\n{ffffff}Uþdarbis: {FFAF00}$%s/1 min\n{ffffff}Papildomas pelnas: {ffffff} %s\n \n{ffffff}Norëdami valdyti verslà spauskite ALT",
						PropertyInfo[Property][pTitle], Property + 1, PropertyInfo[Property][pOwner], konvertuoti_pinigus(PropertyInfo[Property][pPrice]), konvertuoti_pinigus(PropertyInfo[Property][pEarning]), papildomas);
						Update3DTextLabelText(PropertyInfo[Property][pText], -1, String);

		                SaveProperty(Property);

		                format(String, sizeof(String), "{ffffff} Patobulinote savo verslo pelnà, dabar jis yra {FFAF00}$%s/1 min{ffffff}!", konvertuoti_pinigus(PropertyInfo[Property][pEarning]));
		                SendClientMessage(playerid, -1, String);

						Credits -= strval(inputtext) * PropertyUpgradePrice;

						format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
						mysql_query(String);
					}
					else
					{
						SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø!");
					}
				}
			}
		}

		case PropertySellDialog2:
		{
			new String[400];
			new Property = VersloID[playerid];

			if(response)
			{
				if(PlayerHaveProperty(playerid) == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite verslo!");

				new MoneyCount = floatround(PropertyInfo[VersloID[playerid]][pPrice] / 2);

				GivePlayerMoneyA(playerid, MoneyCount + PropertyInfo[Property][pProfit]);

				format(PropertyInfo[Property][pOwner], 5, "Nera");
				format(PropertyInfo[Property][pBuyDate], 32, "-");

				PropertyInfo[Property][pBuyed] 	= false;
				PropertyInfo[Property][pProfit] = 0;

				new papildomas[10];
				if(PropertyInfo[Property][pPelnas] == true) papildomas = "yra";
				else										papildomas = "nëra";

				format(String, sizeof(String), "{ffffff}Verslas: {ffffff} %s\n \n{ffffff}Unikalus ID: {FFAF00}%d\n{ffffff}Savininkas: {FFAF00}%s\n{ffffff}Kaina: {FFAF00}$%s\n{ffffff}Uþdarbis: {FFAF00}$%s/1 min\n{ffffff}Papildomas pelnas: {ffffff} %s\n \n{ffffff}Norëdami valdyti verslà spauskite ALT",
				PropertyInfo[Property][pTitle], Property + 1, PropertyInfo[Property][pOwner], konvertuoti_pinigus(PropertyInfo[Property][pPrice]), konvertuoti_pinigus(PropertyInfo[Property][pEarning]), papildomas);
				Update3DTextLabelText(PropertyInfo[Property][pText], -1, String);

                SaveProperty(Property);

                format(String, sizeof(String), "{ffffff} Pardavëte verslà {ffffff} %s {ffffff}uþ {FFAF00}$%s{ffffff}!", PropertyInfo[Property][pTitle], konvertuoti_pinigus(MoneyCount));
        		SendClientMessage(playerid, -1, String);
			}
			else
			{
				ShowPlayerDialogEx(playerid, MainPropertyDialog, DIALOG_STYLE_LIST, "Verslo valdymas",
				"1. Verslo nustatymai/valdymas\n2. Parduoti verslà\n3. Perleisti verslà\n4. Papildomo pelno informacija", "Pasirinkti", "Uþdaryti");
			}
		}

		case PropertySellDialog:
		{
			new String[400];
			new Property = VersloID[playerid];

			if(response)
			{
				if(PlayerHaveProperty(playerid) == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite verslo!");

				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialogEx(playerid, PropertySellToPlayerDialog, DIALOG_STYLE_INPUT, "Parduoti verslà",
						"{ffffff}Áveskite þaidëjo vardà (arba ID) bei norimà pinigø sumà:\n \nPavyzdys: Domka_Quattro 30000", "Parduoti", "Atgal");
					}

					case 1:
					{
						format(String, sizeof(String), "{ffffff}Ar tikrai norite parduoti verslà {ffffff} %s {ffffff}uþ {FFAF00}$%s{ffffff}?", PropertyInfo[Property][pTitle], konvertuoti_pinigus(PropertyInfo[Property][pPrice] / 2));
						ShowPlayerDialogEx(playerid, PropertySellDialog2, DIALOG_STYLE_MSGBOX, "Parduoti verslà", String, "Taip", "Ne");
		            }
		        }
			}
			else
			{
				ShowPlayerDialogEx(playerid, MainPropertyDialog, DIALOG_STYLE_LIST, "Verslo valdymas",
				"1. Verslo nustatymai/valdymas\n2. Parduoti verslà\n3. Perleisti verslà\n4. Papildomo pelno informacija", "Pasirinkti", "Uþdaryti");
			}
		}

		case PropertyProfitDepositDialog:
		{
			new String[400];
			new Property = VersloID[playerid];

			if(response)
			{
				if(IsNumeric(inputtext) || strval(inputtext) >= 1)
				{
					if(PropertyInfo[Property][pProfit] < strval(inputtext))
					{
						format(String, sizeof(String), "{FFAF00}Verslo biudþete nëra tiek pinigø!\n \n{ffffff}Áraðykite kiek norite paimti pinigø ið jûsø verslo biudþeto.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.",
						konvertuoti_pinigus(PropertyInfo[Property][pProfit]));
						ShowPlayerDialogEx(playerid, PropertyProfitDepositDialog, DIALOG_STYLE_INPUT, "Verslo nustatymai/valdymas", String, "Paimti", "Atgal");

						return 1;
					}

					format(String, sizeof(String), "{ffffff} Pasiëmete ið savo verslo biudþeto {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(strval(inputtext)));
					SendClientMessage(playerid, -1, String);

					GivePlayerMoneyA(playerid, strval(inputtext));

					PropertyInfo[Property][pProfit] -= strval(inputtext);

					SaveProperty(Property);
				}
				else
				{
					format(String, sizeof(String), "{FFAF00}Kaþkas blogai ávesta!\n \n{ffffff}Áraðykite kiek norite paimti pinigø ið jûsø verslo biudþeto.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.",
					konvertuoti_pinigus(PropertyInfo[Property][pProfit]));
					ShowPlayerDialogEx(playerid, PropertyProfitDepositDialog, DIALOG_STYLE_INPUT, "Verslo nustatymai/valdymas", String, "Paimti", "Atgal");
				}
			}
			else
			{
				format(String, sizeof(String), "{ffffff}Jûsø verslo biudþete yra: {FFAF00}$%s\n1. Padëti pinigø á biudþetà\n2. Pasiimti pinigø ið biudþeto",
				konvertuoti_pinigus(PropertyInfo[Property][pProfit]));
				ShowPlayerDialogEx(playerid, PropertyProfitControlDialog, DIALOG_STYLE_LIST, "Verslo nustatymai/valdymas", String, "Pasirinkti", "Atgal");
			}
		}

		case PropertyProfitWitdrawDialog:
		{
			new String[400];
			new Property = VersloID[playerid];

			if(response)
			{
				if(IsNumeric(inputtext) || strval(inputtext) >= 1)
				{
					if(GetPlayerMoneyA(playerid) < strval(inputtext))
					{
						format(String, sizeof(String), "{FFAF00}Jus neturite tiek pinigø!\n \n{ffffff}Áraðykite kiek norite padëti pinigø á jûsø verslo biudþetà.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.",
						konvertuoti_pinigus(PropertyInfo[Property][pProfit]));
						ShowPlayerDialogEx(playerid, PropertyProfitWitdrawDialog, DIALOG_STYLE_INPUT, "Verslo nustatymai/valdymas", String, "Padëti", "Atgal");

						return 1;
					}

					format(String, sizeof(String), "{ffffff} Padëjote á savo verslo biudþetà {FFAF00}$%s{ffffff}.", konvertuoti_pinigus(strval(inputtext)));
					SendClientMessage(playerid, -1, String);

					GivePlayerMoneyA(playerid, -strval(inputtext));

					PropertyInfo[Property][pProfit] += strval(inputtext);

					SaveProperty(Property);
				}
				else
				{
					format(String, sizeof(String), "{FFAF00}Kaþkas blogai ávesta!\n \n{ffffff}Áraðykite kiek norite padëti pinigø á jûsø verslo biudþetà.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.",
					konvertuoti_pinigus(PropertyInfo[Property][pProfit]));
					ShowPlayerDialogEx(playerid, PropertyProfitWitdrawDialog, DIALOG_STYLE_INPUT, "Verslo nustatymai/valdymas", String, "Padëti", "Atgal");
				}
			}
			else
			{
				format(String, sizeof(String), "{ffffff}Jûsø verslo biudþete yra: {FFAF00}$%s\n1. Padëti pinigø á biudþetà\n2. Pasiimti pinigø ið biudþeto",
				konvertuoti_pinigus(PropertyInfo[Property][pProfit]));
				ShowPlayerDialogEx(playerid, PropertyProfitControlDialog, DIALOG_STYLE_LIST, "Verslo nustatymai/valdymas", String, "Pasirinkti", "Atgal");
			}
		}

		case PropertyProfitControlDialog:
		{
			new String[400];
			new Property = VersloID[playerid];

			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						format(String, sizeof(String), "{ffffff}Jûsø verslo biudþete yra: {FFAF00}$%s\n1. Padëti pinigø á biudþetà\n2. Pasiimti pinigø ið biudþeto",
						konvertuoti_pinigus(PropertyInfo[Property][pProfit]));
						ShowPlayerDialogEx(playerid, PropertyProfitControlDialog, DIALOG_STYLE_LIST, "Verslo nustatymai/valdymas", String, "Pasirinkti", "Atgal");
					}

					case 1: // Padëti pinigø á biudþetà
					{
						format(String, sizeof(String), "{ffffff}Áraðykite kiek norite padëti pinigø á jûsø verslo biudþetà.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.",
						konvertuoti_pinigus(PropertyInfo[Property][pProfit]));
						ShowPlayerDialogEx(playerid, PropertyProfitWitdrawDialog, DIALOG_STYLE_INPUT, "Verslo nustatymai/valdymas", String, "Padëti", "Atgal");
					}

					case 2: // Pasiimti pinigø ið biudþeto
					{
						format(String, sizeof(String), "{ffffff}Áraðykite kiek norite paimti pinigø ið jûsø verslo biudþeto.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.",
						konvertuoti_pinigus(PropertyInfo[Property][pProfit]));
						ShowPlayerDialogEx(playerid, PropertyProfitDepositDialog, DIALOG_STYLE_INPUT, "Verslo nustatymai/valdymas", String, "Paimti", "Atgal");
					}
				}
			}
			else
			{
				ShowPlayerDialogEx(playerid, MainPropertyDialog, DIALOG_STYLE_LIST, "Verslo valdymas",
				"1. Verslo nustatymai/valdymas\n2. Parduoti verslà\n3. Perleisti verslà\n4. Papildomo pelno informacija", "Pasirinkti", "Uþdaryti");
			}
		}

		case MainPropertyDialog:
		{
			new String[400];
			new Property = VersloID[playerid];

			if(response)
			{
				if(PlayerHaveProperty(playerid) == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite verslo!");

				switch(listitem)
				{
					case 0:
					{
						format(String, sizeof(String), "1. Pakeisti verslo pavadinimà {ffffff} \t%s\n2. Biudþeto valdymas {E0FF51}\t\t{FFAF00}$%s\n3. Tobulinti verslà {E0FF51}\t\t{FFAF00}$%s/min",
						PropertyInfo[Property][pTitle], konvertuoti_pinigus(PropertyInfo[Property][pProfit]), konvertuoti_pinigus(PropertyInfo[Property][pEarning]));
						ShowPlayerDialogEx(playerid, PropertyUpgradeDialog, DIALOG_STYLE_LIST, "Verslo nustatymai/valdymas", String, "Pasirinkti", "Atgal");
					}

					case 1:
					{
						ShowPlayerDialogEx(playerid, PropertySellDialog, DIALOG_STYLE_LIST, "Parduoti verslà",
						"1. Parduoti verslà þaidëjui\n2. Parduoti verslà serveriui", "Pasirinkti", "Atgal");
					}

					case 2:
					{
						ShowPlayerDialogEx(playerid, PropertyGiveToPlayerDialog, DIALOG_STYLE_INPUT, "Perleisti verslà",
						"{ffffff}Áveskite þaidëjo vardà (arba ID):\n \nPavyzdys: Domka_Quattro", "Atiduoti", "Atgal");
					}

					case 3:
					{
						if(PropertyInfo[Property][pPelnas] == false) return SendClientMessage(playerid, -1, "{ffffff} Jûsø verslas neturi papildomo pelno!");

						switch(Property)
						{
							case STOTIES_DEGALINE, DIDELE_DEGALINE, VIDUTINE_DEGALINE:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø ásipilto kuro (ðioje degalinëje).");
							}

							case DRABUZIU_PARDUOTUVE:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø nusipirktø drabuþiø bei akiniø.");
							}

							case MAISTO_PARDUOTUVE1, MAISTO_PARDUOTUVE2:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø nusipirkto maisto (ðioje parduotuvëje).");
							}

							case EL_PARDUOTUVE:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø nusipirktø el. prekiø.");
							}

							case VM_MOKYKLA:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø teorijos bei vairavimo egzaminø.");
							}

							case TR_SALONAS:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø nusipirktø maðinø bei motociklø.\n");
								strcat(String, "{ffffff}Þaidëjui nupirkus maðinà/motociklà, dalis pinigø (tr. priemonës kaina/300) keliauja á verslo pelnà.");
							}

							case LAIVU_SALONAS:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø nusipirktø laivø.\n");
								strcat(String, "{ffffff}Þaidëjui nupirkus laivà, dalis pinigø (laivo kaina/300) keliauja á verslo pelnà.");
							}

							case SKELBIMU_CENTRAS:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø aktyvumo skelbiant skelbimus.");
							}

							case NAKTINIS_KLUBAS:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø aktyvumo geriant alkoholá ðiame klube.");
							}

							case GARAZHAS:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo tr. priemoniø atstatymø, registravimø,\n");
								strcat(String, "{ffffff}dujø árangos montavimo bei tech. apþiûros atlikimø.");
							}

							case CLUCKIN1:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø aktyvumo lankantis ðiose uþkandinëse.\n");
								strcat(String, "{ffffff}Pelnas kyla valgant visuose Cluckin Bell uþkandinëse.");
							}

							case BURGER1:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø aktyvumo lankantis ðiose uþkandinëse.\n");
								strcat(String, "{ffffff}Pelnas kyla valgant visuose Burger Shot uþkandinëse.");
							}

							case PICERIJA1:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø aktyvumo lankantis ðiose uþkandinëse.\n");
								strcat(String, "{ffffff}Pelnas kyla valgant visuose The Well Stacked Pizza picerijose.");
							}

							case ZVEJYBOS_TURGUS:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø aktyvumo perkant meðkeres, valus bei masalà.");
							}

							case GINKLU_PARDUOTUVE:
							{
								strcat(String, "{ffffff}Ðio verslo papildomas pelnas priklauso nuo þaidëjø aktyvumo perkant ginklus, ðarvus bei ginklø licenzijas.");
							}
						}

						ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Papildomo pelno informacija", String, "Uþdaryti", "");
					}
				}
			}
		}

		case TimeUnbanDialog:
		{
			if(response)
			{
				new Credits = HowMuchHaveCredits(GetPlayerNameEx(playerid));

				if(Credits < 100)
				{
					SendClientMessage 	(playerid, -1, "{ffffff} Jums neuþtenka kreditø!");
					IsmestiZaideja		(playerid, 100);

					return 1;
				}

				SendClientMessage(playerid, -1, "{ffffff} Sëkmingai atsiblokavote mûsø serveryje!");

				Credits -= 100;

				PI[playerid][BanLaikas] = 0;

				new String[216];

				format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
				mysql_query(String);
			}
			else IsmestiZaideja(playerid, 100);
		}

		case ACategoryLicenseDialog:
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			if(response)
			{
				if(vehicleid == INVALID_VEHICLE_ID) return 1;

				if(!PI[playerid][Apraktika])
				{
					if(GetPlayerMoneyA(playerid) < floatround(ACategoryLicensePrice / 2))
					{
						SendClientMessage 			(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
						DisableAllPlayerCheckpoints	(playerid);
						RemovePlayerFromVehicle		(playerid);
						ac_SetVehicleToRespawn			(vehicleid);

						return 1;
					}

					GivePlayerMoneyA 			(playerid, floatround(-ACategoryLicensePrice / 2));
					DisableAllPlayerCheckpoints	(playerid);
					SetPlayerCheckpointEx 		(playerid, 17, -2087.9038,-132.5207,34.8909, 2.0);
					SetVehicleVirtualWorld 		(GetPlayerVehicleID(playerid), playerid + 1);
					SetPlayerVirtualWorld 		(playerid, playerid + 1);
					SendClientMessage 			(playerid, -1, "{ffffff} Pradëjote laikyti vairavimo egzaminà aikðtelëje, sekite nurodymus þemëlapyje!");
					SendClientMessage 			(playerid, -1, "{ffffff} Nevirðykite leistino saugaus aikðtelëje (50 KM/H) greièio ir uþsidekite ðalmà!");

					if(PropertyInfo[VM_MOKYKLA][pBuyed])
					{
						PropertyInfo[VM_MOKYKLA][pProfit] += ACategoryLicensePrice;
					}

					PI[playerid][AikstelesCPA] 	= 1;
					PI[playerid][Salmas] 		= 1;
				}
				else
				{
					if(GetPlayerMoneyA(playerid) < ACategoryLicensePrice)
					{
						SendClientMessage 			(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
						DisableAllPlayerCheckpoints	(playerid);
						RemovePlayerFromVehicle		(playerid);
						ac_SetVehicleToRespawn			(vehicleid);

						return 1;
					}

					GivePlayerMoneyA 			(playerid, -ACategoryLicensePrice);
					DisableAllPlayerCheckpoints	(playerid);
					SetPlayerCheckpointEx 		(playerid, 16, -2045.2761,-82.1544,35.8204, 4.0);
					SetVehicleVirtualWorld 		(GetPlayerVehicleID(playerid), playerid + 1);
					SetPlayerVirtualWorld 		(playerid, playerid + 1);
					SendClientMessage 			(playerid, -1, "{ffffff} Pradëjote laikyti vairavimo egzaminà, sekite nurodymus þemëlapyje!");
					SendClientMessage 			(playerid, -1, "{ffffff} Nevirðykite leistino saugaus (90 KM/H) greièio ir uþsidekite ðalmà!");

					if(PropertyInfo[VM_MOKYKLA][pBuyed])
					{
						PropertyInfo[VM_MOKYKLA][pProfit] += ACategoryLicensePrice;
					}

					PI[playerid][EgzaminoCP] 	= 1;
					PI[playerid][Salmas] 		= 1;
				}
			}

			else RemovePlayerFromVehicle(playerid);
		}

		case BCategoryLicenseDialog:
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			if(response)
			{
				if(vehicleid == INVALID_VEHICLE_ID) return 1;

				if(!PI[playerid][Bpraktika])
				{
					if(GetPlayerMoneyA(playerid) < floatround(BCategoryLicensePrice / 2))
					{
						SendClientMessage 			(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
						DisableAllPlayerCheckpoints	(playerid);
						RemovePlayerFromVehicle		(playerid);
						ac_SetVehicleToRespawn			(vehicleid);

						return 1;
					}

					GivePlayerMoneyA 			(playerid, floatround(-BCategoryLicensePrice / 2));
					DisableAllPlayerCheckpoints	(playerid);
					SetPlayerCheckpointEx 		(playerid, 17, -2055.4380,-132.4912,35.0294, 2.0);
					SetVehicleVirtualWorld 		(GetPlayerVehicleID(playerid), playerid + 1);
					SetPlayerVirtualWorld 		(playerid, playerid + 1);
					SendClientMessage 			(playerid, -1, "{ffffff} Pradëjote laikyti vairavimo egzaminà aikðtelëje, sekite nurodymus þemëlapyje!");
					SendClientMessage 			(playerid, -1, "{ffffff} Nevirðykite leistino saugaus aikðtelëje (50 KM/H) greièio ir uþsisekite saugos dirþà!");

					if(PropertyInfo[VM_MOKYKLA][pBuyed])
					{
						PropertyInfo[VM_MOKYKLA][pProfit] += BCategoryLicensePrice;
					}

					PI[playerid][AikstelesCPB] = 1;
				}
				else
				{
					if(GetPlayerMoneyA(playerid) < BCategoryLicensePrice)
					{
						SendClientMessage 			(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
						DisableAllPlayerCheckpoints	(playerid);
						RemovePlayerFromVehicle		(playerid);
						ac_SetVehicleToRespawn			(vehicleid);

						return 1;
					}

					GivePlayerMoneyA 			(playerid, -BCategoryLicensePrice);
					DisableAllPlayerCheckpoints	(playerid);
					SetPlayerCheckpointEx 		(playerid, 16, -2045.2761,-82.1544,35.8204, 4.0);
					SetVehicleVirtualWorld 		(GetPlayerVehicleID(playerid), playerid + 1);
					SetPlayerVirtualWorld 		(playerid, playerid + 1);
					SendClientMessage 			(playerid, -1, "{ffffff} Pradëjote laikyti vairavimo egzaminà, sekite nurodymus þemëlapyje!");
					SendClientMessage 			(playerid, -1, "{ffffff} Nevirðykite leistino saugaus (90 KM/H) greièio ir uþsisekite saugos dirþà!");

					if(PropertyInfo[VM_MOKYKLA][pBuyed])
					{
						PropertyInfo[VM_MOKYKLA][pProfit] += BCategoryLicensePrice;
					}

					PI[playerid][EgzaminoCP] = 1;
				}
			}

			else RemovePlayerFromVehicle(playerid);
		}

		case CCategoryLicenseDialog:
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			if(response)
			{
				if(vehicleid == INVALID_VEHICLE_ID) return 1;

				if(GetPlayerMoneyA(playerid) < CCategoryLicensePrice)
				{
					SendClientMessage 			(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
					DisableAllPlayerCheckpoints	(playerid);
					RemovePlayerFromVehicle		(playerid);
					ac_SetVehicleToRespawn			(vehicleid);

					return 1;
				}

				GivePlayerMoneyA 			(playerid, -CCategoryLicensePrice);
				DisableAllPlayerCheckpoints	(playerid);
				SetPlayerCheckpointEx 		(playerid, 16, -2045.2761,-82.1544,35.8204, 4.0);
				SetVehicleVirtualWorld 		(GetPlayerVehicleID(playerid), playerid + 1);
				SetPlayerVirtualWorld 		(playerid, playerid + 1);
				SendClientMessage 			(playerid, -1, "{ffffff} Pradëjote laikyti vairavimo egzaminà, sekite nurodymus þemëlapyje!");
				SendClientMessage 			(playerid, -1, "{ffffff} Nevirðykite leistino saugaus (90 KM/H) greièio ir uþsisekite saugos dirþà!");

				if(PropertyInfo[VM_MOKYKLA][pBuyed])
				{
					PropertyInfo[VM_MOKYKLA][pProfit] += CCategoryLicensePrice;
				}

				PI[playerid][EgzaminoCP] = 1;
			}

			else RemovePlayerFromVehicle(playerid);
		}

		case BankAccountSendDialog:
		{
			if(response)
			{
				new String[256], giveplayerid;

				if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

				giveplayerid = GetPlayeridMid(inputtext);

				PI[playerid][SomeoneVariable][0] = giveplayerid;

				if(IsPlayerConnected(giveplayerid))
				{
					if(PI[giveplayerid][SusikuresKorta] == true)
					{
						format(String, sizeof(String), "{F2F2F2}Sàskaita vardu: {FFAF00}%s {F2F2F2}rasta!\nVartotojo bankas: {FFAF00}%s{F2F2F2}\nÁveskite pinigø sumà (Max: {AEB404}%.2f{F2F2F2}), kuria pervesite:\n", GetPlayerNameEx(giveplayerid));
						ShowPlayerDialogEx(playerid, BankAccountAmountDialog, DIALOG_STYLE_INPUT, "{F2F2F2}Pinigø pervedimas á kità banko sàskaità", String, "Pervesti!", "Atgal");
					}
					else
					{
						ShowPlayerDialogEx(playerid, BankAccountSendDialog, DIALOG_STYLE_INPUT, "{F2F2F2}Pinigø pervedimas á kità banko sàskaità", "{FFAF00}Sàskaita tokiu vardu neáregistruota, bandykite dar kartà!\nSvarbi informacija: jeigu þaidëjas neprisijungæs reikia ávesti pilna jo nick'à\n{F2F2F2}Áveskite þaidëjo id'à arba vardà:\n", "Dar kartà!", "Atgal");
					}
				}
				else
				{
					new Query[300];

					format(Query, sizeof(Query), "SELECT * FROM `players` WHERE `Vardas` = '%s'", inputtext);
					mysql_query(Query);

					mysql_store_result();

					mysql_retrieve_row();

					if(mysql_num_rows())
					{
						format(String, sizeof(String), "{F2F2F2}Sàskaita vardu: {FFAF00}%s {F2F2F2}rasta!\nVartotojo bankas: {FFAF00}%s{F2F2F2}\nÁveskite pinigø sumà (Max: {AEB404}%.2f{F2F2F2}), kuria pervesite:\n", GetPlayerNameEx(giveplayerid));
						ShowPlayerDialogEx(playerid, BankAccountAmountDialog, DIALOG_STYLE_INPUT, "{F2F2F2}Pinigø pervedimas á kità banko sàskaità", String, "Pervesti!", "Atgal");

						PI[playerid][SomeoneVariable][0] = 0;

						strdel(PI[playerid][SelectedString], 0, MAX_PLAYER_NAME);
						strcat(PI[playerid][SelectedString], inputtext, MAX_PLAYER_NAME);
					}
					else
					{
						SendClientMessage(playerid, -1, "{ffffff} Þaidëjo su tokiu vardu mûsø duomenø bazëje nëra!");

						format(String, sizeof(String), "{ffffff}Áraðykite þaidëjo Vardà_Pavardæ kuriam norite pervesti pinigus.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.\n\n{FFAF00}PASTABA. {ffffff}Jeigu þaidëjas yra atsijungæs turite ávesti pilnà jo Vardà_Pavardæ.\n\n\tPavyzdys: Domka_Quattro", konvertuoti_pinigus(PI[playerid][banke]));
						ShowPlayerDialogEx(playerid, BankAccountSendDialog, DIALOG_STYLE_INPUT, "Bankas", String, "Toliau", "Uþdaryti");
					}
				}
			}
		}
		case BankAccountAmountDialog:
		{
			new String[270];

			if(response)
			{

				if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

				/*if(!IsNumeric(inputtext))
				{
					format(String, sizeof(String), "{F2F2F2}Sàskaita vardu: {FFAF00}%s {F2F2F2}rasta!\nVartotojo bankas: {FFAF00}%s{F2F2F2}\nÁveskite pinigø sumà (Max: {AEB404}%.2f{F2F2F2}), kuria pervesite:\n", GetPlayerNameEx(giveplayerid));
					ShowPlayerDialogEx(playerid, BankAccountAmountDialog, DIALOG_STYLE_INPUT, "{F2F2F2}Pinigø pervedimas á kità banko sàskaità", String, "Pervesti!", "Atgal");
					return 1;
				}*/

				if(PI[playerid][banke] >= strval(inputtext))
				{
					new giveplayerid;

					if(PI[playerid][SomeoneVariable][0] != 0)
					{
						giveplayerid = PI[playerid][SomeoneVariable][0];

						PI[giveplayerid][banke] += strval(inputtext);
						PI[playerid][banke]     -= strval(inputtext);

						format(String, sizeof(String), "{ffffff} Sëkmingai pervëdëte {FFAF00}$%s {ffffff}á þaidëjo {FFAF00}%s {ffffff}banko sàskaità!", konvertuoti_pinigus(strval(inputtext)), GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, -1, String);

						format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}pervëde {FFAF00}$%s {ffffff}á jûsø banko sàskaità!", GetPlayerNameEx(playerid), konvertuoti_pinigus(strval(inputtext)));
						SendClientMessage(giveplayerid, -1, String);

						strdel(PI[playerid][SelectedString], 0, MAX_PLAYER_NAME);
						PI[playerid][SomeoneVariable][0] = 0;
					}
					else
					{
						new Query[300], HaveMoneyInBank;

						format(Query, sizeof(Query), "SELECT * FROM `players` WHERE `Vardas` = '%s'", PI[playerid][SelectedString]);
						mysql_query(Query);

						mysql_store_result();

						mysql_retrieve_row();

						if(mysql_num_rows())
						{
							mysql_fetch_field_row(Query, "MoneyBank"); HaveMoneyInBank = strval(Query);

							format(Query, sizeof(Query), "UPDATE `players` SET `MoneyBank` = '%d' WHERE `Vardas` = '%s'", HaveMoneyInBank + strval(inputtext), PI[playerid][SelectedString]);
							mysql_query(Query);

							PI[playerid][banke] -= strval(inputtext);

							format(String, sizeof(String), "{ffffff} Sëkmingai pervëdëte {FFAF00}$%s {ffffff}á þaidëjo {FFAF00}%s {ffffff}banko sàskaità!", konvertuoti_pinigus(strval(inputtext)), PI[playerid][SelectedString]);
							SendClientMessage(playerid, -1, String);

							strdel(PI[playerid][SelectedString], 0, MAX_PLAYER_NAME);
							PI[playerid][SomeoneVariable][0] = 0;
						}
						else
						{
							SendClientMessage(playerid, -1, "{ffffff} Þaidëjo su tokiu vardu mûsø duomenø bazëje nëra!");

							format(String, sizeof(String), "{F2F2F2}Sàskaita vardu: {FFAF00}%s {F2F2F2}rasta!\nVartotojo bankas: {FFAF00}%s{F2F2F2}\nÁveskite pinigø sumà (Max: {AEB404}%.2f{F2F2F2}), kuria pervesite:\n", GetPlayerNameEx(giveplayerid));
							ShowPlayerDialogEx(playerid, BankAccountAmountDialog, DIALOG_STYLE_INPUT, "{F2F2F2}Pinigø pervedimas á kità banko sàskaità", String, "Pervesti!", "Atgal");
						}
					}
				}
				else
				{
					format(String, sizeof(String), "{FFAF00}Jûsø banko sàskaitoje tiek pinigø nëra!\n{F2F2F2}Sàskaita: {FFAF00}%s {F2F2F2}\n{F2F2F2}áveskite pinigø sumà (Max: {AEB404}%.2f{F2F2F2}), kuria pervesite:\n", inputtext, PI[playerid][banke]);
					ShowPlayerDialogEx(playerid, BankAccountAmountDialog, DIALOG_STYLE_INPUT, "{F2F2F2}Pinigø pervedimas á kità banko sàskaità", String, "Pervesti", "Atgal");
				}
			}
			/*else
			{
				format(String, sizeof(String), "{F2F2F2}Sàskaita vardu: {FFAF00}%s {F2F2F2}rasta!\nVartotojo bankas: {FFAF00}%s{F2F2F2}\nÁveskite pinigø sumà (Max: {AEB404}%.2f{F2F2F2}), kuria pervesite:\n", GetPlayerNameEx(giveplayerid));
				ShowPlayerDialogEx(playerid, BankAccountAmountDialog, DIALOG_STYLE_INPUT, "{F2F2F2}Pinigø pervedimas á kità banko sàskaità", String, "Pervesti!", "Atgal");
			}*/
		}
		/*case BankAccountAmountDialog:
		{
			new String[300], Havebanke;

			if(response)
			{
				if(IsNumeric(inputtext))
				{
					if(PI[playerid][banke] >= strval(inputtext))
					{
						new giveplayerid = GetPlayeridMid(PI[playerid][SelectedString]);

						if(giveplayerid != INVALID_PLAYER_ID)
						{
							PI[giveplayerid][banke] += strval(inputtext);
							PI[playerid][banke]     -= strval(inputtext);

							format(String, sizeof(String), "{ffffff} Sëkmingai pervëdëte {FFAF00}$%s {ffffff}á {FFAF00}%s {ffffff}banko sàskaità!", konvertuoti_pinigus(strval(inputtext)), GetPlayerNameEx(giveplayerid));
							SendClientMessage(playerid, -1, String);

							format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}pervëde {FFAF00}$%s {ffffff}á jûsø banko sàskaità!", GetPlayerNameEx(playerid), konvertuoti_pinigus(strval(inputtext)));
							SendClientMessage(giveplayerid, -1, String);

							strdel(PI[playerid][SelectedString], 0, MAX_PLAYER_NAME);
							PI[playerid][SomeoneVariable][0] = 0;
						}
						else
						{
							new Query[300];

							format(Query, sizeof(Query), "SELECT * FROM `players` WHERE `Vardas` = '%s'", giveplayerid);
							mysql_query(Query);

							mysql_store_result();

							mysql_retrieve_row();

							if(mysql_num_rows())
							{
								mysql_fetch_field_row(Query, "MoneyBank"); Havebanke = strval(Query);

								format(Query, sizeof(Query), "UPDATE `players` SET `MoneyBank` = '%d' WHERE `Vardas` = '%s'", Havebanke + strval(inputtext), giveplayerid);
								mysql_query(Query);

								PI[playerid][banke] -= strval(inputtext);

								format(String, sizeof(String), "{ffffff} Sëkmingai pervëdëte {FFAF00}$%s {ffffff}á {FFAF00}%s {ffffff}banko sàskaità!", konvertuoti_pinigus(strval(inputtext)), giveplayerid);
								SendClientMessage(playerid, -1, String);

								strdel(PI[playerid][SelectedString], 0, MAX_PLAYER_NAME);
								PI[playerid][SomeoneVariable][0] = 0;
							}
							else
							{
								SendClientMessage(playerid, -1, "{ffffff} Þaidëjo su tokiu vardu mûsø duomenø bazëje nëra!");

								format(String, sizeof(String), "{ffffff}Áraðykite þaidëjo Vardà_Pavardæ kuriam norite pervesti pinigus.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.\n\n{FFAF00}PASTABA. {ffffff}Jeigu þaidëjas yra atsijungæs turite ávesti pilnà jo Vardà_Pavardæ.\n\n\tPavyzdys: Domka_Quattro", konvertuoti_pinigus(PI[playerid][banke]));
								ShowPlayerDialogEx(playerid, BankAccountSendDialog, DIALOG_STYLE_INPUT, "Bankas", String, "Toliau", "Uþdaryti");
							}
						}
					}
					else
					{
						format(String, sizeof(String), "{ffffff}Áraðykite þaidëjo Vardà_Pavardæ kuriam norite pervesti pinigus.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.\n\n{FFAF00}PASTABA. {ffffff}Jeigu þaidëjas yra atsijungæs turite ávesti pilnà jo Vardà_Pavardæ.\n\n\tPavyzdys: Domka_Quattro", konvertuoti_pinigus(PI[playerid][banke]));
						ShowPlayerDialogEx(playerid, BankAccountSendDialog, DIALOG_STYLE_INPUT, "Bankas", String, "Toliau", "Uþdaryti");
					}
				}
				else
				{
					OnDialogResponse(playerid, BankAccountDialog, true, 3, "");
				}
			}
			else
			{
				OnDialogResponse(playerid, BankAccountDialog, true, 3, "");
			}
		}*/
		case BankAccountMoneyWitdrawDialog:
		{
			if(response)
			{
				if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
				if(IsNumeric(inputtext, true))
				{
					if(PI[playerid][banke] >= strval(inputtext))
					{
						new WitdrawedMoney = strval(inputtext);

						GivePlayerMoneyA(playerid, WitdrawedMoney);

						PI[playerid][banke] -= WitdrawedMoney;

						new String[128];

						format(String, sizeof(String), "{ffffff} Pasiëmëte {FFAF00}$%s {ffffff}ið jûsø banko sàskaitos!", konvertuoti_pinigus(WitdrawedMoney));
						SendClientMessage(playerid, -1, String);
					}
					else
					{
						OnDialogResponse(playerid, BankAccountDialog, true, 2, "");
					}
				}
				else
				{
					OnDialogResponse(playerid, BankAccountDialog, true, 2, "");
				}
			}
		}
		case BankAccountMoneyPutDialog:
		{
			if(response)
			{
				if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
				if(IsNumeric(inputtext, true))
				{
					if(GetPlayerMoneyA(playerid) >= strval(inputtext))
					{
						new PuttedMoney = strval(inputtext);

						GivePlayerMoneyA(playerid, -PuttedMoney);

						PI[playerid][banke] += PuttedMoney;

						new String[128];

						format(String, sizeof(String), "{ffffff} Padëjote {FFAF00}$%s {ffffff}á jûsø banko sàskaità!", konvertuoti_pinigus(PuttedMoney));
						SendClientMessage(playerid, -1, String);
					}
					else
					{
						OnDialogResponse(playerid, BankAccountDialog, true, 1, "");
					}
				}
				else
				{
					OnDialogResponse(playerid, BankAccountDialog, true, 1, "");
				}
			}
		}
		case BankAccountBalanseDialog:
		{
			if(response)
			{
				OnPlayerPickUpPickup(playerid, PickupsInfo[BankoValdymas]);
			}
		}

		case 50:
		{
			if(response)
			{
				new String[200];

				switch(listitem)
				{
					case 0:
					{
						format(String, sizeof(String), "{ffffff}Jûsø banko sàskaitos balanse yra {FFAF00}$%s{ffffff}.", konvertuoti_pinigus(PI[playerid][banke]));
						ShowPlayerDialogEx(playerid, 51, DIALOG_STYLE_MSGBOX, "Bankas", String, "Atgal", "Uþdaryti");
					}

					case 1:
					{
						format(String, sizeof(String), "{ffffff}Áraðykite kiek pinigø norite nusiimti.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.", konvertuoti_pinigus(PI[playerid][banke]));
						ShowPlayerDialogEx(playerid, 52, DIALOG_STYLE_INPUT, "Bankas", String, "Nusiimti", "Atgal");
					}
				}
			}
		}

		case 52:
		{
			new String[200];

			if(response)
			{
				if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

				if(IsNumeric(inputtext, true))
				{
					if(PI[playerid][banke] >= strval(inputtext))
					{
						new WitdrawedMoney = strval(inputtext);

						GivePlayerMoneyA(playerid, WitdrawedMoney);

						PI[playerid][banke] -= WitdrawedMoney;

						format(String, sizeof(String), "{ffffff} Nusiëmëte {FFAF00}$%s {ffffff}ið jûsø banko sàskaitos!", konvertuoti_pinigus(WitdrawedMoney));
						SendClientMessage(playerid, -1, String);
					}
					else
					{
						format(String, sizeof(String), "{ffffff}Áraðykite kiek pinigø norite nusiimti.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.", konvertuoti_pinigus(PI[playerid][banke]));
						ShowPlayerDialogEx(playerid, 52, DIALOG_STYLE_INPUT, "Bankas", String, "Nusiimti", "Uþdaryti");
					}
				}
				else
				{
					format(String, sizeof(String), "{ffffff}Áraðykite kiek pinigø norite nusiimti.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.", konvertuoti_pinigus(PI[playerid][banke]));
					ShowPlayerDialogEx(playerid, 52, DIALOG_STYLE_INPUT, "Bankas", String, "Nusiimti", "Uþdaryti");
				}
			}
			else
			{
				ShowPlayerDialogEx(playerid, 50, DIALOG_STYLE_LIST, "Bankomatas", "1. Pinigø balansas\n2. Nusiimti pinigus", "Pasirinkti", "Uþdaryti");
			}
		}

		case 51:
		{
			if(response)
			{
				ShowPlayerDialogEx(playerid, 50, DIALOG_STYLE_LIST, "Bankomatas", "1. Pinigø balansas\n2. Nusiimti pinigus", "Pasirinkti", "Uþdaryti");
			}
		}

		case BankAccountDialog:
		{
			if(response)
			{
				new String[300];

				switch(listitem)
				{
					case 0:
					{
						format(String, sizeof(String), "{ffffff}Jûsø banko sàskaitos balanse yra {FFAF00}$%s{ffffff}.", konvertuoti_pinigus(PI[playerid][banke]));
						ShowPlayerDialogEx(playerid, BankAccountBalanseDialog, DIALOG_STYLE_MSGBOX, "Bankas", String, "Atgal", "Uþdaryti");
					}

					case 1:
					{
						format(String, sizeof(String), "{ffffff}Áraðykite kiek norite padëti pinigø á banko sàskaità.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.", konvertuoti_pinigus(PI[playerid][banke]));
						ShowPlayerDialogEx(playerid, BankAccountMoneyPutDialog, DIALOG_STYLE_INPUT, "Bankas", String, "Padëti", "Uþdaryti");
					}

					case 2:
					{
						format(String, sizeof(String), "{ffffff}Áraðykite kiek norite pasiimti pinigø ið banko sàskaitos.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.", konvertuoti_pinigus(PI[playerid][banke]));
						ShowPlayerDialogEx(playerid, BankAccountMoneyWitdrawDialog, DIALOG_STYLE_INPUT, "Bankas", String, "Nusiimti", "Uþdaryti");
					}

					/*case 3:
					{
						if(GetPlayerScore(playerid) < NAUJOKO_LAIKAS) return SendClientMessage(playerid, -1, "{ffffff} Ðá veiksmà galësite atlikti tik nuo {FFAF00}"#NAUJOKO_LAIKAS"{ffffff} EXP!");

						format(String, sizeof(String), "{ffffff}Áraðykite þaidëjo Vardà_Pavardæ kuriam norite pervesti pinigus.\n\n\tDabar yra: {FFAF00}$%s{ffffff}.\n\n{FFAF00}PASTABA. {ffffff}Jeigu þaidëjas yra atsijungæs turite ávesti pilnà jo Vardà_Pavardæ.\n\n\tPavyzdys: Domka_Quattro", konvertuoti_pinigus(PI[playerid][banke]));
						ShowPlayerDialogEx(playerid, BankAccountSendDialog, DIALOG_STYLE_INPUT, "Bankas", String, "Toliau", "Uþdaryti");
					}*/

					case 4:
					{
						if(PI[playerid][KreditineKortele] == true) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite kreditinæ kortelæ!");

						PI[playerid][KreditineKortele] = true;

						SendClientMessage(playerid, -1, "{ffffff} Iðsiëmëte kreditinæ kortelæ!");

						ShowPlayerDialogEx(playerid, BankAccountDialog, DIALOG_STYLE_LIST, "Bankas", "{FFFFFF}1. Pinigø balansas\n2. Padëti pinigus á banko sàskaità\n3. Pasiimti pinigø ið banko sàskaitos\n4. Pervesti pinigus kitam þaidëjui\n5. Iðsiimti kreditinæ kortelæ", "Pasirinkti", "Uzdaryti");
					}
				}
			}
		}
		case BankAccountCreateDialog:
		{
			if(response)
			{
				if(GetPlayerMoneyA(playerid) < 200) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

				GivePlayerMoneyA(playerid, -200);

				SendClientMessage(playerid, -1, "{ffffff} Sëkmingai susikurëte banko sàskaità!");

				PI[playerid][SusikuresKorta] = true;

				PI[playerid][banke] += 200;

				ShowPlayerDialogEx(playerid, BankAccountDialog, DIALOG_STYLE_LIST, "Bankas", "{FFFFFF}1. Pinigø balansas\n2. Padëti pinigus á banko sàskaità\n3. Pasiimti pinigø ið banko sàskaitos\n4. Pervesti pinigus kitam þaidëjui\n5. Iðsiimti kreditinæ kortelæ", "Pasirinkti", "Uzdaryti");
			}
		}
		case GlassesShopDialog:
		{
			if(response)
			{
				new PlayerSkin = GetPlayerSkin(playerid);

				switch(listitem)
				{
					case 0, 1, 2, 3:
					{
						SetPlayerAttachedObject(playerid, SUNGLASSES_ATTACH_SLOT, 19006 + (listitem + 1), 2, GlassesSkinOffSet[PlayerSkin][0], GlassesSkinOffSet[PlayerSkin][1], GlassesSkinOffSet[PlayerSkin][2], GlassesSkinOffSet[PlayerSkin][3], GlassesSkinOffSet[PlayerSkin][4], GlassesSkinOffSet[PlayerSkin][5]);

						PI[playerid][HaveGlassesOn] = 19006 + (listitem + 1);
					}
					case 4, 5, 6:
					{
						SetPlayerAttachedObject(playerid, SUNGLASSES_ATTACH_SLOT, 19010 + (listitem + 1), 2, GlassesSkinOffSet[PlayerSkin][0], GlassesSkinOffSet[PlayerSkin][1], GlassesSkinOffSet[PlayerSkin][2], GlassesSkinOffSet[PlayerSkin][3], GlassesSkinOffSet[PlayerSkin][4], GlassesSkinOffSet[PlayerSkin][5]);

						PI[playerid][HaveGlassesOn] = 19010 + (listitem + 1);
					}
					case 7:
					{
						SetPlayerAttachedObject(playerid, SUNGLASSES_ATTACH_SLOT, 19023, 2, GlassesSkinOffSet[PlayerSkin][0], GlassesSkinOffSet[PlayerSkin][1], GlassesSkinOffSet[PlayerSkin][2], GlassesSkinOffSet[PlayerSkin][3], GlassesSkinOffSet[PlayerSkin][4], GlassesSkinOffSet[PlayerSkin][5]);

						PI[playerid][HaveGlassesOn] = 19023;
					}
				}

				SendClientMessage(playerid, -1, "{ffffff} Matuojates akinius, uþ 5 sec galësite pasakyti ar pirksite...");

				SetTimerEx("ShowGlassesBuyDialog", 5000, false, "d", playerid);
			}
		}
		case SelectedGlassesBuyDialog:
		{
			if(response)
			{
				if(GetPlayerMoneyA(playerid) >= PI[playerid][GlassesPriceThenBuy])
				{
					new String[90];

					format(String, sizeof(String), "{ffffff} Nusipirkote akinius uþ {FFAF00}$%d{FFFFFF}!", PI[playerid][GlassesPriceThenBuy]);
					SendClientMessage(playerid, -1, String);

					GivePlayerMoneyA(playerid, -PI[playerid][GlassesPriceThenBuy]);

					if(PropertyInfo[DRABUZIU_PARDUOTUVE][pBuyed])
					{
						PropertyInfo[DRABUZIU_PARDUOTUVE][pProfit] += PI[playerid][GlassesPriceThenBuy];
					}
				}
				else
				{
					SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					RemovePlayerAttachedObject(playerid, SUNGLASSES_ATTACH_SLOT);

					OnPlayerPickUpPickup(playerid, PickupsInfo[AkiniuPirkimas]);
				}
			}
			else
			{
				RemovePlayerAttachedObject(playerid, SUNGLASSES_ATTACH_SLOT);

				OnPlayerPickUpPickup(playerid, PickupsInfo[AkiniuPirkimas]);
			}
		}

		case 7345:
		{
			new SuggExtaziPrice = PI[playerid][rkaina][0];
			new SuggExtaziCount = PI[playerid][rkiekis][0];
			new SuggPlayerid     = ChoosedPlayer[playerid];

			if(SuggPlayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas atsijungë!");

			if(response)
			{
				if(GetPlayerMoneyA(playerid) >= SuggExtaziPrice)
				{
					GivePlayerMoneyA(playerid, -SuggExtaziPrice);
					GivePlayerMoneyA(SuggPlayerid, SuggExtaziPrice);

					SendClientMessage(playerid, -1, "{ffffff} Ekstazi nupirktas!");
					SendClientMessage(SuggPlayerid, -1, "{ffffff} Pardavëte ekstazá!");

					PI[playerid][Ekstazi]     += SuggExtaziCount;
					PI[SuggPlayerid][Ekstazi] -= SuggExtaziCount;

					return 1;
				}
				else
				{
					SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
					SendClientMessage(SuggPlayerid, -1, "{ffffff} Þaidëjui neuþtenka pinigø!");

					return 1;
				}
			}
		}
		case 7344:
		{
			new SuggHeroinePrice = PI[playerid][rkaina][0];
			new SuggHeroineCount = PI[playerid][rkiekis][0];
			new SuggPlayerid     = ChoosedPlayer[playerid];

			if(SuggPlayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas atsijungë!");

			if(response)
			{
				if(GetPlayerMoneyA(playerid) >= SuggHeroinePrice)
				{
					GivePlayerMoneyA(playerid, -SuggHeroinePrice);
					GivePlayerMoneyA(SuggPlayerid, SuggHeroinePrice);

					SendClientMessage(playerid, -1, "{ffffff} Heroinas nupirktas!");
					SendClientMessage(SuggPlayerid, -1, "{ffffff} Pardavëte heroinà!");

					PI[playerid][Heroinas]     += SuggHeroineCount;
					PI[SuggPlayerid][Heroinas] -= SuggHeroineCount;

					return 1;
				}
				else
				{
					SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
					SendClientMessage(SuggPlayerid, -1, "{ffffff} Þaidëjui neuþtenka pinigø!");

					return 1;
				}
			}
		}
		case 7343:
		{
			new SuggCocainePrice = PI[playerid][rkaina][0];
			new SuggCocaineCount = PI[playerid][rkiekis][0];
			new SuggPlayerid     = ChoosedPlayer[playerid];

			if(SuggPlayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas atsijungë!");

			if(response)
			{
				if(GetPlayerMoneyA(playerid) >= SuggCocainePrice)
				{
					GivePlayerMoneyA(playerid, -SuggCocainePrice);
					GivePlayerMoneyA(SuggPlayerid, SuggCocainePrice);

					SendClientMessage(playerid, -1, "{ffffff} Kokainas nupirktas!");
					SendClientMessage(SuggPlayerid, -1, "{ffffff} Pardavëte kokainà!");

					PI[playerid][Kokainas]     += SuggCocaineCount;
					PI[SuggPlayerid][Kokainas] -= SuggCocaineCount;

					return 1;
				}
				else
				{
					SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
					SendClientMessage(SuggPlayerid, -1, "{ffffff} Þaidëjui neuþtenka pinigø!");

					return 1;
				}
			}
		}
		case 7342:
		{
			new SuggWeedPrice = PI[playerid][rkaina][0];
			new SuggWeedCount = PI[playerid][rkiekis][0];
			new SuggPlayerid  = ChoosedPlayer[playerid];

			if(SuggPlayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas atsijungë!");

			if(response)
			{
				if(GetPlayerMoneyA(playerid) >= SuggWeedPrice)
				{
					GivePlayerMoneyA(playerid, -SuggWeedPrice);
					GivePlayerMoneyA(SuggPlayerid, SuggWeedPrice);

					SendClientMessage(playerid, -1, "{ffffff} Þolë nupirkta!");
					SendClientMessage(SuggPlayerid, -1, "{ffffff} Pardavëte þolæ!");

					PI[playerid][Weed]     += SuggWeedCount;
					PI[SuggPlayerid][Weed] -= SuggWeedCount;

					return 1;
				}
				else
				{
					SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
					SendClientMessage(SuggPlayerid, -1, "{ffffff} Þaidëjui neuþtenka pinigø!");

					return 1;
				}
			}
		}
		case PrisijungimoDialogas:
		{
			if(response)
			{
				if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
				new Query[250];

				format(Query, sizeof(Query), "SELECT * FROM `players` WHERE `Vardas` = '%s' AND `Slaptazodis` = '%s'", GetPlayerNameEx(playerid), MD5_Hash(MD5_Hash(inputtext)));
				mysql_query(Query);

				mysql_store_result();

				mysql_retrieve_row();

				if(mysql_num_rows())
				{
					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai {FFAF00}prisijungëte{ffffff} prie savo paskyros!");

					PI[playerid][authstate] = 2;
					PI[playerid][Login]     = 1;
					Logged[playerid]        = true;

					TogglePlayerSpectating 	(playerid, 0);
					SetCameraBehindPlayer	(playerid);
					HideLoginTextdraws 		(playerid);
					SpawnPlayer 			(playerid);
				}
				else
				{
					SendClientMessage(playerid, -1, "{ffffff} Slaptaþodis neteisingas!");

					PrisijungimoLangas(playerid);
				}

				mysql_free_result();
			}

			else IsmestiZaideja(playerid, 100);
		}

		case RegistracijosDialogas:
		{
			if(response)
			{
				new Query[250];

				if(!strlen(inputtext)) return RegistracijosLangas(playerid);

				if(strlen(inputtext) < 6 || strlen(inputtext) > 32)
				{
					RegistracijosLangas(playerid);

					SendClientMessage(playerid, -1, "{ffffff} Slaptaþodis turi susidaryti ið 6 - 32 simboliø!");

					return 1;
				}

				if(strfind(inputtext, "%", true) != -1) return RegistracijosLangas(playerid);

				HideLoginTextdraws (playerid);
				ShowGenderTextdraws(playerid);

				format(Query, sizeof(Query), "INSERT INTO `players` (Vardas, Slaptazodis) VALUES ('%s', '%s')", GetPlayerNameEx(playerid), MD5_Hash(MD5_Hash(inputtext)));
				mysql_query(Query);

				PI[playerid][DeleteAcc] = true;
				Logged[playerid]       	= true;
				PI[playerid][Login]     = 0;
				//rParasePass[playerid] = false

				/*SendClientMessage(playerid, -1, "{ffffff} Jûsø paskyra sëkmingai áraðyta mûsø duomenø bazëje, tæskite registracijà!");
				ShowPlayerDialogEx(playerid, LytiesPasirinkimoDialogas, DIALOG_STYLE_LIST, "Paskyros registracija",
				"{C3E963}Pasirinkite jûsø vartotojo (-os) lytá\n \n1. Vyriðka\n2. Moteriðka", "Pasirinkti", "");*/
			}
			else
			{
				IsmestiZaideja(playerid, 100);
			}
		}

		case LytiesPasirinkimoDialogas:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowPlayerDialogEx(playerid, LytiesPasirinkimoDialogas, DIALOG_STYLE_LIST, "Paskyros registracija", "{ffffff}Pasirinkite jûsø vartotojo (-os) lytá\n \n1. Vyriðka\n2. Moteriðka", "Pasirinkti", "");

					case 1: ShowPlayerDialogEx(playerid, LytiesPasirinkimoDialogas, DIALOG_STYLE_LIST, "Paskyros registracija", "{ffffff}Pasirinkite jûsø vartotojo (-os) lytá\n \n1. Vyriðka\n2. Moteriðka", "Pasirinkti", "");

					case 2:
					{
						PI[playerid][lytis] = 0;

						SendClientMessage(playerid, -1, "{ffffff} Pasirinkote {FFAF00}vyriðkà {ffffff}lytá, dabar spauskite SPAWN!");
					}

					case 3:
					{
						PI[playerid][lytis] = 1;

						SendClientMessage(playerid, -1, "{ffffff} Pasirinkote {FFAF00}moteriðkà {ffffff}lytá, dabar spauskite SPAWN!");
					}
				}

				Logged[playerid]        = true;
				PI[playerid][authstate] = 0;
				PI[playerid][DeleteAcc] = true;
			}

			else IsmestiZaideja(playerid, 100);
		}

		case 1050:
		{
			if(response)
			{
				AC_SetPlayerPos(playerid, -2047.8503,131.9576,29.1750);
			}
		}
		case 1030:
		{
			if(response)
			{
				if(PI[playerid][Salmas] == 1) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite ðalmà!");

				if(GetPlayerMoneyA(playerid) < 300) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

				PI[playerid][Salmas] = 1;

				GivePlayerMoneyA(playerid, -300);

				SendClientMessage(playerid, -1, "{ffffff} Nusipirkote ðalmà, já uþsidëti/nusiimti galite paraðæ {FFAF00} /salmas{ffffff}!");
			}
		}

		case 457:
		{
			if(response)
			{
				switch(PI[playerid][KelintaMisija])
				{
					case 0:
					{
						if(GetPlayerScore(playerid) < 300) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek EXP!");

						GivePlayerMoneyA(playerid, 500);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 1:
					{
						if(PI[playerid][specialybe] < 1) return SendClientMessage(playerid, -1, "{ffffff} Jus niekur nedirbate!");

						GivePlayerExperience(playerid, 50);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 2:
					{
						if(PI[playerid][alga] < 1000) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek pinigø algoje!");

						GivePlayerMoneyA(playerid, 800);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 3:
					{
						if(PI[playerid][teises] == false) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite visø teisiø!");
						if(PI[playerid][Mteises] == false) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite visø teisiø!");
						if(PI[playerid][FTeises] == false) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite visø teisiø!");

						GivePlayerExperience(playerid, 100);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 4:
					{
						if(PI[playerid][prazaide] < 90) return SendClientMessage(playerid, -1, "{ffffff} Jus dar tiek nepraþaidëte!");

						new krd = HowMuchHaveCredits(GetPlayerNameEx(playerid));

						krd += 10;

						new bQuery[185];

						format(bQuery, 185, "UPDATE `players` SET Kreditai = '%d' WHERE Vardas = '%s'", krd, GetPlayerNameEx(playerid));
						mysql_query(bQuery);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 5:
					{
						if(PI[playerid][KiekTuriRepTasku] < 10) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek +REP!");

						GivePlayerMoneyA(playerid, 1000);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 6:
					{
						if(GetPlayerMoneyA(playerid) < 10000) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek pinigø!");

						GivePlayerExperience(playerid, 150);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 7:
					{
						if(PI[playerid][Transportas1] == -1 && PI[playerid][Transportas2] == -1 && PI[playerid][Transportas3] == -1)
						return SendClientMessage(playerid, -1, "{ffffff} Jus neturite nuosavos transp. priemonës!");

						new krd = HowMuchHaveCredits(GetPlayerNameEx(playerid));

						krd += 20;

						new bQuery[185];

						format(bQuery, 185, "UPDATE `players` SET Kreditai = '%d' WHERE Vardas = '%s'", krd, GetPlayerNameEx(playerid));
						mysql_query(bQuery);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 8:
					{
						if(GetPlayerScore(playerid) < 3000) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek EXP!");

						GivePlayerMoneyA(playerid, 2000);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 9:
					{
						if(PI[playerid][alga] < 5000) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek pinigø algoje!");

						GivePlayerExperience(playerid, 200);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 10:
					{
						if(PI[playerid][KiekTuriRepTasku] < 30) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek +REP!");

						new krd = HowMuchHaveCredits(GetPlayerNameEx(playerid));

						krd += 30;

						new bQuery[185];

						format(bQuery, 185, "UPDATE `players` SET Kreditai = '%d' WHERE Vardas = '%s'", krd, GetPlayerNameEx(playerid));
						mysql_query(bQuery);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 11:
					{
						if(PlayerHaveHouse(playerid) == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite nuosavo namo!");

						GivePlayerMoneyA(playerid, 5000);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 12:
					{
						if(PlayerHaveProperty(playerid) == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite verslo!");

						GivePlayerMoneyA(playerid, 10000);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 13:
					{
						if(PI[playerid][pavdrk] < 1) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate jokio darbo pavaduotojas!");

						new krd = HowMuchHaveCredits(GetPlayerNameEx(playerid));

						krd += 40;

						new bQuery[185];

						format(bQuery, 185, "UPDATE `players` SET Kreditai = '%d' WHERE Vardas = '%s'", krd, GetPlayerNameEx(playerid));
						mysql_query(bQuery);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 14:
					{
						if(PI[playerid][plead] < 1) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate jokio darbo direktorius!");

						new krd = HowMuchHaveCredits(GetPlayerNameEx(playerid));

						krd += 50;

						new bQuery[185];

						format(bQuery, 185, "UPDATE `players` SET Kreditai = '%d' WHERE Vardas = '%s'", krd, GetPlayerNameEx(playerid));
						mysql_query(bQuery);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 15:
					{
						if(PI[playerid][Transportas1] == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite trijø nuosavø transp. priemoniø!");
						if(PI[playerid][Transportas2] == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite trijø nuosavø transp. priemoniø!");
						if(PI[playerid][Transportas3] == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite trijø nuosavø transp. priemoniø!");

						GivePlayerExperience(playerid, 250);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 16:
					{
						if(GetPlayerMoneyA(playerid) < 100000) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek pinigø!");

						PI[playerid][KiekTuriRepTasku] += 20;

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 17:
					{
						if(GetPlayerScore(playerid) < 8000) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek EXP!");

						GivePlayerMoneyA(playerid, 12000);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 18:
					{
						if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return SendClientMessage(playerid, -1, "{ffffff} Jus nedirbate teisësaugoje!");

						GivePlayerExperience(playerid, 300);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 19:
					{
						if(PI[playerid][KiekTuriRepTasku] < 100) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek +REP!");

						new krd = HowMuchHaveCredits(GetPlayerNameEx(playerid));

						krd += 60;

						new bQuery[185];

						format(bQuery, 185, "UPDATE `players` SET Kreditai = '%d' WHERE Vardas = '%s'", krd, GetPlayerNameEx(playerid));
						mysql_query(bQuery);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 20:
					{
						if(PI[playerid][alga] < 70000) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek pinigø algoje!");

						PI[playerid][KiekTuriRepTasku] += 30;

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 21:
					{
						if(PI[playerid][gMember] == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neesate gaujoje!");

						GivePlayerExperience(playerid, 350);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 22:
					{
						if(PI[playerid][prazaide] < 300) return SendClientMessage(playerid, -1, "{ffffff} Jus dar tiek nepraþaidëte!");

						new krd = HowMuchHaveCredits(GetPlayerNameEx(playerid));

						krd += 70;

						new bQuery[185];

						format(bQuery, 185, "UPDATE `players` SET Kreditai = '%d' WHERE Vardas = '%s'", krd, GetPlayerNameEx(playerid));
						mysql_query(bQuery);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 23:
					{
						if(GetPlayerScore(playerid) < 20000) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek EXP!");

						GivePlayerMoneyA(playerid, 14000);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Misija ávykdyta, dabar gali vykdyti kità!");
					}

					case 24:
					{
						if(GetPlayerMoneyA(playerid) < 1000000) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek pinigø!");

						GivePlayerExperience(playerid, 1000);

						PI[playerid][KelintaMisija] ++;

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, ávykdei visas misijas, bet jos gali bûti pildomos!!");
					}
				}
			}
		}

		case 253:
		{
			if(response)
			{
				AC_SetPlayerPos      (playerid, -1952.1302, 195.0124, 27.67119);
				SetPlayerFacingAngle (playerid, 90.0000);
				UzsaldytiZaideja     (playerid, 2000);
				SetCameraBehindPlayer(playerid);
			}
		}

		/*case 8412:
		{
			if(response)
			{
				new String[2048];

				strcat(String, "{FFAF00} /eheal {ffffff}- pagydysite visus ðalia esanèius þaidëjus\n");
				strcat(String, "{FFAF00} /egun {ffffff}- duosite ginklø visiems ðalia esantiems þaidëjams\n");
				strcat(String, "{FFAF00} /eventcar {ffffff}- event transporto valdymas\n");
				strcat(String, "{ffffff} Taip pat jus gausite 1.5x daugiau patirties taðkø bei algos");

				ShowPlayerDialogEx(playerid, 8412, DIALOG_STYLE_MSGBOX, "Administratoriaus komandos", String, "", "Uþdaryti");
			}
		}*/

		case 8700:
		{
			if(response)
			{
				new String[2048];

				strcat(String, "{FFAF00} /adminwarn {ffffff}- uþdësite administratoriui áspëjimà ({FFAF00}3 {ffffff}áspëjimai - netenka pareigø)\n");
				strcat(String, "{FFAF00} /adminunwarn {ffffff}- nuimsite administratoriui áspëjimà\n");
				strcat(String, "{FFAF00} /pinigai {ffffff}- suþinosite kiek þaidëjas turi pinigø\n");
				//strcat(String, "{FFAF00} /tpnascar {ffffff}- nusiteliportuosite á NASCAR eventà\n");
				//strcat(String, "{FFAF00} /skirtiversla {ffffff}- paskirsite þaidëjui verslà\n");
				//strcat(String, "{FFAF00} /nuimtiversla {ffffff}- nuimsite þaidëjui verslà\n");
				//strcat(String, "{FFAF00} /verslopelnas {ffffff}- nustatysite verslo pelnà\n");

				ShowPlayerDialogEx(playerid, 8700, DIALOG_STYLE_MSGBOX, "Administratoriaus komandos", String, "", "Uþdaryti");
			}
		}

		case 8699:
		{
			if(response)
			{
				new String[2048];

				strcat(String, "{FFAF00} /boom {ffffff}- susprogdinsite darbine transp. priemonæ\n");
				strcat(String, "{FFAF00} /kick {ffffff}- iðmesite þaidëjà ið serverio\n");
				strcat(String, "{FFAF00} /ac {ffffff}- paraðysite á administratoriø pokalbá\n");
				strcat(String, "{FFAF00} /tpm1 {ffffff}- nusiteliportuosite prie pirmosios transp. priemonës\n");
				strcat(String, "{FFAF00} /tpm2 {ffffff}- nusiteliportuosite prie antrosios transp. priemonës\n");
				strcat(String, "{FFAF00} /tpm3 {ffffff}- nusiteliportuosite prie treèiosios transp. priemonës\n");
				strcat(String, "{FFAF00} /takew {ffffff}- atimsite þaidëjui ginklus\n");
				strcat(String, "{FFAF00} /freeze {ffffff}- uþðaldysite þaidëjà\n");
				strcat(String, "{FFAF00} /unfreeze {ffffff}- atðaldysite þaidëjà\n");
				strcat(String, "{FFAF00} /kill {ffffff}- nuþudysite þaidëjà\n");
				strcat(String, "{FFAF00} /pildyti {ffffff}- pripildysite degalø á transp. priemonæ\n");
				strcat(String, "{FFAF00} /heal {ffffff}- pagydysite þaidëjà\n");
				strcat(String, "{FFAF00} /unmute {ffffff}- atitildisitë þaidëjà\n");
				strcat(String, "{FFAF00} /makemoney {ffffff}- duosite þaidëjui pinigø\n");
				strcat(String, "{FFAF00} /setlevel {ffffff}- paskirsite þaidëjui admin lygá\n");
				strcat(String, "{FFAF00} /tele {ffffff}- teleportai á pasirinktas vietas\n");
				strcat(String, "{FFAF00} /jetpack {ffffff}- pasiimsite jet-pack'à\n");
				strcat(String, "{FFAF00} /eheal {ffffff}- pagydysite visus ðalia esanèius þaidëjus\n");
				strcat(String, "{FFAF00} /egun {ffffff}- duosite ginklø visiems ðalia esantiems þaidëjams\n");
				//strcat(String, "{FFAF00} /bausmes {ffffff}- uþ kà ir kiek reikia dëti áspëjimus þaidëjui (sàraðas gali bûti pildomas)\n");
				strcat(String, "{FFAF00} /gdestroy {ffffff}- sunaikinsite norimà gaujà\n");

				ShowPlayerDialogEx(playerid, 8700, DIALOG_STYLE_MSGBOX, "Administratoriaus komandos", String, "3 psl", "Uþdaryti");
			}
		}

		case 8696:
		{
			switch(listitem)
			{
				case 0:
				{
					if(response)
					{
						new String[216];

						format(String, sizeof(String), "Administratoriø fonde yra: {FFAF00}$%s\n1. Padëti pinigø á fondà\n2. Pasiimti pinigø ið fondo", konvertuoti_pinigus(afondas));
						ShowPlayerDialogEx(playerid, 8696, DIALOG_STYLE_MSGBOX, "Administratoriø fondas", String, "Pasirinkti", "Uþdaryti");
					}
				}

				case 1:
				{
					if(response)
					{
						ShowPlayerDialogEx(playerid, 8697, DIALOG_STYLE_INPUT, "Administratoriø fondas", "{FFFFFF}Áveskite pinigø sumà, kurià norite padëti á administratoriø fondà:", "Padëti", "Uþdaryti");
					}
				}

				case 2:
				{
					if(response)
					{
						ShowPlayerDialogEx(playerid, 8698, DIALOG_STYLE_INPUT, "Administratoriø fondas", "{FFFFFF}Áveskite pinigø sumà, kurià norite paimti ið administratoriø fondo:", "Paimti", "Uþdaryti");
					}
				}
			}
		}

		case 8697:
		{
			if(response)
			{
				if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

				if(IsNumeric(inputtext) || strval(inputtext) > 1)
				{
					new String[216];

					if(GetPlayerMoneyA(playerid) < strval(inputtext)) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}padëjo {FFAF00}$%s {ffffff}á administratoriø fondà!", GetPlayerNameEx(playerid), konvertuoti_pinigus(strval(inputtext)));
					SendMessageToAdmins(String);

					GivePlayerMoneyA(playerid, -strval(inputtext));

					afondas += strval(inputtext);

					mysql_query("SELECT * FROM `sinfo`");

					mysql_store_result();

					if(mysql_num_rows())
					{
						format(String, sizeof(String), "UPDATE `sinfo` SET `AdminFondas` = '%d'", afondas);
						mysql_query(String);
					}
					else
					{
						format(String, sizeof(String), "INSERT INTO `sinfo` (AdminFondas) VALUES ( '%d')", afondas);
						mysql_query(String);
					}

					mysql_free_result();
				}
			}
		}

		case 8698:
		{
			if(response)
			{
				if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

				if(IsNumeric(inputtext) || strval(inputtext) > 1)
				{
					new String[216];

					if(afondas < strval(inputtext)) return SendClientMessage(playerid, -1, "{ffffff} Administratoriø fonde nëra tiek pinigø!");

					if(PI[playerid][FondoPinigai] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Pinigus ið administratoriø fondo galima imti tik kas 1 valandà!");

					if(PI[playerid][AdminLevel] < LEVEL_OWNER)
					{
						if(strval(inputtext) > 10000) return SendClientMessage(playerid, -1, "{ffffff} Daugiau nei {FFAF00}$10,000 {ffffff}paimti negali!");
					}

					format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}pasiëme {FFAF00}$%s {ffffff}ið administratoriø fondo!", GetPlayerNameEx(playerid), konvertuoti_pinigus(strval(inputtext)));
					SendMessageToAdmins(String);

					GivePlayerMoneyA(playerid, strval(inputtext));

					PI[playerid][FondoPinigai] = gettime() + 3600;

					afondas -= strval(inputtext);

					mysql_query("SELECT * FROM `sinfo`");

					mysql_store_result();

					if(mysql_num_rows())
					{
						format(String, sizeof(String), "UPDATE `sinfo` SET `AdminFondas` = '%d'", afondas);
						mysql_query(String);
					}
					else
					{
						format(String, sizeof(String), "INSERT INTO `sinfo` (AdminFondas) VALUES ( '%d')", afondas);
						mysql_query(String);
					}

					mysql_free_result();
				}
			}
		}

		case 5589:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new String[1024], Stringas[1024];

						strcat(Stringas, "{ffffff} Raktaþodis\t\tVardas_Pavardë\tGaunamø kreditø kiekis\tKaina\n \n");
						format(String, sizeof(String), "{ffffff}MetroCity.lt1\t\t%s\t\t100\t\t\t\t1.00 EUR\n", GetPlayerNameEx(playerid)); strcat(Stringas, String);
						format(String, sizeof(String), "{ffffff}MetroCity.lt2\t\t%s\t\t200\t\t\t\t2.00 EUR\n", GetPlayerNameEx(playerid)); strcat(Stringas, String);
						format(String, sizeof(String), "{ffffff}MetroCity.lt3\t\t%s\t\t300\t\t\t\t3.00 EUR\n", GetPlayerNameEx(playerid)); strcat(Stringas, String);
						format(String, sizeof(String), "{ffffff}MetroCity.lt4\t\t%s\t\t400\t\t\t\t4.00 EUR\n \n", GetPlayerNameEx(playerid)); strcat(Stringas, String);
						format(String, sizeof(String), "{ffffff} Pavyzdys: \t\tMetroCity.lt4 %s\nNumeris: \t\t1398\n \n", GetPlayerNameEx(playerid)); strcat(Stringas, String);
						format(String, sizeof(String), "{ffffff}PERKANT KREDITUS BANKU, GAUNASI 50% PIGIAU!\n", GetPlayerNameEx(playerid)); strcat(Stringas, String);
						format(String, sizeof(String), "{ffffff}PLAÈIAU: http://www.MetroCity.lt/paslaugos\n", GetPlayerNameEx(playerid)); strcat(Stringas, String);

						ShowPlayerDialogEx(playerid, 5198, DIALOG_STYLE_MSGBOX, "Paslaugø uþsakymas", Stringas, "Uþdaryti", "");
					}

					case 1:
					{
						new String[2048], CreditsString[216], Credits, Query[128];

						format(Query, sizeof(Query), "SELECT * FROM `players` WHERE `Vardas` = '%s'", GetPlayerNameEx(playerid));
						mysql_query(Query);

						mysql_store_result();

						mysql_retrieve_row();

						if(mysql_num_rows())
						{
							mysql_fetch_field_row(Query, "Kreditai"); Credits = strval(Query);
						}

						mysql_free_result();

						format(CreditsString, sizeof(CreditsString), "{ffffff}Jus turite {FFAF00}%d{ffffff} kreditø (-us)", Credits);

						strcat(String, "Pasirinkimas\tKaina kreditais\n");
						strcat(String, "1. VIP statusas\t{FFAF00}"#VipPrice"\n");
						strcat(String, "2. I lygio administratoriaus statusas\t{FFAF00}"#FirstLevelAdminPrice"\n");
						strcat(String, "3. II lygio administratoriaus statusas\t{FFAF00}"#SecondLevelAdminPrice"\n");
						strcat(String, "3. III lygio administratoriaus statusas\t{FFAF00}"#SSecondLevelAdminPrice"\n");
						strcat(String, "4. 700 patirties taðkø\t{FFAF00}"#FirstExperiencePrice"\n");
						strcat(String, "5. 1.600 patirties taðkø\t{FFAF00}"#SecondExperiencePrice"\n");
						strcat(String, "6. 3.500 patirties taðkø\t{FFAF00}"#ThirdExperiencePrice"\n");
						strcat(String, "7. Iðëjimas ið kalëjimo anksèiau laiko\t{FFAF00}"#UnjailPrice"\n");
						strcat(String, "8. VIP statuso áspëjimø nusiëmimas\t{FFAF00}"#VipWarnsPrice"\n");
						strcat(String, "9. Admin statuso áspëjimø nusiëmimas\t{FFAF00}"#AdminWarnsPrice"\n");
						strcat(String, "10. Ieðkomumo lygiø nusiëmimas\t{FFAF00}"#WantedLevelPrice"\n");
						strcat(String, "11. Visø kategorijø vairavimo teisës\t{FFAF00}"#AllCategoryLicensesPrice"\n");
						strcat(String, "12. Ginklø licenzija\t{FFAF00}"#GunLicensesPrice"\n");
						strcat(String, "13. Algos pirkimas + $50/mën\t{FFAF00}"#JobProfitUpgrade"\n");
						strcat(String, "14. 3 transporto slotas\t{FFAF00}"#ThirdOwnCarPrice"\n");
						strcat(String, "15. $15,000 serverio pinigø\t{FFAF00}"#FirstMoneyPrice"\n");
						strcat(String, "16. Ginklø paketas\t{FFAF00}"#GunPacketPrice"\n");
						strcat(String, "17. Narkotikø paketas\t{FFAF00}"#DrugsPacketPrice"\n");

						ShowPlayerDialogEx(playerid, 5591, DIALOG_STYLE_TABLIST_HEADERS, CreditsString, String, "Uþsakyti", "Uþdaryti");
					}

					case 2:
					{
						new String[500];

						strcat(String, "Pavadinimas\tID\tKaina kreditais\n");
						strcat(String, "1. Hustler\t{FFAF00}545\t{FFAF00}900\n");
						strcat(String, "2. Bandito\t{FFAF00}568\t{FFAF00}1,500\n");
						strcat(String, "3. Sandking\t{FFAF00}495\t{FFAF00}2,000\n");
						strcat(String, "4. Hotknife\t{FFAF00}434\t{FFAF00}1,200\n");
						strcat(String, "5. Tractor\t{FFAF00}531\t{FFAF00}700");

						ShowPlayerDialogEx(playerid, 5592, DIALOG_STYLE_TABLIST_HEADERS, "Retø tr. priemoniø pirkimas", String, "Pirkti", "Uþdaryti");
					}
				}
			}
		}

		case 5592:
		{
			new iRandom = random(sizeof(RandomSalonoSpawn));

			if(response)
			{
				new String[150], Credits = HowMuchHaveCredits(GetPlayerNameEx(playerid));

				switch(listitem)
				{
					case 0:
					{
						if(Credits == -1) return 1;

						if(Credits < 900) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà retà tr. priemonæ!");

						if(PI[playerid][Transportas1] != -1 && PI[playerid][Transportas2] != -1)
			        	{
			        		if(!PI[playerid][TransportoSlotas])
					        {
			        			SendClientMessage	(playerid, -1, "{ffffff} Treèio transporto slotà galite ásigyti paraðæ /paslaugos!");

					        	return 1;
					        }
					        else
					        {
					        	if(PI[playerid][Transportas3] != -1)
					        	{
					        		SendClientMessage	(playerid, -1, "{ffffff} Jus jau turite 3 transp. priemones!");

					        		return 1;
					        	}
					        }
			        	}

			   	        new Colors[2];

			   	        Colors[0] = random(126);
			   	        Colors[1] = random(126);

			   	        if(PI[playerid][Transportas1] == -1)
			   	        {
			   	        	Credits -= 900;

			   	        	format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
							mysql_query(String);

				        	PI[playerid][Transportas1] = AC_CreateVehicle(545, RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);

			   	        	new vehicleid = PI[playerid][Transportas1];

			   	        	ac_SetVehicleToRespawn(vehicleid);

			   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
							format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
							format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

							for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

							VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
							VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
							VehicleInfo[vehicleid][vPaintjob] 	= -1;
							VehicleInfo[vehicleid][vUzraktas] 	= true;
							VehicleInfo[vehicleid][vNupirkta] 	= true;
							VehicleInfo[vehicleid][vRida] 		= 0.0;
							VehicleInfo[vehicleid][vSprogusi]  	= false;
							VehicleInfo[vehicleid][vDujos]		= false;
							VehicleInfo[vehicleid][vIjungta]	= false;
							VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
							VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
							VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
							VehicleInfo[vehicleid][vTA]			= 0;

							for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
							{
								VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
								VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
							}

							SetVehicleFuelInfo(vehicleid);

							SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
							SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

							SavePlayerVehicle1(playerid);

							SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote retà tr. priemonæ. Jà rasite maðinø salono aikðtelëje!");

			   	        	return 1;
			   	        }

			   	        if(PI[playerid][Transportas2] == -1)
			   	        {
			   	        	Credits -= 900;

			   	        	format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
							mysql_query(String);

			   	        	PI[playerid][Transportas2] = AC_CreateVehicle(545, RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);

			   	        	new vehicleid = PI[playerid][Transportas2];

			   	        	ac_SetVehicleToRespawn(vehicleid);

			   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
							format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
							format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

							for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

							VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
							VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
							VehicleInfo[vehicleid][vPaintjob] 	= -1;
							VehicleInfo[vehicleid][vUzraktas] 	= true;
							VehicleInfo[vehicleid][vNupirkta] 	= true;
							VehicleInfo[vehicleid][vRida] 		= 0.0;
							VehicleInfo[vehicleid][vSprogusi]  	= false;
							VehicleInfo[vehicleid][vDujos]		= false;
							VehicleInfo[vehicleid][vIjungta]	= false;
							VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
							VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
							VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
							VehicleInfo[vehicleid][vTA]			= 0;

							for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
							{
								VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
								VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
							}

							SetVehicleFuelInfo(vehicleid);

							SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
							SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

							SavePlayerVehicle2(playerid);

							SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote retà tr. priemonæ. Jà rasite maðinø salono aikðtelëje!");

			   	        	return 1;
			   	        }

			   	        if(PI[playerid][Transportas3] == -1)
			   	        {
			   	        	Credits -= 900;

			   	        	format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
							mysql_query(String);

			   	        	PI[playerid][Transportas3] = AC_CreateVehicle(545, RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);

			   	        	new vehicleid = PI[playerid][Transportas3];

			   	        	ac_SetVehicleToRespawn(vehicleid);

			   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
							format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
							format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

							for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

							VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
							VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
							VehicleInfo[vehicleid][vPaintjob] 	= -1;
							VehicleInfo[vehicleid][vUzraktas] 	= true;
							VehicleInfo[vehicleid][vNupirkta] 	= true;
							VehicleInfo[vehicleid][vRida] 		= 0.0;
							VehicleInfo[vehicleid][vSprogusi]  	= false;
							VehicleInfo[vehicleid][vDujos]		= false;
							VehicleInfo[vehicleid][vIjungta]	= false;
							VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
							VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
							VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
							VehicleInfo[vehicleid][vTA]			= 0;

							for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
							{
								VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
								VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
							}

							SetVehicleFuelInfo(vehicleid);

							SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
							SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

							SavePlayerVehicle3(playerid);

							SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote retà tr. priemonæ. Jà rasite maðinø salono aikðtelëje!");

			   	        	return 1;
			   	        }
					}

					case 1:
					{
						if(Credits == -1) return 1;

						if(Credits < 1500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà retà tr. priemonæ!");

						if(PI[playerid][Transportas1] != -1 && PI[playerid][Transportas2] != -1)
			        	{
			        		if(!PI[playerid][TransportoSlotas])
					        {
			        			SendClientMessage	(playerid, -1, "{ffffff} Treèio transporto slotà galite ásigyti paraðæ /paslaugos!");

					        	return 1;
					        }
					        else
					        {
					        	if(PI[playerid][Transportas3] != -1)
					        	{
					        		SendClientMessage	(playerid, -1, "{ffffff} Jus jau turite 3 transp. priemones!");

					        		return 1;
					        	}
					        }
			        	}

			   	        new Colors[2];

			   	        Colors[0] = random(126);
			   	        Colors[1] = random(126);

			   	        if(PI[playerid][Transportas1] == -1)
			   	        {
			   	        	Credits -= 1500;

			   	        	format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
							mysql_query(String);

				        	PI[playerid][Transportas1] = AC_CreateVehicle(568, RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);

			   	        	new vehicleid = PI[playerid][Transportas1];

			   	        	ac_SetVehicleToRespawn(vehicleid);

			   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
							format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
							format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

							for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

							VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
							VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
							VehicleInfo[vehicleid][vPaintjob] 	= -1;
							VehicleInfo[vehicleid][vUzraktas] 	= true;
							VehicleInfo[vehicleid][vNupirkta] 	= true;
							VehicleInfo[vehicleid][vRida] 		= 0.0;
							VehicleInfo[vehicleid][vSprogusi]  	= false;
							VehicleInfo[vehicleid][vDujos]		= false;
							VehicleInfo[vehicleid][vIjungta]	= false;
							VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
							VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
							VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
							VehicleInfo[vehicleid][vTA]			= 0;

							for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
							{
								VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
								VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
							}

							SetVehicleFuelInfo(vehicleid);

							SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
							SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

							SavePlayerVehicle1(playerid);

							SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote retà tr. priemonæ. Jà rasite maðinø salono aikðtelëje!");

			   	        	return 1;
			   	        }

			   	        if(PI[playerid][Transportas2] == -1)
			   	        {
			   	        	Credits -= 1500;

			   	        	format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
							mysql_query(String);

			   	        	PI[playerid][Transportas2] = AC_CreateVehicle(568, RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);

			   	        	new vehicleid = PI[playerid][Transportas2];

			   	        	ac_SetVehicleToRespawn(vehicleid);

			   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
							format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
							format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

							for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

							VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
							VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
							VehicleInfo[vehicleid][vPaintjob] 	= -1;
							VehicleInfo[vehicleid][vUzraktas] 	= true;
							VehicleInfo[vehicleid][vNupirkta] 	= true;
							VehicleInfo[vehicleid][vRida] 		= 0.0;
							VehicleInfo[vehicleid][vSprogusi]  	= false;
							VehicleInfo[vehicleid][vDujos]		= false;
							VehicleInfo[vehicleid][vIjungta]	= false;
							VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
							VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
							VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
							VehicleInfo[vehicleid][vTA]			= 0;

							for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
							{
								VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
								VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
							}

							SetVehicleFuelInfo(vehicleid);

							SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
							SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

							SavePlayerVehicle2(playerid);

							SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote retà tr. priemonæ. Jà rasite maðinø salono aikðtelëje!");

			   	        	return 1;
			   	        }

			   	        if(PI[playerid][Transportas3] == -1)
			   	        {
			   	        	Credits -= 1500;

			   	        	format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
							mysql_query(String);

			   	        	PI[playerid][Transportas3] = AC_CreateVehicle(568, RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);

			   	        	new vehicleid = PI[playerid][Transportas3];

			   	        	ac_SetVehicleToRespawn(vehicleid);

			   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
							format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
							format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

							for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

							VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
							VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
							VehicleInfo[vehicleid][vPaintjob] 	= -1;
							VehicleInfo[vehicleid][vUzraktas] 	= true;
							VehicleInfo[vehicleid][vNupirkta] 	= true;
							VehicleInfo[vehicleid][vRida] 		= 0.0;
							VehicleInfo[vehicleid][vSprogusi]  	= false;
							VehicleInfo[vehicleid][vDujos]		= false;
							VehicleInfo[vehicleid][vIjungta]	= false;
							VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
							VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
							VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
							VehicleInfo[vehicleid][vTA]			= 0;

							for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
							{
								VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
								VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
							}

							SetVehicleFuelInfo(vehicleid);

							SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
							SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

							SavePlayerVehicle3(playerid);

							SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote retà tr. priemonæ. Jà rasite maðinø salono aikðtelëje!");

			   	        	return 1;
			   	        }
					}

					case 2:
					{
						if(Credits == -1) return 1;

						if(Credits < 2000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà retà tr. priemonæ!");

						if(PI[playerid][Transportas1] != -1 && PI[playerid][Transportas2] != -1)
			        	{
			        		if(!PI[playerid][TransportoSlotas])
					        {
			        			SendClientMessage	(playerid, -1, "{ffffff} Treèio transporto slotà galite ásigyti paraðæ /paslaugos!");

					        	return 1;
					        }
					        else
					        {
					        	if(PI[playerid][Transportas3] != -1)
					        	{
					        		SendClientMessage	(playerid, -1, "{ffffff} Jus jau turite 3 transp. priemones!");

					        		return 1;
					        	}
					        }
			        	}

			   	        new Colors[2];

			   	        Colors[0] = random(126);
			   	        Colors[1] = random(126);

			   	        if(PI[playerid][Transportas1] == -1)
			   	        {
			   	        	Credits -= 2000;

			   	        	format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
							mysql_query(String);

				        	PI[playerid][Transportas1] = AC_CreateVehicle(495, RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);

			   	        	new vehicleid = PI[playerid][Transportas1];

			   	        	ac_SetVehicleToRespawn(vehicleid);

			   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
							format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
							format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

							for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

							VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
							VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
							VehicleInfo[vehicleid][vPaintjob] 	= -1;
							VehicleInfo[vehicleid][vUzraktas] 	= true;
							VehicleInfo[vehicleid][vNupirkta] 	= true;
							VehicleInfo[vehicleid][vRida] 		= 0.0;
							VehicleInfo[vehicleid][vSprogusi]  	= false;
							VehicleInfo[vehicleid][vDujos]		= false;
							VehicleInfo[vehicleid][vIjungta]	= false;
							VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
							VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
							VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
							VehicleInfo[vehicleid][vTA]			= 0;

							for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
							{
								VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
								VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
							}

							SetVehicleFuelInfo(vehicleid);

							SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
							SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

							SavePlayerVehicle1(playerid);

							SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote retà tr. priemonæ. Jà rasite maðinø salono aikðtelëje!");

			   	        	return 1;
			   	        }

			   	        if(PI[playerid][Transportas2] == -1)
			   	        {
			   	        	Credits -= 2000;

			   	        	format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
							mysql_query(String);

			   	        	PI[playerid][Transportas2] = AC_CreateVehicle(495, RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);

			   	        	new vehicleid = PI[playerid][Transportas2];

			   	        	ac_SetVehicleToRespawn(vehicleid);

			   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
							format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
							format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

							for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

							VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
							VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
							VehicleInfo[vehicleid][vPaintjob] 	= -1;
							VehicleInfo[vehicleid][vUzraktas] 	= true;
							VehicleInfo[vehicleid][vNupirkta] 	= true;
							VehicleInfo[vehicleid][vRida] 		= 0.0;
							VehicleInfo[vehicleid][vSprogusi]  	= false;
							VehicleInfo[vehicleid][vDujos]		= false;
							VehicleInfo[vehicleid][vIjungta]	= false;
							VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
							VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
							VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
							VehicleInfo[vehicleid][vTA]			= 0;

							for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
							{
								VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
								VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
							}

							SetVehicleFuelInfo(vehicleid);

							SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
							SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

							SavePlayerVehicle2(playerid);

							SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote retà tr. priemonæ. Jà rasite maðinø salono aikðtelëje!");

			   	        	return 1;
			   	        }

			   	        if(PI[playerid][Transportas3] == -1)
			   	        {
			   	        	Credits -= 2000;

			   	        	format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
							mysql_query(String);

			   	        	PI[playerid][Transportas3] = AC_CreateVehicle(495, RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);

			   	        	new vehicleid = PI[playerid][Transportas3];

			   	        	ac_SetVehicleToRespawn(vehicleid);

			   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
							format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
							format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

							for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

							VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
							VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
							VehicleInfo[vehicleid][vPaintjob] 	= -1;
							VehicleInfo[vehicleid][vUzraktas] 	= true;
							VehicleInfo[vehicleid][vNupirkta] 	= true;
							VehicleInfo[vehicleid][vRida] 		= 0.0;
							VehicleInfo[vehicleid][vSprogusi]  	= false;
							VehicleInfo[vehicleid][vDujos]		= false;
							VehicleInfo[vehicleid][vIjungta]	= false;
							VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
							VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
							VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
							VehicleInfo[vehicleid][vTA]			= 0;

							for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
							{
								VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
								VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
							}

							SetVehicleFuelInfo(vehicleid);

							SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
							SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

							SavePlayerVehicle3(playerid);

							SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote retà tr. priemonæ. Jà rasite maðinø salono aikðtelëje!");

			   	        	return 1;
			   	        }
					}

					case 3:
					{
						if(Credits == -1) return 1;

						if(Credits < 1200) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà retà tr. priemonæ!");

						if(PI[playerid][Transportas1] != -1 && PI[playerid][Transportas2] != -1)
			        	{
			        		if(!PI[playerid][TransportoSlotas])
					        {
			        			SendClientMessage	(playerid, -1, "{ffffff} Treèio transporto slotà galite ásigyti paraðæ /paslaugos!");

					        	return 1;
					        }
					        else
					        {
					        	if(PI[playerid][Transportas3] != -1)
					        	{
					        		SendClientMessage	(playerid, -1, "{ffffff} Jus jau turite 3 transp. priemones!");

					        		return 1;
					        	}
					        }
			        	}

			   	        new Colors[2];

			   	        Colors[0] = random(126);
			   	        Colors[1] = random(126);

			   	        if(PI[playerid][Transportas1] == -1)
			   	        {
			   	        	Credits -= 1200;

			   	        	format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
							mysql_query(String);

				        	PI[playerid][Transportas1] = AC_CreateVehicle(434, RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);

			   	        	new vehicleid = PI[playerid][Transportas1];

			   	        	ac_SetVehicleToRespawn(vehicleid);

			   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
							format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
							format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

							for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

							VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
							VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
							VehicleInfo[vehicleid][vPaintjob] 	= -1;
							VehicleInfo[vehicleid][vUzraktas] 	= true;
							VehicleInfo[vehicleid][vNupirkta] 	= true;
							VehicleInfo[vehicleid][vRida] 		= 0.0;
							VehicleInfo[vehicleid][vSprogusi]  	= false;
							VehicleInfo[vehicleid][vDujos]		= false;
							VehicleInfo[vehicleid][vIjungta]	= false;
							VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
							VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
							VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
							VehicleInfo[vehicleid][vTA]			= 0;

							for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
							{
								VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
								VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
							}

							SetVehicleFuelInfo(vehicleid);

							SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
							SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

							SavePlayerVehicle1(playerid);

							SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote retà tr. priemonæ. Jà rasite maðinø salono aikðtelëje!");

			   	        	return 1;
			   	        }

			   	        if(PI[playerid][Transportas2] == -1)
			   	        {
			   	        	Credits -= 1200;

			   	        	format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
							mysql_query(String);

			   	        	PI[playerid][Transportas2] = AC_CreateVehicle(434, RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);

			   	        	new vehicleid = PI[playerid][Transportas2];

			   	        	ac_SetVehicleToRespawn(vehicleid);

			   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
							format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
							format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

							for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

							VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
							VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
							VehicleInfo[vehicleid][vPaintjob] 	= -1;
							VehicleInfo[vehicleid][vUzraktas] 	= true;
							VehicleInfo[vehicleid][vNupirkta] 	= true;
							VehicleInfo[vehicleid][vRida] 		= 0.0;
							VehicleInfo[vehicleid][vSprogusi]  	= false;
							VehicleInfo[vehicleid][vDujos]		= false;
							VehicleInfo[vehicleid][vIjungta]	= false;
							VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
							VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
							VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
							VehicleInfo[vehicleid][vTA]			= 0;

							for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
							{
								VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
								VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
							}

							SetVehicleFuelInfo(vehicleid);

							SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
							SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

							SavePlayerVehicle2(playerid);

							SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote retà tr. priemonæ. Jà rasite maðinø salono aikðtelëje!");

			   	        	return 1;
			   	        }

			   	        if(PI[playerid][Transportas3] == -1)
			   	        {
			   	        	Credits -= 1200;

			   	        	format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
							mysql_query(String);

			   	        	PI[playerid][Transportas3] = AC_CreateVehicle(434, RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);

			   	        	new vehicleid = PI[playerid][Transportas3];

			   	        	ac_SetVehicleToRespawn(vehicleid);

			   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
							format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
							format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

							for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

							VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
							VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
							VehicleInfo[vehicleid][vPaintjob] 	= -1;
							VehicleInfo[vehicleid][vUzraktas] 	= true;
							VehicleInfo[vehicleid][vNupirkta] 	= true;
							VehicleInfo[vehicleid][vRida] 		= 0.0;
							VehicleInfo[vehicleid][vSprogusi]  	= false;
							VehicleInfo[vehicleid][vDujos]		= false;
							VehicleInfo[vehicleid][vIjungta]	= false;
							VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
							VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
							VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
							VehicleInfo[vehicleid][vTA]			= 0;

							for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
							{
								VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
								VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
							}

							SetVehicleFuelInfo(vehicleid);

							SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
							SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

							SavePlayerVehicle3(playerid);

							SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote retà tr. priemonæ. Jà rasite maðinø salono aikðtelëje!");

			   	        	return 1;
			   	        }
					}

					case 4:
					{
						if(Credits == -1) return 1;

						if(Credits < 700) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà retà tr. priemonæ!");

						if(PI[playerid][Transportas1] != -1 && PI[playerid][Transportas2] != -1)
			        	{
			        		if(!PI[playerid][TransportoSlotas])
					        {
			        			SendClientMessage	(playerid, -1, "{ffffff} Treèio transporto slotà galite ásigyti paraðæ /paslaugos!");

					        	return 1;
					        }
					        else
					        {
					        	if(PI[playerid][Transportas3] != -1)
					        	{
					        		SendClientMessage	(playerid, -1, "{ffffff} Jus jau turite 3 transp. priemones!");

					        		return 1;
					        	}
					        }
			        	}

			   	        new Colors[2];

			   	        Colors[0] = random(126);
			   	        Colors[1] = random(126);

			   	        if(PI[playerid][Transportas1] == -1)
			   	        {
			   	        	Credits -= 700;

			   	        	format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
							mysql_query(String);

				        	PI[playerid][Transportas1] = AC_CreateVehicle(531, RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);

			   	        	new vehicleid = PI[playerid][Transportas1];

			   	        	ac_SetVehicleToRespawn(vehicleid);

			   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
							format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
							format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

							for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

							VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
							VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
							VehicleInfo[vehicleid][vPaintjob] 	= -1;
							VehicleInfo[vehicleid][vUzraktas] 	= true;
							VehicleInfo[vehicleid][vNupirkta] 	= true;
							VehicleInfo[vehicleid][vRida] 		= 0.0;
							VehicleInfo[vehicleid][vSprogusi]  	= false;
							VehicleInfo[vehicleid][vDujos]		= false;
							VehicleInfo[vehicleid][vIjungta]	= false;
							VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
							VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
							VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
							VehicleInfo[vehicleid][vTA]			= 0;

							for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
							{
								VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
								VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
							}

							SetVehicleFuelInfo(vehicleid);

							SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
							SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

							SavePlayerVehicle1(playerid);

							SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote retà tr. priemonæ. Jà rasite maðinø salono aikðtelëje!");

			   	        	return 1;
			   	        }

			   	        if(PI[playerid][Transportas2] == -1)
			   	        {
			   	        	Credits -= 700;

			   	        	format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
							mysql_query(String);

			   	        	PI[playerid][Transportas2] = AC_CreateVehicle(531, RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);

			   	        	new vehicleid = PI[playerid][Transportas2];

			   	        	ac_SetVehicleToRespawn(vehicleid);

			   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
							format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
							format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

							for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

							VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
							VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
							VehicleInfo[vehicleid][vPaintjob] 	= -1;
							VehicleInfo[vehicleid][vUzraktas] 	= true;
							VehicleInfo[vehicleid][vNupirkta] 	= true;
							VehicleInfo[vehicleid][vRida] 		= 0.0;
							VehicleInfo[vehicleid][vSprogusi]  	= false;
							VehicleInfo[vehicleid][vDujos]		= false;
							VehicleInfo[vehicleid][vIjungta]	= false;
							VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
							VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
							VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
							VehicleInfo[vehicleid][vTA]			= 0;

							for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
							{
								VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
								VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
							}

							SetVehicleFuelInfo(vehicleid);

							SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
							SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

							SavePlayerVehicle2(playerid);

							SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote retà tr. priemonæ. Jà rasite maðinø salono aikðtelëje!");

			   	        	return 1;
			   	        }

			   	        if(PI[playerid][Transportas3] == -1)
			   	        {
			   	        	Credits -= 700;

			   	        	format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
							mysql_query(String);

			   	        	PI[playerid][Transportas3] = AC_CreateVehicle(531, RandomSalonoSpawn[iRandom][0], RandomSalonoSpawn[iRandom][1], RandomSalonoSpawn[iRandom][2], RandomSalonoSpawn[iRandom][3], Colors[0], Colors[1], -1);

			   	        	new vehicleid = PI[playerid][Transportas3];

			   	        	ac_SetVehicleToRespawn(vehicleid);

			   	        	format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));
							format(VehicleInfo[vehicleid][vNumeriai], 14, "Neregistruota");
							format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", GetDateEx());

							for(new tune = 0; tune < 13; tune ++) VehicleInfo[vehicleid][vTune][tune] = 0;

							VehicleInfo[vehicleid][vColor][0] 	= Colors[0];
							VehicleInfo[vehicleid][vColor][1] 	= Colors[1];
							VehicleInfo[vehicleid][vPaintjob] 	= -1;
							VehicleInfo[vehicleid][vUzraktas] 	= true;
							VehicleInfo[vehicleid][vNupirkta] 	= true;
							VehicleInfo[vehicleid][vRida] 		= 0.0;
							VehicleInfo[vehicleid][vSprogusi]  	= false;
							VehicleInfo[vehicleid][vDujos]		= false;
							VehicleInfo[vehicleid][vIjungta]	= false;
							VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
							VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
							VehicleInfo[vehicleid][vKuras] 		= 20.0 + randomfloat(20.0);
							VehicleInfo[vehicleid][vTA]			= 0;

							for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
							{
								VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
								VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
							}

							SetVehicleFuelInfo(vehicleid);

							SetVehicleParamsEx		(vehicleid, false, false, false, false, false, false, false);
							SetVehicleNumberPlate 	(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

							SavePlayerVehicle3(playerid);

							SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote retà tr. priemonæ. Jà rasite maðinø salono aikðtelëje!");

			   	        	return 1;
			   	        }
					}
				}
			}
		}

		case 5591:
		{
			new String[150], Credits = HowMuchHaveCredits(GetPlayerNameEx(playerid));
			switch(listitem)
			{
				case 0:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < VipPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						if(PI[playerid][AdminLevel] == LEVEL_VIP)
						{
							PI[playerid][AdminLaikas] 	+= 2592000;
							PI[playerid][AdminLevel] 	= LEVEL_VIP;
						}
						else
						{
							PI[playerid][AdminLevel] 	= LEVEL_VIP;
							PI[playerid][AdminLaikas] 	= gettime() + 2592000;
							PI[playerid][AdminWarns] 	= 0;
						}

						Credits -= VipPrice;

						format(String, sizeof(String), "UPDATE `players` SET `Admin` = '1', `Kreditai` = '%d', `AdminLaikas` = '%d' WHERE `Vardas` = '%s'", Credits, PI[playerid][AdminLaikas], GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO VIP\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko VIP uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}

				case 1:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < FirstLevelAdminPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						if(PI[playerid][AdminLevel] != LEVEL_NONE)
						{
							PI[playerid][AdminLaikas] 	+= 2592000;
							PI[playerid][AdminLevel] 	= LEVEL_FIRST;
						}
						else
						{
							PI[playerid][AdminLevel] 	= LEVEL_FIRST;
							PI[playerid][AdminLaikas] 	= gettime() + 2592000;
							PI[playerid][AdminWarns] 	= 0;
						}

						Credits -= FirstLevelAdminPrice;

						format(String, sizeof(String), "UPDATE `players` SET `Admin` = '1', `Kreditai` = '%d', `AdminLaikas` = '%d' WHERE `Vardas` = '%s'", Credits, PI[playerid][AdminLaikas], GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO ADMIN I LYGIO\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko I lygio admin uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}

				case 2:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < SecondLevelAdminPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						if(PI[playerid][AdminLevel] != LEVEL_NONE)
						{
							PI[playerid][AdminLaikas] 	+= 2592000;
							PI[playerid][AdminLevel] 	= LEVEL_SECOND;
						}
						else
						{
							PI[playerid][AdminLevel] 	= LEVEL_SECOND;
							PI[playerid][AdminLaikas] 	= gettime() + 2592000;
							PI[playerid][AdminWarns] 	= 0;
						}

						Credits -= SecondLevelAdminPrice;

						format(String, sizeof(String), "UPDATE `players` SET `Admin` = '2', `Kreditai` = '%d', `AdminLaikas` = '%d' WHERE `Vardas` = '%s'", Credits, PI[playerid][AdminLaikas], GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO ADMIN II LYGIO\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko II lygio admin uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}
				
				case 3:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < SSecondLevelAdminPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						if(PI[playerid][AdminLevel] != LEVEL_NONE)
						{
							PI[playerid][AdminLaikas] 	+= 2592000;
							PI[playerid][AdminLevel] 	= LEVEL_THIRD;
						}
						else
						{
							PI[playerid][AdminLevel] 	= LEVEL_THIRD;
							PI[playerid][AdminLaikas] 	= gettime() + 2592000;
							PI[playerid][AdminWarns] 	= 0;
						}

						Credits -= SSecondLevelAdminPrice;

						format(String, sizeof(String), "UPDATE `players` SET `Admin` = '3', `Kreditai` = '%d', `AdminLaikas` = '%d' WHERE `Vardas` = '%s'", Credits, PI[playerid][AdminLaikas], GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO ADMIN III LYGIO\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko III lygio admin uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}

				case 4:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < FirstExperiencePrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						GivePlayerExperience(playerid, 700);

						Credits -= FirstExperiencePrice;

						format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO 700 XP\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko {FFAF00}700 {ffffff}EXP uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}

				case 5:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < SecondExperiencePrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						GivePlayerExperience(playerid, 1600);

						Credits -= SecondExperiencePrice;

						format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO 1600 XP\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko {FFAF00}1,600 {ffffff}EXP uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}

				case 6:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < ThirdExperiencePrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						GivePlayerExperience(playerid, 3500);

						Credits -= ThirdExperiencePrice;

						format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO 3500 XP\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko {FFAF00}3,500 {ffffff}EXP uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}

				case 7:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < UnjailPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						UnjailPlayer(playerid);

						Credits -= UnjailPrice;

						format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO UNJAIL\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko paleidimà ið kalëjimo uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}

				case 8:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < VipWarnsPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						if(PI[playerid][AdminWarns] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite áspëjimø!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						PI[playerid][AdminWarns] = 0;

						Credits -= VipWarnsPrice;

						format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO VIP ISPEJIMU PASALINIMA\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko VIP áspëjimø nusiëmimà uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}

				case 9:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < AdminWarnsPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						if(PI[playerid][AdminWarns] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite áspëjimø!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						PI[playerid][AdminWarns] = 0;

						Credits -= AdminWarnsPrice;

						format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO ADMIN ISPEJIMU PASALINIMA\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko ADMIN áspëjimø nusiëmimà uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}

				case 10:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < WantedLevelPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						new str[128];
						PI[playerid][Ieskomas] = 0;

						format(str, sizeof(str), "~y~[]~w~ ITARIMO LYGIS:~R~ %d", PI[playerid][Ieskomas]);
						PlayerTextDrawSetString(playerid, hudas_p[playerid][1], str);

						Credits -= WantedLevelPrice;

						format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO STAR PASALINIMA\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko STAR paðalinimà uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}

				case 11:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < AllCategoryLicensesPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						PI[playerid][teises]  = true;
						PI[playerid][Mteises] = true;
						PI[playerid][FTeises] = true;

						Credits -= AllCategoryLicensesPrice;

						format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO VISAS TEISES\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko visø kat. teises uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}

				case 12:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < GunLicensesPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						if(PI[playerid][VisoPrazaide] < NAUJOKO_LAIKAS)
						{
							SendClientMessage(playerid, -1, "{ffffff} Ginklø licenzijà nusipirkti galësite tik praþaidus {FFAF00}"#NAUJOKO_LAIKAS"{ffffff} min!");

							return 1;
						}

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						PI[playerid][gLicenzija] = true;

						Credits -= GunLicensesPrice;

						format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO GUN LICENZIJA\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko ginklø licenzijà uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}

				case 13:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < JobProfitUpgrade) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						if(PI[playerid][pAlga])
						{
							PI[playerid][AlgosLaikas] += 2592000;
							PI[playerid][pAlga]        = true;
						}
						else
						{
							PI[playerid][pAlga]       = true;
							PI[playerid][AlgosLaikas] = gettime() + 2592000;
						}

						Credits -= JobProfitUpgrade;

						format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO ALGOS PADIDINIMÀ\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko algos padidinimà uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}

				case 14:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < ThirdOwnCarPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						if(PI[playerid][TransportoSlotas]) return SendClientMessage(playerid, -1, "{ffffff} Jus jau esate uþsakæs ðià paslaugà!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						PI[playerid][TransportoSlotas] = true;

						Credits -= ThirdOwnCarPrice;

						format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO 3 TRANSPORTO SLOTÀ\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko 3 transporto slotà!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}
				
				case 15:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < FirstMoneyPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						GivePlayerMoneyA(playerid, 15000);

						Credits -= FirstMoneyPrice;

						format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO 10K LT\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko {FFAF00}$15,000 {ffffff}uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}

				case 16:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < GunPacketPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà!");

						ac_GivePlayerWeapon(playerid, 24, 300);
						ac_GivePlayerWeapon(playerid, 25, 300);
						ac_GivePlayerWeapon(playerid, 29, 1000);
						ac_GivePlayerWeapon(playerid, 31, 1000);
						ac_GivePlayerWeapon(playerid, 34, 100);

						Credits -= GunPacketPrice;

						format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO 10K LT\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko ginklø paketà uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}

				case 17:
				{
					if(response)
					{
						if(Credits == -1) return 1;

						if(Credits < DrugsPacketPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø uþsakyti norimà paslaugà!");

						SendClientMessage(playerid, -1, "{ffffff} Sveikiname, sëkmingai nusipirkote pasirinktà paslaugà! Informacija: {FFAF00} /narkotikai{ffffff}!");

						PI[playerid][Weed]		= 70;
						PI[playerid][Kokainas] 	= 70;
						PI[playerid][Ekstazi] 	= 70;
						PI[playerid][Heroinas] 	= 70;

						Credits -= DrugsPacketPrice;

						format(String, sizeof(String), "UPDATE `players` SET `Kreditai` = '%d' WHERE `Vardas` = '%s'", Credits, GetPlayerNameEx(playerid));
						mysql_query(String);

						format(String, sizeof(String), "[PASLAUGOS] Kada pirko: %s | Zaidejo vardas: %s | PIRKO 10K LT\r\n", GetDateEx(), GetPlayerNameEx(playerid));
						Log(PIRKO_PASLAUGAS, String);

						format(String, sizeof(String),"{ffffff} Þaidëjas {FFAF00}%s {ffffff}nusipirko narkotikø paketà uþ kreditus!", GetPlayerNameEx(playerid));
						SendMessageToAdmins(String);
					}
				}
			}
		}
	}

	if(dialogid == DIALOG_SLAPTAZODZIO_KEITIMAS)
	{
		if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
			new query[256], masyvas[128];
			if(sscanf(inputtext, "s[30]",inputtext)) return ShowPlayerDialogEx(playerid, DIALOG_SLAPTAZODZIO_KEITIMAS, DIALOG_STYLE_INPUT, "Slaptaþodis", "Slaptaþodþio keitimas\n\nNorëdami pasikeisti slaptaþodá, áveskite apaèioje!", "Pakeisti", "Iðeiti");
			else if(!strlen(inputtext)) return ShowPlayerDialogEx(playerid, DIALOG_SLAPTAZODZIO_KEITIMAS, DIALOG_STYLE_INPUT, "Slaptaþodis", "Klaida\n\nPraðome ávesti savo bûsimàjá slaptaþodá.Jo ilgis turi sudaryti nuo 6 iki 20 simboliø!\nSavo slaptaþodþio niekada ir niekam nesakykite!", "Pakeisti", "Iðeiti");
			else if(strlen(inputtext) > 32) return ShowPlayerDialogEx(playerid,DIALOG_SLAPTAZODZIO_KEITIMAS,DIALOG_STYLE_PASSWORD,"Slaptaþodis","Klaida\n\nSlaptaþodþio ilgis turi sudaryti nuo 6 iki 20 simboliø!\nSavo slaptaþodþio niekada ir niekam nesakykite.","Pakeisti","Iðeiti");
			else if(strfind(inputtext, "%", true) != -1) return ShowPlayerDialogEx(playerid,DIALOG_SLAPTAZODZIO_KEITIMAS,DIALOG_STYLE_PASSWORD,"{3399ff}Þaidëjo registracija","Slaptaþodþio ilgis turi sudaryti nuo 6 iki 20 simboliø!\nSavo slaptaþodþio niekada ir niekam nesakykite.","Pakeisti","Iðeiti");
			else
			{
				//format(query, 256, "UPDATE players SET Slaptazodis = '%s' WHERE Vardas = '%s'",MD5_Hash(inputtext),GetPlayerNameEx(playerid));
				format(query, 256, "UPDATE players SET Slaptazodis = '%s' WHERE Vardas = '%s'",MD5_Hash(MD5_Hash(inputtext)),GetPlayerNameEx(playerid));
				mysql_query(query);
				//format(query, 256, "UPDATE players SET TikrasSlaptazodis = '%s' WHERE Vardas = '%s'",inputtext,GetPlayerNameEx(playerid));
				//mysql_query(query);
				format(masyvas, 128, "* Slaptaþodis pakeistas á %s",inputtext);
				SendClientMessage(playerid, -1, masyvas);
			}
		}
		return true;
	}
	if(dialogid == DIALOG_SLAPTAZODZIO_KEITIMAS2)
	{
		if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
		new query[256], masyvas[128];
		if(sscanf(inputtext, "s[30]",inputtext)) return ShowPlayerDialogEx(playerid, DIALOG_SLAPTAZODZIO_KEITIMAS2, DIALOG_STYLE_INPUT, "Slaptaþodis", "Slaptaþodþio keitimas\n\nMûsø sistema reikalauja pasikeisti slaptaþodá kiekvienà mënesá!\n\nÁveskite naujà slaptaþodá apaèioje!", "Pakeisti", "");
		else if(!strlen(inputtext)) return ShowPlayerDialogEx(playerid, DIALOG_SLAPTAZODZIO_KEITIMAS2, DIALOG_STYLE_INPUT, "Slaptaþodis", "Slaptaþodþio keitimas\n\nMûsø sistema reikalauja pasikeisti slaptaþodá kiekvienà mënesá!\n\nÁveskite naujà slaptaþodá apaèioje!", "Pakeisti", "");
		else if(strlen(inputtext) > 32) return ShowPlayerDialogEx(playerid, DIALOG_SLAPTAZODZIO_KEITIMAS2, DIALOG_STYLE_INPUT, "Slaptaþodis", "Slaptaþodþio keitimas\n\nMûsø sistema reikalauja pasikeisti slaptaþodá kiekvienà mënesá!\n\nÁveskite naujà slaptaþodá apaèioje!", "Pakeisti", "");
		else if(strfind(inputtext, "%", true) != -1) return ShowPlayerDialogEx(playerid, DIALOG_SLAPTAZODZIO_KEITIMAS2, DIALOG_STYLE_INPUT, "Slaptaþodis", "Slaptaþodþio keitimas\n\nMûsø sistema reikalauja pasikeisti slaptaþodá kiekvienà mënesá!\n\nÁveskite naujà slaptaþodá apaèioje!", "Pakeisti", "");
		else
		{
			//format(query, 256, "UPDATE players SET Slaptazodis = '%s' WHERE Vardas = '%s'",MD5_Hash(inputtext),GetPlayerNameEx(playerid));
			format(query, 256, "UPDATE players SET Slaptazodis = '%s' WHERE Vardas = '%s'",MD5_Hash(MD5_Hash(inputtext)),GetPlayerNameEx(playerid));
			mysql_query(query);

			format(masyvas, 128, "* Slaptaþodis pakeistas á %s",inputtext);
			SendClientMessage(playerid, -1, masyvas);
		}
		return true;
	}

	else if(dialogid == 6958)
	{
		if(response)
		{
			ShowPlayerDialogEx(playerid, 6959, DIALOG_STYLE_INPUT, "Raðyti þinutæ serverio VIP nariams", "{ffffff}Prieð iðsiunèiant þinutæ serverio VIP nariams perskaitykite ðias taisykles:\n \n\
			\t1. Neraðyti necenzûrinius þodþius\n\t2. Neáþeidinëti VIP nariø\n\t3. Nefloodinti raðydami daug kartø tà patá praneðimà", "Siøsti", "Uþdaryti");
		}
	}

	else if(dialogid == 6956)
	{
	    if(response)
		{
		    ShowPlayerDialogEx(playerid, 6957, DIALOG_STYLE_INPUT, "Raðyti þinutæ serverio valdþiai", "{ffffff}Prieð iðsiunèiant þinutæ serverio administratoriams perskaitykite ðias taisykles:\n \n\
		    \t1. Nepraðyti pinigø, patirties taðkø, direktoriø ir t.t.\n\t2. Neraðyti necenzûrinius þodþius\n\t3. Neáþeidinëti administratoriø\n\t4. Nefloodinti raðydami daug kartø tà patá praneðimà", "Siøsti", "Uþdaryti");
		}
	}
	else if(dialogid == 6957)
	{
	    if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

		    new String[128];

		    if(PI[playerid][ParaseAdminams] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Administratoriams galima raðyti tik kas 30 sekundþiø!");

		   	if(strlen(inputtext) > 128) return SendClientMessage(playerid, -1, "{ffffff} Tekstas per ilgas!");

			for(new i, size = GetPlayerPoolSize(); i <= size; i ++)
			{
				if(IsPlayerConnected(i) && PI[i][AdminLevel] > LEVEL_VIP)
				{
					format(String, sizeof(String), "{2DB2D0}%s(%d) administratoriams: {ffffff}%s (/ap %i)", GetPlayerNameEx(playerid), playerid, inputtext, playerid);
					if(PI[i][AOD]) SendClientMessage(i, -1, String);
				}
			}

			if(PI[playerid][AdminLevel] < LEVEL_FIRST)
			{
				format(String, sizeof(String), "{2DB2D0}Paraðëte administratoriams: {ffffff}%s", inputtext);
				SendClientMessage(playerid, -1, String);
			}

			PI[playerid][ParaseAdminams] = gettime() + 30;
			AHS[playerid][AskedForHelp] = true;
		}
	}

	else if(dialogid == 6959)
	{
		if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
			new String[216];

			if(PI[playerid][ParaseVipams] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} VIP nariams galima raðyti tik kas 30 sekundþiø!");

			//if(strval(inputtext) < 1 || strval(inputtext) > 128) return SendClientMessage(playerid, -1, "{ffffff} Praneðimas per ilgas arba per trumpas!");

			//format(String, sizeof(String), "{ffffff} VIP þinutë {FFAF00}%s(%i): {ffffff}%s", GetPlayerNameEx(playerid), playerid, inputtext);

			for(new i, size = GetPlayerPoolSize(); i <= size; i ++)
			{
				if(IsPlayerConnected(i) && PI[i][AdminLevel] == LEVEL_VIP)
				{
					format(String, sizeof(String), "{FFAF00}%s(%d) VIP'ams: {ffffff}%s", GetPlayerNameEx(playerid), playerid, inputtext);
					SendClientMessage(i, -1, String);
				}
			}

			format(String, sizeof(String), "{FFAF00}Paraðëte VIP'ams: {ffffff}%s", inputtext);
			SendClientMessage(playerid, -1, String);

			PI[playerid][ParaseVipams] = gettime() + 30;
		}
	}

	if(dialogid == DIALOG_DARBU_PAREMIMAS)
	{
		switch(listitem)
		{
			case 0:
			{
				ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_MENTUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{ffffff}Policijos departamento rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");
			}
			case 1:
			{
				ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_MEDIKUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{ffffff}Medicinos departamento rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");
			}
			case 2:
			{
				ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_KURJERIUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{ffffff}Kurjeriø rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");
			}
			case 3:
			{
				ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_MECHANIKUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{ffffff}Autoserviso ECO rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");
			}
			case 4:
			{
				ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_FURISTUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{ffffff}Fûristø rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");
			}
			case 5:
			{
				ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_DYLERIUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{ffffff}Spec. bûrio pajëgø ARAS rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");
			}
			case 6:
			{
				ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_TAXI, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{ffffff}Taksi firmos rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");
			}
		}
		return true;
	}

	if(dialogid == DIALOG_PAREMTI_DYLERIUS)
	{
		if(response)
		{
			new suma,masyvas[128];

			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(sscanf(inputtext, "d",suma)) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_DYLERIUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{ffffff}Spec. bûrio pajëgø ARAS rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");

			else if(suma > GetPlayerMoneyA(playerid)) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_DYLERIUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{FFAF00}Jus tiek neturite!\n \n{ffffff}Spec. bûrio pajëgø ARAS rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");

			else if(suma < 1) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_DYLERIUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{FFAF00}Maþiau {FFAF00}$1 {FFAF00}paremti negalite!\n \n{ffffff}Spec. bûrio pajëgø ARAS rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");
			else
			{
			    GivePlayerMoneyA(playerid, -suma);

			    Pelnas[4]+=suma;

			    format(masyvas, sizeof(masyvas), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}%s parëmë mûsø firmà {FFAF00}$%s{ffffff}!", GetPlayerNameEx(playerid), konvertuoti_pinigus(suma));
			    ZinuteRacija(masyvas, DYLERIAI);

			    format(masyvas, 128, "{ffffff} Parëmete spec. bûrio pajëgas ARAS {FFAF00}$%s {ffffff}pinigø suma!", konvertuoti_pinigus(suma));
			    SendClientMessage(playerid, -1, masyvas);

			    if(suma >= 30000)
			    {
			    	format(masyvas, 128, "{ffffff} Þaidëjas {FFAF00}%s {ffffff}parëmë spec. bûrio pajëgas ARAS {FFAF00}$%s{ffffff} pinigø suma!", GetPlayerNameEx(playerid), konvertuoti_pinigus(suma));
			    	SendClientMessageToAll(-1, masyvas);
			    }
			}
		}
		return true;
	}

	if(dialogid == DIALOG_PAREMTI_MENTUS)
	{
		if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			new suma,masyvas[128];

			if(sscanf(inputtext, "d",suma)) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_MENTUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{ffffff}Policijos departamento rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");

			else if(suma > GetPlayerMoneyA(playerid)) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_MENTUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{FFAF00}Jus tiek neturite!\n \n{ffffff}Policijos departamento rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");

			else if(suma < 1) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_MENTUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{FFAF00}Jus tiek neturite!\n \n{ffffff}Policijos departamento rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");
			else
			{
				GivePlayerMoneyA(playerid, -suma);

				Pelnas[0] += suma;

				format(masyvas, sizeof(masyvas), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}%s parëmë mûsø firmà {FFAF00}$%s{ffffff}!", GetPlayerNameEx(playerid), konvertuoti_pinigus(suma));
				ZinuteRacija(masyvas, POLICIJA);

				format(masyvas, 128, "{ffffff} Parëmete policijos departamentà {FFAF00}$%s {ffffff}pinigø suma!", konvertuoti_pinigus(suma));
			    SendClientMessage(playerid, -1, masyvas);

			    if(suma >= 30000)
			    {
			    	format(masyvas, 128, "{ffffff} Þaidëjas {FFAF00}%s {ffffff}parëmë policijos departamentà {FFAF00}$%s{ffffff} pinigø suma!", GetPlayerNameEx(playerid), konvertuoti_pinigus(suma));
			    	SendClientMessageToAll(-1, masyvas);
			    }
			}
		}
		return true;
	}

	if(dialogid == DIALOG_PAREMTI_MEDIKUS)
	{
		if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
			new suma,masyvas[128];
			if(sscanf(inputtext, "d",suma)) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_MEDIKUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "Paremti Medikus\n\nÁveskite suma, kiek norësite paremti firmà!", "Rinktis", "Iðeiti");

			else if(suma > GetPlayerMoneyA(playerid)) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_MEDIKUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{FFAF00}Jus tiek neturite!\n \n{ffffff}Medicinos departamento rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");

			else if(suma < 1) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_MEDIKUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{FFAF00}Jus tiek neturite!\n \n{ffffff}Medicinos departamento rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");
			else
			{
				GivePlayerMoneyA(playerid, -suma);

				Pelnas[3]+=suma;

				format(masyvas, sizeof(masyvas), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}%s parëmë mûsø firmà {FFAF00}$%s{ffffff}!", GetPlayerNameEx(playerid), konvertuoti_pinigus(suma));
				ZinuteRacija(masyvas, MEDIKAI);

				format(masyvas, 128, "{ffffff} Parëmete medicinos departamentà {FFAF00}$%s {ffffff}pinigø suma!", konvertuoti_pinigus(suma));
			    SendClientMessage(playerid, -1, masyvas);

			    if(suma >= 30000)
			    {
			    	format(masyvas, 128, "{ffffff} Þaidëjas {FFAF00}%s {ffffff}parëmë medicinos departamentà {FFAF00}$%s{ffffff} pinigø suma!", GetPlayerNameEx(playerid), konvertuoti_pinigus(suma));
			    	SendClientMessageToAll(-1, masyvas);
			    }
			}
		}
		return true;
	}
	if(dialogid == DIALOG_PAREMTI_TAXI)
	{
		if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
			new suma,masyvas[128];
			if(sscanf(inputtext, "d",suma)) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_TAXI, DIALOG_STYLE_INPUT, "Darbø rëmimas", "Paremti Taksistus\n\nÁveskite suma, kiek norësite paremti firmà!", "Rinktis", "Iðeiti");

			else if(suma > GetPlayerMoneyA(playerid)) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_TAXI, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{FFAF00}Jus tiek neturite!\n \n{ffffff}Taksi firmos rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");

			else if(suma < 1) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_TAXI, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{FFAF00}Jus tiek neturite!\n \n{ffffff}Taksi firmos rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");
			else
			{
				GivePlayerMoneyA(playerid, -suma);

				Pelnas[9]+=suma;

				format(masyvas, sizeof(masyvas), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}%s parëmë mûsø firmà {FFAF00}$%s{ffffff}!", GetPlayerNameEx(playerid), konvertuoti_pinigus(suma));
				ZinuteRacija(masyvas, TAXI);

				format(masyvas, 128, "{ffffff} Parëmete taksi firmà {FFAF00}$%s {ffffff}pinigø suma!", konvertuoti_pinigus(suma));
			    SendClientMessage(playerid, -1, masyvas);

			    if(suma >= 30000)
			    {
			    	format(masyvas, 128, "{ffffff} Þaidëjas {FFAF00}%s {ffffff}parëmë taksi firmà {FFAF00}$%s{ffffff} pinigø suma!", GetPlayerNameEx(playerid), konvertuoti_pinigus(suma));
			    	SendClientMessageToAll(-1, masyvas);
			    }
			}
		}
		return true;
	}


	if(dialogid == DIALOG_PAREMTI_KURJERIUS)
	{
		if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			new suma,masyvas[128];

			if(sscanf(inputtext, "d",suma)) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_KURJERIUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "Paremti kurjerius\n\nÁveskite suma, kiek norësite paremti firmà!", "Rinktis", "Iðeiti");

			else if(suma > GetPlayerMoneyA(playerid)) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_KURJERIUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{FFAF00}Jus tiek neturite!\n \n{ffffff}Kurjeriø rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");

			else if(suma < 1) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_KURJERIUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{FFAF00}Jus tiek neturite!\n \n{ffffff}Kurjeriø rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");
			else
			{
				GivePlayerMoneyA(playerid, -suma);

				Pelnas[2]+=suma;

				format(masyvas, sizeof(masyvas), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}%s parëmë mûsø firmà {FFAF00}$%s{ffffff}!", GetPlayerNameEx(playerid), konvertuoti_pinigus(suma));
				ZinuteRacija(masyvas, LEAD_KURJ);

				format(masyvas, 128, "{ffffff} Parëmete kurjerius {FFAF00}$%s {ffffff}pinigø suma!", konvertuoti_pinigus(suma));
			    SendClientMessage(playerid, -1, masyvas);

			    if(suma >= 30000)
			    {
			    	format(masyvas, 128, "{ffffff} Þaidëjas {FFAF00}%s {ffffff}parëmë kurjerius {FFAF00}$%s{ffffff} pinigø suma!", GetPlayerNameEx(playerid), konvertuoti_pinigus(suma));
			    	SendClientMessageToAll(-1, masyvas);
			    }
			}
		}
		return true;
	}

	if(dialogid == DIALOG_PAREMTI_MECHANIKUS)
	{
		if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			new suma,masyvas[128];

			if(sscanf(inputtext, "d",suma)) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_MECHANIKUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "Paremti autoservisà ECO\n\nÁveskite suma, kiek norësite paremti firmà!", "Rinktis", "Iðeiti");

			else if(suma > GetPlayerMoneyA(playerid)) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_MECHANIKUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{FFAF00}Jus tiek neturite!\n \n{ffffff}Autoserviso ECO rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");

			else if(suma < 1) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_MECHANIKUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{FFAF00}Jus tiek neturite!\n \n{ffffff}Autoserviso ECO rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");
			else
			{
				GivePlayerMoneyA(playerid, -suma);

				Pelnas[1]+=suma;

				format(masyvas, sizeof(masyvas), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}%s parëmë mûsø firmà {FFAF00}$%s{ffffff}!", GetPlayerNameEx(playerid), konvertuoti_pinigus(suma));
				ZinuteRacija(masyvas, MECHANIKAI);

				format(masyvas, 128, "{ffffff} Parëmete autoservisà ECO {FFAF00}$%s {ffffff}pinigø suma!", konvertuoti_pinigus(suma));
			    SendClientMessage(playerid, -1, masyvas);

			    if(suma >= 30000)
			    {
			    	format(masyvas, 128, "{ffffff} Þaidëjas {FFAF00}%s {ffffff}parëmë autoservisà ECO {FFAF00}$%s{ffffff} pinigø suma!", GetPlayerNameEx(playerid), konvertuoti_pinigus(suma));
			    	SendClientMessageToAll(-1, masyvas);
			    }
			}
		}
		return true;
	}
	//Furistai
	if(dialogid == DIALOG_PAREMTI_FURISTUS)
	{
		if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			new suma,masyvas[128];

			if(sscanf(inputtext, "d",suma)) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_FURISTUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "Paremti Furistus\n\nÁveskite suma, kiek norësite paremti firmà!", "Rinktis", "Iðeiti");

			else if(suma > GetPlayerMoneyA(playerid)) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_FURISTUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{FFAF00}Jus tiek neturite!\n \n{ffffff}Fûristø rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");

			else if(suma < 1) return ShowPlayerDialogEx(playerid, DIALOG_PAREMTI_FURISTUS, DIALOG_STYLE_INPUT, "Darbø rëmimas", "{FFAF00}Jus tiek neturite!\n \n{ffffff}Fûristø rëmimas\n \n{ffffff}Áveskite pinigø sumà, kurià norite paremti:", "Paremti", "Uþdaryti");
			else
			{
				GivePlayerMoneyA(playerid, -suma);

				Pelnas[8]+=suma;

				format(masyvas, sizeof(masyvas), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}%s parëmë mûsø firmà {FFAF00}$%s{ffffff}!", GetPlayerNameEx(playerid), konvertuoti_pinigus(suma));
				ZinuteRacija(masyvas, FURISTAI);

				format(masyvas, 128, "{ffffff} Parëmete fûristus {FFAF00}$%s {ffffff}pinigø suma!", konvertuoti_pinigus(suma));
			    SendClientMessage(playerid, -1, masyvas);

			    if(suma >= 30000)
			    {
			    	format(masyvas, 128, "{ffffff} Þaidëjas {FFAF00}%s {ffffff}parëmë furistus {FFAF00}$%s{ffffff} pinigø suma!", GetPlayerNameEx(playerid), konvertuoti_pinigus(suma));
			    	SendClientMessageToAll(-1, masyvas);
			    }
			}
		}
		return true;
	}

	if(dialogid == 4500)
	{
		if(response)
		{
			new String[1600], Stringas[120];
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialogEx(playerid, 4501, DIALOG_STYLE_LIST,
					//"Mini darbø vietovës", "1. Picø iðveþiotojai\n2. Keliø valytojai\n3. Autobusø vairuotojai", "Pasirinkti", "Atgal");
					"Mini darbø vietovës", "1. Picø iðveþiotojai\n2. Keliø valytojai\n3. Autobusø vairuotojai\n4. Gaisrininkai", "Pasirinkti", "Atgal");
				}

				case 1:
				{
					ShowPlayerDialogEx(playerid, 4502, DIALOG_STYLE_LIST,
					//"Normaliø darbø vietovës", "1. Policijos departamentas\n2. Medicinos departamentas\n3. Mechanikai\n4. Fûristai\n5. Dyleriai", "Pasirinkti", "Atgal");
					"Normaliø darbø vietovës", "1. Policijos departamentas\n2. Medicinos departamentas\n3. Autoservisas ECO\n4. Kurjeriai\n5. Fûristai\n6. Spec. bûrio pajëgos ARAS\n7. Taksistai", "Pasirinkti", "Atgal");
				}

				case 2:
				{
					for(new i = 0; i < sizeof(UzkandinesRestoranai); i ++)
					{
						format(Stringas, sizeof(Stringas), "%d. %s\n", i + 1, UzkandinesRestoranai[i][0]);
						strcat(String, Stringas);
					}

					ShowPlayerDialogEx(playerid, 4504, DIALOG_STYLE_LIST, "Uþkandinës, picerijos ir kita", String, "Pasirinkti", "Atgal");
				}

				case 3:
				{
					for(new i = 0; i < sizeof(FamousGpsPlaces); i ++)
					{
						format(Stringas, sizeof(Stringas), "%d. %s\n", i + 1, FamousGpsPlaces[i][0]);
						strcat(String, Stringas);
					}

					ShowPlayerDialogEx(playerid, 4503, DIALOG_STYLE_LIST, "Kitos vietovës", String, "Pasirinkti", "Atgal");
				}

				case 4:
				{
					if(PlayerHaveProperty(playerid) != -1)
					{
						SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}Verslas {ffffff}paþymëtas (-a) jûsø þemelapyje!");
						SetPlayerCheckpointEx(playerid, 7, PropertyInfo[PlayerHaveProperty(playerid)][pPos_X], PropertyInfo[PlayerHaveProperty(playerid)][pPos_Y], PropertyInfo[PlayerHaveProperty(playerid)][pPos_Z], 2);
					}
				}

				case 5:
				{
					if(PlayerHaveHouse(playerid) != -1)
					{
						SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}Namas {ffffff}paþymëtas (-a) jûsø þemelapyje!");
						SetPlayerCheckpointEx(playerid, 7, HouseInfo[PlayerHaveHouse(playerid)][ExitX], HouseInfo[PlayerHaveHouse(playerid)][ExitY], HouseInfo[PlayerHaveHouse(playerid)][ExitZ], 2);
					}
				}
			}
		}

		return 1;
	}

	if(dialogid == 4502)
	{
		if(!response) return pc_cmd_gps(playerid);
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}Policijos departamentas {ffffff}paþymëtas (-a) jûsø þemelapyje!");
					SetPlayerCheckpointEx(playerid, 7, -1605.6272,710.4329,13.8672, 2);
				}
				case 1:
				{
					SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}Medicinos departamentas {ffffff}paþymëtas (-a) jûsø þemelapyje!");
					SetPlayerCheckpointEx(playerid, 7, -2663.8132,598.2012,15.0553, 2);
				}
				case 2:
				{
					SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}Autoservisas ECO {ffffff}paþymëtas (-a) jûsø þemelapyje!");
					SetPlayerCheckpointEx(playerid, 7, -2637.2673,-20.3348,4.1694, 2);
				}
				case 3:
				{
					SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}Kurjeriai {ffffff}paþymëtas (-a) jûsø þemelapyje!");
					SetPlayerCheckpointEx(playerid, 7, -2680.6787,174.5081,4.3290, 2);
				}
				case 4:
				{
					SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}Fûristai {ffffff}paþymëtas (-a) jûsø þemelapyje!");
					SetPlayerCheckpointEx(playerid, 7, -2171.6692,-209.1815,35.1218, 2);
				}
				case 5:
				{
					SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}Spec. bûrio pajëgos ARAS {ffffff}paþymëtas (-a) jûsø þemelapyje!");
					SetPlayerCheckpointEx(playerid, 7, -1509.4137,460.2384,7.1875, 2);
				}
				case 6:
				{
					SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}Taksi ofisas {ffffff}paþymëtas (-a) jûsø þemelapyje!");
					SetPlayerCheckpointEx(playerid, 7, -1643.6504,1291.9688,7.2821, 2);
				}
			}
		}
		return true;
	}
	if(dialogid == 4501)
	{
		if(!response) return pc_cmd_gps(playerid);
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}Picø iðveþiotojai {ffffff}paþymëtas (-a) jûsø þemelapyje!");
					SetPlayerCheckpointEx(playerid, 7, -1905.2576,443.7498,35.1709, 2);
				}
				case 1:
				{
					SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}Keliø valytojai {ffffff}paþymëtas (-a) jûsø þemelapyje!");
					SetPlayerCheckpointEx(playerid, 7, -2054.5505,-14.3301,35.3534, 2);
				}
				case 2:
				{
					SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}Autobusø vairuotojai {ffffff}paþymëtas (-a) jûsø þemelapyje!");
					SetPlayerCheckpointEx(playerid, 7, -2193.9255,355.3281,35.3497, 2);
				}
				case 3:
				{
					SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}Gaisrininkai {ffffff}paþymëtas (-a) jûsø þemelapyje!");
					SetPlayerCheckpointEx(playerid, 7, -1834.0001,144.7530,15.1172, 2);
				}
			}
		}
		return true;
	}

	if(dialogid == 4593)
	{
		if(response)
		{
			new String[216], vehicleid = GetPlayerVehicleID(playerid), i, trailerid = GetVehicleTrailer(trailerid);

			if(trailerid == INVALID_VEHICLE_ID && GetVehicleModel(vehicleid) != 482) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti su priekaba!");
			if(VehicleInfo[trailerid][KiekPriekaboje] >= 100 && GetVehicleModel(vehicleid) != 482) return SendClientMessage(playerid, -1, "{ffffff} Jûsø priekaba jau pakrauta!");
			if(VehicleInfo[vehicleid][KiekPriekaboje] >= 100 && GetVehicleModel(vehicleid) == 482) return SendClientMessage(playerid, -1, "{ffffff} Jûsø \"Burrito\" jau pakrautas!");

			if(PI[playerid][Kraunasi] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu pas jus jau kraunasi krovinys!");

			if(PI[playerid][VezeKrovini] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Krovinius veþti galima tik kas 8 minutes!");

			if(vKrovinys[vehicleid] != -1)
			{
				if(PI[playerid][specialybe] == 3) format(String, sizeof(String), "{ffffff} Jus esate pasikrovæs kità kroviná ({FFAF00}%s{ffffff})!", vKoksKrovinys(vehicleid));
				if(PI[playerid][specialybe] == 11) format(String, sizeof(String), "{ffffff} Jus esate pasikrovæs kità kroviná ({FFAF00}%s{ffffff})!", vKoksKrovinys2(vehicleid));

				SendClientMessage(playerid, -1, String);

				SetPlayerCheckpointEx(playerid, 1, vK_Pos[vehicleid][0], vK_Pos[vehicleid][1], vK_Pos[vehicleid][2], 5);

				return 1;
			}

			for(i = 0; i < sizeof(FuristuPasikrovimas); i ++)
			{
				if(GetPlayerMoneyA(playerid) < FuristuPasikrovimas[listitem][Price1])
				{
					SendClientMessage 	(playerid, -1, "{ffffff} Jums neuþtenka pinigø pradiniam krovinio ánaðui!");

					return 1;
				}

				switch(listitem)
				{
					case 1, 2, 3, 4, 5:
					{
						if(GetVehicleModel(vehicleid) == 482) return SendClientMessage(playerid, -1, ""COL_ERROR"Ðiems kroviniams netinka \"Burrito\"");
						vKrovinys[vehicleid] 		= listitem + 1;
						PI[playerid][KaPasikroves] 	= listitem;

						vKrovinioVerte[vehicleid]	= FuristuPasikrovimas[listitem][Price1];
						vKrovinioAtlygis[vehicleid] = FuristuPasikrovimas[listitem][Price2];

						PI[playerid][KrovimoLaikas]		= gettime() + (50 + random(50));
						PI[playerid][Kraunasi]			= true;
						PI[playerid][VezeKrovini] 		= gettime() + 480;

						TogglePlayerControllable(playerid, false);
					}

					case 8: // Narkotikai
					{
						if(GetVehicleModel(vehicleid) != 482) return SendClientMessage(playerid, -1, "{ffffff} Ðá kroviná galima veþti tik su \"Burrito\"");
						new DrugsCount = WeedDoseCount + HeroineDoseCount + CocaineDoseCount + EkstaziDoseCount;

						if(DrugsCount >= 4000) return SendClientMessage(playerid, -1, "{ffffff} Narkotikø sandëliai yra pilni!");

						vKrovinys[vehicleid] 		= listitem + 1;
						PI[playerid][KaPasikroves] 	= listitem;

						vKrovinioVerte[vehicleid]	= FuristuPasikrovimas[listitem][Price1];
						vKrovinioAtlygis[vehicleid] = FuristuPasikrovimas[listitem][Price2];

						PI[playerid][KrovimoLaikas]		= gettime() + (50 + random(50));
						PI[playerid][Kraunasi]			= true;
						PI[playerid][VezeKrovini] 		= gettime() + 480;

						TogglePlayerControllable(playerid, false);
					}

					case 9: // Ginklai
					{
						if(GetVehicleModel(vehicleid) != 482) return SendClientMessage(playerid, -1, "{ffffff} Ðá kroviná galima veþti tik su \"Burrito\"");
						new BulletCount = Ak47BulletCount + ShotgunBulletCount + DeagleBulletCount;

						if(BulletCount >= 30000) return SendClientMessage(playerid, -1, "{ffffff} Ginklø sandëliai yra pilni!");

						vKrovinys[vehicleid] 		= listitem + 1;
						PI[playerid][KaPasikroves] 	= listitem;

						vKrovinioVerte[vehicleid]	= FuristuPasikrovimas[listitem][Price1];
						vKrovinioAtlygis[vehicleid] = FuristuPasikrovimas[listitem][Price2];

						PI[playerid][KrovimoLaikas]		= gettime() + (50 + random(50));
						PI[playerid][Kraunasi]			= true;
						PI[playerid][VezeKrovini] 		= gettime() + 480;

						TogglePlayerControllable(playerid, false);
					}
				}
			}
		}

		return 1;
	}

	if(dialogid == 4592)
	{
		if(response)
		{
			new String[216], vehicleid = GetPlayerVehicleID(playerid), i;

			if(PI[playerid][Kraunasi] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu pas jus jau kraunasi krovinys!");

			if(PI[playerid][VezeKrovini] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Krovinius veþti galima tik kas 8 minutes!");

			if(vKrovinys[vehicleid] != -1)
			{
				if(PI[playerid][specialybe] == 3) format(String, sizeof(String), "{ffffff} Jus esate pasikrovæs kità kroviná ({FFAF00}%s{ffffff})!", vKoksKrovinys(vehicleid));
				if(PI[playerid][specialybe] == 11) format(String, sizeof(String), "{ffffff} Jus esate pasikrovæs kità kroviná ({FFAF00}%s{ffffff})!", vKoksKrovinys(vehicleid));

				SendClientMessage(playerid, -1, String);

				SetPlayerCheckpointEx(playerid, 1, vK_Pos[vehicleid][0], vK_Pos[vehicleid][1], vK_Pos[vehicleid][2], 5);

				return 1;
			}

			for(i = 0; i < sizeof(KurjeriuPasikrovimas); i ++)
			{
				if(GetPlayerMoneyA(playerid) < KurjeriuPasikrovimas[listitem][Price1])
				{
					SendClientMessage 	(playerid, -1, "{ffffff} Jums neuþtenka pinigø pradiniam krovinio ánaðui!");
					//OnPlayerPickUpPickup(playerid, PickupsInfo[KurjPasikrovimas]);

					return 1;
				}

				vKrovinys[vehicleid] 		= listitem + 1;
				PI[playerid][KaPasikroves] 	= listitem;
				vKrovinioVerte[vehicleid]	= KurjeriuPasikrovimas[listitem][Price1];
				vKrovinioAtlygis[vehicleid] = KurjeriuPasikrovimas[listitem][Price2];

				PI[playerid][KrovimoLaikas]		= gettime() + (50 + random(50));
				PI[playerid][Kraunasi]			= true;
				PI[playerid][VezeKrovini] 		= gettime() + 480;
			}

			TogglePlayerControllable(playerid, false);
		}

		return 1;
	}

	if(dialogid == 4503)
	{
		if(!response) return pc_cmd_gps(playerid);
		if(response)
		{
			new Line[3][40]; explode(FamousGpsPlaces[listitem][1], Line, ",");

			PI[playerid][GpsFinishPos][0] = floatstr(Line[0]);
			PI[playerid][GpsFinishPos][1] = floatstr(Line[1]);
			PI[playerid][GpsFinishPos][2] = floatstr(Line[2]);

			SetPlayerCheckpointEx(playerid, 7, floatstr(Line[0]), floatstr(Line[1]), floatstr(Line[2]), 2.0);

			if(PI[playerid][AdminLevel] == LEVEL_OWNER)
			{
				SetPlayerPos 			(playerid, floatstr(Line[0]), floatstr(Line[1]), floatstr(Line[2]) + 1);
				SetPlayerInterior 		(playerid, 0);
				SetPlayerVirtualWorld 	(playerid, 0);
			}

			new String[216];

			format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}paþymëtas (-a) jûsø þemelapyje!", FamousGpsPlaces[listitem][0]);
			SendClientMessage(playerid, -1, String);
		}

		return 1;
	}

	if(dialogid == 4504)
	{
		if(!response) return pc_cmd_gps(playerid);
		if(response)
		{
			new Line2[3][40]; explode(UzkandinesRestoranai[listitem][1], Line2, ",");

			PI[playerid][GpsFinishPos][0] = floatstr(Line2[0]);
			PI[playerid][GpsFinishPos][1] = floatstr(Line2[1]);
			PI[playerid][GpsFinishPos][2] = floatstr(Line2[2]);

			SetPlayerCheckpointEx(playerid, 7, floatstr(Line2[0]), floatstr(Line2[1]), floatstr(Line2[2]), 2.0);

			if(PI[playerid][AdminLevel] == LEVEL_OWNER)
			{
				SetPlayerPos 			(playerid, floatstr(Line2[0]), floatstr(Line2[1]), floatstr(Line2[2]) + 1);
				SetPlayerInterior 		(playerid, 0);
				SetPlayerVirtualWorld 	(playerid, 0);
			}

			new String[216];
			format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}paþymëtas (-a) jûsø þemelapyje!", UzkandinesRestoranai[listitem][0]);
			SendClientMessage(playerid, -1, String);
		}
		return 1;
	}

	if(dialogid == DIALOG_BAUDOS_MOKEJIMAS_PASTATE)
	{
		if(response)
		{
			new bauda = PI[playerid][Ieskomas] * 100;

			if(GetPlayerMoneyA(playerid) < bauda) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

			Pelnas[0] += bauda;

			GivePlayerMoneyA    (playerid, -bauda);
			SendClientMessage   (playerid, -1, "{ffffff} Sëkmingai susimokëjote baudà uþ savo nusiþengimus!");

			new str[128];
			PI[playerid][Ieskomas] = 0;
			PI[playerid][beglys] = false;

			format(str, sizeof(str), "~y~[]~w~ ITARIMO LYGIS:~R~ %d", PI[playerid][Ieskomas]);
			PlayerTextDrawSetString(playerid, hudas_p[playerid][1], str);
		}

		return 1;
	}

	if(dialogid == 987)
	{
		if(response)
		{
			if(PI[playerid][uniformd]) SetPlayerSkin(playerid, PI[playerid][drabuziai]);

			if(PI[playerid][specialybe] == 1 || PI[playerid][specialybe] == 5)
			{
				ac_ResetPlayerWeapons(playerid);
			}

			PI[playerid][specialybe] 	= 0;
			PI[playerid][uniformd] 		= false;
			PI[playerid][uniforma] 		= -1;
			PI[playerid][ispejimai] 	= 0;
			PI[playerid][pradirbo] 		= 0;
			PI[playerid][DarboRangas] 	= 0;

			for(new index = 0; index < 3; index ++) PI[playerid][SiandienPriimta][index] 	= 0;
			for(new index = 0; index < 3; index ++) PI[playerid][SiaSavaitePriimta][index] 	= 0;
			for(new index = 0; index < 3; index ++) PI[playerid][IsVisoPriimta][index] 		= 0;

			new query[150];

			format(query, sizeof(query), "UPDATE `players` SET `SiandienPriimta` = '%d', `SiaSavaitePriimta` = '%d', `IsVisoPriimta` = '%d' WHERE `Vardas` = '%s'",
			PI[playerid][SiandienPriimta][0], PI[playerid][SiaSavaitePriimta][0], PI[playerid][IsVisoPriimta][0], GetPlayerNameEx(playerid));
			mysql_query(query);

	 		format(query, 150, "UPDATE `players` SET `Job` = '0' WHERE `Vardas` = '%s'", GetPlayerNameEx(playerid));
			mysql_query(query);

			ApplyAnimation(playerid, "PLAYIDLES","stretch", 4.1, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, -1, "{ffffff} Sëkmingai palikote savo darbà!");

			return 1;
		}
	}

	if(dialogid == 5889)
	{
		if(response)
		{
			SendClientMessage(playerid, -1, "{ffffff} Pinigai bus imami!");

			TaxiInfo[keleivis[playerid]][imti] = true;
		}
		else
		{
			SendClientMessage(playerid, -1, "{ffffff} Pinigai nebus imami!");

			TaxiInfo[keleivis[playerid]][imti] = false;
		}

		return 1;
	}

	if(dialogid == 5888)
	{
		if(response)
		{
			new String[216], wep[64], Float:P_Pos[3];
			new id = ChoosedPlayer[playerid];
			
			GetPlayerPos(id, P_Pos[0], P_Pos[1], P_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Ginklø pardavëjas per toli nuo jûsø!");
			if(id == INVALID_PLAYER_ID) return SendClientMessage(id, -1, "{ffffff} Þaidëjas atsijungë!");

			new weapon = PI[playerid][KokiGinkla];
			new pKaina = PI[playerid][KainaKulku];
			new kiek = PI[playerid][KiekKulku];

			if(ac_GetPlayerAmmo(id, weapon) < kiek) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas ðio ginklo rankose nebeturi.");

			ac_GivePlayerWeapon(id, weapon, - kiek);
			ac_GivePlayerWeapon(playerid, weapon, kiek);

			GivePlayerMoneyA(playerid, -pKaina);
			GivePlayerMoneyA(id, pKaina);

			GetWeaponName(weapon, wep, sizeof(wep));

			format(String, sizeof(String), "{ffffff} Pardavëte ginklo {FFAF00}%s {FFAF00}%d {ffffff}kulkø þaidëjui {FFAF00}%s{ffffff}!", wep, kiek, GetPlayerNameEx(playerid));
			SendClientMessage(id, -1, String);

			format(String, sizeof(String), "{ffffff} Nusipirkote ginklo {FFAF00}%s {FFAF00}%d {ffffff}kulkø ið {FFAF00}%s{ffffff}!", wep, kiek, GetPlayerNameEx(id));
			SendClientMessage(playerid, -1, String);

			PI[playerid][KokiGinkla] = 
			PI[playerid][KainaKulku] = 
			PI[playerid][KiekKulku] = 0;
			ChoosedPlayer[playerid] = INVALID_PLAYER_ID;
		}
		else
		{
			new id = ChoosedPlayer[playerid];

			if(id == INVALID_PLAYER_ID) return SendClientMessage(id, -1, "{ffffff} Þaidëjas atsijungë!");

			SendClientMessage(playerid, -1, "{ffffff} Atsisakëte nusipirkti ginklà!");
			SendClientMessage(id, -1, "{ffffff} Þaidëjas atsisakë nusipirkti ginklà!");
		}

		return 1;
	}

	if(dialogid == VielosPirkimas)
	{
		if(response)
		{
			new String[128];
			new id = ChoosedPlayer[playerid];

			if(id == INVALID_PLAYER_ID) return SendClientMessage(id, -1, "{ffffff} Þaidëjas atsijungë!");

			new pKaina = PI[playerid][KainaKulku];

			GivePlayerMoneyA(playerid, -pKaina);
			GivePlayerMoneyA(id, pKaina);

			PI[id][dViela] --;
			PI[playerid][Viela] ++;

			format(String, sizeof(String), "{ffffff} Pardavëte vielà þaidëjui {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid));
			SendClientMessage(id, -1, String);

			format(String, sizeof(String), "{ffffff} Nusipirkote vielà ið þaidëjo {FFAF00}%s{ffffff}!", GetPlayerNameEx(id));
			SendClientMessage(playerid, -1, String);
		}
		else
		{
			new id = ChoosedPlayer[playerid];

			if(id == INVALID_PLAYER_ID) return SendClientMessage(id, -1, "{ffffff} Þaidëjas atsijungë!");

			SendClientMessage(playerid, -1, "{ffffff} Atsisakëte nusipirkti vielà!");
			SendClientMessage(id, -1, "{ffffff} Þaidëjas atsisakë nusipirkti vielà!");
		}

		return 1;
	}

	if(dialogid == DIALOG_NUSTATYMAI)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					for(new s = 0; s < 4; s++) TextDrawHideForPlayer(playerid, MetroCity_logo_g[s]);

					SendClientMessage(playerid, -1, "{ffffff} Logotipas paslëptas!");

					return 1;
				}

				case 1:
				{
					for(new s = 0; s < 4; s++) TextDrawShowForPlayer(playerid, MetroCity_logo_g[s]);

					SendClientMessage(playerid, -1, "{ffffff} Logotipas rodomas!");

					return 1;
				}

				case 2:
				{
					if(PI[playerid][laikrodis] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite laikrodþio!");

					LaikPasleptas[playerid] = true;

					SendClientMessage(playerid, -1, "{ffffff} Laikrodis paslëptas!");

					return 1;
				}

				case 3:
				{
					if(PI[playerid][laikrodis] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite laikrodþio!");

					LaikPasleptas[playerid] = false;

					SendClientMessage(playerid, -1, "{ffffff} Laikrodis rodomas!");

					return 1;
				}

				case 4:
				{
					HideHungryHood 		(playerid);
					SendClientMessage 	(playerid, -1, "{ffffff} Hudas paslëptas!");

					return 1;
				}

				case 5:
				{
					ShowHungryHood 		(playerid);
					SendClientMessage 	(playerid, -1, "{ffffff} Hudas rodomas!");

					return 1;
				}
			}
		}
		return 1;
	}

	/*if(dialogid == 6001)
	{
		if(response)
		{
			new vehicle = GetPlayerVehicleID(playerid);

			GivePlayerMoneyA(playerid, -1000);

			switch(listitem)
			{
				case 0: AddVehicleComponent(vehicle, 1073);
				case 1: AddVehicleComponent(vehicle, 1074);
				case 2: AddVehicleComponent(vehicle, 1075);
				case 3: AddVehicleComponent(vehicle, 1076);
				case 4: AddVehicleComponent(vehicle, 1077);
				case 5: AddVehicleComponent(vehicle, 1078);
				case 6: AddVehicleComponent(vehicle, 1079);
				case 7: AddVehicleComponent(vehicle, 1080);
				case 8: AddVehicleComponent(vehicle, 1081);
				case 9: AddVehicleComponent(vehicle, 1082);
				case 10: AddVehicleComponent(vehicle, 1083);
				case 11: AddVehicleComponent(vehicle, 1084);
				case 12: AddVehicleComponent(vehicle, 1085);
			}
		}

		return 1;
	}*/

	if(dialogid == 10719)
	{
		if(response)
		{
			new String[216];

			if(PI[playerid][medicinospazyma] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite paþymà kuri dar galioja!");

			if(PI[playerid][pinigai] < 2000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

			new Medikai = 0;

			for(new p, size = GetPlayerPoolSize(); p <= size; p ++)
			{
				if(IsPlayerConnected(p) && !PI[p][AFK_Stat])
				{
					switch(PI[p][specialybe])
					{
						case 2: Medikai ++;
					}
				}
			}

			if(Medikai > 2) return SendClientMessage(playerid, -1, "{ffffff} Serveryje yra aktyvûs medikai, todël sveikatos paþymëjimà galite ásigyti ið jø!");

			PI[playerid][medicinospazyma] = gettime() + 259200;

			new HealthTime = PI[playerid][medicinospazyma];

			format(String, sizeof(String), "{ffffff} Ásigijote sveikatos paþymëjimà. Jis galios iki: {FFAF00}%s",  TimestampToDate(HealthTime));
			SendClientMessage(playerid, -1, String);

			GivePlayerMoneyA(playerid, -2000);

			Pelnas[3] += 1000;
		}

		return 1;
	}

	if(dialogid == 7341)
	{
		new bauda  = PI[playerid][rkaina][0];
		new mentas = PI[playerid][rid][0];

		new String[216];

		if(mentas == INVALID_PLAYER_ID)
		{
			SendClientMessage(playerid, -1, "{ffffff} Þaidëjas atsijungë!");
			return 1;
		}

		if(response)
		{
			new str[128];
			if(GetPlayerMoneyA(playerid) >= bauda)
			{
				GivePlayerMoneyA(playerid, -bauda);

				GivePlayerMoneyA(mentas, bauda/2);

				format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}iðteisino jus, baudà sumokëjote grynais!", GetPlayerNameEx(mentas));
				SendClientMessage(playerid, -1, String);

				format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Þaidëjas {FFAF00}%s{ffffff} sumokëjo baudà {FFAF00}$%s{ffffff}.", GetPlayerNameEx(mentas), GetPlayerNameEx(playerid), konvertuoti_pinigus(bauda));
				switch(PI[mentas][specialybe])
				{
					case 1: ZinuteRacija(String, POLICIJA);
					case 5: ZinuteRacija(String, 5);
				}

				Surakinti(playerid, true);

				PI[playerid][Ieskomas] = 0;
				PI[playerid][beglys] = false;

				format(str, sizeof(str), "~y~[]~w~ ITARIMO LYGIS:~R~ %d", PI[playerid][Ieskomas]);
				PlayerTextDrawSetString(playerid, hudas_p[playerid][1], str);

				return 1;
			}
			else
			{
				if(PI[playerid][banke] >= bauda)
				{
					PI[playerid][banke] -= bauda;

					GivePlayerMoneyA(mentas, bauda/2);

					format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}iðteisino jus, baudà sumokëjote bankiniu pervedimu!", GetPlayerNameEx(mentas));
					SendClientMessage(playerid, -1, String);

					format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Þaidëjas {FFAF00}%s{ffffff} sumokëjo baudà {FFAF00}$%s{ffffff}.", GetPlayerNameEx(mentas), GetPlayerNameEx(playerid), konvertuoti_pinigus(bauda));
					switch(PI[mentas][specialybe])
					{
						case 1: ZinuteRacija(String, POLICIJA);
						case 5: ZinuteRacija(String, 5);
					}

					Surakinti(playerid, true);

					PI[playerid][Ieskomas] = 0;
					PI[playerid][beglys] = false;

					format(str, sizeof(str), "~y~[]~w~ ITARIMO LYGIS:~R~ %d", PI[playerid][Ieskomas]);
					PlayerTextDrawSetString(playerid, hudas_p[playerid][1], str);

					return 1;
				}
				else
				{
					SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					SendClientMessage(mentas, -1, "{ffffff} Þaidëjui neuþtenka pinigø!");

					return 1;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, -1, "{ffffff} Atsisakëte mokëti baudà!");

			SendClientMessage(mentas, -1, "{ffffff} Þaidëjas atsisakë mokëti baudà!");
		}
		return 1;
	}

	if(dialogid == 5120)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: SetPlayerFightingStyle 	(playerid, FIGHT_STYLE_ELBOW);
				case 1: SetPlayerFightingStyle  (playerid, FIGHT_STYLE_BOXING);
				case 2: SetPlayerFightingStyle 	(playerid, FIGHT_STYLE_GRABKICK);
				case 3: SetPlayerFightingStyle 	(playerid, FIGHT_STYLE_KNEEHEAD);
				case 4: SetPlayerFightingStyle  (playerid, FIGHT_STYLE_KUNGFU);
				case 5: SetPlayerFightingStyle 	(playerid, FIGHT_STYLE_NORMAL);
			}

			SendClientMessage(playerid, -1, "{ffffff} Kovos stilius sëkmingai pakeistas. Sëkmës muðantis!");
		}

		return 1;
	}

	if(dialogid == 1475)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					new x, str[120], strf[1100];
					mysql_query("SELECT * FROM players ORDER BY Xp DESC LIMIT 10");
					mysql_store_result();
					while(mysql_retrieve_row())
					{
						new KoksVardas[24], KiekXp[10];
						x ++;
						mysql_fetch_field_row(KoksVardas, "Vardas");
						mysql_fetch_field_row(KiekXp, "Xp");
						format(str, 120, "{ffffff}%d. {FFAF00}%s {ffffff}turintis {FFAF00}%s {ffffff}patirties taðkø\n", x, KoksVardas, konvertuoti_pinigus(strval(KiekXp))); strcat(strf, str);
						ShowPlayerDialogEx(playerid, 1474, DIALOG_STYLE_MSGBOX, "{ffffff}TOP 10 XP", strf, "Aiðku", "");
					}
					mysql_free_result();
					return 1;
				}
				case 1:
				{
					new x, str[120], strf[1100];
					mysql_query("SELECT * FROM players ORDER BY MoneyPocket DESC LIMIT 10");
					mysql_store_result();
					while(mysql_retrieve_row())
					{
						x ++;
						new KoksVardas[24], KiekLitu[10];
						mysql_fetch_field_row(KoksVardas, "Vardas");
						mysql_fetch_field_row(KiekLitu, "MoneyPocket");
						format(str, 120, "{ffffff}%d. {FFAF00}%s {ffffff}turintis {FFAF00}$%s\n", x, KoksVardas, konvertuoti_pinigus(strval(KiekLitu))); strcat(strf, str);
						ShowPlayerDialogEx(playerid, 1474, DIALOG_STYLE_MSGBOX, "{ffffff}TOP 10 pinigus", strf, "Aiðku", "");
					}
					mysql_free_result();
					return 1;
				}
				case 2:
				{
					new x, str[120], strf[1100];
					mysql_query("SELECT * FROM players ORDER BY Kreditai DESC LIMIT 10");
					mysql_store_result();
					while(mysql_retrieve_row())
					{
						x ++;
						new KoksVardas[24], KiekKreditu[10];
						mysql_fetch_field_row(KoksVardas, "Vardas");
						mysql_fetch_field_row(KiekKreditu, "Kreditai");
						format(str, 120, "{ffffff}%d. {FFAF00}%s {ffffff}turintis {FFAF00}%s {ffffff}kreditø-(us)\n", x, KoksVardas, konvertuoti_pinigus(strval(KiekKreditu))); strcat(strf, str);
						ShowPlayerDialogEx(playerid, 1474, DIALOG_STYLE_MSGBOX, "{ffffff}TOP 10 kreditus", strf, "Aiðku", "");
					}
					mysql_free_result();
					return 1;
				}
				case 3:
				{
					new x, str[120], strf[1100];
					mysql_query("SELECT * FROM players ORDER BY Pradirbo DESC LIMIT 10");
					mysql_store_result();
					while(mysql_retrieve_row())
					{
						x ++;
						new KoksVardas[24], KiekPradirbo[10];
						mysql_fetch_field_row(KoksVardas, "Vardas");
						mysql_fetch_field_row(KiekPradirbo, "Pradirbo");
						format(str, 120, "{ffffff}%d. {FFAF00}%s {ffffff}pradirbæs {FFAF00}%s {ffffff}min\n", x, KoksVardas, konvertuoti_pinigus(strval(KiekPradirbo))); strcat(strf, str);
						ShowPlayerDialogEx(playerid, 1474, DIALOG_STYLE_MSGBOX, "{ffffff}TOP 10 pradirbtà laikà", strf, "Aiðku", "");
					}
					mysql_free_result();
					return 1;
				}
				case 4:
				{
					new x, str[120], strf[1100];
					mysql_query("SELECT * FROM players ORDER BY Alga DESC LIMIT 10");
					mysql_store_result();
					while(mysql_retrieve_row())
					{
						x ++;
						new KoksVardas[24], KiekAlga[10];
						mysql_fetch_field_row(KoksVardas, "Vardas");
						mysql_fetch_field_row(KiekAlga, "Alga");
						format(str, 120, "{ffffff}%d. {FFAF00}%s {ffffff}turintis {FFAF00}%s {ffffff}uþdirbtos algos\n", x, KoksVardas, konvertuoti_pinigus(strval(KiekAlga))); strcat(strf, str);
						ShowPlayerDialogEx(playerid, 1474, DIALOG_STYLE_MSGBOX, "{ffffff}TOP 10 uþdirbtà alga", strf, "Aiðku", "");
					}
					mysql_free_result();
					return 1;
				}
				case 5:
				{
					new x, str[120], strf[1100];
					mysql_query("SELECT * FROM players ORDER BY Wanted DESC LIMIT 10");
					mysql_store_result();
					while(mysql_retrieve_row())
					{
						x ++;
						new KoksVardas[24], KiekWanted[10];
						mysql_fetch_field_row(KoksVardas, "Vardas");
						mysql_fetch_field_row(KiekWanted, "Wanted");
						format(str, 120, "{ffffff}%d. {FFAF00}%s {ffffff}turintis {FFAF00}%s {ffffff}ieðkomumo taðkø\n", x, KoksVardas, konvertuoti_pinigus(strval(KiekWanted))); strcat(strf, str);
						ShowPlayerDialogEx(playerid, 1474, DIALOG_STYLE_MSGBOX, "{ffffff}TOP 10 ieðkomumo", strf, "Aiðku", "");
					}
					mysql_free_result();
					return 1;
				}
				case 6:
				{
					new x, str[120], strf[1100];
					mysql_query("SELECT * FROM players ORDER BY Prazaide DESC LIMIT 10");
					mysql_store_result();
					while(mysql_retrieve_row())
					{
						x ++;
						new KoksVardas[24], KiekPrazaide[10];
						mysql_fetch_field_row(KoksVardas, "Vardas");
						mysql_fetch_field_row(KiekPrazaide, "Prazaide");
						format(str, 120, "{ffffff}%d. {FFAF00}%s {ffffff}ðiandien praþaidë {FFAF00}%d {ffffff}minuèiø\n", x, KoksVardas, strval(KiekPrazaide)); strcat(strf, str);
						ShowPlayerDialogEx(playerid, 1474, DIALOG_STYLE_MSGBOX, "{ffffff}TOP 10 praleidæ laiko", strf, "Aiðku", "");
					}
					mysql_free_result();
					return 1;
				}
				case 7:
				{
					new x, str[120], strf[1100];
					mysql_query("SELECT * FROM players ORDER BY KiekTuriRepTasku DESC LIMIT 10");
					mysql_store_result();
					while(mysql_retrieve_row())
					{
						x ++;
						new KoksVardas[24], RepTaskai[10];
						mysql_fetch_field_row(KoksVardas, "Vardas");
						mysql_fetch_field_row(RepTaskai, "KiekTuriRepTasku");
						format(str, 120, "{ffffff}%d. {FFAF00}%s {ffffff}turi {FFAF00}%d {ffffff}REP taðkus\n", x, KoksVardas, strval(RepTaskai)); strcat(strf, str);
						ShowPlayerDialogEx(playerid, 1474, DIALOG_STYLE_MSGBOX, "{ffffff}TOP 10 pagal REP taðkus", strf, "Aiðku", "");
					}
					mysql_free_result();
					return 1;
				}
				case 8:
				{
					new x, str[120], strf[1100];
					mysql_query("SELECT * FROM gaujuinfo ORDER BY gPoints DESC LIMIT 10");
					mysql_store_result();
					while(mysql_retrieve_row())
					{
						x ++;
						new KoksVardas[64], zpat[10];
						mysql_fetch_field_row(KoksVardas, "gTitle");
						mysql_fetch_field_row(zpat, "gPoints");
						format(str, 120, "{ffffff}%d. Gauja {FFAF00}%s {ffffff}turi {FFAF00}%d {ffffff}taðkø\n", x, KoksVardas, strval(zpat)); strcat(strf, str);
						ShowPlayerDialogEx(playerid, 1474, DIALOG_STYLE_MSGBOX, "{ffffff}TOP 10 gaujø pagal taðkus", strf, "Aiðku", "");
					}
					mysql_free_result();
					return 1;
				}
				case 9:
				{
					new x, str[120], strf[1100];
					mysql_query("SELECT * FROM players ORDER BY HelpsForToday DESC LIMIT 10");
					mysql_store_result();
					while(mysql_retrieve_row())
					{
						x ++;
						new KoksVardas[24], zpat[10];
						mysql_fetch_field_row(KoksVardas, "Vardas");
						mysql_fetch_field_row(zpat, "HelpsForToday");
						format(str, 120, "{ffffff}%d. {FFAF00}%s {ffffff}ðiandien padëjo {FFAF00}%d {ffffff}kartø\n", x, KoksVardas, strval(zpat)); strcat(strf, str);
						ShowPlayerDialogEx(playerid, 1474, DIALOG_STYLE_MSGBOX, "{ffffff}TOP 10", strf, "Aiðku", "");
					}
					mysql_free_result();
					return 1;
				}
				/*case 11:
				{
					new x, str[120], strf[1100];
					mysql_query("SELECT * FROM players ORDER BY HelpsForWeek DESC LIMIT 10");
					mysql_store_result();
					while(mysql_retrieve_row())
					{
						x ++;
						new KoksVardas[24], zpat[10];
						mysql_fetch_field_row(KoksVardas, "Vardas");
						mysql_fetch_field_row(zpat, "HelpsForWeek");
						format(str, 120, "{ffffff}%d. {FFAF00}%s {ffffff}ðià savaitæ padëjo {FFAF00}%d {ffffff}kartø\n", x, KoksVardas, strval(zpat)); strcat(strf, str);
						ShowPlayerDialogEx(playerid, 1474, DIALOG_STYLE_MSGBOX, "{ffffff}TOP 10", strf, "Aiðku", "");
					}
					mysql_free_result();
					return 1;
				}*/
				case 10:
				{
					new x, str[120], strf[1100];
					mysql_query("SELECT * FROM players ORDER BY HelpsInAll DESC LIMIT 10");
					mysql_store_result();
					while(mysql_retrieve_row())
					{
						x ++;
						new KoksVardas[24], zpat[10];
						mysql_fetch_field_row(KoksVardas, "Vardas");
						mysql_fetch_field_row(zpat, "HelpsInAll");
						format(str, 120, "{ffffff}%d. {FFAF00}%s {ffffff}ið viso padëjo {FFAF00}%d {ffffff}kartø\n", x, KoksVardas, strval(zpat)); strcat(strf, str);
						ShowPlayerDialogEx(playerid, 1474, DIALOG_STYLE_MSGBOX, "{ffffff}TOP 10", strf, "Aiðku", "");
					}
					mysql_free_result();
					return 1;
				}
			}
		}
		return 1;
	}

	if(dialogid == 1474)
	{
		if(response)
		{
			pc_cmd_top(playerid);
		}

		return 1;
	}

	if(dialogid == 4147)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, RED, "* Kad uþdegtum maðinai ðviesas turi sëdëti uþ jos vairo!");
					new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;
					GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
					if(!Lights) { SetVehicleParamsEx(vehicleid, Engine, true, Alarm, Doors, Bonnet, Boot, Objective), GameTextForPlayer(playerid,"~g~IJUNGIAI SVIESAS",2000,4); } else { SetVehicleParamsEx(vehicleid, Engine,  false, Alarm, Doors, Bonnet, Boot, Objective), GameTextForPlayer(playerid,"~R~ISJUNGIAI SVIESAS",2000,4); }
				}
				case 1:
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, RED, "* Kad uþvestum maðinà turi sëdëti uþ jos vairo!");
					new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;
					GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
					if(!Bonnet) { SetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, true, Boot, Objective), GameTextForPlayer(playerid,"~g~ATIDARIAI KAPOTA",2000,4); } else { SetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, false, Boot, Objective), GameTextForPlayer(playerid,"~R~UZDARIAI KAPOTA",2000,4); }
				}
				case 2:
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, RED, "* Kad uþvestum maðinà turi sëdëti uþ jos vairo!");
					new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;
					GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
					if(!Boot) { SetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, true, Objective), GameTextForPlayer(playerid,"~g~ATIDARIAI BAGAZINE",2000,4); } else { SetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, false, Objective), GameTextForPlayer(playerid,"~R~UZDARIAI BAGAZINE",2000,4); }
				}
				case 3:
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, RED, "* Kad uþvestum maðinà turi sëdëti uþ jos vairo!");
					new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;
					GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
					if(!Doors) { SetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, true, Bonnet, Boot, Objective), GameTextForPlayer(playerid,"~g~UZRAKINAI DURIS",2000,4); } else { SetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, false, Bonnet, Boot, Objective), GameTextForPlayer(playerid,"~R~ATRAKINAI DURIS",2000,4); }
				}
			}
		}
		return 1;
	}
//Þvejyba
	if(dialogid == 8651)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					new strf[1500], str[200];
					str = "{ffffff}Sveiki, ðioje vietoje galite þvejoti. Visø pirmà norint þvejoti jums reikës:\n1. Meðkerës;\n2. Valo;\n3. Masalo;\n4. Gerø ágûdþiø (patirties).\n\n"; strcat(strf, str);
					str = "Viskà galite nusipirkti èia pat!\nViskà nusipirkus jûs turite eiti prie lieptelio ir pradëti þvejoti paspaudus kairájá pëlës mygtukà (LMB).\n"; strcat(strf, str);
					str = "Kibimas gali trukti ávariai nuo {FFAF00}5 {ffffff}sekundþiø iki {FFAF00}10 {ffffff}sekundþiø, tad bûkite budrûs, nes neþinia kada gali uþkibti!\n"; strcat(strf, str);
					str = "Uþkibus þuviai per keletà sekundþiø jûs turësite spëti iðtraukti jà (prasidës MINI þaidimas, turësite spaudinëti nustatyas spalvas).\n \n"; strcat(strf, str);
					str = "Uþ pagautas þuvis jûs gausite ávariai:\nUnguriai {FFAF00}$8/kg\n"; strcat(strf, str);
					str = "{ffffff}Karosai {FFAF00}$8/kg\n{ffffff}Karpiai {FFAF00}$15/kg\n{ffffff}Karðiai {FFAF00}$11/kg\n{ffffff}Lydekos {FFAF00}$19/kg\n\n"; strcat(strf, str);
					str = "{ffffff}Taip pat turëtumëte þinoti, kad pagavus {FFAF00}100 {ffffff}KG þuvies jà turite parduoti MetroCity.lt turguje, nes daugiau nepaneðite!\n \n"; strcat(strf, str);
					str = "Informacija apie jûsø turimà þvejybos patirtá bei lygá pamatysite paraðæ {FFAF00} /zvejyba{ffffff}, kuo didesnis jûsø lygis, tuo daugiau privalumø turësite,\n"; strcat(strf, str);
					str = "pavyzdþiui: nuo lygio priklauso pagautos þuvies svoris, nuo tam tikro lygio galësite pirkti paðarà, kuris pritrauks þuvis, galësite nuomotis katerius ir panaðiai!\n \n"; strcat(strf, str);
					str = "Sëkmës þvejyboje!"; strcat(strf, str);

					ShowPlayerDialogEx(playerid, 8652, DIALOG_STYLE_MSGBOX, "Þvejybos turgus", strf, "Gerai", "");
				}

				case 1: OnPlayerPickUpPickup(playerid, PickupsInfo[ZvejuTurgus]);

				case 2:
				{
					if(PI[playerid][meskere]) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite meðkëræ!");

					if(GetPlayerMoneyA(playerid) < 250) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai nusipirkote meðkëræ!");

					PI[playerid][meskere] = true;

					GivePlayerMoneyA 	(playerid, -250);
					OnPlayerPickUpPickup(playerid, PickupsInfo[ZvejuTurgus]);

					if(PropertyInfo[ZVEJYBOS_TURGUS][pBuyed])
					{
						PropertyInfo[ZVEJYBOS_TURGUS][pProfit] += 250;
					}
				}

				case 3:
				{
					if(PI[playerid][valas]) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite valà!");

					if(GetPlayerMoneyA(playerid) < 80) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai nusipirkote valà!");

					PI[playerid][valas] = true;

					GivePlayerMoneyA 	(playerid, -80);
					OnPlayerPickUpPickup(playerid, PickupsInfo[ZvejuTurgus]);

					if(PropertyInfo[ZVEJYBOS_TURGUS][pBuyed])
					{
						PropertyInfo[ZVEJYBOS_TURGUS][pProfit] += 80;
					}
				}

				case 4:
				{
					if(PI[playerid][masalas] >= 100) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite pakankamai masalo!");

					if(GetPlayerMoneyA(playerid) < 50) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai nusipirkote {FFAF00}25 {ffffff}vnt masalo!");

					PI[playerid][masalas] += 25;

					GivePlayerMoneyA 	(playerid, -50);
					OnPlayerPickUpPickup(playerid, PickupsInfo[ZvejuTurgus]);

					if(PropertyInfo[ZVEJYBOS_TURGUS][pBuyed])
					{
						PropertyInfo[ZVEJYBOS_TURGUS][pProfit] += 50;
					}
				}

				/*case 5:
				{
					new unguriai = PI[playerid][ungurys];
					new karosai = PI[playerid][karosas];
					new karpiai = PI[playerid][karpis];
					new karsiai = PI[playerid][karsis];
					new lydekos = PI[playerid][lydeka];

					if(unguriai + karosai + karpiai + karsiai + lydekos <=0) return SendClientMessage(playerid, RED, "* Neturi ko parduoti, eik visø pirmà prigaudyk þuvø ir tada parduok!");

					new sumokes = unguriai*8 + karosai*5 + karpiai*15 + karsiai*11 + lydekos*19;

					GivePlayerMoneyA(playerid, sumokes);

					new str[128];

					format(str, sizeof(str), "{ffffff} Pardavëte visas savo turimas þuvis ir gavote {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(sumokes));
					SendClientMessage(playerid, -1, str);

					PI[playerid][ungurys] = 0;
					PI[playerid][karosas] = 0;
					PI[playerid][karpis] = 0;
					PI[playerid][karsis] = 0;
					PI[playerid][lydeka] = 0;
				}*/
			}
		}
		return 1;
	}

	if(dialogid == 8652)
	{
		OnPlayerPickUpPickup(playerid, PickupsInfo[ZvejuTurgus]);

		return 1;
	}

	if(dialogid == 9800)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: ShowPlayerDialogEx(playerid, 9801, DIALOG_STYLE_INPUT, "Direktorio ofisas", "Áraðykite þaidëjo: Vardà_Pavardæ, kurá norite pakviesti á darbà", "Rinktis", "Atgal");
				case 1: ShowPlayerDialogEx(playerid, 9802, DIALOG_STYLE_INPUT, "Direktorio ofisas", "Áraðykite darbuotojo: Vardà_Pavardæ, kad iðmestumëte darbuotojà ið firmos", "Rinktis", "Atgal");
				case 2: ShowPlayerDialogEx(playerid, 9803, DIALOG_STYLE_INPUT, "Direktorio ofisas", "Áraðykite praneðimà kurá norësite paskelbti", "Rinktis", "Atgal");
				case 3:
				{
					if(GetPelnasIDFromLeader(playerid) == -1) return 1;
					ShowPlayerDialogEx(playerid, PELNO_DIALOG1, DIALOG_STYLE_LIST, "{ffffff}Pelno valdymas", "{ffffff}  Balansas.\n Paimti.\n Padëti.\n Iðdalinti.", "Pasirinkti", "Atgal");
				}
				case 4: ShowPlayerDialogEx(playerid, 9804, DIALOG_STYLE_INPUT, "{ffffff}Áspëjimai", "Áraðykite darbuotojo vardà kurá norësite áspëti:", "Áspëti", "Atgal");
			}
		}

		return 1;
	}

	if(dialogid == 4571)
	{
		if(response)
		{
			ShowPlayerDialogEx(playerid, 9800, DIALOG_STYLE_LIST, "Direktorio ofisas", "Priimti þaidëjà á darbà\nIðmesti darbuotojà ið darbo\nPaskelbti praneðimà\nPelno valdymas\nÁspëti darbuotojà", "Rinktis", "Iðeiti");
		}

		return 1;
	}

	if(dialogid == 9801)
	{
		if(!response) return ShowPlayerDialogEx(playerid, 9800, DIALOG_STYLE_LIST, "Direktorio ofisas", "Priimti þaidëjà á darbà\nIðmesti darbuotojà ið darbo\nPaskelbti praneðimà\nPelno valdymas\nÁspëti darbuotojà", "Rinktis", "Iðeiti");
		if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
			if(IsNumeric(inputtext) || !strlen(inputtext)) return ShowPlayerDialogEx(playerid, 9801, DIALOG_STYLE_INPUT, "Direktorio ofisas", "Þaidëjo su tokiu vardu nëra!\nÁraðykite þaidëjo: Vardà_Pavardæ, kurá norite pakviesti á darbà", "Rinktis", "Atgal");

			new id = GetPlayeridMid(inputtext), String[216], KoksDarbas[50];

			if(PI[id][plead] > 0 && id != playerid) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra kito darbo direktorius!");

			if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

			if(PI[id][leanvited][PI[playerid][plead]-1] || PI[id][specialybe] == GetJobFromFaction(PI[playerid][plead])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas jau turi pakvietimà!");

			switch(PI[playerid][plead])
			{
				case LEAD_FARAI:      KoksDarbas = "Policijos Departamente";
				case LEAD_MEDIKAI:    KoksDarbas = "Medicinos Departamente";
				case LEAD_KURJ:       KoksDarbas = "Kurjeriuose";
				case LEAD_Mechanikas: KoksDarbas = "autoserviso ECO darbuotoju";
				case LEAD_FUROS:      KoksDarbas = "Fûristuose";
				case LEAD_Gdyleriai:  KoksDarbas = "Spec. bûrio pajëguose ARAS";
				case LEAD_TAXI:  	  KoksDarbas = "Taksistuose";
				default: return 1;
			}

			PI[id][leanvited][PI[playerid][plead] - 1] = true;

			format(String, sizeof(String), "{ffffff} Pakvietëte {FFAF00}%s {ffffff}ástoti á jûsø darbà!", GetPlayerNameEx(id));
			SendClientMessage(playerid, -1, String);

			format(String, sizeof(String), "{ffffff} Direktorius {FFAF00}%s {ffffff}kvieèia jus dirbti {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), KoksDarbas);
			SendClientMessage(id, -1, String);
			SendClientMessage(id, -1, "{ffffff} Norint ásidarbinti atvykite á ðio darbo bûstinæ!");
		}

		return 1;
	}
//------------------------------------------------------------------------------
	if(dialogid == 9802)
	{
		if(!response) return ShowPlayerDialogEx(playerid, 9800, DIALOG_STYLE_LIST, "Direktorio ofisas", "Priimti þaidëjà á darbà\nIðmesti darbuotojà ið darbo\nPaskelbti praneðimà\nPelno valdymas\nÁspëti darbuotojà", "Rinktis", "Iðeiti");
		if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
			if(IsNumeric(inputtext) || !strlen(inputtext)) return ShowPlayerDialogEx(playerid, 9802, DIALOG_STYLE_INPUT, "Direktorio ofisas", "Þaidëjo su tokiu vardu nëra!\nÁraðykite darbuotojo: Vardà_Pavardæ, kad iðmestumëte darbuotojà ið firmos", "Rinktis", "Atgal");
			new id = GetPlayeridMid(inputtext), String[216], KoksDarbas[50];
			if(id != INVALID_PLAYER_ID)
			{
				switch(PI[playerid][plead])
				{
					case LEAD_FARAI:      KoksDarbas = "Policijos Departamento";
					case LEAD_MEDIKAI:    KoksDarbas = "Medicinos Departamento";
					case LEAD_KURJ:       KoksDarbas = "Kurjeriø";
					case LEAD_Mechanikas: KoksDarbas = "autoserviso ECO";
					case LEAD_FUROS:      KoksDarbas = "Fûristø";
					case LEAD_Gdyleriai:  KoksDarbas = "Spec. bûrio pajëgø ARAS";
					case LEAD_TAXI:  	  KoksDarbas = "Taksistø";
					default: return 1;
				}

				format(String, sizeof(String), "{ffffff} Iðmetëte {FFAF00}%s {ffffff}ið jûsø darbo!", GetPlayerNameEx(id));
				SendClientMessage(playerid, -1, String);

				format(String, sizeof(String), "{ffffff} Direktorius {FFAF00}%s {ffffff}iðmëtë jus ið {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), KoksDarbas);
				SendClientMessage(id, -1, String);

				if(PI[id][uniformd]) SetPlayerSkin(id, PI[id][drabuziai]);

				PI[id][specialybe] 	= 0;
				PI[id][uniformd]   	= false;
				PI[id][uniforma]  	= -1;
				PI[id][DarboRangas] = 0;
				PI[id][pradirbo]   	= 0;
				PI[id][ispejimai]  	= 0;
			}
			else
			{
				new uQuerry[250], arDarbuotojas, darbas = GetJobFromFaction(PI[playerid][plead]);
				if(IsNumeric(inputtext) || !strlen(inputtext)) return ShowPlayerDialogEx(playerid, 9802, DIALOG_STYLE_INPUT, "Direktorio ofisas", "Þaidëjo su tokiu vardu nëra!\nÁraðykite darbuotojo: Vardà_Pavardæ, kad iðmestumëte darbuotojà ið firmos", "Rinktis", "Atgal");
				format(uQuerry, 150, "SELECT * FROM `players` WHERE `Vardas` = '%s'", inputtext);
				mysql_query(uQuerry);
				mysql_store_result();
				mysql_retrieve_row();
				if(mysql_num_rows())
				{
					mysql_fetch_field_row(uQuerry, "Job"); arDarbuotojas = strval(uQuerry);
					if(darbas != arDarbuotojas)
					{
						SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nedirba jûsø darbe!");
					}
					else
					{
						format(uQuerry, 250, "UPDATE `players` SET `Job` = '0', `Rangas` = '0', `Pradirbo` = '0', `Ispejimai` = '0', `Uniforma` = '-1' WHERE `Vardas` = '%s'", inputtext);
						mysql_query(uQuerry);
						format(String, sizeof(String), "{ffffff} Iðmetëte {FFAF00}%s {ffffff}ið jûsø darbo!", inputtext);
						SendClientMessage(playerid, -1, String);
					}
				}
				else
				{
					SendClientMessage(playerid, -1, "{ffffff} Tokio vartotojo mûsø duomenø bazëje nëra!");
				}
			}
		}

		return 1;
	}
//------------------------------------------------------------------------------
	if(dialogid == 9803)
	{
		if(!response) return ShowPlayerDialogEx(playerid, 9800, DIALOG_STYLE_LIST, "Direktorio ofisas", "Priimti þaidëjà á darbà\nIðmesti darbuotojà ið darbo\nPaskelbti praneðimà\nPelno valdymas\nÁspëti darbuotojà", "Rinktis", "Iðeiti");
		if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
			if(CheckMute(playerid)) return 1;

			new KoksDirektorius[50], String[216];

			if(PI[playerid][ParaseDyrikas] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Praneðimà skelbti galima tik kas 60 sekundþiø!");

			switch(PI[playerid][plead])
			{
				case LEAD_FARAI:      KoksDirektorius = "Policijos Departamento direktorius";
				case LEAD_KURJ:       KoksDirektorius = "Kurjeriø direktorius";
				case LEAD_MEDIKAI:    KoksDirektorius = "Medicinos Departamento direktorius";
				case LEAD_Mechanikas: KoksDirektorius = "Autoserviso ECO direktorius";
				case LEAD_FUROS:      KoksDirektorius = "Fûristø direktorius";
				case LEAD_TAXI:       KoksDirektorius = "Taksistø direktorius";
				default: return 1;
			}

			format(String, sizeof(String), "{E4EA7D}%s {ffffff}%s(%i) {E4EA7D}praneða:", KoksDirektorius, GetPlayerNameEx(playerid), playerid);
			SendClientMessageToAll(-1, String);

			format(String, sizeof(String), "{ffffff}%s", inputtext);
			SendClientMessageToAll(-1, String);

			PI[playerid][ParaseDyrikas] = gettime() + 60;
		}

		return 1;
	}
//-----------------------------------------------------------------------------
	if(dialogid == 9804)
	{
		if(!response) return ShowPlayerDialogEx(playerid, 9800, DIALOG_STYLE_LIST, "Direktorio ofisas", "Priimti þaidëjà á darbà\nIðmesti darbuotojà ið darbo\nPaskelbti praneðimà\nPelno valdymas\nÁspëti darbuotojà", "Rinktis", "Iðeiti");
		if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
			if(IsNumeric(inputtext) || !strlen(inputtext)) return ShowPlayerDialogEx(playerid, 9804, DIALOG_STYLE_INPUT, "Direktorio ofisas", "Þaidëjo su tokiu vardu nëra!\nÁraðykite darbuotojo: Vardà_Pavardæ, kad áspëtumëte darbuotojà", "Rinktis", "Atgal");
			new id = GetPlayeridMid(inputtext), msg[125];
			if(id == INVALID_PLAYER_ID) return ShowPlayerDialogEx(playerid, 9804, DIALOG_STYLE_INPUT, "Direktorio ofisas", "Þaidëjo su tokiu vardu nëra!\nÁraðykite darbuotojo: Vardà_Pavardæ, kad áspëtumëte darbuotojà", "Rinktis", "Atgal");
			new darbas = GetJobFromFaction(PI[playerid][plead]);
			if(PI[id][specialybe]!= darbas) return KlaidosZinute(playerid, "* Þaidëjas neádarbintas jûsø firmoje.");
			PI[id][ispejimai] ++;
			format(msg, sizeof(msg), "* Davëte áspëjimà darbuotojui %s ir jis jau turi %d/3 áspëjimø.", GetPlayerNameEx(id), PI[id][ispejimai]);
			SendClientMessage(playerid, GREEN, msg);
			format(msg, sizeof(msg), "* Direktorius %s jus áspëjo. Dabar jûs jau turite %d/3 áspëjimø.", GetPlayerNameEx(playerid), PI[id][ispejimai]);
			SendClientMessage(id, GREEN, msg);
			if(PI[id][ispejimai] > 2)
			{
				if(PI[id][uniformd]) SetPlayerSkin(id, PI[id][drabuziai]);
				PI[id][specialybe] = 0;
				PI[id][uniformd] = false;
				PI[id][uniforma] = -1;
				PI[id][ispejimai] = 0;
				for(new faction=0; faction < 15; faction++) PI[playerid][leanvited][faction]=false;
				format(msg, sizeof(msg), "* Þaidëjas %s iðmestas ið jûsø firmos nes surinko 3/3 áspëjimus", GetPlayerNameEx(id));
				SendClientMessage(playerid, GREEN, msg);
				format(msg, sizeof(msg), "* Direktorius %s jus iðmetë ið savo firmos nes surinkot 3/3 áspëjimus.", GetPlayerNameEx(playerid));
				SendClientMessage(id, GREEN, msg);

				for(new index = 0; index < 3; index ++) PI[id][SiandienPriimta][index] 	= 0;
				for(new index = 0; index < 3; index ++) PI[id][SiaSavaitePriimta][index] 	= 0;
				for(new index = 0; index < 3; index ++) PI[id][IsVisoPriimta][index] 		= 0;

				new query[150];

				format(query, sizeof(query), "UPDATE `players` SET `SiandienPriimta` = '%d', `SiaSavaitePriimta` = '%d', `IsVisoPriimta` = '%d' WHERE `Vardas` = '%s'",
				PI[id][SiandienPriimta][0], PI[id][SiaSavaitePriimta][0], PI[id][IsVisoPriimta][0], GetPlayerNameEx(id));
				mysql_query(query);
			}
		}
		return 1;
	}
//------------------------------------------------------------------------------
	if(dialogid == 9001)
	{
		new SuggPlayerid = ChoosedPlayer[playerid];
		new SuggMoney    = PI[playerid][sGyvybiuKaina];

		if(SuggPlayerid == INVALID_PLAYER_ID)
		{
			SendClientMessage(playerid, -1, "{ffffff} Þaidëjas atsijungë!");

			return 1;
		}

		if(!response)
		{
			SendClientMessage(playerid, -1, "{ffffff} Atsisakëte nusipirkti pasigydimà!");

			SendClientMessage(SuggPlayerid, -1, "{ffffff} Þaidëjas atsisakë nusipirkti pasigydimà!");
		}
		else if(response)
		{
			SendClientMessage(playerid, -1, "{ffffff} Nusipirkote pasigydimà!");

			SendClientMessage(SuggPlayerid, -1, "{ffffff} Pardavëte þaidëjui pasigydimà!");

			GivePlayerMoneyA(playerid, -SuggMoney);
			GivePlayerMoneyA(SuggPlayerid, SuggMoney);

			SetPlayerHealthEx(playerid, 100);
		}
		return 1;
	}

	if(dialogid == 9002)
	{
		new SuggPlayerid = ChoosedPlayer[playerid];
		new SuggMoney    = PI[playerid][sArmoroKaina];

		if(SuggPlayerid == INVALID_PLAYER_ID)
		{
			SendClientMessage(playerid, -1, "{ffffff} Þaidëjas atsijungë!");

			return 1;
		}

		if(!response)
		{
			SendClientMessage(playerid, -1, "{ffffff} Atsisakëte nusipirkti ðarvus!");

			SendClientMessage(SuggPlayerid, -1, "{ffffff} Þaidëjas atsisakë nusipirkti ðarvus!");
		}
		else if(response)
		{
			SendClientMessage(playerid, -1, "{ffffff} Nusipirkote ðarvus!");

			SendClientMessage(SuggPlayerid, -1, "{ffffff} Pardavëte þaidëjui ðarvus!");

			GivePlayerMoneyA(playerid, -SuggMoney);
			GivePlayerMoneyA(SuggPlayerid, SuggMoney);

			SetPlayerArmourEx(playerid, 100);
		}
		return 1;
	}

	if(dialogid == 9003)
	{
		new SuggPlayerid = ChoosedPlayer[playerid];
		new SuggMoney    = PI[playerid][sPazymosKaina];

		if(SuggPlayerid == INVALID_PLAYER_ID)
		{
			SendClientMessage(playerid, -1, "{ffffff} Þaidëjas atsijungë!");

			return 1;
		}

		if(!response)
		{
			SendClientMessage(playerid, -1, "{ffffff} Atsisakëte nusipirkti sveikatos paþymëjimà!");

			SendClientMessage(SuggPlayerid, -1, "{ffffff} Þaidëjas atsisakë nusipirkti sveikatos paþymëjimà!");
		}
		else if(response)
		{
			SendClientMessage(playerid, -1, "{ffffff} Nusipirkote sveikatos paþymëjimà!");

			SendClientMessage(SuggPlayerid, -1, "{ffffff} Pardavëte þaidëjui sveikatos paþymëjimà!");

			GivePlayerMoneyA(playerid, -SuggMoney);
			GivePlayerMoneyA(SuggPlayerid, SuggMoney);

			PI[playerid][medicinospazyma] = gettime() + 259200;
		}
		return 1;
	}

	if(dialogid == 9005)
	{
		new SuggPlayerid = ChoosedPlayer[playerid];
		new SuggMoney    = PI[playerid][sPicosKaina];

		if(SuggPlayerid == INVALID_PLAYER_ID)
		{
			SendClientMessage(playerid, -1, "{ffffff} Þaidëjas atsijungë!");

			return 1;
		}

		if(!response)
		{
			SendClientMessage(playerid, -1, "{ffffff} Atsisakëte nusipirkti picà!");

			SendClientMessage(SuggPlayerid, -1, "{ffffff} Þaidëjas atsisakë nusipirkti picà!");
		}
		else if(response)
		{
			SendClientMessage(playerid, -1, "{ffffff} Nusipirkote picà ir valgote jà!");

			SendClientMessage(SuggPlayerid, -1, "{ffffff} Pardavëte þaidëjui picà!");

			GivePlayerMoneyA(playerid, -SuggMoney);
			GivePlayerMoneyA(SuggPlayerid, SuggMoney);

			Sotumas				(playerid, 20);
			ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);
		}
		return 1;
	}

// Pelno valdymas
	if(dialogid == PELNO_DIALOG1)
	{
		if(!response) return ShowPlayerDialogEx(playerid, 9800, DIALOG_STYLE_LIST, "Direktorio ofisas", "Priimti þaidëjà á darbà\nIðmesti darbuotojà ið darbo\nPaskelbti praneðimà\nPelno valdymas\nÁspëti darbuotojà", "Rinktis", "Iðeiti");
		if(response)
		{
			if(GetPelnasIDFromLeader(playerid) == -1) return 1;
			switch(listitem)
			{
				case 0:
				{
					new str[35];
					format(str, sizeof(str), "{ffffff}Pelne: %s$", konvertuoti_pinigus(Pelnas[GetPelnasIDFromLeader(playerid)]));
					ShowPlayerDialogEx(playerid, PELNO_DIALOG2, DIALOG_STYLE_MSGBOX, "{ffffff}Pelno valdymas.", str, "Atgal", "");//Karoè jo tas neveikia, poto pvz nori padeti ane, paspaudi ismeta input langa, irasai skaiciu nereguoja, su paimti tas pats, isdalinti paspaudi irgi nesuveikia o visiems kitiems darbams suveikia tik tiems
				}
				case 1: ShowPlayerDialogEx(playerid, PELNO_DIALOG3, DIALOG_STYLE_INPUT, "{ffffff}Pelno valdymas.", "Áveskite sumà kuria norite paimti:", "Paimti", "Atgal");
				case 2: ShowPlayerDialogEx(playerid, PELNO_DIALOG4, DIALOG_STYLE_INPUT, "{ffffff}Pelno valdymas.", "Áveskite sumà kuria norite padëti:", "Padeti", "Atgal");
				case 3: ShowPlayerDialogEx(playerid, PELNO_DIALOG5, DIALOG_STYLE_INPUT, "{ffffff}Iðdalinti algas", "Áveskite sumà kuria norite iðdalinti savo darbuotojams:", "Iðdalinti", "Atgal");
			}
		}
		return 1;
	}

	if(dialogid == PELNO_DIALOG5)
	{
		if(!response) return ShowPlayerDialogEx(playerid, PELNO_DIALOG1, DIALOG_STYLE_LIST, "{ffffff}Pelno valdymas.", "{ffffff}  Balansas.\n Paimti.\n Padëti.\n Iðdalinti.", "Pasirinkti", "Uzdaryti");
		if(response)
		{
			if(GetPelnasIDFromLeader(playerid) == -1) return 1;

			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);

			if(!IsNumeric(inputtext)) return ShowPlayerDialogEx(playerid, PELNO_DIALOG5, DIALOG_STYLE_INPUT, "{ffffff}Iðdalinti algas", "Áveskite sumà kuria norite iðdalinti savo darbuotojams:", "Iðdalinti", "Atgal");

			if(strval(inputtext) < 1) return ShowPlayerDialogEx(playerid, PELNO_DIALOG5, DIALOG_STYLE_INPUT, "{ffffff}Iðdalinti algas", "Áveskite sumà kuria norite iðdalinti savo darbuotojams:", "Iðdalinti", "Atgal");

			if(Pelnas[GetPelnasIDFromLeader(playerid)] < strval(inputtext)) return ShowPlayerDialogEx(playerid, PELNO_DIALOG5, DIALOG_STYLE_INPUT, "{ffffff}Iðdalinti algas", "Pelne tiek nëra.\nÁveskite sumà kuria norite iðdalinti savo darbuotojams:", "Iðdalinti", "Atgal");

			if(strval(inputtext) < 5000) return ShowPlayerDialogEx(playerid, PELNO_DIALOG5, DIALOG_STYLE_INPUT, "{ffffff}Iðdalinti algas", "Minimaliai galima iðdalinti $5,000.\nÁveskite sumà kuria norite iðdalinti savo darbuotojams:", "Iðdalinti", "Atgal");

			new darbuotojai = CountPlayerInFaction(GetJobFromFaction(PI[playerid][plead]));

			if(darbuotojai < 1) return SendClientMessage(playerid, RED, "Nëra kam iðdalinti.");

			new kiekduoti = floatround(strval(inputtext) / darbuotojai);

			new String[216];
			for(new p = 0; p < MAX_PLAYERS; p++)
			{
				if(IsPlayerNPC(p) || !IsPlayerConnected(p)) continue;

				if(PI[p][specialybe] == GetJobFromFaction(PI[playerid][plead]))
				{
					GivePlayerMoneyA(p, kiekduoti);

					format(String, sizeof(String), "{ffffff} Direktorius {FFAF00}%s {ffffff}iðdalino algas, jus gavote: {FFAF00}$%s{ffffff}!", GetPlayerNameEx(playerid), konvertuoti_pinigus(kiekduoti));
					SendClientMessage(p, -1, String);
				}
			}

			format(String, sizeof(String), "{ffffff} Iðdalinote algas, visi gavo po: {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(kiekduoti));
			SendClientMessage(playerid, -1, String);

			Pelnas[GetPelnasIDFromLeader(playerid)] -= strval(inputtext);
		}

		return 1;
	}

	if(dialogid == PELNO_DIALOG2) return ShowPlayerDialogEx(playerid, PELNO_DIALOG1, DIALOG_STYLE_LIST, "{ffffff}Pelno valdymas.", "{ffffff}  Balansas.\n Paimti.\n Padëti.\n Iðdalinti.", "Pasirinkti", "Uzdaryti");
	if(dialogid == PELNO_DIALOG3)
	{
		if(!response) return ShowPlayerDialogEx(playerid, PELNO_DIALOG1, DIALOG_STYLE_LIST, "{ffffff}Pelno valdymas.", "{ffffff}  Balansas.\n Paimti.\n Padëti.\n Iðdalinti.", "Pasirinkti", "Uzdaryti");
		if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
			if(GetPelnasIDFromLeader(playerid) == -1) return 1;
			if(!IsNumeric(inputtext)) return ShowPlayerDialogEx(playerid, PELNO_DIALOG3, DIALOG_STYLE_INPUT, "{ffffff}Pelno valdymas.", "Áveskite sumà kuria norite paimti:", "Paimti", "Atgal");
			if(strval(inputtext) < 1) return ShowPlayerDialogEx(playerid, PELNO_DIALOG3, DIALOG_STYLE_INPUT, "{ffffff}Pelno valdymas.", "Áveskite sumà kuria norite paimti:", "Paimti", "Atgal");
			if(Pelnas[GetPelnasIDFromLeader(playerid)] < strval(inputtext)) return ShowPlayerDialogEx(playerid, PELNO_DIALOG3, DIALOG_STYLE_INPUT, "{ffffff}Pelno valdymas.", "Pelne tiek nëra.\nÁveskite sumà kurià norite paimti:", "Paimti", "Atgal");
			Pelnas[GetPelnasIDFromLeader(playerid)] -= strval(inputtext);
			GivePlayerMoneyA(playerid, strval(inputtext));
			SendClientMessage(playerid, YELLOW, "Pasiemiai pinigus is pelno.");
		}
		return 1;
	}
	if(dialogid == PELNO_DIALOG4)
	{
		if(!response) return ShowPlayerDialogEx(playerid, PELNO_DIALOG1, DIALOG_STYLE_LIST, "{ffffff}Pelno valdymas.", "{ffffff}  Balansas.\n Paimti.\n Padëti.\n Iðdalinti.", "Pasirinkti", "Uzdaryti");
		if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
			if(GetPelnasIDFromLeader(playerid) == -1) return 1;
			if(!IsNumeric(inputtext)) return ShowPlayerDialogEx(playerid, PELNO_DIALOG4, DIALOG_STYLE_INPUT, "{ffffff}Pelno valdymas.", "Áveskite sumà kurià norite padëti:", "Padeti", "Atgal");
			if(strval(inputtext) < 1) return ShowPlayerDialogEx(playerid, PELNO_DIALOG4, DIALOG_STYLE_INPUT, "{ffffff}Pelno valdymas.", "Áveskite sumà kurià norite padëti:", "Padeti", "Atgal");
			if(GetPlayerMoneyA(playerid) < strval(inputtext)) return ShowPlayerDialogEx(playerid, PELNO_DIALOG4, DIALOG_STYLE_INPUT, "{ffffff}Pelno valdymas.", "Su savimi jus tiek neturite.\nIveskite suma kuria norite padeti:", "Padeti", "Atgal");
			Pelnas[GetPelnasIDFromLeader(playerid)] += strval(inputtext);
			GivePlayerMoneyA(playerid, - strval(inputtext));
			SendClientMessage(playerid, YELLOW, "Padëjote pinigus á pelnà.");
		}
		return 1;
	}

	if(dialogid == 1341)
	{
		if(response)
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			switch(listitem)
			{
				case 0:  PlayAudioStreamForVehicle(playerid, vehicleid, "http://www.radijas.fm/media/_catalog/www.radijas.fm-radijo-stotis-zipfm.pls", "ZipFM");
				case 1:  PlayAudioStreamForVehicle(playerid, vehicleid, "http://www.radijas.fm/media/_catalog/www.radijas.fm-radijo-stotis-radiocentras.pls", "Radio centras");
				case 2:  PlayAudioStreamForVehicle(playerid, vehicleid, "http://45.125.66.139:8000/listen.pls", "MetroCity.lt FM");
			}
		}
		else
		{
			if(GetPlayerVehicleSeat(playerid) != 0 && GetPlayerVehicleSeat(playerid) != 1) return SendClientMessage(playerid, -1, "{ffffff} Turite sedëti transp. priemonës priekyje!");

			new String[216], vehicleid = GetPlayerVehicleID(playerid);

			format(String, sizeof(String), "1. Paleisti radijà\n2. Iðjungti radijà\n \n3. Dabar groja: {FFAF00}%s", (isnull(RadijosURL[vehicleid])) ? ("Niekas") : (RadijosPavadinimas[vehicleid]));
			ShowPlayerDialogEx(playerid, 1340, DIALOG_STYLE_LIST, "Radijas", String, "Pasirinkti", "Uþdaryti");
		}
	}

	if(dialogid == 1340)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(response)
		{
			switch(listitem)
			{
				case 0: return ShowPlayerDialogEx(playerid, 1341, DIALOG_STYLE_LIST, "Pasirinkite radijos stotá", "1. ZipFM\n2. Radio centras\n3. MetroCity.lt FM", "Pasirinkti", "Atgal");

				case 1:
				{
					if(isnull(RadijosURL[vehicleid])) return SendClientMessage(playerid, -1, "{ffffff} Automobilio radijas ir taip yra iðjungtas!");

					StopAudioStreamForVehicle(vehicleid);
				}

				default:
				{
					if(GetPlayerVehicleSeat(playerid) != 0 && GetPlayerVehicleSeat(playerid) != 1) return SendClientMessage(playerid, -1, "{ffffff} Turite sedëti transp. priemonës priekyje!");

					new String[216];

					format(String, sizeof(String), "1. Paleisti radijà\n2. Iðjungti radijà\n \n3. Dabar groja: {FFAF00}%s", (isnull(RadijosURL[vehicleid])) ? ("Niekas") : (RadijosPavadinimas[vehicleid]));
					ShowPlayerDialogEx(playerid, 1340, DIALOG_STYLE_LIST, "Radijas", String, "Pasirinkti", "Uþdaryti");
				}
			}
			return 1;
		}
	}

	if(dialogid == 1008)
	{
		ShowPlayerDialogEx(playerid, 1000, DIALOG_STYLE_LIST, "Darbo valdymas", "1. Darbo informacija\n2. Ásidarbinti darbe\n3. Palikti darbà\n4. Persirengti á darbinius arba paprastus drabuþius\n5. Direktoriaus valdymo pultas", "Pasirinkti", "Uþdaryti");
		return 1;
	}

	if(dialogid == 1000)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					mysql_query("SELECT Vardas, Dispejimai FROM players WHERE Lead = '1'");
					mysql_store_result();

					new String[450], resultline[40], mIsp, mVard[MAX_PLAYER_NAME];

					while(mysql_fetch_row_format(resultline))
					{
						sscanf(resultline, "p<|>s[24]d", mVard, mIsp);
					}

					format(String, sizeof(String), "{ffffff}Norint dirbti ðiame darbe jus privalote turëti sveikatos paþymëjimà bei {FFAF00}%d {ffffff}patirties taðkø.\n\
					Ðiuo metu ðio darbo direktorius yra: {FFAF00}%s{ffffff}, jis turi {FFAF00}%d {ffffff}ið {FFAF00}3 {ffffff}galimø áspëjimø.\n\
					Ðiuo metu ðio darbo pelnas yra: {FFAF00}$%s{ffffff}.", Policininkas[NuoKiekEXP], mVard, mIsp, konvertuoti_pinigus(Pelnas[0]));
					ShowPlayerDialogEx(playerid, 1008, DIALOG_STYLE_MSGBOX, "Darbo informacija", String, "Atgal", "");

					mysql_free_result();
				}
				case 1:
				{
					if(PI[playerid][specialybe] == 1) return 1;

					if(PI[playerid][specialybe] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite kità darbà!");

					if(GetPlayerScore(playerid) < Policininkas[NuoKiekEXP]) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka patirties taðkø!");

					if(PI[playerid][gMember] != -1) return SendClientMessage(playerid, -1, "{ffffff} Negalima dirbti ir gaujoje ir teisësaugoje!");

					if(Policininkas[sPazyma])
					{
						if(PI[playerid][medicinospazyma] < gettime()) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite sveikatos paþymëjimo!");
					}

					if(Policininkas[TeisesA])
					{
						if(!PI[playerid][Mteises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite A kat. vairavimo teisiø!");
					}

					if(Policininkas[TeisesB])
					{
						if(!PI[playerid][teises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite B kat. vairavimo teisiø!");
					}

					if(Policininkas[TeisesC])
					{
						if(!PI[playerid][FTeises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite C kat. vairavimo teisiø!");
					}

					if(!PI[playerid][leanvited][0]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite direktoriaus pakvietimo!");

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai ásidarbinote ðiame darbe!");

					PI[playerid][drabuziai]  = GetPlayerSkin(playerid);
					PI[playerid][specialybe] = 1;
					PI[playerid][DarboRangas]= 0;
					PI[playerid][uniformd]   = true;

					ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);

					if(PI[playerid][lytis] == 0)
					{
						PI[playerid][uniforma] = 280;
					}
					else if(PI[playerid][lytis] == 1)
					{
						switch(random(3))
						{
							case 0: PI[playerid][uniforma] = 306;
							case 1: PI[playerid][uniforma] = 307;
							case 2: PI[playerid][uniforma] = 309;
						}
					}

					SetPlayerSkin(playerid, PI[playerid][uniforma]);

					new String[128];
					format(String, sizeof(String), "UPDATE `players` SET `Job` = '%d' WHERE `Vardas` = '%s'", PI[playerid][specialybe], GetPlayerNameEx(playerid));
        			mysql_query(String);
				}
				case 2:
				{
					if(PI[playerid][specialybe] != 1) return 1;

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai palikote ðá darbà!");

					if(PI[playerid][uniformd]) SetPlayerSkin(playerid, PI[playerid][drabuziai]);

					PI[playerid][specialybe] = 0;
					PI[playerid][uniformd]   = false;
					PI[playerid][uniforma]   = -1;
					PI[playerid][DarboRangas]     = 0;
					PI[playerid][pradirbo]   = 0;
					PI[playerid][ispejimai]  = 0;

					for(new faction = 0; faction < 15; faction ++) PI[playerid][leanvited][faction] = false;

					new String[128];
					format(String, sizeof(String), "UPDATE `players` SET `Job` = '%d' WHERE `Vardas` = '%s'", PI[playerid][specialybe], GetPlayerNameEx(playerid));
        			mysql_query(String);
				}
				case 3:
				{
					if(PI[playerid][specialybe] != 1) return 1;

					if(PI[playerid][uniformd])
					{
						SetPlayerSkin(playerid, PI[playerid][drabuziai]);

						PI[playerid][uniformd] = false;

						SendClientMessage(playerid, -1, "{ffffff} Persirengëte á paprastus drabuþius!");

						ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
					}
					else
					{
						SetPlayerSkin(playerid, PI[playerid][uniforma]);

						PI[playerid][uniformd] = true;

						SendClientMessage(playerid, -1, "{ffffff} Persirengëte á darbinius drabuþius!");

						ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
					}
				}
				case 4:
				{
					if(PI[playerid][plead] != 1) return 1;

					ShowPlayerDialogEx(playerid, 9800, DIALOG_STYLE_LIST, "Direktorio ofisas", "Priimti þaidëjà á darbà\nIðmesti darbuotojà ið darbo\nPaskelbti praneðimà\nPelno valdymas\nÁspëti darbuotojà", "Rinktis", "Iðeiti");
				}
			}
		}
		return 1;
	}

	if(dialogid == 1009)
	{
		ShowPlayerDialogEx(playerid, 1001, DIALOG_STYLE_LIST, "Darbo valdymas", "1. Darbo informacija\n2. Ásidarbinti darbe\n3. Palikti darbà\n4. Persirengti á darbinius arba paprastus drabuþius\n5. Direktoriaus valdymo pultas", "Pasirinkti", "Uþdaryti");
		return 1;
	}

	if(dialogid == 1001)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					mysql_query("SELECT Vardas, Dispejimai FROM players WHERE Lead = '4'");
					mysql_store_result();

					new String[450], resultline[40], mIsp, mVard[MAX_PLAYER_NAME];

					while(mysql_fetch_row_format(resultline))
					{
						sscanf(resultline, "p<|>s[24]d", mVard, mIsp);
					}

					format(String, sizeof(String), "{ffffff}Norint dirbti ðiame darbe jus privalote turëti sveikatos paþymëjimà bei {FFAF00}%d {ffffff}patirties taðkø.\n\
					Ðiuo metu ðio darbo direktorius yra: {FFAF00}%s{ffffff}, jis turi {FFAF00}%d {ffffff}ið {FFAF00}3 {ffffff}galimø áspëjimø.\n\
					Ðiuo metu ðio darbo pelnas yra: {FFAF00}$%s{ffffff}.", Mechanikas[NuoKiekEXP], mVard, mIsp, konvertuoti_pinigus(Pelnas[1]));
					ShowPlayerDialogEx(playerid, 1009, DIALOG_STYLE_MSGBOX, "Darbo informacija", String, "Atgal", "");

					mysql_free_result();
				}
				case 1:
				{
					if(PI[playerid][specialybe] == 4) return 1;

					if(PI[playerid][specialybe] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite kità darbà!");

					if(GetPlayerScore(playerid) < Mechanikas[NuoKiekEXP]) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka patirties taðkø!");

					if(Mechanikas[sPazyma])
					{
						if(PI[playerid][medicinospazyma] < gettime()) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite sveikatos paþymëjimo!");
					}

					if(Mechanikas[TeisesA])
					{
						if(!PI[playerid][Mteises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite A kat. vairavimo teisiø!");
					}

					if(Mechanikas[TeisesB])
					{
						if(!PI[playerid][teises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite B kat. vairavimo teisiø!");
					}

					if(Mechanikas[TeisesC])
					{
						if(!PI[playerid][FTeises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite C kat. vairavimo teisiø!");
					}

					if(!PI[playerid][leanvited][3]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite direktoriaus pakvietimo!");

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai ásidarbinote ðiame darbe!");

					PI[playerid][drabuziai]  = GetPlayerSkin(playerid);
					PI[playerid][specialybe] = 4;
					PI[playerid][DarboRangas]     = 0;
					PI[playerid][uniformd]   = true;

					ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);

					PI[playerid][uniforma] = 268;

					SetPlayerSkin(playerid, PI[playerid][uniforma]);

					new String[128];
					format(String, sizeof(String), "UPDATE `players` SET `Job` = '%d' WHERE `Vardas` = '%s'", PI[playerid][specialybe], GetPlayerNameEx(playerid));
        			mysql_query(String);
				}
				case 2:
				{
					if(PI[playerid][specialybe] != 4) return 1;

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai palikote ðá darbà!");

					if(PI[playerid][uniformd]) SetPlayerSkin(playerid, PI[playerid][drabuziai]);

					PI[playerid][specialybe] = 0;
					PI[playerid][uniformd]   = false;
					PI[playerid][uniforma]   = -1;
					PI[playerid][DarboRangas]     = 0;
					PI[playerid][pradirbo]   = 0;
					PI[playerid][ispejimai]  = 0;

					for(new faction = 0; faction < 15; faction ++) PI[playerid][leanvited][faction] = false;

					new String[128];
					format(String, sizeof(String), "UPDATE `players` SET `Job` = '%d' WHERE `Vardas` = '%s'", PI[playerid][specialybe], GetPlayerNameEx(playerid));
        			mysql_query(String);
				}
				case 3:
				{
					if(PI[playerid][specialybe] != 4) return 1;

					if(PI[playerid][uniformd])
					{
						SetPlayerSkin(playerid, PI[playerid][drabuziai]);

						PI[playerid][uniformd] = false;

						SendClientMessage(playerid, -1, "{ffffff} Persirengëte á paprastus drabuþius!");

						ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
					}
					else
					{
						SetPlayerSkin(playerid, PI[playerid][uniforma]);

						PI[playerid][uniformd] = true;

						SendClientMessage(playerid, -1, "{ffffff} Persirengëte á darbinius drabuþius!");

						ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
					}
				}
				case 4:
				{
					if(PI[playerid][plead] != 4) return 1;

					ShowPlayerDialogEx(playerid, 9800, DIALOG_STYLE_LIST, "Direktorio ofisas", "Priimti þaidëjà á darbà\nIðmesti darbuotojà ið darbo\nPaskelbti praneðimà\nPelno valdymas\nÁspëti darbuotojà", "Rinktis", "Iðeiti");
				}
			}
		}
		return 1;
	}

	if(dialogid == 1010)
	{
		ShowPlayerDialogEx(playerid, 1002, DIALOG_STYLE_LIST, "Darbo valdymas", "1. Darbo informacija\n2. Ásidarbinti darbe\n3. Palikti darbà\n4. Persirengti á darbinius arba paprastus drabuþius\n5. Direktoriaus valdymo pultas", "Pasirinkti", "Uþdaryti");
		return 1;
	}

	if(dialogid == 1002)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					mysql_query("SELECT Vardas, Dispejimai FROM players WHERE Lead = '3'");
					mysql_store_result();

					new String[450], resultline[40], mIsp, mVard[MAX_PLAYER_NAME];

					while(mysql_fetch_row_format(resultline))
					{
						sscanf(resultline, "p<|>s[24]d", mVard, mIsp);
					}

					format(String, sizeof(String), "{ffffff}Norint dirbti ðiame darbe jus privalote turëti sveikatos paþymëjimà bei {FFAF00}%d {ffffff}patirties taðkø.\n\
					Ðiuo metu ðio darbo direktorius yra: {FFAF00}%s{ffffff}, jis turi {FFAF00}%d {ffffff}ið {FFAF00}3 {ffffff}galimø áspëjimø.\n\
					Ðiuo metu ðio darbo pelnas yra: {FFAF00}$%s{ffffff}.", Kurjeris[NuoKiekEXP], mVard, mIsp, konvertuoti_pinigus(Pelnas[2]));
					ShowPlayerDialogEx(playerid, 1010, DIALOG_STYLE_MSGBOX, "Darbo informacija", String, "Atgal", "");

					mysql_free_result();
				}
				case 1:
				{
					if(PI[playerid][specialybe] == 3) return 1;

					if(PI[playerid][specialybe] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite kità darbà!");

					if(GetPlayerScore(playerid) < Kurjeris[NuoKiekEXP]) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka patirties taðkø!");

					if(Kurjeris[sPazyma])
					{
						if(PI[playerid][medicinospazyma] < gettime()) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite sveikatos paþymëjimo!");
					}

					if(Kurjeris[TeisesA])
					{
						if(!PI[playerid][Mteises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite A kat. vairavimo teisiø!");
					}

					if(Kurjeris[TeisesB])
					{
						if(!PI[playerid][teises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite B kat. vairavimo teisiø!");
					}

					if(Kurjeris[TeisesC])
					{
						if(!PI[playerid][FTeises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite C kat. vairavimo teisiø!");
					}

					if(!PI[playerid][leanvited][2]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite direktoriaus pakvietimo!");

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai ásidarbinote ðiame darbe!");

					PI[playerid][drabuziai]  = GetPlayerSkin(playerid);
					PI[playerid][specialybe] = 3;
					PI[playerid][DarboRangas] = 1;
					PI[playerid][uniformd]   = true;

					ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);

					PI[playerid][uniforma] = 15;

					SetPlayerSkin(playerid, PI[playerid][uniforma]);

					new String[128];
					format(String, sizeof(String), "UPDATE `players` SET `Job` = '%d' WHERE `Vardas` = '%s'", PI[playerid][specialybe], GetPlayerNameEx(playerid));
        			mysql_query(String);
				}
				case 2:
				{
					if(PI[playerid][specialybe] != 3) return 1;

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai palikote ðá darbà!");

					if(PI[playerid][uniformd]) SetPlayerSkin(playerid, PI[playerid][drabuziai]);

					PI[playerid][specialybe] = 0;
					PI[playerid][uniformd]   = false;
					PI[playerid][uniforma]   = -1;
					PI[playerid][DarboRangas]     = 0;
					PI[playerid][pradirbo]   = 0;
					PI[playerid][ispejimai]  = 0;

					for(new faction = 0; faction < 15; faction ++) PI[playerid][leanvited][faction] = false;

					new String[128];
					format(String, sizeof(String), "UPDATE `players` SET `Job` = '%d' WHERE `Vardas` = '%s'", PI[playerid][specialybe], GetPlayerNameEx(playerid));
        			mysql_query(String);
				}
				case 3:
				{
					if(PI[playerid][specialybe] != 3) return 1;

					if(PI[playerid][uniformd])
					{
						SetPlayerSkin(playerid, PI[playerid][drabuziai]);

						PI[playerid][uniformd] = false;

						SendClientMessage(playerid, -1, "{ffffff} Persirengëte á paprastus drabuþius!");

						ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
					}
					else
					{
						SetPlayerSkin(playerid, PI[playerid][uniforma]);

						PI[playerid][uniformd] = true;

						SendClientMessage(playerid, -1, "{ffffff} Persirengëte á darbinius drabuþius!");

						ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
					}
				}
				case 4:
				{
					if(PI[playerid][plead] != 3) return 1;

					ShowPlayerDialogEx(playerid, 9800, DIALOG_STYLE_LIST, "Direktorio ofisas", "Priimti þaidëjà á darbà\nIðmesti darbuotojà ið darbo\nPaskelbti praneðimà\nPelno valdymas\nÁspëti darbuotojà", "Rinktis", "Iðeiti");
				}
			}
		}
		return 1;
	}

	if(dialogid == 1011)
	{
		ShowPlayerDialogEx(playerid, 1003, DIALOG_STYLE_LIST, "Darbo valdymas", "1. Darbo informacija\n2. Ásidarbinti darbe\n3. Palikti darbà\n4. Persirengti á darbinius arba paprastus drabuþius\n5. Direktoriaus valdymo pultas", "Pasirinkti", "Uþdaryti");
		return 1;
	}

	if(dialogid == 1003)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					mysql_query("SELECT Vardas, Dispejimai FROM players WHERE Lead = '2'");
					mysql_store_result();

					new String[450], resultline[40], mIsp, mVard[MAX_PLAYER_NAME];

					while(mysql_fetch_row_format(resultline))
					{
						sscanf(resultline, "p<|>s[24]d", mVard, mIsp);
					}

					format(String, sizeof(String), "{ffffff}Norint dirbti ðiame darbe jus privalote turëti sveikatos paþymëjimà bei {FFAF00}%d {ffffff}patirties taðkø.\n\
					Ðiuo metu ðio darbo direktorius yra: {FFAF00}%s{ffffff}, jis turi {FFAF00}%d {ffffff}ið {FFAF00}3 {ffffff}galimø áspëjimø.\n\
					Ðiuo metu ðio darbo pelnas yra: {FFAF00}$%s{ffffff}.", Medikas[NuoKiekEXP], mVard, mIsp, konvertuoti_pinigus(Pelnas[3]));
					ShowPlayerDialogEx(playerid, 1011, DIALOG_STYLE_MSGBOX, "Darbo informacija", String, "Atgal", "");

					mysql_free_result();
				}
				case 1:
				{
					if(PI[playerid][specialybe] == 2) return 1;

					if(PI[playerid][specialybe] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite kità darbà!");

					if(GetPlayerScore(playerid) < Medikas[NuoKiekEXP]) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka patirties taðkø!");

					if(Medikas[sPazyma])
					{
						if(PI[playerid][medicinospazyma] < gettime()) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite sveikatos paþymëjimo!");
					}

					if(Medikas[TeisesA])
					{
						if(!PI[playerid][Mteises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite A kat. vairavimo teisiø!");
					}

					if(Medikas[TeisesB])
					{
						if(!PI[playerid][teises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite B kat. vairavimo teisiø!");
					}

					if(Medikas[TeisesC])
					{
						if(!PI[playerid][FTeises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite C kat. vairavimo teisiø!");
					}

					if(!PI[playerid][leanvited][1]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite direktoriaus pakvietimo!");

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai ásidarbinote ðiame darbe!");

					PI[playerid][drabuziai]  = GetPlayerSkin(playerid);
					PI[playerid][specialybe] = 2;
					PI[playerid][DarboRangas]     = 0;
					PI[playerid][uniformd]   = true;

					ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);

					if(PI[playerid][lytis] == 0)
					{
						PI[playerid][uniforma] = 275;
					}
					else if(PI[playerid][lytis] == 1)
					{
						PI[playerid][uniforma] = 308;
					}

					SetPlayerSkin(playerid, PI[playerid][uniforma]);

					new String[128];
					format(String, sizeof(String), "UPDATE `players` SET `Job` = '%d' WHERE `Vardas` = '%s'", PI[playerid][specialybe], GetPlayerNameEx(playerid));
        			mysql_query(String);
				}
				case 2:
				{
					if(PI[playerid][specialybe] != 2) return 1;

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai palikote ðá darbà!");

					if(PI[playerid][uniformd]) SetPlayerSkin(playerid, PI[playerid][drabuziai]);

					PI[playerid][specialybe] = 0;
					PI[playerid][uniformd]   = false;
					PI[playerid][uniforma]   = -1;
					PI[playerid][DarboRangas]     = 0;
					PI[playerid][pradirbo]   = 0;
					PI[playerid][ispejimai]  = 0;

					for(new faction = 0; faction < 15; faction ++) PI[playerid][leanvited][faction] = false;

					new String[128];
					format(String, sizeof(String), "UPDATE `players` SET `Job` = '%d' WHERE `Vardas` = '%s'", PI[playerid][specialybe], GetPlayerNameEx(playerid));
        			mysql_query(String);
				}
				case 3:
				{
					if(PI[playerid][specialybe] != 2) return 1;

					if(PI[playerid][uniformd])
					{
						SetPlayerSkin(playerid, PI[playerid][drabuziai]);

						PI[playerid][uniformd] = false;

						SendClientMessage(playerid, -1, "{ffffff} Persirengëte á paprastus drabuþius!");

						ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
					}
					else
					{
						SetPlayerSkin(playerid, PI[playerid][uniforma]);

						PI[playerid][uniformd] = true;

						SendClientMessage(playerid, -1, "{ffffff} Persirengëte á darbinius drabuþius!");

						ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
					}
				}
				case 4:
				{
					if(PI[playerid][plead] != 2) return 1;

					ShowPlayerDialogEx(playerid, 9800, DIALOG_STYLE_LIST, "Direktorio ofisas", "Priimti þaidëjà á darbà\nIðmesti darbuotojà ið darbo\nPaskelbti praneðimà\nPelno valdymas\nÁspëti darbuotojà", "Rinktis", "Iðeiti");
				}
			}
		}
		return 1;
	}

	if(dialogid == 1014)
	{
		ShowPlayerDialogEx(playerid, 1004, DIALOG_STYLE_LIST, "Darbo valdymas", "1. Darbo informacija\n2. Ásidarbinti darbe\n3. Palikti darbà\n4. Persirengti á darbinius arba paprastus drabuþius\n5. Direktoriaus valdymo pultas", "Pasirinkti", "Uþdaryti");
	 	return 1;
	}

	if(dialogid == 1004)
  	{
  		if(response)
 		{
	 	    switch(listitem)
			{
				case 0:
				{
					mysql_query("SELECT Vardas, Dispejimai FROM players WHERE Lead = '5'");
					mysql_store_result();

				 	new String[450], resultline[40], mIsp, mVard[MAX_PLAYER_NAME];

					while(mysql_fetch_row_format(resultline))
					{
						sscanf(resultline, "p<|>s[24]d", mVard, mIsp);
					}

				  	format(String, sizeof(String), "{ffffff}Norint dirbti ðiame darbe jus privalote turëti {FFAF00}%d {ffffff}patirties taðkø.\n\
				  	Ðiuo metu ðio darbo direktorius yra: {FFAF00}%s{ffffff}, jis turi {FFAF00}%d {ffffff}ið {FFAF00}3 {ffffff}galimø áspëjimø.\n\
				  	Ðiuo metu ðio darbo pelnas yra: {FFAF00}$%s{ffffff}.", Dyleris[NuoKiekEXP], mVard, mIsp, konvertuoti_pinigus(Pelnas[4]));
				   	ShowPlayerDialogEx(playerid, 1014, DIALOG_STYLE_MSGBOX, "Darbo informacija", String, "Atgal", "");

				   	mysql_free_result();
				}
				case 1:
				{
 					if(PI[playerid][specialybe] == 5) return 1;

					if(PI[playerid][specialybe] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite kità darbà!");

					if(GetPlayerScore(playerid) < Dyleris[NuoKiekEXP]) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka patirties taðkø!");

					if(PI[playerid][gMember] != -1) return SendClientMessage(playerid, -1, "{ffffff} Negalima dirbti ir gaujoje ir teisësaugoje!");

					if(Dyleris[sPazyma])
					{
						if(PI[playerid][medicinospazyma] < gettime()) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite sveikatos paþymëjimo!");
					}

					if(Dyleris[TeisesA])
					{
						if(!PI[playerid][Mteises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite A kat. vairavimo teisiø!");
					}

					if(Dyleris[TeisesB])
					{
						if(!PI[playerid][teises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite B kat. vairavimo teisiø!");
					}

					if(Dyleris[TeisesC])
					{
						if(!PI[playerid][FTeises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite C kat. vairavimo teisiø!");
					}

					if(!PI[playerid][leanvited][4]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite direktoriaus pakvietimo!");

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai ásidarbinote ðiame darbe!");

					PI[playerid][drabuziai]  = GetPlayerSkin(playerid);
					PI[playerid][specialybe] = 5;
					PI[playerid][rangas]     = 1;
					PI[playerid][uniformd]   = true;

					ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);

					PI[playerid][uniforma] = 285;

					SetPlayerSkin(playerid, PI[playerid][uniforma]);

					new String[128];
					format(String, sizeof(String), "UPDATE `players` SET `Job` = '%d' WHERE `Vardas` = '%s'", PI[playerid][specialybe], GetPlayerNameEx(playerid));
        			mysql_query(String);
				}
				case 2:
				{
					if(PI[playerid][specialybe] != 5) return 1;

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai palikote ðá darbà!");

					if(PI[playerid][uniformd]) SetPlayerSkin(playerid, PI[playerid][drabuziai]);

				    PI[playerid][specialybe] = 0;
				    PI[playerid][uniformd]   = false;
				    PI[playerid][uniforma]   = -1;
				    PI[playerid][rangas]     = 0;
				    PI[playerid][pradirbo]   = 0;
				    PI[playerid][ispejimai]  = 0;

				    for(new faction = 0; faction < 15; faction ++) PI[playerid][leanvited][faction] = false;

				    new String[128];
					format(String, sizeof(String), "UPDATE `players` SET `Job` = '%d' WHERE `Vardas` = '%s'", PI[playerid][specialybe], GetPlayerNameEx(playerid));
        			mysql_query(String);
    			}
				case 3:
				{
					if(PI[playerid][specialybe] != 5) return 1;

					if(PI[playerid][uniformd])
					{
						SetPlayerSkin(playerid, PI[playerid][drabuziai]);

						PI[playerid][uniformd] = false;

						SendClientMessage(playerid, -1, "{ffffff} Persirengëte á paprastus drabuþius!");

					 	ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
					}
					else
					{
					 	SetPlayerSkin(playerid, PI[playerid][uniforma]);

						PI[playerid][uniformd] = true;

						SendClientMessage(playerid, -1, "{ffffff} Persirengëte á darbinius drabuþius!");

						ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
					}
    			}
    			case 4:
    			{
					if(PI[playerid][plead] != 5) return 1;

    				ShowPlayerDialogEx(playerid, 9800, DIALOG_STYLE_LIST, "Direktorio ofisas", "Priimti þaidëjà á darbà\nIðmesti darbuotojà ið darbo\nPaskelbti praneðimà\nPelno valdymas\nÁspëti darbuotojà", "Rinktis", "Iðeiti");
   				}
			}
		}
		return 1;
	}
	if(dialogid == 7010)
	{
		ShowPlayerDialogEx(playerid, 7011, DIALOG_STYLE_LIST, "Darbo valdymas", "1. Darbo informacija\n2. Ásidarbinti darbe\n3. Palikti darbà\n4. Persirengti á darbinius arba paprastus drabuþius\n5. Direktoriaus valdymo pultas", "Pasirinkti", "Uþdaryti");
		return 1;
	}

	if(dialogid == 7011)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					mysql_query("SELECT Vardas, Dispejimai FROM players WHERE Lead = '13'");
					mysql_store_result();

					new String[450], resultline[40], mIsp, mVard[MAX_PLAYER_NAME];

					while(mysql_fetch_row_format(resultline))
					{
						sscanf(resultline, "p<|>s[24]d", mVard, mIsp);
					}

					format(String, sizeof(String), "{ffffff}Norint dirbti ðiame darbe jus privalote turëti sveikatos paþymëjimà bei {FFAF00}%d {ffffff}patirties taðkø.\n\
					Ðiuo metu ðio darbo direktorius yra: {FFAF00}%s{ffffff}, jis turi {FFAF00}%d {ffffff}ið {FFAF00}3 {ffffff}galimø áspëjimø.\n\
					Ðiuo metu ðio darbo pelnas yra: {FFAF00}$%s{ffffff}.", Taxi[NuoKiekEXP], mVard, mIsp, konvertuoti_pinigus(Pelnas[9]));
					ShowPlayerDialogEx(playerid, 7011, DIALOG_STYLE_MSGBOX, "Darbo informacija", String, "Atgal", "");

					mysql_free_result();
				}
				case 1:
				{
					if(PI[playerid][specialybe] == 13) return 1;

					if(PI[playerid][specialybe] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite kità darbà!");

					if(GetPlayerScore(playerid) < Taxi[NuoKiekEXP]) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka patirties taðkø!");

					if(Taxi[sPazyma])
					{
						if(PI[playerid][medicinospazyma] < gettime()) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite sveikatos paþymëjimo!");
					}

					if(Taxi[TeisesA])
					{
						if(!PI[playerid][Mteises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite A kat. vairavimo teisiø!");
					}

					if(Taxi[TeisesB])
					{
						if(!PI[playerid][teises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite B kat. vairavimo teisiø!");
					}

					if(Taxi[TeisesC])
					{
						if(!PI[playerid][FTeises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite C kat. vairavimo teisiø!");
					}

					if(!PI[playerid][leanvited][12]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite direktoriaus pakvietimo!");

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai ásidarbinote ðiame darbe!");

					PI[playerid][drabuziai]  = GetPlayerSkin(playerid);
					PI[playerid][specialybe] = 13;
					PI[playerid][DarboRangas] = 0;
					PI[playerid][uniformd]   = true;

					ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);

					if(PI[playerid][lytis] == 0)
					{
						PI[playerid][uniforma] = 171;
					}
					else if(PI[playerid][lytis] == 1)
					{
						PI[playerid][uniforma] = 193;
					}

					SetPlayerSkin(playerid, PI[playerid][uniforma]);

					new String[128];
					format(String, sizeof(String), "UPDATE `players` SET `Job` = '%d' WHERE `Vardas` = '%s'", PI[playerid][specialybe], GetPlayerNameEx(playerid));
        			mysql_query(String);
				}
				case 2:
				{
					if(PI[playerid][specialybe] != 13) return 1;

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai palikote ðá darbà!");

					if(PI[playerid][uniformd]) SetPlayerSkin(playerid, PI[playerid][drabuziai]);

					PI[playerid][specialybe] = 0;
					PI[playerid][uniformd]   = false;
					PI[playerid][uniforma]   = -1;
					PI[playerid][DarboRangas]     = 0;
					PI[playerid][pradirbo]   = 0;
					PI[playerid][ispejimai]  = 0;

					for(new faction = 0; faction < 15; faction ++) PI[playerid][leanvited][faction] = false;

					new String[128];
					format(String, sizeof(String), "UPDATE `players` SET `Job` = '%d' WHERE `Vardas` = '%s'", PI[playerid][specialybe], GetPlayerNameEx(playerid));
        			mysql_query(String);
				}
				case 3:
				{
					if(PI[playerid][specialybe] != 13) return 1;

					if(PI[playerid][uniformd])
					{
						SetPlayerSkin(playerid, PI[playerid][drabuziai]);

						PI[playerid][uniformd] = false;

						SendClientMessage(playerid, -1, "{ffffff} Persirengëte á paprastus drabuþius!");

						ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
					}
					else
					{
						SetPlayerSkin(playerid, PI[playerid][uniforma]);

						PI[playerid][uniformd] = true;

						SendClientMessage(playerid, -1, "{ffffff} Persirengëte á darbinius drabuþius!");

						ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
					}
				}
				case 4:
				{
					if(PI[playerid][plead] != 13) return 1;

					ShowPlayerDialogEx(playerid, 9800, DIALOG_STYLE_LIST, "Direktorio ofisas", "Priimti þaidëjà á darbà\nIðmesti darbuotojà ið darbo\nPaskelbti praneðimà\nPelno valdymas\nÁspëti darbuotojà", "Rinktis", "Iðeiti");
				}
			}
		}
		return 1;
	}


	if(dialogid == 1113)
	{
		ShowPlayerDialogEx(playerid, 1104, DIALOG_STYLE_LIST, "Darbo valdymas", "1. Darbo informacija\n2. Ásidarbinti darbe\n3. Palikti darbà\n4. Persirengti á darbinius arba paprastus drabuþius\n5. Direktoriaus valdymo pultas", "Pasirinkti", "Uþdaryti");
		return 1;
	}

	if(dialogid == 1104)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					mysql_query("SELECT Vardas, Dispejimai FROM players WHERE Lead = '11'");
					mysql_store_result();

					new String[450], resultline[40], mIsp, mVard[MAX_PLAYER_NAME];

					while(mysql_fetch_row_format(resultline))
					{
						sscanf(resultline, "p<|>s[24]d", mVard, mIsp);
					}

					format(String, sizeof(String), "{ffffff}Norint dirbti ðiame darbe jus privalote turëti sveikatos paþymëjimà bei {FFAF00}%d {ffffff}patirties taðkø.\n\
					Ðiuo metu ðio darbo direktorius yra: {FFAF00}%s{ffffff}, jis turi {FFAF00}%d {ffffff}ið {FFAF00}3 {ffffff}galimø áspëjimø.\n\
					Ðiuo metu ðio darbo pelnas yra: {FFAF00}$%s{ffffff}.", Furistas[NuoKiekEXP], mVard, mIsp, konvertuoti_pinigus(Pelnas[8]));
					ShowPlayerDialogEx(playerid, 1113, DIALOG_STYLE_MSGBOX, "Darbo informacija", String, "Atgal", "");

					mysql_free_result();
				}
				case 1:
				{
					if(PI[playerid][specialybe] == 11) return 1;

					if(PI[playerid][specialybe] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite kità darbà!");

					if(GetPlayerScore(playerid) < Furistas[NuoKiekEXP]) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka patirties taðkø!");

					if(Furistas[sPazyma])
					{
						if(PI[playerid][medicinospazyma] < gettime()) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite sveikatos paþymëjimo!");
					}

					if(Furistas[TeisesA])
					{
						if(!PI[playerid][Mteises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite A kat. vairavimo teisiø!");
					}

					if(Furistas[TeisesB])
					{
						if(!PI[playerid][teises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite B kat. vairavimo teisiø!");
					}

					if(Furistas[TeisesC])
					{
						if(!PI[playerid][FTeises]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite C kat. vairavimo teisiø!");
					}

					if(!PI[playerid][leanvited][10]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite direktoriaus pakvietimo!");

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai ásidarbinote ðiame darbe!");

					PI[playerid][drabuziai]  = GetPlayerSkin(playerid);
					PI[playerid][specialybe] = 11;
					PI[playerid][DarboRangas]     = 0;
					PI[playerid][uniformd]   = true;

					ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);

					PI[playerid][uniforma] = 128;

					SetPlayerSkin(playerid, PI[playerid][uniforma]);

					new String[128];
					format(String, sizeof(String), "UPDATE `players` SET `Job` = '%d' WHERE `Vardas` = '%s'", PI[playerid][specialybe], GetPlayerNameEx(playerid));
        			mysql_query(String);
				}
				case 2:
				{
					if(PI[playerid][specialybe] != 11) return 1;

					SendClientMessage(playerid, -1, "{ffffff} Sëkmingai palikote ðá darbà!");

					if(PI[playerid][uniformd]) SetPlayerSkin(playerid, PI[playerid][drabuziai]);

					PI[playerid][specialybe] = 0;
					PI[playerid][uniformd]   = false;
					PI[playerid][uniforma]   = -1;
					PI[playerid][DarboRangas]     = 0;
					PI[playerid][pradirbo]   = 0;
					PI[playerid][ispejimai]  = 0;

					for(new faction = 0; faction < 15; faction ++) PI[playerid][leanvited][faction] = false;

					new String[128];
					format(String, sizeof(String), "UPDATE `players` SET `Job` = '%d' WHERE `Vardas` = '%s'", PI[playerid][specialybe], GetPlayerNameEx(playerid));
        			mysql_query(String);
				}
				case 3:
				{
					if(PI[playerid][specialybe] != 11) return 1;

					if(PI[playerid][uniformd])
					{
						SetPlayerSkin(playerid, PI[playerid][drabuziai]);

						PI[playerid][uniformd] = false;

						SendClientMessage(playerid, -1, "{ffffff} Persirengëte á paprastus drabuþius!");

						ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
					}
					else
					{
						SetPlayerSkin(playerid, PI[playerid][uniforma]);

						PI[playerid][uniformd] = true;

						SendClientMessage(playerid, -1, "{ffffff} Persirengëte á darbinius drabuþius!");

						ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
					}
				}
				case 4:
				{
					if(PI[playerid][plead] != 11) return 1;

					ShowPlayerDialogEx(playerid, 9800, DIALOG_STYLE_LIST, "Direktorio ofisas", "Priimti þaidëjà á darbà\nIðmesti darbuotojà ið darbo\nPaskelbti praneðimà\nPelno valdymas\nÁspëti darbuotojà", "Rinktis", "Iðeiti");
				}
			}
		}
		return 1;
	}

	if(dialogid == PagrTaksiLicDialog)
	{
		if(response)
		{
			if(GetPlayerMoneyA(playerid) < 5000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

			GivePlayerMoneyA(playerid, -5000);

			ShowPlayerDialogEx(playerid, PirmasKlausimas, DIALOG_STYLE_MSGBOX, "Licenzijø centras",
			"{ffffff}Ar norint dirbti taksistu bûtina uþregistruoti nuosavà transp. priemonæ ir praeiti techninæ apþiûrà?\n \nA - Taip\nB - Ne", "A", "B");
		}

		return 1;
	}

	if(dialogid == PirmasKlausimas)
	{
		if(response) PI[playerid][CorrectTheoryAnswers] ++;

		ShowPlayerDialogEx(playerid, AntrasKlausimas, DIALOG_STYLE_MSGBOX, "Licenzijø centras",
		"{ffffff}Veþant keleivá geriau pasirinkti ilgesná, taèiau saugesná kelià, ar atvirkðèiai?\n \nA - Ilgesnis, taèiau saugesnis\nB - Trumpesnis, taèiau nesaugus", "A", "B");

		return 1;
	}

	if(dialogid == AntrasKlausimas)
	{
		if(response) PI[playerid][CorrectTheoryAnswers] ++;

		ShowPlayerDialogEx(playerid, TreciasKlausimas, DIALOG_STYLE_MSGBOX, "Licenzijø centras",
		"{ffffff}Kà dirbant taksistu reiðkia þodis Tarifas?\n \nA - Pravaþiuoto atstumo nuo taðko A á taðkà B galutinë suma\nB - Vieno pravaþiuoto kilometro kaina (pavyzdys: $5/KM)", "A", "B");

		return 1;
	}

	if(dialogid == TreciasKlausimas)
	{
		if(!response) PI[playerid][CorrectTheoryAnswers] ++;

		ShowPlayerDialogEx(playerid, KetvirtasKlausimas, DIALOG_STYLE_MSGBOX, "Licenzijø centras",
		"{ffffff}Jeigu keleiviui reikia skubiai nusigauti á jo paþymëtà vietà, taèiau jus nori sustabdyti policininkas su ájungtais ðvyturëliais.\nKokie bus jûsø veiksmai?\n \
		\nA - Sustosiu betkokiu atvëju nepriklausomai nuo keleivio norø\nB - Vaþiuosiu toliau nes keleivis taip papraðë", "A", "B");

		return 1;
	}

	if(dialogid == KetvirtasKlausimas)
	{
		if(response) PI[playerid][CorrectTheoryAnswers] ++;

		ShowPlayerDialogEx(playerid, PenktasKlausimas, DIALOG_STYLE_MSGBOX, "Licenzijø centras",
		"{ffffff}Ar álipus keleiviui bûtina imti ið jo pinigus?\n \nA - Taip\nB - Ne", "A", "B");

		return 1;
	}

	if(dialogid == PenktasKlausimas)
	{
		if(!response) PI[playerid][CorrectTheoryAnswers] ++;

		if(PI[playerid][CorrectTheoryAnswers] > 4) // Taksi licenzija iðlaikyta
		{
			SendClientMessage(playerid, -1, "{ffffff} Sveikiname, jus iðlaikëte taksisto licenzijà!");

			PI[playerid][TuriTaksiLic] 			= true;
			PI[playerid][CorrectTheoryAnswers]  = 0;
		}
		else // Neiðlaikyta
		{
			SendClientMessage(playerid, -1, "{ffffff} Apgailëstaujame, taèiau taksisto licenzija neiðlaikyta!");

			PI[playerid][CorrectTheoryAnswers] = 0;
		}

		return 1;
	}

	if(dialogid == TheoryLicenseDialog)
	{
		if(response)
		{
			if(GetPlayerMoneyA(playerid) < TheoryLicensePrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

			GivePlayerMoneyA(playerid, -TheoryLicensePrice);
			ShowPlayerDialogEx(playerid, FirstTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Kuria kelio puse reikia vaþiuoti Lietuvoje?", "1. Kaire\n2. Deðine", "Atsakyti", "");

			if(PropertyInfo[VM_MOKYKLA][pBuyed])
			{
				PropertyInfo[VM_MOKYKLA][pProfit] += TheoryLicensePrice;
			}
		}

		return 1;
	}

	if(dialogid == FirstTheoryQuestionDialog)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialogEx(playerid, SecondTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Koks yra leistinas maksimalus greitis serverio mieste?", "1. 90 KM/H\n2. 120 KM/H", "Atsakyti", "");
				}

				case 1:
				{
					PI[playerid][CorrectTheoryAnswers] ++;

					ShowPlayerDialogEx(playerid, SecondTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Koks yra leistinas maksimalus greitis serverio mieste?", "1. 90 KM/H\n2. 120 KM/H", "Atsakyti", "");
				}
			}
		}
		else
		{
			PI[playerid][CorrectTheoryAnswers] = 0;
		}

		return 1;
	}

	if(dialogid == SecondTheoryQuestionDialog)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					PI[playerid][CorrectTheoryAnswers] ++;

					ShowPlayerDialogEx(playerid, ThirdTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Kà pirmiausiai turite padaryti atsisëdus á transp. priemonæ?", "1. Uþsisegti saugos dirþà\n2. Uþvesti variklá", "Atsakyti", "");
				}

				case 1:
				{
					ShowPlayerDialogEx(playerid, ThirdTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Kà pirmiausiai turite padaryti atsisëdus á transp. priemonæ?", "1. Uþsisegti saugos dirþà\n2. Uþvesti variklá", "Atsakyti", "");
				}
			}
		}
		else
		{
			PI[playerid][CorrectTheoryAnswers] = 0;
		}

		return 1;
	}

	if(dialogid == ThirdTheoryQuestionDialog)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					PI[playerid][CorrectTheoryAnswers] ++;

					ShowPlayerDialogEx(playerid, FourthTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Ar turësite pirmumo teisæ vaþiuodamas ðalutiniu keliu?", "1. Taip\n2. Ne", "Atsakyti", "");
				}

				case 1:
				{
					ShowPlayerDialogEx(playerid, FourthTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Ar turësite pirmumo teisæ vaþiuodamas ðalutiniu keliu?", "1. Taip\n2. Ne", "Atsakyti", "");
				}
			}
		}
		else
		{
			PI[playerid][CorrectTheoryAnswers] = 0;
		}

		return 1;
	}

	if(dialogid == FourthTheoryQuestionDialog)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialogEx(playerid, FifthTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Kiek laiko galima kalbëti telefonu vairuojant transp. priemonæ?", "1. 10 minuèiø\n2. 5 minutes\n3. Negalima kalbëti", "Atsakyti", "");
				}

				case 1:
				{
					PI[playerid][CorrectTheoryAnswers] ++;

					ShowPlayerDialogEx(playerid, FifthTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Kiek laiko galima kalbëti telefonu vairuojant transp. priemonæ?", "1. 10 minuèiø\n2. 5 minutes\n3. Negalima kalbëti", "Atsakyti", "");
				}
			}
		}
		else
		{
			PI[playerid][CorrectTheoryAnswers] = 0;
		}

		return 1;
	}

	if(dialogid == FifthTheoryQuestionDialog)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialogEx(playerid, SixthTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Ar galima lenkti posukyje?", "1. Taip\n2. Ne", "Atsakyti", "");
				}

				case 1:
				{
					ShowPlayerDialogEx(playerid, SixthTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Ar galima lenkti posukyje?", "1. Taip\n2. Ne", "Atsakyti", "");
				}

				case 2:
				{
					PI[playerid][CorrectTheoryAnswers] ++;

					ShowPlayerDialogEx(playerid, SixthTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Ar galima lenkti posukyje?", "1. Taip\n2. Ne", "Atsakyti", "");
				}
			}
		}
		else
		{
			PI[playerid][CorrectTheoryAnswers] = 0;
		}

		return 1;
	}

	if(dialogid == SixthTheoryQuestionDialog)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialogEx(playerid, SeventhTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Ar privaloma sustoti prieð geleþinkeliu pervaþà?", "1. Taip\n2. Ne", "Atsakyti", "");
				}

				case 1:
				{
					PI[playerid][CorrectTheoryAnswers] ++;

					ShowPlayerDialogEx(playerid, SeventhTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Ar privaloma sustoti prieð geleþinkeliu pervaþà?", "1. Taip\n2. Ne", "Atsakyti", "");
				}
			}
		}
		else
		{
			PI[playerid][CorrectTheoryAnswers] = 0;
		}

		return 1;
	}

	if(dialogid == SeventhTheoryQuestionDialog)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					PI[playerid][CorrectTheoryAnswers] ++;

					ShowPlayerDialogEx(playerid, EightthTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Kà reiðkia trumpinys K.E.T.?", "1. Keliø eismo tvarkytojai\n2. Keliø eismo taisyklës", "Atsakyti", "");
				}

				case 1:
				{
					ShowPlayerDialogEx(playerid, EightthTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Kà reiðkia trumpinys K.E.T.?", "1. Keliø eismo tvarkytojai\n2. Keliø eismo taisyklës", "Atsakyti", "");
				}
			}
		}
		else
		{
			PI[playerid][CorrectTheoryAnswers] = 0;
		}

		return 1;
	}

	if(dialogid == EightthTheoryQuestionDialog)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					PI[playerid][CorrectTheoryAnswers] ++;

					ShowPlayerDialogEx(playerid, NinethTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Kai uþ jûsø vaþiuoja policininkas su ájungtais ðvyturëliais, jus...", "1. Spaudþiu gazà ir bandau pabëgti\n2. Sustoju kelkraðtyje", "Atsakyti", "");
				}

				case 1:
				{
					ShowPlayerDialogEx(playerid, NinethTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Kai uþ jûsø vaþiuoja policininkas su ájungtais ðvyturëliais, jus...", "1. Spaudþiu gazà ir bandau pabëgti\n2. Sustoju kelkraðtyje", "Atsakyti", "");
				}
			}
		}
		else
		{
			PI[playerid][CorrectTheoryAnswers] = 0;
		}

		return 1;
	}

	if(dialogid == NinethTheoryQuestionDialog)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialogEx(playerid, TenthTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Jeigu jûsø transp. priemonë sugenda, jus...", "1. Ájungiu avariná signalà ir iðkvieèiu autoserviso ECO darbuotojus\n2. Praðau administratoriø pagalbos", "Atsakyti", "");
				}

				case 1:
				{
					PI[playerid][CorrectTheoryAnswers] ++;

					ShowPlayerDialogEx(playerid, TenthTheoryQuestionDialog, DIALOG_STYLE_LIST, "{FFAF00}Jeigu jûsø transp. priemonë sugenda, jus...", "1. Ájungiu avariná signalà ir iðkvieèiu autoserviso ECO darbuotojus\n2. Praðau administratoriø pagalbos", "Atsakyti", "");
				}
			}
		}
		else
		{
			PI[playerid][CorrectTheoryAnswers] = 0;
		}

		return 1;
	}

	if(dialogid == TenthTheoryQuestionDialog)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					PI[playerid][CorrectTheoryAnswers] ++;
				}
			}

			new String[216];

			if(PI[playerid][CorrectTheoryAnswers] >= 8)
			{
				format(String, sizeof(String), "{ffffff} Jums pavyko iðlaikyti teorijos egzaminà, teisingai atsakëte á {FFAF00}%d/10 {ffffff}klausimø!", PI[playerid][CorrectTheoryAnswers]);
				SendClientMessage(playerid, -1, String);

				SendClientMessage(playerid, -1, " ");
				SendClientMessage(playerid, -1, "{ffffff} Dabar galite laikyti vairavimo egzaminà!");

				PI[playerid][CorrectTheoryAnswers] = 0;

				PI[playerid][teorija] = true;
			}
			else
			{
				format(String, sizeof(String), "{ffffff} Jums nepavyko iðlaikyti teorijos egzamino, teisingai atsakëte á {FFAF00}%d/10 {ffffff}klausimø!", PI[playerid][CorrectTheoryAnswers]);
				SendClientMessage(playerid, -1, String);

				PI[playerid][CorrectTheoryAnswers] = 0;
			}
		}
		else
		{
			PI[playerid][CorrectTheoryAnswers] = 0;
		}

		return 1;
	}

	if(dialogid == 5424)
	{
		if(response)
		{
			if(PI[playerid][PasiemeAlga] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 24 valandos nuo praeito algos atsiëmimo!");

			if(PI[playerid][alga] < 1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite kà atsiimti!");

			new String[1024], Stringas[512], JobPay, BankInterest, Float: Mokestis;

			if(PI[playerid][alga] > 0)
			{
				JobPay = PI[playerid][alga];
			}

			if(PI[playerid][banke] > 0)
			{
				BankInterest = floatround(PI[playerid][banke] / 5000);
			}
			else
			{
				BankInterest = 0;
			}

			if(PI[playerid][Sutartis] == 2)
			{
				Mokestis = PI[playerid][TelMokesciai];
			}
			else
			{
				Mokestis = 0;
			}

			strcat(String, "\t{ffffff}Jûsø algos èekis:\n\n");

			format(Stringas, sizeof(Stringas), "Alga: \t\t\t\t{FFAF00}$%s{ffffff}\n \n", konvertuoti_pinigus(JobPay));
			strcat(String, Stringas);

			format(Stringas, sizeof(Stringas), "Banko palûkanos: \t\t{FFAF00}$%s{ffffff}\n \n", konvertuoti_pinigus(BankInterest));
			strcat(String, Stringas);

			if(PI[playerid][Sutartis] == 2)
			{
				format(Stringas, sizeof(Stringas), "Abonentinis telefono mokëstis: \t\t{FFAF00}$%.2f{ffffff}\n \n", Mokestis);
				strcat(String, Stringas);
			}

			format(Stringas, sizeof(Stringas), "Ið viso gavote á rankas: \t{FFAF00}$%s{ffffff}", konvertuoti_pinigus(floatround(JobPay + BankInterest - Mokestis)));
			strcat(String, Stringas);

			ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Algos informacija:", String, "Uþdaryti", "");

			GivePlayerMoneyA(playerid, floatround(JobPay + BankInterest - Mokestis));
			
			PI[playerid][TelMokesciai]	= 0;
			PI[playerid][PasiemeAlga]	= gettime() + 86400;
			PI[playerid][alga] 			= 0;
		}
		return 1;
	}

	if(dialogid == 1543)
	{
		if(response)
		{
			new Float: P_Health;

			GetPlayerHealth(playerid, P_Health);

			switch(listitem)
			{
				case 0:
				{
					new RandomNumber;

					if(GetPlayerMoneyA(playerid) < DefaultContractPrice) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					if(PI[playerid][Sutartis] == 2) return SendClientMessage(playerid, -1, "{ffffff} Jus esate pasiraðæs abonentinæ sutartá. Nutraukti jà galite telefonø salone!");

					GivePlayerMoneyA(playerid, -DefaultContractPrice);

					PI[playerid][Sutartis] = 1;

					new String[216];
					format(String, sizeof(String), "{ffffff} Sëkmingai nusipirkote mobiliojo ryðio kortelæ uþ {FFAF00}$%d{ffffff}!", DefaultContractPrice);
					SendClientMessage(playerid, -1, String);

					RandomNumber = random(9999) + 100000;

					format(String, sizeof(String), "SELECT `ID` FROM `players` WHERE `MobilePhoneNumber` = '%d'", RandomNumber);
					mysql_query(String);

					mysql_store_result();

					if(mysql_num_rows()) // Toks numeris yra
					{
						RandomNumber = random(9999) + 100000;

						PI[playerid][MobilePhoneNumber] = RandomNumber;
					}
					else // Tokio numerio nëra
					{
						PI[playerid][MobilePhoneNumber] = RandomNumber;
					}

					OnPlayerPickUpPickup(playerid, PickupsInfo[LietuvosSpauda][0]);
				}

				case 1:
				{
					if(PI[playerid][Sutartis] == 2) return SendClientMessage(playerid, -1, "{ffffff} Jus esate pasiraðæs abonentinæ sutartá, todël jums papildymø nereikia!");

					ShowPlayerDialogEx(playerid, 1544, DIALOG_STYLE_INPUT, "Lietuvos Spauda", "{ffffff}Áraðykite kokios vertës papildymà norite ásigyti:", "Pirkti", "Atgal");
				}

				case 2:
				{
					if(GetPlayerMoneyA(playerid) < 4) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					GivePlayerMoneyA			(playerid, -4);
					SendClientMessage 			(playerid, -1, "{ffffff} Geriate Coca-Colà!");
					Fix_SetPlayerSpecialAction	(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

					OnPlayerPickUpPickup(playerid, PickupsInfo[LietuvosSpauda][0]);
				}

				case 3:
				{
					if(GetPlayerMoneyA(playerid) < 5) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					GivePlayerMoneyA			(playerid, -5);
					SendClientMessage 			(playerid, -1, "{ffffff} Geriate sultis!");
					Fix_SetPlayerSpecialAction	(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

					OnPlayerPickUpPickup(playerid, PickupsInfo[LietuvosSpauda][0]);
				}

				case 4:
				{
					if(GetPlayerMoneyA(playerid) < 7) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					GivePlayerMoneyA 	(playerid, -7);
					SendClientMessage 	(playerid, -1, "{ffffff} Suvalgëte bandelæ!");
					Sotumas				(playerid, 7);
					ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

					OnPlayerPickUpPickup(playerid, PickupsInfo[LietuvosSpauda][0]);
				}

				case 5:
				{
					if(GetPlayerMoneyA(playerid) < 7) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					GivePlayerMoneyA 	(playerid, -7);
					SendClientMessage 	(playerid, -1, "{ffffff} Suvalgëte ledus!");
					Sotumas				(playerid, 7);
					ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

					OnPlayerPickUpPickup(playerid, PickupsInfo[LietuvosSpauda][0]);
				}

				case 6:
				{
					if(GetPlayerMoneyA(playerid) < 2) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					GivePlayerMoneyA 	(playerid, -2);
					SendClientMessage 	(playerid, -1, "{ffffff} Suvalgëte ðokoladiná batonëlá!");
					Sotumas				(playerid, 2);
					ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

					OnPlayerPickUpPickup(playerid, PickupsInfo[LietuvosSpauda][0]);
				}

				case 7:
				{
					if(GetPlayerMoneyA(playerid) < 500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					GivePlayerMoneyA 	(playerid, -500);
					SendClientMessage 	(playerid, -1, "{ffffff} Nusipirkote kastuvà!");
					ac_GivePlayerWeapon		(playerid, WEAPON_SHOVEL, 1);

					OnPlayerPickUpPickup(playerid, PickupsInfo[LietuvosSpauda][0]);
				}

				case 8:
				{
					if(GetPlayerMoneyA(playerid) < 90) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					GivePlayerMoneyA 	(playerid, -90);
					SendClientMessage 	(playerid, -1, "{ffffff} Nusipirkote kauliukà! Naudojimas: {FFAF00} /kauliukas{ffffff}, {FFAF00} /nkauliukas{ffffff}!");

					PI[playerid][Kauliukas] = 1;

					OnPlayerPickUpPickup(playerid, PickupsInfo[LietuvosSpauda][0]);
				}
			}
		}

		return 1;
	}

	if(dialogid == 1544)
	{
		new String[200];

		if(response)
		{
			if(strfind(inputtext, "%") != -1) return IsmestiZaideja(playerid, 100);
			if(IsNumeric(inputtext, true))
			{
				if(GetPlayerMoneyA(playerid) >= floatstr(inputtext))
				{
					new Float: WitdrawedMoney = floatstr(inputtext);

					if(WitdrawedMoney + PI[playerid][PhoneMoney] > 300) return SendClientMessage(playerid, -1, "{ffffff} Daugiau nei {FFAF00}$300 {ffffff}savo sàskaitos negalite!");

					if(WitdrawedMoney <= 0.00) return ShowPlayerDialogEx(playerid, 1544, DIALOG_STYLE_INPUT, "Lietuvos Spauda", "{ffffff}Áraðykite kokios vertës papildymà norite ásigyti:", "Pirkti", "Atgal");

					GivePlayerMoneyA(playerid, floatround(-WitdrawedMoney));

					PI[playerid][PhoneMoney] += WitdrawedMoney;

					format(String, sizeof(String), "{ffffff} Pasipildëte savo sàskaità {FFAF00}$%.2f {ffffff}vertës papildymu!", WitdrawedMoney);
					SendClientMessage(playerid, -1, String);
				}
				else
				{
					ShowPlayerDialogEx(playerid, 1544, DIALOG_STYLE_INPUT, "Lietuvos Spauda", "{ffffff}Áraðykite kokios vertës papildymà norite ásigyti:", "Pirkti", "Atgal");
				}
			}
			else
			{
				ShowPlayerDialogEx(playerid, 1544, DIALOG_STYLE_INPUT, "Lietuvos Spauda", "{ffffff}Áraðykite kokios vertës papildymà norite ásigyti:", "Pirkti", "Atgal");
			}
		}
		else
		{
			format(String, sizeof(String), "1. Mobiliojo ryðio kortelë \t\t{FFAF00}$%d\n2. Sàskaitos papildymai\n3. Coca-Cola \t\t\t\t{FFAF00}$4\n4. Sultys \t\t\t\t{FFAF00}$5\n\
			5. Bandelë \t\t\t\t{FFAF00}$7\n6. Ledai \t\t\t\t{FFAF00}$3\n7. Ðokoladinis batonëlis \t\t{FFAF00}$2\n8. Kastuvas \t\t\t\t{FFAF00}$500", DefaultContractPrice);
			ShowPlayerDialogEx(playerid, 1543, DIALOG_STYLE_LIST, "Lietuvos Spauda", String, "Pasirinkti", "Uþdaryti");
		}

		return 1;
	}

	if(dialogid == 5787)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					if(GetPlayerMoneyA(playerid) < 22) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					GivePlayerMoneyA 			(playerid, -22);
					SendClientMessage 			(playerid, -1, "{ffffff} Geriate ðampanà!");
					Fix_SetPlayerSpecialAction	(playerid, SPECIAL_ACTION_DRINK_WINE);

					/*if(PropertyInfo[BARAS_BARAS][pBuyed])
					{
						PropertyInfo[BARAS_BARAS][pProfit] += 11;
					}*/

					if(PropertyInfo[NAKTINIS_KLUBAS][pBuyed])
					{
						PropertyInfo[NAKTINIS_KLUBAS][pProfit] += 11;
					}
				}

				case 1:
				{
					if(GetPlayerMoneyA(playerid) < 20) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					GivePlayerMoneyA 			(playerid, -20);
					SendClientMessage 			(playerid, -1, "{ffffff} Geriate vynà!");
					Fix_SetPlayerSpecialAction	(playerid, SPECIAL_ACTION_DRINK_WINE);

					/*if(PropertyInfo[BARAS_BARAS][pBuyed])
					{
						PropertyInfo[BARAS_BARAS][pProfit] += 10;
					}*/

					if(PropertyInfo[NAKTINIS_KLUBAS][pBuyed])
					{
						PropertyInfo[NAKTINIS_KLUBAS][pProfit] += 10;
					}
				}

				case 2:
				{
					if(GetPlayerMoneyA(playerid) < 6) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					GivePlayerMoneyA 			(playerid, -6);
					SendClientMessage 			(playerid, -1, "{ffffff} Geriate alø!");
					Fix_SetPlayerSpecialAction	(playerid, SPECIAL_ACTION_DRINK_BEER);

					/*if(PropertyInfo[BARAS_BARAS][pBuyed])
					{
						PropertyInfo[BARAS_BARAS][pProfit] += 3;
					}*/

					if(PropertyInfo[NAKTINIS_KLUBAS][pBuyed])
					{
						PropertyInfo[NAKTINIS_KLUBAS][pProfit] += 3;
					}
				}

				case 3:
				{
					if(GetPlayerMoneyA(playerid) < 35) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					GivePlayerMoneyA 			(playerid, -35);
					SendClientMessage 			(playerid, -1, "{ffffff} Geriate degtinæ!");
					Fix_SetPlayerSpecialAction	(playerid, SPECIAL_ACTION_DRINK_WINE);

					/*if(PropertyInfo[BARAS_BARAS][pBuyed])
					{
						PropertyInfo[BARAS_BARAS][pProfit] += 17;
					}*/

					if(PropertyInfo[NAKTINIS_KLUBAS][pBuyed])
					{
						PropertyInfo[NAKTINIS_KLUBAS][pProfit] += 17;
					}
				}

				case 4:
				{
					if(GetPlayerMoneyA(playerid) < 40) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

					GivePlayerMoneyA 			(playerid, -40);
					SendClientMessage 			(playerid, -1, "{ffffff} Geriate brendá!");
					Fix_SetPlayerSpecialAction	(playerid, SPECIAL_ACTION_DRINK_WINE);

					/*if(PropertyInfo[BARAS_BARAS][pBuyed])
					{
						PropertyInfo[BARAS_BARAS][pProfit] += 20;
					}*/

					if(PropertyInfo[NAKTINIS_KLUBAS][pBuyed])
					{
						PropertyInfo[NAKTINIS_KLUBAS][pProfit] += 20;
					}
				}
			}
		}

		return 1;
	}

	SetPVarInt(playerid, "A_DIALOG", -1);

	return 1;
}

f_public: KMAVartaiclose()
{
	MoveDynamicObject(KMAVartai, -1665.00854, 1296.86877, 8.84070, 3.0, 0.00000, 0.00000, -45.00000);

	Vartai[9] = false;

	return 1;
}

f_public: ShowGlassesBuyDialog(playerid)
{
	PI[playerid][GlassesPriceThenBuy] = 5 + random(30);

	new String[80];

	format(String, sizeof(String), "{ffffff}Ðiø akiniø kaina: {FFAF00}$%d{ffffff}\n\n\tAr norite pirkti?", PI[playerid][GlassesPriceThenBuy]);
	ShowPlayerDialogEx(playerid, SelectedGlassesBuyDialog, DIALOG_STYLE_MSGBOX, "Ar norite pirkti?", String, "Taip", "Ne");
	return 1;
}

stock GetVehicleFreeTrunkSlot(vehicleid)
{
	for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
	{
	    if(VehicleTrunkInfo[vehicleid][i][ItemID] <= 0) return i;
	}
	return MAX_TRUNK_SLOTS;
}

stock GetTrunkItemSlot(vehicleid, itemid)
{
	for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
	{
	    if(VehicleTrunkInfo[vehicleid][i][ItemID] == itemid) return i;
 	}
	return 0;
}

stock IsVehicleTrunkHasItem(vehicleid, itemid)
{
	for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
	{
	    if(VehicleTrunkInfo[vehicleid][i][ItemID] == itemid)
	    {
	        return 1;
	    }
	    else if((VehicleTrunkInfo[vehicleid][i][ItemID] + 50) == itemid)
	    {
	        return 1;
	    }
	}
	return 0;
}

stock AddItemInVehicleTrunk(vehicleid, itemid, ammount)
{
    for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
	{
	    if(VehicleTrunkInfo[vehicleid][i][ItemID] == itemid)
	    {
            VehicleTrunkInfo[vehicleid][i][ItemAmmount] += ammount;
            return 1;
	 	}
	}
	new FreeSlotID = GetVehicleFreeTrunkSlot(vehicleid);
	if(FreeSlotID == MAX_TRUNK_SLOTS) return 0;

	VehicleTrunkInfo[vehicleid][FreeSlotID][ItemID] = itemid;
	VehicleTrunkInfo[vehicleid][FreeSlotID][ItemAmmount] += ammount;
	return 1;
}

stock GetItemCountInVehicleTrunk(vehicleid, itemid)
{
    for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
	{
		if(VehicleTrunkInfo[vehicleid][i][ItemID] == itemid)
		{
		    return VehicleTrunkInfo[vehicleid][i][ItemAmmount];
		}
 	}
	return 0;
}

stock RemoveItemCountFromTrunk(vehicleid, itemid, ammount)
{
    for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
	{
		if(VehicleTrunkInfo[vehicleid][i][ItemID] == itemid)
		{
		    if(VehicleTrunkInfo[vehicleid][i][ItemAmmount] >= ammount)
		    {
	        	VehicleTrunkInfo[vehicleid][i][ItemAmmount] -= ammount;
	        	if(VehicleTrunkInfo[vehicleid][i][ItemAmmount] < 1)
	        	{
       		   		VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
				}
			}
		    else
		    {
		        VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
		    }
		}
	}
	return 1;
}

stock ShowPlayerDialogEx(playerid, id, style, zag[], info[], cancle[], cancle2[])
{
    ShowPlayerDialog(playerid,id, style, zag, info, cancle, cancle2);
    SetPVarInt(playerid,"A_DIALOG", id);
    return 1;
}

f_public: KickPlayer(playerid)
{
	Kick(playerid);

	return 1;
}

stock GetTrunkItemName(itemid)
{
	new ItemName[128];

	switch(itemid)
	{
	    case 1: ItemName = "Kastetas";
	    case 2: ItemName = "Golfo lazda";
	    case 3: ItemName = "Bananas";
	    case 4: ItemName = "Peilis";
	    case 5: ItemName = "Beisbolo lazda";
	    case 6: ItemName = "Kastuvas";
	    case 7: ItemName = "Biliardo lazda";
	    case 8: ItemName = "Katana kardas";
	    case 9: ItemName = "Benzopjuklas";
	    case 10: ItemName = "Vibratorius";
	    case 11: ItemName = "Maþas vibratorius";
	    case 12: ItemName = "Didelis vibratorius";
	    case 13: ItemName = "Sidabrinis vibratorius";
	    case 14: ItemName = "Gëlës";
	    case 15: ItemName = "Lauþtuvas";
	    case 16: ItemName = "Granata";
	    case 17: ItemName = "Aðariniø dujø granata";
	    case 18: ItemName = "Butelis su benzinu";

	    case 22: ItemName = "'9mm' pistoletas";
	    case 23: ItemName = "'9mm' pistoletas su duslintuvu";
		case 24: ItemName = "'Desert Eagle' pistoletas";
	    case 25: ItemName = "Ðratinis ðautuvas";
	    case 26: ItemName = "Pjautinis ðratinis ðautuvas";
	    case 27: ItemName = "Kovinis ðratinis ðautuvas";
	    case 28: ItemName = "Maþieji SMG";
	    case 29: ItemName = "MP5";
	    case 30: ItemName = "'AK-47' automatas";
	    case 31: ItemName = "'M4A1' automatas";
	    case 32: ItemName = "Tec9";
	    case 33: ItemName = "Snaiperis (be optikos)";
	    case 34: ItemName = "Snaiperis (optinis)";
	    case 35: ItemName = "'RPG' bazuka";
	    case 36: ItemName = "'HS' bazuka";
	    case 37: ItemName = "Liepsnosvaidis";
	    case 38: ItemName = "Minigun";
	    case 39: ItemName = "Nuotolinë bomba";
	    case 40: ItemName = "Nuotilinës bombos detonatorius";
		case 41: ItemName = "Aerozoliniai daþai";
		case 42: ItemName = "Gesintuvas";
		case 43: ItemName = "Vaizdo kamera";
		case 44: ItemName = "Naktinio matymo akiniai";
		case 45: ItemName = "Ðiluminio matymo akiniai";
		case 46: ItemName = "Paraðiutas";
	    default: ItemName = "Tusèia";
	}

	return ItemName;
}

stock AddItemInHouseChest(houseid, itemid, ammount)
{
    for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
	{
	    if(HouseChest[houseid][i][ItemID] == itemid)
	    {
            HouseChest[houseid][i][ItemAmmount] += ammount;
            return 1;
	 	}
	}

	new FreeSlotID = GetFreeHouseChestSlot(houseid);
	if(FreeSlotID == MAX_CHEST_SLOTS) return 0;

	HouseChest[houseid][FreeSlotID][ItemID]       = itemid;
	HouseChest[houseid][FreeSlotID][ItemAmmount] += ammount;
	return 1;
}

stock AddItemInCreditHouseChest(houseid, itemid, ammount)
{
    for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
	{
	    if(CreditHouseChest[houseid][i][ItemID] == itemid)
	    {
            CreditHouseChest[houseid][i][ItemAmmount] += ammount;
            return 1;
	 	}
	}

	new FreeSlotID = GetFreeCreditHouseChestSlot(houseid);
	if(FreeSlotID == MAX_CHEST_SLOTS) return 0;

	CreditHouseChest[houseid][FreeSlotID][ItemID]       = itemid;
	CreditHouseChest[houseid][FreeSlotID][ItemAmmount] += ammount;
	return 1;
}

stock GetItemCountInHouseChest(houseid, itemid)
{
    for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
	{
		if(HouseChest[houseid][i][ItemID] == itemid)
		{
			return HouseChest[houseid][i][ItemAmmount];
		}
	}
	return 0;
}

stock RemoveItemCountFromHouseChest(houseid, itemid, ammount)
{
    for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
	{
		if(HouseChest[houseid][i][ItemID] == itemid)
		{
		    if(HouseChest[houseid][i][ItemAmmount] >= ammount)
		    {
	        	HouseChest[houseid][i][ItemAmmount] -= ammount;

	        	if(HouseChest[houseid][i][ItemAmmount] < 1)
	        	{
       		   		HouseChest[houseid][i][ItemID] = 0;
				}
			}
		    else
		    {
		        HouseChest[houseid][i][ItemID] = 0;
		    }
		}
	}
	return 1;
}

stock RemoveItemCountFromCreditHouse(houseid, itemid, ammount)
{
    for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
	{
		if(CreditHouseChest[houseid][i][ItemID] == itemid)
		{
		    if(CreditHouseChest[houseid][i][ItemAmmount] >= ammount)
		    {
	        	CreditHouseChest[houseid][i][ItemAmmount] -= ammount;

	        	if(CreditHouseChest[houseid][i][ItemAmmount] < 1)
	        	{
       		   		CreditHouseChest[houseid][i][ItemID] = 0;
				}
			}
		    else
		    {
		        CreditHouseChest[houseid][i][ItemID] = 0;
		    }
		}
	}
	return 1;
}

stock GetHouseChestItemSlot(houseid, itemid)
{
	for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
	{
	    if(HouseChest[houseid][i][ItemID] == itemid) return i;
 	}
	return 0;
}

stock GetCreditHouseChestItemSlot(houseid, itemid)
{
	for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
	{
	    if(CreditHouseChest[houseid][i][ItemID] == itemid) return i;
 	}
	return 0;
}

stock GetFreeHouseChestSlot(houseid)
{
	for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
	{
	    if(HouseChest[houseid][i][ItemID] <= 0) return i;
	}
	return MAX_CHEST_SLOTS;
}

stock GetFreeCreditHouseChestSlot(houseid)
{
	for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
	{
	    if(CreditHouseChest[houseid][i][ItemID] <= 0) return i;
	}
	return MAX_CHEST_SLOTS;
}

stock CreateRentVehicle(VehicleModel, Float: X, Float: Y, Float: Z, Float: A)
{
	new vehicleid = AC_CreateVehicle(VehicleModel, Float: X, Float: Y, Float: Z + 1, Float: A, random(126), random(126), 300);

	VehPos[vehicleid][0] = X;
	VehPos[vehicleid][1] = Y;
	VehPos[vehicleid][2] = Z;
	VehPos[vehicleid][3] = A;
	NuomosKaina[vehicleid] = 10 + random(50);
	VehicleInfo[vehicleid][vNuoma] = true;

	SetVehicleFuelInfo(vehicleid);

	CanCheckVehiclePos[vehicleid] = gettime() + 7;

	return vehicleid;
}

stock CreateShopVehicle(VehicleModel, Float: X, Float: Y, Float: Z, Float: A, vehPrice)
{
	new vehicleid = AC_CreateVehicle(VehicleModel, Float: X, Float: Y, Float: Z + 1, Float: A, -1, -1, 100);

	ArTurgausMasina[vehicleid]			= true;
	TurgausInfo[vehicleid][tKaina] 		= floatround(vehPrice * 1.5);
	TurgausInfo[vehicleid][T_Pos][0]	= X;
	TurgausInfo[vehicleid][T_Pos][1]	= Y;
	TurgausInfo[vehicleid][T_Pos][2]	= Z;

	SetVehicleFuelInfo(vehicleid);

	VehicleInfo[vehicleid][vColor][0] 	= random(126);
	VehicleInfo[vehicleid][vColor][1] 	= random(126);
	VehPos[vehicleid][0] = X;
	VehPos[vehicleid][1] = Y;
	VehPos[vehicleid][2] = Z;
	VehPos[vehicleid][3] = A;
	CanCheckVehiclePos[vehicleid] = gettime() + 7;

	return vehicleid;
}

stock CreateServerVehicle(VehicleModel, Float: X, Float: Y, Float: Z, Float: A, Color1, Color2, RespawnDelay)
{
	new vehicleid = AC_CreateVehicle(VehicleModel, Float: X, Float: Y, Float: Z, Float: A, Color1, Color2, RespawnDelay);

	VehicleInfo[vehicleid][vColor][0] 	= Color1;
	VehicleInfo[vehicleid][vColor][1] 	= Color2;
	VehPos[vehicleid][0] = X;
	VehPos[vehicleid][1] = Y;
	VehPos[vehicleid][2] = Z;
	VehPos[vehicleid][3] = A;
	CanCheckVehiclePos[vehicleid] = gettime() + 7;
	//LinkVehicleToInterior(vehicleid, 31);

	switch(GetVehicleCategory(vehicleid))
	{
		case BIKES: LinkVehicleToInterior(vehicleid, 0);
		default: 	LinkVehicleToInterior(vehicleid, 0);
	}

	return vehicleid;
}

stock ShowGenderTextdraws(playerid)
{
	for(new s = 0; s < 8; s ++)	TextDrawShowForPlayer(playerid, lyties_pasirinkimas_g[s]);
	for(new s = 0; s < 2; s ++)	PlayerTextDrawShow(playerid, lyties_pasirinkimas_p[playerid][s]);

	SelectTextDraw(playerid, 0x336633FF);
}

stock HideGenderTextdraws(playerid)
{
	for(new s = 0; s < 8; s ++)	TextDrawHideForPlayer(playerid, lyties_pasirinkimas_g[s]);
	for(new s = 0; s < 2; s ++)	PlayerTextDrawHide(playerid, lyties_pasirinkimas_p[playerid][s]);

	CancelSelectTextDraw(playerid);
}

stock ShowLoginTextdraws(playerid)
{
	for(new s = 0; s < 10; s ++)	TextDrawShowForPlayer(playerid, login_register_g[s]);

	SelectTextDraw(playerid, 0x336633FF);
}

stock HideLoginTextdraws(playerid)
{
	for(new s = 0; s < 10; s ++) 	TextDrawHideForPlayer(playerid, login_register_g[s]);

	CancelSelectTextDraw(playerid);
}

stock CreateTextDraws(playerid)
{
	PlayerEnum[playerid][TotalWon] = 0;
	PlayerEnum[playerid][TotalPaid] = 0;
	PlayerEnum[playerid][TotalTotal] = 0;
	IsGambling[playerid] = false;
	IsSpinning[playerid] = false;
    LeftSpinner[playerid] = CreatePlayerObject(playerid, 2347, 2236.6072, 1601.0479, 1000.6791,   5.00, 0.00, -90.00);
	MiddleSpinner[playerid] = CreatePlayerObject(playerid, 2348, 2236.6072, 1600.9279, 1000.6791,   5.00, 0.00, -90.00);
	RightSpinner[playerid] = CreatePlayerObject(playerid, 2349, 2236.6072, 1600.8079, 1000.6791,   5.00, 0.00, -90.00);
    new doublebar[16], bar[16], bell[16], cherry[16], grapes[16], sixtynine[16], wager[16];
	format(doublebar,sizeof(doublebar),"= $%i",REWARD_DOUBLEBAR);
	format(bar,sizeof(bar),"= $%i",REWARD_BAR);
	format(bell,sizeof(bell),"= $%i",REWARD_BELL);
	format(cherry,sizeof(cherry),"= $%i",REWARD_CHERRY);
	format(grapes,sizeof(grapes),"= $%i",REWARD_GRAPES);
	format(sixtynine,sizeof(sixtynine),"= $%i",REWARD_SIXTYNINE);
	format(wager,sizeof(wager),"~y~Statymas = $%d", PI[playerid][Stafke]);
	
	kliutis_p[playerid][0] = CreatePlayerTextDraw(playerid, 451.000000, 188.133331, "(ESC)");
	PlayerTextDrawLetterSize(playerid, kliutis_p[playerid][0], 0.156500, 1.102221);
	PlayerTextDrawAlignment(playerid, kliutis_p[playerid][0], 1);
	PlayerTextDrawColor(playerid, kliutis_p[playerid][0], -1523963137);
	PlayerTextDrawSetShadow(playerid, kliutis_p[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, kliutis_p[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, kliutis_p[playerid][0], 255);
	PlayerTextDrawFont(playerid, kliutis_p[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, kliutis_p[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, kliutis_p[playerid][0], 0);
	
    PlayerEnum[playerid][Textdraw0] = CreatePlayerTextDraw(playerid, 563.000000, 163.000000, "~n~");
	PlayerTextDrawAlignment(playerid, PlayerEnum[playerid][Textdraw0], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw0], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw0], 1);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw0], 0.500000, 17.700006);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw0], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw0], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw0], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw0], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw0], 22.000000, 140.000000);

	PlayerEnum[playerid][Textdraw1] = CreatePlayerTextDraw(playerid, 319.000000, 326.000000, "~n~");
	PlayerTextDrawAlignment(playerid, PlayerEnum[playerid][Textdraw1], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw1], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw1], 1);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw1], 2.250000, 10.799999);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw1], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw1], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw1], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw1], -22.000000, 340.000000);

	PlayerEnum[playerid][Textdraw2] = CreatePlayerTextDraw(playerid, 179.000000, 329.000000, "ld_slot:r_69");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw2], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw2], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw2], 0.460000, -1.500000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw2], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw2], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw2], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw2], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw2], 90.000000, 69.000000);

	PlayerEnum[playerid][Textdraw3] = CreatePlayerTextDraw(playerid, 274.000000, 329.000000, "ld_slot:r_69");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw3], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw3], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw3], 0.460000, -1.500000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw3], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw3], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw3], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw3], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw3], 90.000000, 69.000000);

	PlayerEnum[playerid][Textdraw4] = CreatePlayerTextDraw(playerid, 369.000000, 329.000000, "ld_slot:r_69");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw4], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw4], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw4], 0.460000, -1.500000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw4], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw4], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw4], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw4], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw4], 90.000000, 69.000000);

	PlayerEnum[playerid][Textdraw5] = CreatePlayerTextDraw(playerid, 206.000000, 381.000000, "LAIMEJAI!");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw5], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw5], 2);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw5], 1.100000, 4.099998);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw5], 1694458980);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw5], 1);

	PlayerEnum[playerid][Textdraw6] = CreatePlayerTextDraw(playerid, 493.000000, 169.000000, "ld_slot:bar2_o");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw6], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw6], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw6], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw6], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw6], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw6], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw6], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw6], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw6], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw6], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw7] = CreatePlayerTextDraw(playerid, 518.000000, 169.000000, "ld_slot:bar2_o");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw7], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw7], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw7], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw7], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw7], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw7], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw7], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw7], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw7], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw7], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw8] = CreatePlayerTextDraw(playerid, 543.000000, 169.000000, "ld_slot:bar2_o");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw8], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw8], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw8], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw8], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw8], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw8], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw8], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw8], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw8], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw9] = CreatePlayerTextDraw(playerid, 493.000000, 186.000000, "ld_slot:bar1_o");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw9], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw9], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw9], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw9], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw9], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw9], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw9], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw9], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw9], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw10] = CreatePlayerTextDraw(playerid, 518.000000, 186.000000, "ld_slot:bar1_o");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw10], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw10], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw10], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw10], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw10], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw10], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw10], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw10], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw10], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw10], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw11] = CreatePlayerTextDraw(playerid, 543.000000, 186.000000, "ld_slot:bar1_o");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw11], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw11], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw11], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw11], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw11], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw11], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw11], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw11], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw11], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw11], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw12] = CreatePlayerTextDraw(playerid, 493.000000, 203.000000, "ld_slot:bell");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw12], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw12], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw12], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw12], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw12], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw12], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw12], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw12], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw12], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw12], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw13] = CreatePlayerTextDraw(playerid, 518.000000, 203.000000, "ld_slot:bell");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw13], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw13], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw13], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw13], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw13], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw13], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw13], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw13], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw13], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw13], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw14] = CreatePlayerTextDraw(playerid, 543.000000, 203.000000, "ld_slot:bell");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw14], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw14], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw14], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw14], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw14], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw14], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw14], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw14], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw14], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw14], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw15] = CreatePlayerTextDraw(playerid, 493.000000, 220.000000, "ld_slot:cherry");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw15], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw15], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw15], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw15], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw15], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw15], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw15], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw15], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw15], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw15], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw16] = CreatePlayerTextDraw(playerid, 518.000000, 220.000000, "ld_slot:cherry");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw16], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw16], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw16], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw16], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw16], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw16], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw16], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw16], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw16], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw16], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw17] = CreatePlayerTextDraw(playerid, 543.000000, 220.000000, "ld_slot:cherry");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw17], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw17], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw17], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw17], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw17], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw17], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw17], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw17], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw17], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw17], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw18] = CreatePlayerTextDraw(playerid, 493.000000, 237.000000, "ld_slot:grapes");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw18], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw18], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw18], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw18], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw18], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw18], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw18], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw18], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw18], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw18], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw19] = CreatePlayerTextDraw(playerid, 518.000000, 237.000000, "ld_slot:grapes");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw19], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw19], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw19], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw19], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw19], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw19], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw19], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw19], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw19], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw19], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw20] = CreatePlayerTextDraw(playerid, 543.000000, 237.000000, "ld_slot:grapes");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw20], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw20], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw20], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw20], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw20], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw20], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw20], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw20], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw20], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw20], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw21] = CreatePlayerTextDraw(playerid, 493.000000, 255.000000, "ld_slot:r_69");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw21], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw21], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw21], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw21], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw21], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw21], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw21], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw21], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw21], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw21], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw22] = CreatePlayerTextDraw(playerid, 518.000000, 255.000000, "ld_slot:r_69");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw22], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw22], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw22], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw22], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw22], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw22], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw22], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw22], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw22], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw22], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw23] = CreatePlayerTextDraw(playerid, 543.000000, 255.000000, "ld_slot:r_69");
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw23], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw23], 4);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw23], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw23], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw23], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw23], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw23], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw23], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw23], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw23], 25.000000, 20.000000);

	PlayerEnum[playerid][Textdraw24] = CreatePlayerTextDraw(playerid, 573.000000, 253.000000, sixtynine);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw24], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw24], 2);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw24], 0.290000, 1.700000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw24], 1694458980);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw24], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw24], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw24], 1);

	PlayerEnum[playerid][Textdraw25] = CreatePlayerTextDraw(playerid, 573.000000, 236.000000, grapes);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw25], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw25], 2);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw25], 0.290000, 1.700000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw25], 1694458980);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw25], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw25], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw25], 1);

	PlayerEnum[playerid][Textdraw26] = CreatePlayerTextDraw(playerid, 573.000000, 219.000000, cherry);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw26], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw26], 2);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw26], 0.290000, 1.700000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw26], 1694458980);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw26], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw26], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw26], 1);

	PlayerEnum[playerid][Textdraw27] = CreatePlayerTextDraw(playerid, 573.000000, 202.000000, bell);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw27], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw27], 2);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw27], 0.290000, 1.700000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw27], 1694458980);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw27], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw27], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw27], 1);

	PlayerEnum[playerid][Textdraw28] = CreatePlayerTextDraw(playerid, 573.000000, 185.000000, bar);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw28], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw28], 2);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw28], 0.290000, 1.700000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw28], 1694458980);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw28], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw28], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw28], 1);

	PlayerEnum[playerid][Textdraw29] = CreatePlayerTextDraw(playerid, 573.000000, 168.000000, doublebar);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw29], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw29], 2);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw29], 0.290000, 1.700000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw29], 1694458980);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw29], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw29], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw29], 1);

	PlayerEnum[playerid][Textdraw30] = CreatePlayerTextDraw(playerid, 496.000000, 281.000000, wager);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw30], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw30], 2);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw30], 0.290000, 2.200000);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw30], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw30], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw30], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw30], 1);
	
	PlayerEnum[playerid][Textdraw31] = CreatePlayerTextDraw(playerid, 563.000000, 327.000000, "~n~");
	PlayerTextDrawAlignment(playerid, PlayerEnum[playerid][Textdraw31], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw31], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw31], 1);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw31], 0.500000, 10.700002);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw31], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw31], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw31], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw31], 1);
	PlayerTextDrawUseBox(playerid, PlayerEnum[playerid][Textdraw31], 1);
	PlayerTextDrawBoxColor(playerid, PlayerEnum[playerid][Textdraw31], 255);
	PlayerTextDrawTextSize(playerid, PlayerEnum[playerid][Textdraw31], 22.000000, 140.000000);

	PlayerEnum[playerid][Textdraw32] = CreatePlayerTextDraw(playerid, 629.000000, 342.000000, "~w~laimeta:   ~g~$0");
	PlayerTextDrawAlignment(playerid, PlayerEnum[playerid][Textdraw32], 3);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw32], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw32], 2);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw32], 0.309997, 1.799999);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw32], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw32], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw32], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw32], 1);

	PlayerEnum[playerid][Textdraw33] = CreatePlayerTextDraw(playerid, 629.000000, 352.000000, "-------------------------");
	PlayerTextDrawAlignment(playerid, PlayerEnum[playerid][Textdraw33], 3);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw33], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw33], 2);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw33], 0.309997, 1.799999);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw33], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw33], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw33], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw33], 1);

	PlayerEnum[playerid][Textdraw34] = CreatePlayerTextDraw(playerid, 629.000000, 363.000000, "~w~skirtumas:    ~y~$0");
	PlayerTextDrawAlignment(playerid, PlayerEnum[playerid][Textdraw34], 3);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw34], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw34], 2);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw34], 0.309997, 1.799999);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw34], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw34], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw34], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw34], 1);

	PlayerEnum[playerid][Textdraw35] = CreatePlayerTextDraw(playerid, 629.000000, 328.000000, "~w~sumoketa:    ~r~$0");
	PlayerTextDrawAlignment(playerid, PlayerEnum[playerid][Textdraw35], 3);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw35], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw35], 2);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw35], 0.309997, 1.799999);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw35], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw35], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw35], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw35], 1);

	PlayerEnum[playerid][Textdraw36] = CreatePlayerTextDraw(playerid, 585.000000, 408.000000, "~w~iseiti: ~b~/nsukti");
	PlayerTextDrawAlignment(playerid, PlayerEnum[playerid][Textdraw36], 3);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw36], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw36], 2);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw36], 0.309997, 1.799999);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw36], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw36], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw36], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw36], 1);

	PlayerEnum[playerid][Textdraw37] = CreatePlayerTextDraw(playerid, 585.000000, 394.000000, "~w~Sukti: ~b~ENTER");
	PlayerTextDrawAlignment(playerid, PlayerEnum[playerid][Textdraw37], 3);
	PlayerTextDrawBackgroundColor(playerid, PlayerEnum[playerid][Textdraw37], 255);
	PlayerTextDrawFont(playerid, PlayerEnum[playerid][Textdraw37], 2);
	PlayerTextDrawLetterSize(playerid, PlayerEnum[playerid][Textdraw37], 0.309997, 1.799999);
	PlayerTextDrawColor(playerid, PlayerEnum[playerid][Textdraw37], -1);
	PlayerTextDrawSetOutline(playerid, PlayerEnum[playerid][Textdraw37], 0);
	PlayerTextDrawSetProportional(playerid, PlayerEnum[playerid][Textdraw37], 1);
	PlayerTextDrawSetShadow(playerid, PlayerEnum[playerid][Textdraw37], 1);
	
	gang_zone_p[playerid][0] = CreatePlayerTextDraw(playerid, 160.500000, 376.044464, "IEJOTE I ~P~MetroCity.lt~w~ karo teritorija!");
	PlayerTextDrawLetterSize(playerid, gang_zone_p[playerid][0], 0.170499, 0.996444);
	PlayerTextDrawAlignment(playerid, gang_zone_p[playerid][0], 1);
	PlayerTextDrawColor(playerid, gang_zone_p[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, gang_zone_p[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, gang_zone_p[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, gang_zone_p[playerid][0], 255);
	PlayerTextDrawFont(playerid, gang_zone_p[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, gang_zone_p[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, gang_zone_p[playerid][0], 0);

	lyties_pasirinkimas_p[playerid][0] = CreatePlayerTextDraw(playerid, 221.399993, 146.888916, "");// èia su paspaudimu
	PlayerTextDrawLetterSize(playerid, lyties_pasirinkimas_p[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, lyties_pasirinkimas_p[playerid][0], 101.000000, 101.000000);
	PlayerTextDrawAlignment(playerid, lyties_pasirinkimas_p[playerid][0], 1);
	PlayerTextDrawColor(playerid, lyties_pasirinkimas_p[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, lyties_pasirinkimas_p[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, lyties_pasirinkimas_p[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, lyties_pasirinkimas_p[playerid][0], 252645375);
	PlayerTextDrawFont(playerid, lyties_pasirinkimas_p[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, lyties_pasirinkimas_p[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, lyties_pasirinkimas_p[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, lyties_pasirinkimas_p[playerid][0], true);
	PlayerTextDrawSetPreviewModel(playerid, lyties_pasirinkimas_p[playerid][0], 7);// 159 yra vyro skinas, gali já pakeisti
	PlayerTextDrawSetPreviewRot(playerid, lyties_pasirinkimas_p[playerid][0], 0.000000, 0.000000, 0.000000, 1.000000);

	lyties_pasirinkimas_p[playerid][1] = CreatePlayerTextDraw(playerid, 324.000000, 146.911102, "");// èia su paspaudimu
	PlayerTextDrawLetterSize(playerid, lyties_pasirinkimas_p[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, lyties_pasirinkimas_p[playerid][1], 101.000000, 101.000000);
	PlayerTextDrawAlignment(playerid, lyties_pasirinkimas_p[playerid][1], 1);
	PlayerTextDrawColor(playerid, lyties_pasirinkimas_p[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, lyties_pasirinkimas_p[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, lyties_pasirinkimas_p[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, lyties_pasirinkimas_p[playerid][1], 252645375);
	PlayerTextDrawFont(playerid, lyties_pasirinkimas_p[playerid][1], 5);
	PlayerTextDrawSetProportional(playerid, lyties_pasirinkimas_p[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, lyties_pasirinkimas_p[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, lyties_pasirinkimas_p[playerid][1], true);
	PlayerTextDrawSetPreviewModel(playerid, lyties_pasirinkimas_p[playerid][1], 55);//55 yra moters skinas, gali já pakeisti
	PlayerTextDrawSetPreviewRot(playerid, lyties_pasirinkimas_p[playerid][1], 0.000000, 0.000000, 0.000000, 1.000000);

	kuro_pilimas_p[playerid][0] = CreatePlayerTextDraw(playerid, 221.000000, 115.177749, "");
	PlayerTextDrawLetterSize(playerid, kuro_pilimas_p[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, kuro_pilimas_p[playerid][0], 38.000000, 30.000000);
	PlayerTextDrawAlignment(playerid, kuro_pilimas_p[playerid][0], 1);
	PlayerTextDrawColor(playerid, kuro_pilimas_p[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, kuro_pilimas_p[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, kuro_pilimas_p[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, kuro_pilimas_p[playerid][0], 0);
	PlayerTextDrawFont(playerid, kuro_pilimas_p[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, kuro_pilimas_p[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, kuro_pilimas_p[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, kuro_pilimas_p[playerid][0], 3465);/// 3465 yra degalu o 3287 yra duju
	PlayerTextDrawSetPreviewRot(playerid, kuro_pilimas_p[playerid][0], 0.000000, 0.000000, 45.000000, 1.000000);

	kuro_pilimas_p[playerid][1] = CreatePlayerTextDraw(playerid, 251.000000, 175.688873, "Kuro tipoas:~y~ benzinas~w~~n~Tarifas:~y~ $4/l~n~~w~ipilta:~y~ 4.00l~n~~w~suma:~r~ 15$");
	PlayerTextDrawLetterSize(playerid, kuro_pilimas_p[playerid][1], 0.184000, 0.984000);
	PlayerTextDrawAlignment(playerid, kuro_pilimas_p[playerid][1], 1);
	PlayerTextDrawColor(playerid, kuro_pilimas_p[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, kuro_pilimas_p[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, kuro_pilimas_p[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, kuro_pilimas_p[playerid][1], 255);
	PlayerTextDrawFont(playerid, kuro_pilimas_p[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, kuro_pilimas_p[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, kuro_pilimas_p[playerid][1], 0);

	kuro_pilimas_p[playerid][2] = CreatePlayerTextDraw(playerid, 269.799926, 237.800003, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, kuro_pilimas_p[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, kuro_pilimas_p[playerid][2], 56.929676, 15.400054);
	PlayerTextDrawAlignment(playerid, kuro_pilimas_p[playerid][2], 1);
	PlayerTextDrawColor(playerid, kuro_pilimas_p[playerid][2], -72323128);
	PlayerTextDrawSetShadow(playerid, kuro_pilimas_p[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, kuro_pilimas_p[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, kuro_pilimas_p[playerid][2], 255);
	PlayerTextDrawFont(playerid, kuro_pilimas_p[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, kuro_pilimas_p[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, kuro_pilimas_p[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, kuro_pilimas_p[playerid][2], true);

	spidometras_p[playerid][0] = CreatePlayerTextDraw(playerid, 457.800109, 402.289459, "degalu baro bg");// ðitas juda
	PlayerTextDrawLetterSize(playerid, spidometras_p[playerid][0], 0.000000, 1.069092);
	PlayerTextDrawTextSize(playerid, spidometras_p[playerid][0], 564.829345, 0.000000);/// pilnas 626.759887 tusèias 453.000000
	PlayerTextDrawAlignment(playerid, spidometras_p[playerid][0], 1);
	PlayerTextDrawColor(playerid, spidometras_p[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, spidometras_p[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, spidometras_p[playerid][0], 1148681215);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, spidometras_p[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, spidometras_p[playerid][0], 255);
	PlayerTextDrawFont(playerid, spidometras_p[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, spidometras_p[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][0], 0);

	spidometras_p[playerid][1] = CreatePlayerTextDraw(playerid, 489.100189, 372.978210, "000");
	PlayerTextDrawLetterSize(playerid, spidometras_p[playerid][1], 0.511999, 2.365333);
	PlayerTextDrawAlignment(playerid, spidometras_p[playerid][1], 3);
	PlayerTextDrawColor(playerid, spidometras_p[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, spidometras_p[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, spidometras_p[playerid][1], 255);
	PlayerTextDrawFont(playerid, spidometras_p[playerid][1], 3);
	PlayerTextDrawSetProportional(playerid, spidometras_p[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][1], 0);

	spidometras_p[playerid][2] = CreatePlayerTextDraw(playerid, 626.898559, 377.922546, "sandking");
	PlayerTextDrawLetterSize(playerid, spidometras_p[playerid][2], 0.204998, 1.353330);
	PlayerTextDrawAlignment(playerid, spidometras_p[playerid][2], 3);
	PlayerTextDrawColor(playerid, spidometras_p[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, spidometras_p[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, spidometras_p[playerid][2], 255);
	PlayerTextDrawFont(playerid, spidometras_p[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, spidometras_p[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][2], 0);

	spidometras_p[playerid][3] = CreatePlayerTextDraw(playerid, 474.199981, 418.089172, "rida: ~p~100.0~w~km");
	PlayerTextDrawLetterSize(playerid, spidometras_p[playerid][3], 0.169498, 1.127110);
	PlayerTextDrawAlignment(playerid, spidometras_p[playerid][3], 1);
	PlayerTextDrawColor(playerid, spidometras_p[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, spidometras_p[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, spidometras_p[playerid][3], 255);
	PlayerTextDrawFont(playerid, spidometras_p[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, spidometras_p[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][3], 0);

	spidometras_p[playerid][4] = CreatePlayerTextDraw(playerid, 614.977111, 418.089172, "100%");
	PlayerTextDrawLetterSize(playerid, spidometras_p[playerid][4], 0.169498, 1.127110);
	PlayerTextDrawAlignment(playerid, spidometras_p[playerid][4], 2);
	PlayerTextDrawColor(playerid, spidometras_p[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, spidometras_p[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, spidometras_p[playerid][4], 255);
	PlayerTextDrawFont(playerid, spidometras_p[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, spidometras_p[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][4], 0);

	spidometras_p[playerid][5] = CreatePlayerTextDraw(playerid, 542.198852, 401.589141, "BENZINAS: 55/70~Y~L");
	PlayerTextDrawLetterSize(playerid, spidometras_p[playerid][5], 0.170497, 1.016219);
	PlayerTextDrawAlignment(playerid, spidometras_p[playerid][5], 2);
	PlayerTextDrawColor(playerid, spidometras_p[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, spidometras_p[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, spidometras_p[playerid][5], 255);
	PlayerTextDrawFont(playerid, spidometras_p[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, spidometras_p[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][5], 0);

	spidometras_p[playerid][6] = CreatePlayerTextDraw(playerid, 424.500091, 434.166534, "Juda bg duju");//ðitas juda
	PlayerTextDrawLetterSize(playerid, spidometras_p[playerid][6], 0.000000, -0.772005);// -4.182891 pilnas, o tusièas -0.772005
	PlayerTextDrawTextSize(playerid, spidometras_p[playerid][6], 446.140136, 0.000000);//
	PlayerTextDrawAlignment(playerid, spidometras_p[playerid][6], 1);
	PlayerTextDrawColor(playerid, spidometras_p[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, spidometras_p[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, spidometras_p[playerid][6], 1034386175);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, spidometras_p[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, spidometras_p[playerid][6], 255);
	PlayerTextDrawFont(playerid, spidometras_p[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, spidometras_p[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][6], 0);

	spidometras_p[playerid][7] = CreatePlayerTextDraw(playerid, 435.899932, 404.478057, "DUJOS~N~25/50~Y~L");
	PlayerTextDrawLetterSize(playerid, spidometras_p[playerid][7], 0.138000, 0.903109);
	PlayerTextDrawAlignment(playerid, spidometras_p[playerid][7], 2);
	PlayerTextDrawColor(playerid, spidometras_p[playerid][7], -1061109505);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, spidometras_p[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, spidometras_p[playerid][7], 255);
	PlayerTextDrawFont(playerid, spidometras_p[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, spidometras_p[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, spidometras_p[playerid][7], 0);

	/*zvejybos_sistema_p[playerid][0] = CreatePlayerTextDraw(playerid, 379.682128, 182.708343, "usebox");
	PlayerTextDrawLetterSize(playerid, zvejybos_sistema_p[playerid][0], 0.000000, 5.914967);
	PlayerTextDrawTextSize(playerid, zvejybos_sistema_p[playerid][0], 318.752807, 0.000000);
	PlayerTextDrawAlignment(playerid, zvejybos_sistema_p[playerid][0], 1);
	PlayerTextDrawColor(playerid, zvejybos_sistema_p[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, zvejybos_sistema_p[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, zvejybos_sistema_p[playerid][0], -5963521);
	PlayerTextDrawSetShadow(playerid, zvejybos_sistema_p[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_sistema_p[playerid][0], 0);
	PlayerTextDrawFont(playerid, zvejybos_sistema_p[playerid][0], 0);

	zvejybos_sistema_p[playerid][1] = CreatePlayerTextDraw(playerid, 321.776306, 241.608245, "usebox");
	PlayerTextDrawLetterSize(playerid, zvejybos_sistema_p[playerid][1], 0.000000, 5.886731);
	PlayerTextDrawTextSize(playerid, zvejybos_sistema_p[playerid][1], 261.717590, 0.000000);
	PlayerTextDrawAlignment(playerid, zvejybos_sistema_p[playerid][1], 1);
	PlayerTextDrawColor(playerid, zvejybos_sistema_p[playerid][1], 0);
	PlayerTextDrawUseBox(playerid, zvejybos_sistema_p[playerid][1], true);
	PlayerTextDrawBoxColor(playerid, zvejybos_sistema_p[playerid][1], 41215);
	PlayerTextDrawSetShadow(playerid, zvejybos_sistema_p[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_sistema_p[playerid][1], 0);
	PlayerTextDrawFont(playerid, zvejybos_sistema_p[playerid][1], 0);

	zvejybos_sistema_p[playerid][2] = CreatePlayerTextDraw(playerid, 379.764434, 241.733261, "usebox");
	PlayerTextDrawLetterSize(playerid, zvejybos_sistema_p[playerid][2], 0.000000, 5.905555);
	PlayerTextDrawTextSize(playerid, zvejybos_sistema_p[playerid][2], 318.705718, 0.000000);
	PlayerTextDrawAlignment(playerid, zvejybos_sistema_p[playerid][2], 1);
	PlayerTextDrawColor(playerid, zvejybos_sistema_p[playerid][2], 0);
	PlayerTextDrawUseBox(playerid, zvejybos_sistema_p[playerid][2], true);
	PlayerTextDrawBoxColor(playerid, zvejybos_sistema_p[playerid][2], 8388863);
	PlayerTextDrawSetShadow(playerid, zvejybos_sistema_p[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_sistema_p[playerid][2], 0);
	PlayerTextDrawFont(playerid, zvejybos_sistema_p[playerid][2], 0);

	zvejybos_sistema_p[playerid][3] = CreatePlayerTextDraw(playerid, 321.623382, 182.716690, "usebox");
	PlayerTextDrawLetterSize(playerid, zvejybos_sistema_p[playerid][3], 0.000000, 5.910261);
	PlayerTextDrawTextSize(playerid, zvejybos_sistema_p[playerid][3], 262.282257, 0.000000);
	PlayerTextDrawAlignment(playerid, zvejybos_sistema_p[playerid][3], 1);
	PlayerTextDrawColor(playerid, zvejybos_sistema_p[playerid][3], 0);
	PlayerTextDrawUseBox(playerid, zvejybos_sistema_p[playerid][3], true);
	PlayerTextDrawBoxColor(playerid, zvejybos_sistema_p[playerid][3], -2147483393);
	PlayerTextDrawSetShadow(playerid, zvejybos_sistema_p[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_sistema_p[playerid][3], 0);
	PlayerTextDrawFont(playerid, zvejybos_sistema_p[playerid][3], 0);

	zvejybos_sistema_p[playerid][4] = CreatePlayerTextDraw(playerid, 321.929473, 153.533355, "~w~spausk~n~~r~zalia ~w~mygtuka");
	PlayerTextDrawLetterSize(playerid, zvejybos_sistema_p[playerid][4], 0.209529, 1.209166);
	PlayerTextDrawAlignment(playerid, zvejybos_sistema_p[playerid][4], 2);
	PlayerTextDrawColor(playerid, zvejybos_sistema_p[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, zvejybos_sistema_p[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_sistema_p[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, zvejybos_sistema_p[playerid][4], 51);
	PlayerTextDrawFont(playerid, zvejybos_sistema_p[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, zvejybos_sistema_p[playerid][4], 1);

	zvejybos_sistema_p[playerid][5] = CreatePlayerTextDraw(playerid, 265.989166, 303.283172, "usebox");
	PlayerTextDrawLetterSize(playerid, zvejybos_sistema_p[playerid][5], 0.000000, 1.248526);
	PlayerTextDrawTextSize(playerid, zvejybos_sistema_p[playerid][5], 355.740, 0.000000);
	PlayerTextDrawAlignment(playerid, zvejybos_sistema_p[playerid][5], 1);
	PlayerTextDrawColor(playerid, zvejybos_sistema_p[playerid][5], 0);
	PlayerTextDrawUseBox(playerid, zvejybos_sistema_p[playerid][5], true);
	PlayerTextDrawBoxColor(playerid, zvejybos_sistema_p[playerid][5], 1725049012);
	PlayerTextDrawSetShadow(playerid, zvejybos_sistema_p[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_sistema_p[playerid][5], 0);
	PlayerTextDrawFont(playerid, zvejybos_sistema_p[playerid][5], 0);

	zvejybos_sistema_p[playerid][6] = CreatePlayerTextDraw(playerid, 322.541137, 300.999969, "96.5%");
	PlayerTextDrawLetterSize(playerid, zvejybos_sistema_p[playerid][6], 0.173764, 1.430833);
	PlayerTextDrawAlignment(playerid, zvejybos_sistema_p[playerid][6], 2);
	PlayerTextDrawColor(playerid, zvejybos_sistema_p[playerid][6], 255);
	PlayerTextDrawSetShadow(playerid, zvejybos_sistema_p[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_sistema_p[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, zvejybos_sistema_p[playerid][6], 255);
	PlayerTextDrawFont(playerid, zvejybos_sistema_p[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, zvejybos_sistema_p[playerid][6], 1);

	zvejybos_sistema_p[playerid][7] = CreatePlayerTextDraw(playerid, 321.000000, 181.000000, "LD_SPAC:white"); // geltonas
	PlayerTextDrawLetterSize(playerid, zvejybos_sistema_p[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, zvejybos_sistema_p[playerid][7], 56.000000, 57.000000);
	PlayerTextDrawAlignment(playerid, zvejybos_sistema_p[playerid][7], 1);
	PlayerTextDrawColor(playerid, zvejybos_sistema_p[playerid][7], 0);
	PlayerTextDrawBoxColor(playerid, zvejybos_sistema_p[playerid][7], -5963521);
	PlayerTextDrawSetShadow(playerid, zvejybos_sistema_p[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_sistema_p[playerid][7], 0);
	PlayerTextDrawFont(playerid, zvejybos_sistema_p[playerid][7], 4);
	PlayerTextDrawSetSelectable(playerid, zvejybos_sistema_p[playerid][7], true);
	PlayerTextDrawSetProportional(playerid, zvejybos_sistema_p[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, zvejybos_sistema_p[playerid][7], 255);

	zvejybos_sistema_p[playerid][8] = CreatePlayerTextDraw(playerid, 264.000000, 181.000000, "LD_SPAC:WHITE"); // raudonas
	PlayerTextDrawFont(playerid, zvejybos_sistema_p[playerid][8], 4);
	PlayerTextDrawLetterSize(playerid, zvejybos_sistema_p[playerid][8], 0.910000, 5.899999);
	PlayerTextDrawColor(playerid, zvejybos_sistema_p[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_sistema_p[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, zvejybos_sistema_p[playerid][8], 0);
	PlayerTextDrawUseBox(playerid, zvejybos_sistema_p[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, zvejybos_sistema_p[playerid][8], 255);
	PlayerTextDrawTextSize(playerid, zvejybos_sistema_p[playerid][8], 56.000000, 57.000000);
	PlayerTextDrawSetSelectable(playerid, zvejybos_sistema_p[playerid][8], true);
	PlayerTextDrawSetProportional(playerid, zvejybos_sistema_p[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, zvejybos_sistema_p[playerid][8], 255);

	zvejybos_sistema_p[playerid][9] = CreatePlayerTextDraw(playerid, 264.000000, 240.000000, "LD_SPAC:WHITE"); // melynas
	PlayerTextDrawFont(playerid, zvejybos_sistema_p[playerid][9], 4);
	PlayerTextDrawLetterSize(playerid, zvejybos_sistema_p[playerid][9], 0.910000, 5.899999);
	PlayerTextDrawColor(playerid, zvejybos_sistema_p[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_sistema_p[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, zvejybos_sistema_p[playerid][9], 0);
	PlayerTextDrawUseBox(playerid, zvejybos_sistema_p[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, zvejybos_sistema_p[playerid][9], 255);
	PlayerTextDrawTextSize(playerid, zvejybos_sistema_p[playerid][9], 56.000000, 57.000000);
	PlayerTextDrawSetSelectable(playerid, zvejybos_sistema_p[playerid][9], true);
	PlayerTextDrawSetProportional(playerid, zvejybos_sistema_p[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, zvejybos_sistema_p[playerid][9], 255);

	zvejybos_sistema_p[playerid][10] = CreatePlayerTextDraw(playerid, 321.000000, 240.000000, "LD_SPAC:WHITE"); // þalias
	PlayerTextDrawFont(playerid, zvejybos_sistema_p[playerid][10], 4);
	PlayerTextDrawLetterSize(playerid, zvejybos_sistema_p[playerid][10], 0.910000, 5.899999);
	PlayerTextDrawColor(playerid, zvejybos_sistema_p[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_sistema_p[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, zvejybos_sistema_p[playerid][10], 0);
	PlayerTextDrawUseBox(playerid, zvejybos_sistema_p[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, zvejybos_sistema_p[playerid][10], 255);
	PlayerTextDrawTextSize(playerid, zvejybos_sistema_p[playerid][10], 56.000000, 57.000000);
	PlayerTextDrawSetSelectable(playerid, zvejybos_sistema_p[playerid][10], true);
	PlayerTextDrawSetProportional(playerid, zvejybos_sistema_p[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, zvejybos_sistema_p[playerid][10], 255);*/

	zvejybos_td_p[playerid][0] = CreatePlayerTextDraw(playerid, 253.705963, 152.666687, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, zvejybos_td_p[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, zvejybos_td_p[playerid][0], 62.000000, 66.000000);
	PlayerTextDrawAlignment(playerid, zvejybos_td_p[playerid][0], 1);
	PlayerTextDrawColor(playerid, zvejybos_td_p[playerid][0], 0xFFFFFF00);
	PlayerTextDrawSetShadow(playerid, zvejybos_td_p[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_td_p[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, zvejybos_td_p[playerid][0], 255);
	PlayerTextDrawFont(playerid, zvejybos_td_p[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, zvejybos_td_p[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, zvejybos_td_p[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, zvejybos_td_p[playerid][0], true);

	zvejybos_td_p[playerid][1] = CreatePlayerTextDraw(playerid, 316.764862, 152.666687, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, zvejybos_td_p[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, zvejybos_td_p[playerid][1], 62.000000, 66.000000);
	PlayerTextDrawAlignment(playerid, zvejybos_td_p[playerid][1], 1);
	PlayerTextDrawColor(playerid, zvejybos_td_p[playerid][1], 0xFFFFFF00);
	PlayerTextDrawSetShadow(playerid, zvejybos_td_p[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_td_p[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, zvejybos_td_p[playerid][1], 255);
	PlayerTextDrawFont(playerid, zvejybos_td_p[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, zvejybos_td_p[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, zvejybos_td_p[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, zvejybos_td_p[playerid][1], true);

	zvejybos_td_p[playerid][2] = CreatePlayerTextDraw(playerid, 253.706085, 220.333404, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, zvejybos_td_p[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, zvejybos_td_p[playerid][2], 62.000000, 66.000000);
	PlayerTextDrawAlignment(playerid, zvejybos_td_p[playerid][2], 1);
	PlayerTextDrawColor(playerid, zvejybos_td_p[playerid][2], 0xFFFFFF00);
	PlayerTextDrawSetShadow(playerid, zvejybos_td_p[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_td_p[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, zvejybos_td_p[playerid][2], 255);
	PlayerTextDrawFont(playerid, zvejybos_td_p[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, zvejybos_td_p[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, zvejybos_td_p[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, zvejybos_td_p[playerid][2], true);

	zvejybos_td_p[playerid][3] = CreatePlayerTextDraw(playerid, 316.764831, 220.333404, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, zvejybos_td_p[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, zvejybos_td_p[playerid][3], 62.000000, 66.000000);
	PlayerTextDrawAlignment(playerid, zvejybos_td_p[playerid][3], 1);
	PlayerTextDrawColor(playerid, zvejybos_td_p[playerid][3], 0xFFFFFF00);
	PlayerTextDrawSetShadow(playerid, zvejybos_td_p[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_td_p[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, zvejybos_td_p[playerid][3], 255);
	PlayerTextDrawFont(playerid, zvejybos_td_p[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, zvejybos_td_p[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, zvejybos_td_p[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, zvejybos_td_p[playerid][3], true);

	zvejybos_td_p[playerid][4] = CreatePlayerTextDraw(playerid, 255.988403, 290.733428, "box");
	PlayerTextDrawLetterSize(playerid, zvejybos_td_p[playerid][4], 0.000000, 1.487804);
	PlayerTextDrawTextSize(playerid, zvejybos_td_p[playerid][4], 253.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, zvejybos_td_p[playerid][4], 1);
	PlayerTextDrawColor(playerid, zvejybos_td_p[playerid][4], -1424484250);
	PlayerTextDrawUseBox(playerid, zvejybos_td_p[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, zvejybos_td_p[playerid][4], 452919551);
	PlayerTextDrawSetShadow(playerid, zvejybos_td_p[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_td_p[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, zvejybos_td_p[playerid][4], 255);
	PlayerTextDrawFont(playerid, zvejybos_td_p[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, zvejybos_td_p[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, zvejybos_td_p[playerid][4], 0);

	zvejybos_td_p[playerid][5] = CreatePlayerTextDraw(playerid, 317.764617, 289.166687, "94.5%");
	PlayerTextDrawLetterSize(playerid, zvejybos_td_p[playerid][5], 0.184941, 1.506666);
	PlayerTextDrawAlignment(playerid, zvejybos_td_p[playerid][5], 2);
	PlayerTextDrawColor(playerid, zvejybos_td_p[playerid][5], 255);
	PlayerTextDrawSetShadow(playerid, zvejybos_td_p[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_td_p[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, zvejybos_td_p[playerid][5], 255);
	PlayerTextDrawFont(playerid, zvejybos_td_p[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, zvejybos_td_p[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, zvejybos_td_p[playerid][5], 0);

	zvejybos_td_p[playerid][6] = CreatePlayerTextDraw(playerid, 316.323608, 131.400024, "sPAUSK_meLYNA_MYGTUKA");
	PlayerTextDrawLetterSize(playerid, zvejybos_td_p[playerid][6], 0.184941, 1.506666);
	PlayerTextDrawAlignment(playerid, zvejybos_td_p[playerid][6], 2);
	PlayerTextDrawColor(playerid, zvejybos_td_p[playerid][6], -1061109505);
	PlayerTextDrawSetShadow(playerid, zvejybos_td_p[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, zvejybos_td_p[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, zvejybos_td_p[playerid][6], 255);
	PlayerTextDrawFont(playerid, zvejybos_td_p[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, zvejybos_td_p[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, zvejybos_td_p[playerid][6], 0);

	hudas_p[playerid][0] = CreatePlayerTextDraw(playerid, 494.400054, 81.622177, "alkio bg");// ðitas judës
	PlayerTextDrawLetterSize(playerid, hudas_p[playerid][0], 0.000000, 0.474003);
	PlayerTextDrawTextSize(playerid, hudas_p[playerid][0], 496.161132, 0.000000);//496.161132 kai tusèias, o kai pilnas 607.800048
	PlayerTextDrawAlignment(playerid, hudas_p[playerid][0], 1);
	PlayerTextDrawColor(playerid, hudas_p[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, hudas_p[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, hudas_p[playerid][0], -1229419320);
	PlayerTextDrawSetShadow(playerid, hudas_p[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, hudas_p[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, hudas_p[playerid][0], 255);
	PlayerTextDrawFont(playerid, hudas_p[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, hudas_p[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, hudas_p[playerid][0], 0);

	hudas_p[playerid][1] = CreatePlayerTextDraw(playerid, 550.800292, 92.488800, "~y~[]~w~ ITARIMO LYGIS:~R~ 15");
	PlayerTextDrawLetterSize(playerid, hudas_p[playerid][1], 0.193500, 0.983999);
	PlayerTextDrawAlignment(playerid, hudas_p[playerid][1], 2);
	PlayerTextDrawColor(playerid, hudas_p[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, hudas_p[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, hudas_p[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, hudas_p[playerid][1], 255);
	PlayerTextDrawFont(playerid, hudas_p[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, hudas_p[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, hudas_p[playerid][1], 0);

	hudas_p[playerid][2] = CreatePlayerTextDraw(playerid, 592.000000, 117.844390, "~w~$~g~50000");
	PlayerTextDrawLetterSize(playerid, hudas_p[playerid][2], 0.296499, 1.413331);
	PlayerTextDrawAlignment(playerid, hudas_p[playerid][2], 3);
	PlayerTextDrawColor(playerid, hudas_p[playerid][2], 8388863);
	PlayerTextDrawSetShadow(playerid, hudas_p[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, hudas_p[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, hudas_p[playerid][2], 255);
	PlayerTextDrawFont(playerid, hudas_p[playerid][2], 3);
	PlayerTextDrawSetProportional(playerid, hudas_p[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, hudas_p[playerid][2], 0);

	sumustinis[playerid][0] = CreatePlayerTextDraw(playerid, 546.299926, 79.888847, "HUD:radar_burgerShot");
	PlayerTextDrawLetterSize(playerid, sumustinis[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, sumustinis[playerid][0], 8.000000, 8.000000);
	PlayerTextDrawAlignment(playerid, sumustinis[playerid][0], 1);
	PlayerTextDrawColor(playerid, sumustinis[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, sumustinis[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, sumustinis[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, sumustinis[playerid][0], 255);
	PlayerTextDrawFont(playerid, sumustinis[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, sumustinis[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, sumustinis[playerid][0], 0);

	transporto_salonas_p[playerid][0] = CreatePlayerTextDraw(playerid, 560.000000, 103.511016, "~r~-~w~ Pavadinimas: ~p~infermus~r~ -~n~-~w~ kaina:~g~ 15000~w~eur~r~ -~n~-~w~ numeris:~y~ 1/75~r~ -");
	PlayerTextDrawLetterSize(playerid, transporto_salonas_p[playerid][0], 0.202500, 1.089776);
	PlayerTextDrawAlignment(playerid, transporto_salonas_p[playerid][0], 2);
	PlayerTextDrawColor(playerid, transporto_salonas_p[playerid][0], -2139062017);
	PlayerTextDrawSetShadow(playerid, transporto_salonas_p[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, transporto_salonas_p[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, transporto_salonas_p[playerid][0], 255);
	PlayerTextDrawFont(playerid, transporto_salonas_p[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, transporto_salonas_p[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, transporto_salonas_p[playerid][0], 0);

	transporto_salonas_p[playerid][1] = CreatePlayerTextDraw(playerid, 500.500000, 168.066680, "LD_BEAT:left");//paspaudimas kaire
	PlayerTextDrawLetterSize(playerid, transporto_salonas_p[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, transporto_salonas_p[playerid][1], 15.000000, 16.000000);
	PlayerTextDrawAlignment(playerid, transporto_salonas_p[playerid][1], 1);
	PlayerTextDrawColor(playerid, transporto_salonas_p[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, transporto_salonas_p[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, transporto_salonas_p[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, transporto_salonas_p[playerid][1], 255);
	PlayerTextDrawFont(playerid, transporto_salonas_p[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, transporto_salonas_p[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, transporto_salonas_p[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, transporto_salonas_p[playerid][1], true);

	transporto_salonas_p[playerid][2] = CreatePlayerTextDraw(playerid, 614.375671, 168.066680, "LD_BEAT:right");//paspaudimas desine
	PlayerTextDrawLetterSize(playerid, transporto_salonas_p[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, transporto_salonas_p[playerid][2], 15.000000, 16.000000);
	PlayerTextDrawAlignment(playerid, transporto_salonas_p[playerid][2], 1);
	PlayerTextDrawColor(playerid, transporto_salonas_p[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, transporto_salonas_p[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, transporto_salonas_p[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, transporto_salonas_p[playerid][2], 255);
	PlayerTextDrawFont(playerid, transporto_salonas_p[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, transporto_salonas_p[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, transporto_salonas_p[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, transporto_salonas_p[playerid][2], true);

	TimeDateTD[playerid][0] = CreatePlayerTextDraw(playerid, 547.000000, 29.000000, "2012/09/13");
	PlayerTextDrawBackgroundColor(playerid, TimeDateTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, TimeDateTD[playerid][0], 3);
	PlayerTextDrawLetterSize(playerid, TimeDateTD[playerid][0], 0.310000, 1.400000);
	PlayerTextDrawColor(playerid, TimeDateTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, TimeDateTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TimeDateTD[playerid][0], 1);

	TimeDateTD[playerid][1] = CreatePlayerTextDraw(playerid, 566.000000, 13.000000, "22:13");
	PlayerTextDrawBackgroundColor(playerid, TimeDateTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, TimeDateTD[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid, TimeDateTD[playerid][1], 0.419999, 1.900000);
	PlayerTextDrawColor(playerid, TimeDateTD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, TimeDateTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TimeDateTD[playerid][1], 1);
}

stock ShowFishingTextDraws(playerid)
{
	for(new s = 0; s < 7; s ++) 	PlayerTextDrawShow(playerid, zvejybos_td_p[playerid][s]);
	for(new s = 0; s < 6; s ++) 	TextDrawShowForPlayer(playerid, zvejybos_td_g[s]);

	SelectTextDraw(playerid, 0xBEBEBE80);
}

stock HideFishingTextDraws(playerid)
{
	for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, zvejybos_td_g[s]);
	for(new s = 0; s < 7; s ++) 	PlayerTextDrawHide(playerid, zvejybos_td_p[playerid][s]);

	CancelSelectTextDraw(playerid);
}

stock ShowCarShopTextDraws(playerid)
{
	LaikPasleptas[playerid] = true;

	HideHungryHood(playerid);

	for(new s = 0; s < 15; s ++) 	TextDrawShowForPlayer(playerid, transporto_salonas_g[s]);
	for(new s = 0; s < 3; s ++) 	PlayerTextDrawShow(playerid, transporto_salonas_p[playerid][s]);
	for(new s = 0; s < 2; s ++) 	PlayerTextDrawHide(playerid, TimeDateTD[playerid][s]);

	SelectTextDraw(playerid, 0x336633FF);
}

stock HideCarShopTextDraws(playerid)
{
	LaikPasleptas[playerid] = false;

	ShowHungryHood(playerid);
	CancelSelectTextDraw(playerid);

	for(new s = 0; s < 15; s ++)	TextDrawHideForPlayer(playerid, transporto_salonas_g[s]);
	for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, transporto_salonas_p[playerid][s]);
	for(new s = 0; s < 2; s ++) 	PlayerTextDrawShow(playerid, TimeDateTD[playerid][s]);
}

stock HideHungryHood(playerid)
{
	HudasPasleptas[playerid] = true;

	for(new s = 0; s < 3; s ++) PlayerTextDrawHide(playerid, hudas_p[playerid][s]);
	for(new s = 0; s < 5; s ++)	TextDrawHideForPlayer(playerid, hudas_g[s]);

	PlayerTextDrawHide(playerid, sumustinis[playerid][0]);
	PlayerTextDrawHide(playerid, hudas_p[playerid][0]);
}

stock ShowHungryHood(playerid)
{
	HudasPasleptas[playerid] = false;

	new str[128];

	for(new s = 0; s < 3; s ++) PlayerTextDrawShow(playerid, hudas_p[playerid][s]);
	for(new s = 0; s < 5; s ++)	TextDrawShowForPlayer(playerid, hudas_g[s]);

	PlayerTextDrawShow(playerid, sumustinis[playerid][0]);

	new Float: Progress = (496.161132 + (PI[playerid][Alkis] * 1.11638916));
	PlayerTextDrawTextSize(playerid, hudas_p[playerid][0], Progress, 0.000000);

	format(str, sizeof(str), "~y~[]~w~ ITARIMO LYGIS:~R~ %d", PI[playerid][Ieskomas]);
	PlayerTextDrawSetString(playerid, hudas_p[playerid][1], str);

	format(str, sizeof(str),  "~w~$~g~%s", konvertuoti_pinigus(GetPlayerMoneyA(playerid)));
	PlayerTextDrawSetString(playerid, hudas_p[playerid][2], str);

	PlayerTextDrawHide(playerid, hudas_p[playerid][0]);
	PlayerTextDrawShow(playerid, hudas_p[playerid][0]);
}

stock LoadPropertys()
{
    new Query[129], String[300];

    for(new Property; Property < MAX_PROPERTYS; Property ++)
	{
	    format(Query, 43, "SELECT * FROM `verslai` WHERE `ID` = '%d'", Property);
		mysql_query(Query);
		mysql_store_result();
		if(mysql_retrieve_row())
		{
			if(mysql_num_rows())
			{
				mysql_fetch_field_row(Query, "pOwner"); 	
				format(PropertyInfo[Property][pOwner], 24, "%s", Query); 

				mysql_fetch_field_row(Query, "pTitle"); 	
				format(PropertyInfo[Property][pTitle], 128, "%s", Query); 

				mysql_fetch_field_row(Query, "pBuyed"); 	PropertyInfo[Property][pBuyed] 		= !!strval(Query);
				mysql_fetch_field_row(Query, "pPelnas"); 	PropertyInfo[Property][pPelnas] 	= !!strval(Query);
				mysql_fetch_field_row(Query, "pPrice"); 	PropertyInfo[Property][pPrice] 		= strval(Query);
				mysql_fetch_field_row(Query, "pProfit"); 	PropertyInfo[Property][pProfit] 	= strval(Query);
				mysql_fetch_field_row(Query, "pEarning"); 	PropertyInfo[Property][pEarning] 	= strval(Query);
				mysql_fetch_field_row(Query, "pPos_X"); 	PropertyInfo[Property][pPos_X] 		= floatstr(Query);
				mysql_fetch_field_row(Query, "pPos_Y"); 	PropertyInfo[Property][pPos_Y] 		= floatstr(Query);
				mysql_fetch_field_row(Query, "pPos_Z"); 	PropertyInfo[Property][pPos_Z] 		= floatstr(Query);

				new papildomas[10];
				if(PropertyInfo[Property][pPelnas] == true) papildomas = "yra";
				else										papildomas = "nëra";

				format(String, sizeof(String), "{ffffff}Verslas: {ffffff} %s\n \n{ffffff}Unikalus ID: {FFAF00}%d\n{ffffff}Savininkas: {FFAF00}%s\n{ffffff}Kaina: {FFAF00}$%s\n{ffffff}Uþdarbis: {FFAF00}$%s/1 min\n{ffffff}Papildomas pelnas: {ffffff} %s\n \n{ffffff}Norëdami valdyti verslà spauskite ALT",
				PropertyInfo[Property][pTitle], Property + 1, PropertyInfo[Property][pOwner], konvertuoti_pinigus(PropertyInfo[Property][pPrice]), konvertuoti_pinigus(PropertyInfo[Property][pEarning]), papildomas);

				PropertyInfo[Property][pText] 	= CreateDynamic3DTextLabel(String, -1, PropertyInfo[Property][pPos_X], PropertyInfo[Property][pPos_Y], PropertyInfo[Property][pPos_Z], 10, INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0);
				PropertyInfo[Property][pPickup] = CreatePickup(19134, 		 1, PropertyInfo[Property][pPos_X], PropertyInfo[Property][pPos_Y], PropertyInfo[Property][pPos_Z], 0);

				PropertyInfo[Property][pCreated] = true;
			}
			else
			{
				format(PropertyInfo[Property][pOwner], 5, "Nera");
				format(PropertyInfo[Property][pTitle], 1, "");
				format(PropertyInfo[Property][pBuyDate], 32, "-");

			    PropertyInfo[Property][pCreated] 	= false;
				PropertyInfo[Property][pBuyed] 		= false;
				PropertyInfo[Property][pPelnas]		= false;
			 	PropertyInfo[Property][pPrice] 		= -1;
				PropertyInfo[Property][pProfit] 	= -1;
				PropertyInfo[Property][pEarning] 	= -1;
				PropertyInfo[Property][pPos_X] 		= -1;
				PropertyInfo[Property][pPos_Y] 		= -1;
				PropertyInfo[Property][pPos_Z] 		= -1;
			}
		}

		mysql_free_result();
	}
	printf("Verslai uzkrauti");
	return 1;
}

stock SaveProperty(Property)
{
	new String[216],
		pavadinimas_verslo[32];

    format(String, sizeof(String), "UPDATE `verslai` SET pOwner = '%s', pBuyed = '%d', pPrice = '%d' WHERE ID = '%d'", PropertyInfo[Property][pOwner], PropertyInfo[Property][pBuyed], PropertyInfo[Property][pPrice], Property);
	mysql_query(String);

	mysql_real_escape_string(PropertyInfo[Property][pTitle], pavadinimas_verslo);

    format(String, sizeof(String), "UPDATE `verslai` SET pProfit = '%d', pEarning = '%d', pTitle = '%s' WHERE ID = '%d'", PropertyInfo[Property][pProfit], PropertyInfo[Property][pEarning], pavadinimas_verslo, Property);
	mysql_query(String);

	format(String, sizeof(String), "UPDATE `verslai` SET pPos_X = '%.4f', pPos_Y = '%.4f', pPos_Z = '%.4f' WHERE ID = '%d'", PropertyInfo[Property][pPos_X], PropertyInfo[Property][pPos_Y], PropertyInfo[Property][pPos_Z], Property);
	mysql_query(String);

	return 1;
}

stock PlayerHaveProperty(playerid)
{
	for(new Property; Property < MAX_PROPERTYS; Property++)
	{
	    if(PropertyInfo[Property][pCreated] && !strcmp(PropertyInfo[Property][pOwner], GetPlayerNameEx(playerid), true)) return Property;
	}

    return -1;
}


public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(areaid == KaroZona)
	{
	    GameTextForPlayer(playerid, "~r~Iejote i karo zona!", 3000, 4);
 		for(new s = 0; s < 1; s ++) PlayerTextDrawShow(playerid, gang_zone_p[playerid][s]);
		for(new s = 0; s < 2; s ++)	TextDrawShowForPlayer(playerid, gang_zone_g[s]);
		PI[playerid][arKaroZonoje] = true;
	}

	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(areaid == KaroZona)
	{
	    GameTextForPlayer(playerid, "~g~Isejote is karo zonos!", 3000, 4);
 		for(new s = 0; s < 1; s ++) PlayerTextDrawHide(playerid, gang_zone_p[playerid][s]);
		for(new s = 0; s < 2; s ++)	TextDrawHideForPlayer(playerid, gang_zone_g[s]);
		PI[playerid][arKaroZonoje] = false;
	}

	if(areaid == DegalineID[0])
	{
		if(GetPlayerInterior(playerid) != 44 || GetPlayerInterior(playerid) == 0)
		{
			if(IpyleSuma[playerid] > 0)
			{
				SendClientMessage 	(playerid, -1, "{ffffff} Palikote degalinës zonà nesusimokëjæ uþ kurà. Jums pridëti 5 ieðkomumo lygiai!");
			    GiveStars 			(playerid, 5);

			    IpyleSuma[playerid] = 0;
			}
		}
	}

	if(areaid == DegalineID[1])
	{
		if(GetPlayerInterior(playerid) != 44 || GetPlayerInterior(playerid) == 0)
		{
			if(IpyleSuma[playerid] > 0)
			{
				SendClientMessage 	(playerid, -1, "{ffffff} Palikote degalinës zonà nesusimokëjæ uþ kurà. Jums pridëti 5 ieðkomumo lygiai!");
			    GiveStars 			(playerid, 5);

			    IpyleSuma[playerid] = 0;
			}
		}
	}

	if(areaid == DegalineID[2])
	{
		if(GetPlayerInterior(playerid) != 44 || GetPlayerInterior(playerid) == 0)
		{
			if(IpyleSuma[playerid] > 0)
			{
				SendClientMessage 	(playerid, -1, "{ffffff} Palikote degalinës zonà nesusimokëjæ uþ kurà. Jums pridëti 5 ieðkomumo lygiai!");
			    GiveStars 			(playerid, 5);

			    IpyleSuma[playerid] = 0;
			}
		}
	}

	if(areaid == DegalineID[3])
	{
		if(GetPlayerInterior(playerid) != 44 || GetPlayerInterior(playerid) == 0)
		{
			if(IpyleSuma[playerid] > 0)
			{
				SendClientMessage 	(playerid, -1, "{ffffff} Palikote degalinës zonà nesusimokëjæ uþ kurà. Jums pridëti 5 ieðkomumo lygiai!");
			    GiveStars 			(playerid, 5);

			    IpyleSuma[playerid] = 0;
			}
		}
	}

	if(areaid == DegalineID[4])
	{
		if(GetPlayerInterior(playerid) != 44 || GetPlayerInterior(playerid) == 0)
		{
			if(IpyleSuma[playerid] > 0)
			{
				SendClientMessage 	(playerid, -1, "{ffffff} Palikote degalinës zonà nesusimokëjæ uþ kurà. Jums pridëti 5 ieðkomumo lygiai!");
			    GiveStars 			(playerid, 5);

			    IpyleSuma[playerid] = 0;
			}
		}
	}

	return 1;
}

/*f_public: ChangeGoodsPrices2()
{
	DealersDocksWeedPrice    = 10 + random(20);
	DealersDocksHeroinPrice  = 10 + random(20);
	DealersDocksCocainePrice = 10 + random(20);
	DealersDocksExstaziPrice = 10 + random(20);
	VielosKaina 			 = 3000 + random(2000);

	return 1;
}*/

f_public: ChangeGoodsPrices()
{
	iPhonePrice 				= 1000 + random(500);
	SamsungPrice 				= 600 + random(600);
	NokiaPrice 					= 400 + random(500);
	SonyPrice 					= 500 + random(300);
	AlcatelPrice 				= 400 + random(200);
	HTCPrice 					= 500 + random(700);
	DefaultContractPrice		= 5 + random(5);
	AbonentContractPrice		= 50 + random(50);

	BCategoryLicensePrice		= 500 + random(500);
	ACategoryLicensePrice		= 300 + random(200);
	CCategoryLicensePrice		= 300 + random(200);
	TheoryLicensePrice			= 100 + random(100);

	for(new p, size = GetPlayerPoolSize(); p <= size; p ++)
	{
		if(Prisijunges[p])
 	    {
 	    	if(PI[p][MobilePhone] > 0 && PI[p][PhoneStatus] == 1)
 	    	{
 	    		PI[p][Battery] --;

 	    		if(PI[p][Battery] <= 0)
 	    		{
 	    			SendClientMessage(p, -1, "{ffffff} Jûsø telefonas iðsikrovë. Já pakrauti galite betkuriame pastate arba maðinoje!");

 	    			PI[p][PhoneStatus] 	= 0;
 	    			PI[p][Battery] 		= 0;
 	    		}
 	    	}
 	    }
 	}

	/*DealersDocksHaveWeed    += random(10);
	DealersDocksHaveExstazi += random(10);
	DealersDocksHaveCocaine += random(10);
	DealersDocksHaveHeroin  += random(10);
	DealersDocksHaveHeroin  += random(5);

	DealersDocksWeedPrice    = 10 + random(20);
	DealersDocksHeroinPrice  = 10 + random(20);
	DealersDocksCocainePrice = 10 + random(20);
	DealersDocksExstaziPrice = 10 + random(20);
	VielosKaina 			 = 3000 + random(2000);

    format(String, sizeof(String), "UPDATE `narkotikaiginklai` SET `DealersDocksHaveWeed` = '%d', `DealersDocksHaveExstazi` = '%d', `DealersDocksHaveCocaine` = '%d', `DealersDocksHaveHeroin` = '%d', `VieluKiekis` = '%d'",
    DealersDocksHaveWeed, DealersDocksHaveExstazi, DealersDocksHaveCocaine, DealersDocksHaveHeroin, VieluKiekis);
    mysql_query(String);*/

	return 1;
}

stock KraunamPolicijosInfo()
{
	new Query[128];

	mysql_query("SELECT * FROM `darbuinfo` WHERE `Darbas` = 'Policija'");

	mysql_store_result();

	mysql_retrieve_row();

	if(mysql_num_rows())
	{
		mysql_fetch_field_row(Query, "KiekXP"); 	Policininkas[NuoKiekEXP] 		= strval(Query);
		mysql_fetch_field_row(Query, "ATeises"); 	Policininkas[TeisesA] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "BTeises"); 	Policininkas[TeisesB] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "CTeises"); 	Policininkas[TeisesC] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "sPazymas"); 	Policininkas[sPazyma] 			= !!strval(Query);
	}

	mysql_free_result();

	return 1;
}

stock KraunamMedikuInfo()
{
	new Query[128];

	mysql_query("SELECT * FROM `darbuinfo` WHERE `Darbas` = 'Medikai'");

	mysql_store_result();

	mysql_retrieve_row();

	if(mysql_num_rows())
	{
		mysql_fetch_field_row(Query, "KiekXP"); 	Medikas[NuoKiekEXP] 		= strval(Query);
		mysql_fetch_field_row(Query, "ATeises"); 	Medikas[TeisesA] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "BTeises"); 	Medikas[TeisesB] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "CTeises"); 	Medikas[TeisesC] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "sPazymas"); 	Medikas[sPazyma] 			= !!strval(Query);
	}

	mysql_free_result();

	return 1;
}
stock KraunamTaxiInfo()
{
	new Query[128];

	mysql_query("SELECT * FROM `darbuinfo` WHERE `Darbas` = 'Taxi'");

	mysql_store_result();

	mysql_retrieve_row();

	if(mysql_num_rows())
	{
		mysql_fetch_field_row(Query, "KiekXP"); 	Taxi[NuoKiekEXP] 			= strval(Query);
		mysql_fetch_field_row(Query, "ATeises"); 	Taxi[TeisesA] 				= !!strval(Query);
		mysql_fetch_field_row(Query, "BTeises"); 	Taxi[TeisesB] 				= !!strval(Query);
		mysql_fetch_field_row(Query, "CTeises"); 	Taxi[TeisesC] 				= !!strval(Query);
		mysql_fetch_field_row(Query, "sPazymas"); 	Taxi[sPazyma] 				= !!strval(Query);
	}

	mysql_free_result();

	return 1;
}
stock KraunamKurjeriuInfo()
{
	new Query[128];

	mysql_query("SELECT * FROM `darbuinfo` WHERE `Darbas` = 'Kurj'");

	mysql_store_result();

	mysql_retrieve_row();

	if(mysql_num_rows())
	{
		mysql_fetch_field_row(Query, "KiekXP"); 	Kurjeris[NuoKiekEXP] 		= strval(Query);
		mysql_fetch_field_row(Query, "ATeises"); 	Kurjeris[TeisesA] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "BTeises"); 	Kurjeris[TeisesB] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "CTeises"); 	Kurjeris[TeisesC] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "sPazymas"); 	Kurjeris[sPazyma] 			= !!strval(Query);
	}

	mysql_free_result();

	return 1;
}

stock KraunamMechanikuInfo()
{
	new Query[128];

	mysql_query("SELECT * FROM `darbuinfo` WHERE `Darbas` = 'Mechanikai'");

	mysql_store_result();

	mysql_retrieve_row();

	if(mysql_num_rows())
	{
		mysql_fetch_field_row(Query, "KiekXP"); 	Mechanikas[NuoKiekEXP] 		= strval(Query);
		mysql_fetch_field_row(Query, "ATeises"); 	Mechanikas[TeisesA] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "BTeises"); 	Mechanikas[TeisesB] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "CTeises"); 	Mechanikas[TeisesC] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "sPazymas"); 	Mechanikas[sPazyma] 			= !!strval(Query);
	}

	mysql_free_result();

	return 1;
}

stock KraunamDyleriuInfo()
{
	new Query[128];

	mysql_query("SELECT * FROM `darbuinfo` WHERE `Darbas` = 'Dyleriai'");

	mysql_store_result();

	mysql_retrieve_row();

	if(mysql_num_rows())
	{
		mysql_fetch_field_row(Query, "KiekXP"); 	Dyleris[NuoKiekEXP] 		= strval(Query);
		mysql_fetch_field_row(Query, "ATeises"); 	Dyleris[TeisesA] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "BTeises"); 	Dyleris[TeisesB] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "CTeises"); 	Dyleris[TeisesC] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "sPazymas"); 	Dyleris[sPazyma] 			= !!strval(Query);
	}

	mysql_free_result();

	return 1;
}

stock KraunamFuristuInfo()
{
	new Query[128];

	mysql_query("SELECT * FROM `darbuinfo` WHERE `Darbas` = 'Furistai'");

	mysql_store_result();

	mysql_retrieve_row();

	if(mysql_num_rows())
	{
		mysql_fetch_field_row(Query, "KiekXP"); 	Furistas[NuoKiekEXP] 		= strval(Query);
		mysql_fetch_field_row(Query, "ATeises"); 	Furistas[TeisesA] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "BTeises"); 	Furistas[TeisesB] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "CTeises"); 	Furistas[TeisesC] 			= !!strval(Query);
		mysql_fetch_field_row(Query, "sPazymas"); 	Furistas[sPazyma] 			= !!strval(Query);
	}

	mysql_free_result();

	return 1;
}

stock KraunamSandelius()
{
	new uzkl[128];

	mysql_query("SELECT * FROM `sandeliai`");

	mysql_store_result();

	mysql_retrieve_row();

	if(mysql_num_rows())
	{
		mysql_fetch_field_row(uzkl, "Shotgun");   	ShotgunBulletCount 		= strval(uzkl);
		mysql_fetch_field_row(uzkl, "Ak47");   		Ak47BulletCount 		= strval(uzkl);
		mysql_fetch_field_row(uzkl, "Deagle");   	DeagleBulletCount 		= strval(uzkl);
		mysql_fetch_field_row(uzkl, "Heroine");     HeroineDoseCount 		= strval(uzkl);
		mysql_fetch_field_row(uzkl, "Weed");    	WeedDoseCount 			= strval(uzkl);
		mysql_fetch_field_row(uzkl, "Cocaine");    	CocaineDoseCount 		= strval(uzkl);
		mysql_fetch_field_row(uzkl, "Ekstazi");    	EkstaziDoseCount 		= strval(uzkl);
	}

	mysql_free_result();

	return 1;
}

stock AddItemsToDocks(rusis)
{
	new String[216];

	switch(rusis)
	{
		case 1: // Ginklai
		{
			ShotgunBulletCount 	+= 500 + random(200); if(ShotgunBulletCount > 10000) 	ShotgunBulletCount 	= 10000;
			Ak47BulletCount 	+= 500 + random(200); if(Ak47BulletCount > 10000) 		Ak47BulletCount 	= 10000;
			DeagleBulletCount 	+= 500 + random(200); if(DeagleBulletCount > 10000) 	DeagleBulletCount 	= 10000;

			//Shotgun
			format(String, sizeof(String), "Shotgun sandëlis\nYra kulkø: {FFAF00}%d/10000", ShotgunBulletCount);
			Update3DTextLabelText(GunsLabel[0], -1, String);

			//Ak-47
			format(String, sizeof(String), "AK-47 sandëlis\nYra kulkø: {FFAF00}%d/10000", Ak47BulletCount);
			Update3DTextLabelText(GunsLabel[1], -1, String);

			//Deagle
			format(String, sizeof(String), "Deagle sandëlis\nYra kulkø: {FFAF00}%d/10000", DeagleBulletCount);
			Update3DTextLabelText(GunsLabel[2], -1, String);
		}

		case 2: // Narkotikai
		{
			HeroineDoseCount 	+= 30 + random(20); 	if(HeroineDoseCount > 1000) 	HeroineDoseCount 	= 1000;
			CocaineDoseCount 	+= 30 + random(20); 	if(CocaineDoseCount > 1000) 	CocaineDoseCount 	= 1000;
			EkstaziDoseCount 	+= 30 + random(20); 	if(EkstaziDoseCount > 1000) 	EkstaziDoseCount 	= 1000;
			WeedDoseCount 		+= 30 + random(20); 	if(WeedDoseCount > 1000) 		WeedDoseCount 		= 1000;

			//Heroinas
			format(String, sizeof(String), "Heroino sandëlis\nYra: {FFAF00}%d/1000 {ffffff}ml", HeroineDoseCount);
			Update3DTextLabelText(DrugsLabel[0], -1, String);

			//Kokainas
			format(String, sizeof(String), "Kokaino sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", CocaineDoseCount);
			Update3DTextLabelText(DrugsLabel[1], -1, String);

			//Þolë
			format(String, sizeof(String), "Þolës sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", WeedDoseCount);
			Update3DTextLabelText(DrugsLabel[2], -1, String);

			//Ekstazi
			format(String, sizeof(String), "Ekstazi sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", EkstaziDoseCount);
			Update3DTextLabelText(DrugsLabel[3], -1, String);
		}
	}


	format(String, sizeof(String), "UPDATE `sandeliai` SET `Shotgun` = '%d', `Ak47` = '%d', `Heroine` = '%d', `Cocaine` = '%d', `Ekstazi` = '%d', `Weed` = '%d', `Deagle` = '%d'",
	ShotgunBulletCount, Ak47BulletCount, HeroineDoseCount, CocaineDoseCount, EkstaziDoseCount, WeedDoseCount, DeagleBulletCount);
	mysql_query(String);

	return 1;
}

stock SendMessageToServerLog(Vardas[], Action[])
{
	new Query[230], TimeString[20], Year, Month, Day, Hour, Minute;

	getdate(Year, Month, Day);
	gettime(Hour, Minute);

	format(TimeString, sizeof(TimeString), "%d.%d.%d - %d:%d", Year, Month, Day, Hour, Minute);

	format(Query, sizeof(Query), "INSERT INTO `logai` (`Vardas`, `Veiksmas`, `Laikas`) VALUES ('%s', '%s', '%s')", Vardas, Action, TimeString);
	mysql_query(Query);

	return 1;
}

stock SetHealthByDrugs(playerid, Float: NewHealth)
{
	if(NewHealth < 100.00)
	{
		SetPlayerHealthEx(playerid, NewHealth);
	}
	else if(NewHealth == 100.00)
	{
		SetPlayerHealthEx(playerid, NewHealth - 1.00);
	}
	else
	{
		SetPlayerHealthEx(playerid, 99.00);
	}

	return 1;
}

stock CreateHouses()
{
	new hQuery[43], str[300];
	for(new house; house < MAX_HOUSES; house++)
	{
		format(hQuery, 43, "SELECT * FROM `houses` WHERE `ID` = '%d'", house);
		mysql_query(hQuery);
		mysql_store_result();
		mysql_retrieve_row();
		if(mysql_num_rows())
		{
			mysql_fetch_field_row(hQuery, "Buyed"); HouseInfo[house][Buyed] = !!strval(hQuery);
			mysql_fetch_field_row(hQuery, "Locked"); HouseInfo[house][Locked] = !!strval(hQuery);
			mysql_fetch_field_row(hQuery, "IsGarageUsed"); HouseInfo[house][IsGarageUsed] = !!strval(hQuery);
			mysql_fetch_field_row(hQuery, "Owner"); format(HouseInfo[house][Owner], 21, "%s", hQuery);
			mysql_fetch_field_row(hQuery, "Cost"); HouseInfo[house][Cost] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ExitX"); HouseInfo[house][ExitX] = floatstr(hQuery);
			mysql_fetch_field_row(hQuery, "ExitY"); HouseInfo[house][ExitY] = floatstr(hQuery);
			mysql_fetch_field_row(hQuery, "ExitZ"); HouseInfo[house][ExitZ] = floatstr(hQuery);
			mysql_fetch_field_row(hQuery, "ExitAngle"); HouseInfo[house][ExitAngle] = floatstr(hQuery);
			mysql_fetch_field_row(hQuery, "hInt"); HouseInfo[house][hInt] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "IntX"); HouseInfo[house][IntX] = floatstr(hQuery);
			mysql_fetch_field_row(hQuery, "IntY"); HouseInfo[house][IntY] = floatstr(hQuery);
			mysql_fetch_field_row(hQuery, "IntZ"); HouseInfo[house][IntZ] = floatstr(hQuery);
			mysql_fetch_field_row(hQuery, "IntAngle"); HouseInfo[house][IntAngle] = floatstr(hQuery);
			mysql_fetch_field_row(hQuery, "htVW"); HouseInfo[house][htVW] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "Money"); HouseInfo[house][Money] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "hType"); HouseInfo[house][hType] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_0"); 		HouseChest[house][0][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_0"); 	HouseChest[house][0][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_1"); 			HouseChest[house][1][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_1"); 	HouseChest[house][1][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_2"); 			HouseChest[house][2][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_2"); 	HouseChest[house][2][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_3"); 			HouseChest[house][3][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_3"); 	HouseChest[house][3][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_4"); 			HouseChest[house][4][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_4"); 	HouseChest[house][4][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_5"); 			HouseChest[house][5][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_5"); 	HouseChest[house][5][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_6"); 			HouseChest[house][6][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_6"); 	HouseChest[house][6][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_7"); 			HouseChest[house][7][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_7"); 	HouseChest[house][7][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_8"); 			HouseChest[house][8][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_8"); 	HouseChest[house][8][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_9"); 			HouseChest[house][9][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_9"); 	HouseChest[house][9][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_10"); 			HouseChest[house][10][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_10"); 	HouseChest[house][10][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_11"); 			HouseChest[house][11][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_11"); 	HouseChest[house][11][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_12"); 			HouseChest[house][12][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_12"); 	HouseChest[house][12][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_13"); 			HouseChest[house][13][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_13"); 	HouseChest[house][13][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_14"); 			HouseChest[house][14][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_14"); 	HouseChest[house][14][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_15"); 			HouseChest[house][15][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_15"); 	HouseChest[house][15][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_16"); 			HouseChest[house][16][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_16"); 	HouseChest[house][16][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_17"); 			HouseChest[house][17][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_17"); 	HouseChest[house][17][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_18"); 			HouseChest[house][18][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_18"); 	HouseChest[house][18][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_19"); 			HouseChest[house][19][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_19"); 	HouseChest[house][19][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_20"); 			HouseChest[house][20][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_20"); 	HouseChest[house][20][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_21"); 			HouseChest[house][21][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_21"); 	HouseChest[house][21][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_22"); 			HouseChest[house][22][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_22"); 	HouseChest[house][22][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_23"); 			HouseChest[house][23][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_23"); 	HouseChest[house][23][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_24"); 			HouseChest[house][24][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_24"); 	HouseChest[house][24][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_25"); 			HouseChest[house][25][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_25"); 	HouseChest[house][25][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_26"); 			HouseChest[house][26][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_26"); 	HouseChest[house][26][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_27"); 			HouseChest[house][27][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_27"); 	HouseChest[house][27][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_28"); 			HouseChest[house][28][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_28"); 	HouseChest[house][28][ItemAmmount] = strval(hQuery);

			mysql_fetch_field_row(hQuery, "ChestItemID_29"); 			HouseChest[house][29][ItemID] = strval(hQuery);
			mysql_fetch_field_row(hQuery, "ChestItemAmmount_29"); 	HouseChest[house][29][ItemAmmount] = strval(hQuery);

			new houset[10];

			switch(HouseInfo[house][hType])
			{
				case TYPE_RATAI: houset = "Namuko";
				case TYPE_BUTAS: houset = "Buto";
				case TYPE_NAMAS: houset = "Namo";
			}

			if(HouseInfo[house][Buyed])
			{
				format(str, 300, "{DEFF88}%s numeris: {FFAF00}%d\n{DEFF88}Savininkas: {FFAF00}%s\n \n{DEFF88}Norëdami áeiti, spauskite ENTER",
				houset, house + 1, HouseInfo[house][Owner]);
				HouseInfo[house][House3D] = Create3DTextLabel(str, -1, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ], 10, 0, 0);
				HouseInfo[house][HousePickup] = CreatePickup(19522, 1, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ], 0);
			}
			else
			{
				format(str, 300, "{DEFF88}%s numeris: {FFAF00}%d\n{DEFF88}Savininkas: {FFAF00}%s\n{DEFF88}Kaina: {FFAF00}$%s\n \n{DEFF88}Norëdami nupirkti, spauskite ENTER",
				houset, house + 1, HouseInfo[house][Owner], konvertuoti_pinigus(HouseInfo[house][Cost]));
				HouseInfo[house][House3D] = Create3DTextLabel(str, -1, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ], 10, 0, 0);
				HouseInfo[house][HousePickup] = CreatePickup(1273, 1, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ], 0);
			}
			HouseInfo[house][hCreated] = true;

			//LoadChests(house);
		}
		else
		{
			HouseInfo[house][hCreated] = false;
			HouseInfo[house][Buyed] = false;
			HouseInfo[house][Locked] = false;
			HouseInfo[house][IsGarageUsed] = false;
			format(HouseInfo[house][Owner], 32, "Savivaldybë");
			HouseInfo[house][Cost] = -1;
			HouseInfo[house][ExitX] = -1;
			HouseInfo[house][ExitY] = -1;
			HouseInfo[house][ExitZ] = -1;
			HouseInfo[house][ExitAngle] = -1;
			HouseInfo[house][IntX] = -1;
			HouseInfo[house][IntY] = -1;
			HouseInfo[house][IntZ] = -1;
			HouseInfo[house][IntAngle] = -1;
			HouseInfo[house][hInt] = -1;
			HouseInfo[house][htVW] = -1;
			HouseInfo[house][Money] = -1;
		}
		mysql_free_result();
	}
	print("Namai uzkrauti...\n");
	return 1;
}

stock LoadChests(hid)
{
	new Query[400], Line[12 + MAX_CHEST_SLOTS][24];

    mysql_query("SELECT * FROM `houses`");

	mysql_store_result();

	while(mysql_fetch_row(Query))
	{
		explode(Query, Line, "|");

        hid = strval(Line[0]);

        for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
		{
		    if(i > 0)
		    {
		    	HouseChest[hid][i - 1][ItemID]      = strval(Line[i + 18]);
		    	HouseChest[hid][i - 1][ItemAmmount] = strval(Line[i + 18 + 1]);
		    }
		    else
		    {
		        HouseChest[hid][i][ItemID]      = strval(Line[i + 18]);
		    	HouseChest[hid][i][ItemAmmount] = strval(Line[i + 18 + 1]);
		    }

		    i ++; // Nenutrinti, tik protingi supras, kaip ðitas padeda.
		}

		strdel(Query, 0, sizeof(Query));
	}

	mysql_free_result();

	return 1;
}

stock SaveHouse(house)
{
	new hQuery[186];
	format(hQuery, sizeof hQuery, "UPDATE `houses` SET Owner = '%s', Buyed = '%d', Locked = '%d', Cost = '%d' WHERE ID = '%d'", HouseInfo[house][Owner], HouseInfo[house][Buyed], HouseInfo[house][Locked], HouseInfo[house][Cost], house);
	mysql_query(hQuery);
	format(hQuery, sizeof hQuery, "UPDATE `houses` SET ExitX = '%.4f', ExitY = '%.4f', ExitZ = '%.4f', ExitAngle = '%.4f' WHERE ID = '%d'", HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ], HouseInfo[house][ExitAngle], house);
	mysql_query(hQuery);
	format(hQuery, sizeof hQuery, "UPDATE `houses` SET IntX = '%.4f', IntY = '%.4f', IntZ = '%.4f', IntAngle = '%.4f' WHERE ID = '%d'", HouseInfo[house][IntX], HouseInfo[house][IntY], HouseInfo[house][IntZ], HouseInfo[house][IntAngle], house);
	mysql_query(hQuery);
	format(hQuery, sizeof hQuery, "UPDATE `houses` SET hInt = '%d', htVW = '%d', Money = '%d', hType = '%d' WHERE ID = '%d'", HouseInfo[house][hInt], HouseInfo[house][htVW], HouseInfo[house][Money], HouseInfo[house][hType], house);
	mysql_query(hQuery);

	new Querys[35], Query[(sizeof(Querys) * (MAX_CHEST_SLOTS * 2)) - 200];

	format(Querys, sizeof(Querys), "UPDATE `houses` SET ");
	strcat(Query, Querys);

	for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
	{
	    if(i == 0)
	    {
	        format(Querys, sizeof(Querys), "`ChestItemID_%d` = '%d', ", i, HouseChest[house][i][ItemID]);
	    	strcat(Query, Querys);
	    }
	    else
	    {
	    	format(Querys, sizeof(Querys), ", `ChestItemID_%d` = '%d', ", i, HouseChest[house][i][ItemID]);
	    	strcat(Query, Querys);
	    }

	    format(Querys, sizeof(Querys), "`ChestItemAmmount_%d` = '%d'", i, HouseChest[house][i][ItemAmmount]);
	    strcat(Query, Querys);
	}

	format(Querys, sizeof(Querys), " WHERE `ID` = '%d'", house);
	strcat(Query, Querys);

	mysql_query(Query);

	return 1;
}

CMD:gotoxyz(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;
	new Float:x, Float:y, Float:z;
	if(sscanf(params,"p<,>fff",x,y,z) && sscanf(params,"p< >fff",x,y,z)) return 0;
	SetPlayerPos(playerid, x, y, z);
	return 1;
}

stock RemovePlayersFromHouse(house)
{
	for(new p = 0, size = GetPlayerPoolSize(); p <= size; p++)
	{
		if(!IsPlayerConnected(p) || IsPlayerNPC(p)) continue;
		if(HouseID[p] == house)
		{
			SetPlayerInterior(p, 0);
			SetPlayerVirtualWorld(p, 0);
			AC_SetPlayerPos(p, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ]);
			SetPlayerFacingAngle(p, HouseInfo[house][ExitAngle]);
			HouseID[p] = -1;
		}
	}
	return 1;
}

stock PlayerHaveHouse(playerid)
{
	for(new house; house < MAX_HOUSES; house++)
	{
		if(HouseInfo[house][hCreated] && !strcmp(HouseInfo[house][Owner], GetPlayerNameEx(playerid), true)) return house;
	}
	return -1;
}

stock PlayerHaveCreditHouse(playerid)
{
	for(new cHouseID; cHouseID < MAX_CREDIT_HOUSES; cHouseID ++)
	{
		if(!strcmp(CHD[cHouseID][_cHouseOwner], GetPlayerNameEx(playerid), true)) return cHouseID;
	}

	return -1;
}

stock ReturnUserID(Tekstas[]) // By Zigulys400
{
	printf("Gaunu uþuomina: [ %s ] | Pradedama funkcija: ReturnUserID.", Tekstas);
	new UserID = INVALID_PLAYER_ID; // Sukuriam kintamajá.
	if(IsNumeric(Tekstas)) // Jeigu ávestas tekstas buvo skaièiai.
	{
		UserID = strval(Tekstas);

		if(!IsPlayerConnected(UserID)) // Jeigu þaidëjas neprisijungæs.
		{
			UserID = INVALID_PLAYER_ID; // Nustatom kintamajá á 65565.
		}
		else
		{
			return UserID; // Arba jeigu þaidëjas rastas, siunèiam jo ID'à.
		}
	}
	else
	{
		foreach(Player, i) // Arba jeigu ávestas tekstas nebûvo skaièiai, padarom cikla.
		{
			if(strfind(GetPlayerNameEx(i), Tekstas, true) != -1) // Ieðkom ar ávestas tekstas atitinka vardo dalá.
			{
				return i; // Jeigu atitinka siunèiam þaidëjo ID'à.
			}
		}
	}
	return UserID;
}

stock StopPlayerActions(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		RemovePlayerFromVehicle(playerid);
	}
	else
	{
		new Float: X, Float: Y, Float: Z;
		GetPlayerPos(playerid, X, Y, Z);
		AC_SetPlayerPos(playerid, X, Y, Z);
	}

	ClearAnimations(playerid);

	return 1;
}
stock CheckPlayersOnlineRecord()
{
	new NewPlayersCount = 0;

	new String[140];

	foreach(Player, i) { NewPlayersCount ++; }

	if(NewPlayersCount > PlayersOnlineRecord)
	{
		format(String, sizeof(String), "{ffffff} Naujas þaidëjø rekordas! Rekordas - {FFAF00}%d{ffffff} prisijunge þmonës!", NewPlayersCount);
		SendClientMessageToAll(-1, String);

		PlayersOnlineRecord = NewPlayersCount;
	}

	mysql_query("SELECT * FROM `rekordoinfo`");

	mysql_store_result();

	if(mysql_num_rows())
	{
		format(String, sizeof(String), "UPDATE `rekordoinfo` SET `Rekordas` = '%d'", PlayersOnlineRecord);
		mysql_query(String);
	}
	else
	{
		format(String, sizeof(String), "INSERT INTO `rekordoinfo` (Rekordas) VALUES ('%d')", PlayersOnlineRecord);
		mysql_query(String);
	}

	mysql_free_result();

	return 1;
}

stock IsmestiZaideja(playerid, Time)
{
	SetTimerEx("KickPlayer", Time, false, "d", playerid);

	//SavePlayerData(playerid);

	return 1;
}

f_public: UpdatePlayerTextDrawAlpha(playerid, TextDrawRedColor, TextDrawGreenColor, TextDrawBlueColor, OldAlpha, HiddingTextdraw, TextDrawUsingFor)
{
    if(OldAlpha > 254)
    {
        HiddingTextdraw = 1;

        new NowAlpha   = OldAlpha -= 2;
		new FinalColor = RGBA(TextDrawRedColor, TextDrawGreenColor, TextDrawBlueColor, NowAlpha);

		PlayerTextDrawBackgroundColor(playerid, EnterExitTextdraw[playerid], FinalColor);
		PlayerTextDrawColor          (playerid, EnterExitTextdraw[playerid], FinalColor);
		PlayerTextDrawBoxColor       (playerid, EnterExitTextdraw[playerid], FinalColor);

		PlayerTextDrawShow(playerid, EnterExitTextdraw[playerid]);

		SetTimerEx("UpdatePlayerTextDrawAlpha", 15, false, "ddddddd", playerid, TextDrawRedColor, TextDrawGreenColor, TextDrawBlueColor, NowAlpha, HiddingTextdraw, TextDrawUsingFor);
	}
	else
	{
	    if(HiddingTextdraw == 0)
	    {
			new NowAlpha   = OldAlpha += 2;
    	    new FinalColor = RGBA(TextDrawRedColor, TextDrawGreenColor, TextDrawBlueColor, NowAlpha);


			PlayerTextDrawBackgroundColor(playerid, EnterExitTextdraw[playerid], FinalColor);
			PlayerTextDrawColor          (playerid, EnterExitTextdraw[playerid], FinalColor);
			PlayerTextDrawBoxColor       (playerid, EnterExitTextdraw[playerid], FinalColor);

			PlayerTextDrawShow(playerid, EnterExitTextdraw[playerid]);

			/*if(TextDrawUsingFor != USING_PLAYER_DAMAGE)
			{
            	TogglePlayerControllable(playerid, false);
			}*/

			if(OldAlpha > 254)
			{
				CallLocalFunction("OnTextDrawGetFullAlpha", "dd", playerid, TextDrawUsingFor);


                FinalColor = RGBA(TextDrawRedColor, TextDrawGreenColor, TextDrawBlueColor, 255);

                PlayerTextDrawBackgroundColor(playerid, EnterExitTextdraw[playerid], FinalColor);
				PlayerTextDrawColor          (playerid, EnterExitTextdraw[playerid], FinalColor);
				PlayerTextDrawBoxColor       (playerid, EnterExitTextdraw[playerid], FinalColor);

				PlayerTextDrawShow(playerid, EnterExitTextdraw[playerid]);
			}
			else
   			{
   			    SetTimerEx("UpdatePlayerTextDrawAlpha", 15, false, "ddddddd", playerid, TextDrawRedColor, TextDrawGreenColor, TextDrawBlueColor, NowAlpha, HiddingTextdraw, TextDrawUsingFor);
   			}
		}
		else if(HiddingTextdraw == 1)
		{
		    if(OldAlpha > 2)
		    {
		    	new NowAlpha   = OldAlpha -= 2;
	    	    new FinalColor = RGBA(TextDrawRedColor, TextDrawGreenColor, TextDrawBlueColor, NowAlpha);

				PlayerTextDrawBackgroundColor(playerid, EnterExitTextdraw[playerid], FinalColor);
				PlayerTextDrawColor          (playerid, EnterExitTextdraw[playerid], FinalColor);
				PlayerTextDrawBoxColor       (playerid, EnterExitTextdraw[playerid], FinalColor);

				PlayerTextDrawShow(playerid, EnterExitTextdraw[playerid]);


				SetTimerEx("UpdatePlayerTextDrawAlpha", 15, false, "ddddddd", playerid, TextDrawRedColor, TextDrawGreenColor, TextDrawBlueColor, NowAlpha, HiddingTextdraw, TextDrawUsingFor);
			}
			else
			{
			    PlayerTextDrawHide   (playerid, EnterExitTextdraw[playerid]);
			    PlayerTextDrawDestroy(playerid, EnterExitTextdraw[playerid]);

			    EnterExitTextdraw[playerid] = INVALID_PLAYER_TEXT_DRAW;

			    if(TextDrawUsingFor != USING_PLAYER_DAMAGE)
				{
				    TogglePlayerControllable(playerid, true);
				}
			}
		}
	}
	return 1;
}

f_public: UpdateTextDrawShow(playerid, TextDrawAppearing, TextDrawSlot, ColorRed, ColorGreen, ColorBlue, TextDrawAlpha)
{
	printf("1......... | %d", TextDrawAlpha);
    new PlayerText: TextDrawID = TextDrawSlotUse[TextDrawSlot];
    print("2.........");
	if(TextDrawsSystem[TextDrawID][TextDrawSlotID] != INVALID_PLAYER_TEXT_DRAW && TextDrawSlotUse[TextDrawSlot] != INVALID_PLAYER_TEXT_DRAW)
	{
	    new FinalColor;
	    if(TextDrawAppearing == 1)
	    {
            //-------------      TextDraw Color      ----
	        FinalColor =   RGBA(ColorRed, ColorGreen, ColorBlue, TextDrawAlpha);
			PlayerTextDrawColor(playerid, TextDrawsSystem[TextDrawID][TextDrawSlotID], FinalColor);

            print("3.........");

			//-------------      TextDraw Box Color      ----
	        FinalColor = RGBA     (ColorRed, ColorGreen, ColorBlue, TextDrawAlpha);
	        PlayerTextDrawBoxColor(playerid, TextDrawsSystem[TextDrawID][TextDrawSlotID], FinalColor);

            print("4.........");

            TextDrawAlpha += 2;
            if(TextDrawAlpha > 254)
			{
			    FinalColor =      RGBA(ColorRed, ColorGreen, ColorBlue, 255);

			    print("5.........");

			    PlayerTextDrawColor   (playerid, TextDrawsSystem[TextDrawID][TextDrawSlotID], FinalColor);
			    PlayerTextDrawBoxColor(playerid, TextDrawsSystem[TextDrawID][TextDrawSlotID], FinalColor);

			    print("6.........");

			    TextDrawSlotUse[TextDrawSlot]               = INVALID_PLAYER_TEXT_DRAW;
			    //TextDrawsSystem[TextDrawID][TextDrawSlotID] = INVALID_PLAYER_TEXT_DRAW;
			}

			print("7.........");
	 	}
	 	else
	 	{
            //-------------      TextDraw Color      ----
	        FinalColor =   RGBA(ColorRed, ColorGreen, ColorBlue, TextDrawAlpha);
			PlayerTextDrawColor(playerid, TextDrawsSystem[TextDrawID][TextDrawSlotID], FinalColor);

			//-------------      TextDraw Box Color      ----
	        FinalColor =      RGBA(ColorRed, ColorGreen, ColorBlue, TextDrawAlpha);
	        PlayerTextDrawBoxColor(playerid, TextDrawsSystem[TextDrawID][TextDrawSlotID], FinalColor);

            TextDrawAlpha -= 2;
            if(TextDrawAlpha > 2)
			{
			    FinalColor =      RGBA(ColorRed, ColorGreen, ColorBlue, 0);

			    PlayerTextDrawColor   (playerid, TextDrawsSystem[TextDrawID][TextDrawSlotID], FinalColor);
			    PlayerTextDrawBoxColor(playerid, TextDrawsSystem[TextDrawID][TextDrawSlotID], FinalColor);

			    TextDrawSlotUse[TextDrawSlot]               = INVALID_PLAYER_TEXT_DRAW;
			    //TextDrawsSystem[TextDrawID][TextDrawSlotID] = INVALID_PLAYER_TEXT_DRAW;
			}
	 	}

	 	SetTimerEx("UpdateTextDrawShow", 15, false, "ddddddd", playerid, TextDrawAppearing, TextDrawSlot, ColorRed, ColorGreen, ColorBlue, TextDrawAlpha);
	}
	return 1;
}

f_public: UnfreezePlayer(playerid)
{
	TogglePlayerControllable(playerid, true);

	return 1;
}

stock UzsaldytiZaideja(playerid, Time)
{
	TogglePlayerControllable(playerid, false);

	SetTimerEx("UnfreezePlayer", Time, false, "d", playerid);

	return 1;
}

stock explode(const sSource[], aExplode[][], const sDelimiter[] = " ", iVertices = sizeof aExplode, iLength = sizeof aExplode[]) // Created by Westie
{
	new iNode, iPointer, iPrevious = -1, iDelimiter = strlen(sDelimiter);

	while(iNode < iVertices)
	{
		iPointer = strfind(sSource, sDelimiter, false, iPointer);

		if(iPointer == -1)
		{
			strmid(aExplode[iNode], sSource, iPrevious, strlen(sSource), iLength);
			break;
		}
		else
		{
			strmid(aExplode[iNode], sSource, iPrevious, iPointer, iLength);
		}

		iPrevious = (iPointer += iDelimiter);
		++iNode;
	}
	return iPrevious;
}

stock PutPlayerInVehicleEx(playerid, vehicleid, seatid)
{
	PI[playerid][AntiHomeKint] = vehicleid;
	PutPlayerInVehicle(playerid, vehicleid, seatid);
}

f_public: PlayerCalling(playerid, number, withcallbox)
{
	if(PI[playerid][TelphoneInUse] == 1)
	{
		foreach(Player, pid)
		{
	        if(number == PI[pid][MobilePhoneNumber])
	        {
	        	if(PI[playerid][Sutartis] == 1 && PI[playerid][PhoneMoney] < 0.75)
	        	{
	        		SendClientMessage(playerid, -1, "{ffffff} Jûsø sàskaitos likutis nepakankamas!");

	        		PI[playerid][TelphoneInUse] = -1;

	        		return 1;
	        	}

	            if(PI[pid][PhoneStatus] == 0 || PI[pid][Battery] == 0)
	            {
					SendClientMessage(playerid, -1, "{ffffff} Telefonas yra iðjungtas arba ne ryðio zonoje!");

					PI[playerid][TelphoneInUse] = -1;

	    			Fix_SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

	                return 1;
	            }

	            if(PI[pid][Sutartis] == 0)
				{
				    SendClientMessage(playerid, -1, "{ffffff} Þaidëjas neturi mobiliojo ryðio kortelës!");

					PI[playerid][TelphoneInUse] = -1;

	    			Fix_SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

					return 1;
				}

	            if(PI[pid][TelphoneInUse] != -1)
	            {
					SendClientMessage(playerid, -1, "{ffffff} Numeris uþimtas!");

					PI[playerid][TelphoneInUse] = -1;

	    			Fix_SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

	                return 1;
	            }

   	            PI[pid][TelphoneInUse]          = playerid;
	            PI[playerid][TelphoneInUse]     = pid;
	            PI[playerid][TelphoneCalling]   = TELPHONE_SOUND_CALLING;
				PI[pid]       [TelphoneCalling] = TELPHONE_SOUND_RINGING;

				SendClientMessage(pid, -1, "{ffffff} Jûsø telefonas pradëda skambëti...");
				SendClientMessage(pid, -1, "{ffffff} Norint atsiliepti, raðykite {FFAF00} /pakelti{ffffff}, norint padëti ragelá - {FFAF00} /padeti{ffffff}!");

				SendClientMessage(playerid, -1, "{ffffff} Norint padëti ragelá, raðykite {FFAF00} /padeti{ffffff}!");

				return 1;
			}
	    }
	}

	SendClientMessage(playerid, -1, "{ffffff} Numeris nenaudojamas arba þaidëjas nëra prisijungæs!");

	Fix_SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

	PI[playerid][TelphoneInUse] = -1;

 	return 1;
}

f_public: Fix_SetPlayerSpecialAction(playerid, SpecialActionID)
{
	switch(SpecialActionID)
	{
		case SPECIAL_ACTION_USECELLPHONE:
		{
			switch(PI[playerid][MobilePhone])
			{
				case 0:
				{
					RemovePlayerAttachedObject(playerid, TELPHONE_ATTACH_SLOT);
				}

			 	case VIOLET_PHONE:
				{
					SetPlayerAttachedObject(playerid, TELPHONE_ATTACH_SLOT, VIOLET_PHONE_ID, 6, 0.1, 0.02, 0.0, 90.0, 180.0, 15.0, 1.0, 1.0, 1.0);
				}

				case RED_PHONE:
				{
					SetPlayerAttachedObject(playerid, TELPHONE_ATTACH_SLOT, RED_PHONE_ID, 6, 0.1, 0.02, 0.0, 90.0, 180.0, 15.0, 1.0, 1.0, 1.0);
				}

				case GREEN_PHONE:
				{
					SetPlayerAttachedObject(playerid, TELPHONE_ATTACH_SLOT, GREEN_PHONE_ID, 6, 0.1, 0.02, 0.0, 90.0, 180.0, 15.0, 1.0, 1.0, 1.0);
				}

				case BLUE_PHONE:
				{
					SetPlayerAttachedObject(playerid, TELPHONE_ATTACH_SLOT, BLUE_PHONE_ID, 6, 0.1, 0.02, 0.0, 90.0, 180.0, 15.0, 1.0, 1.0, 1.0);
				}

				case YELLOW_PHONE:
				{
					SetPlayerAttachedObject(playerid, TELPHONE_ATTACH_SLOT, YELLOW_PHONE_ID, 6, 0.1, 0.02, 0.0, 90.0, 180.0, 15.0, 1.0, 1.0, 1.0);
				}

				case WHITE_PHONE:
				{
					SetPlayerAttachedObject(playerid, TELPHONE_ATTACH_SLOT, WHITE_PHONE_ID, 6, 0.1, 0.02, 0.0, 90.0, 180.0, 15.0, 1.0, 1.0, 1.0);
				}
			}
		}

		case SPECIAL_ACTION_STOPUSECELLPHONE:
		{
			RemovePlayerAttachedObject(playerid, TELPHONE_ATTACH_SLOT);
		}
	}

	return SetPlayerSpecialAction(playerid, SpecialActionID);
}

stock konvertuoti_pinigus(pinigu_suma)
{
	new m_string[12];
	format(m_string, sizeof m_string, "%d", pinigu_suma);
	if(-1000 < pinigu_suma < 1000) return m_string;
	new _minusas = 0;
	if(pinigu_suma < 0) _minusas = 1;
	new m_ilgis = strlen(m_string);
	while((m_ilgis -= 3) > _minusas) strins(m_string, ",", m_ilgis);
	return m_string;
}
stock TogglePlayerControllableEx(playerid, bool:toggle)
{
	 if(toggle)
	 {
		  TogglePlayerControllable(playerid, 1);
		  SetCameraBehindPlayer(playerid);
	 }
	 else
	 {
		  new Float:pPos[6];
		  TogglePlayerControllable(playerid, 0);
		  GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
		  GetPlayerCameraPos(playerid, pPos[3], pPos[4], pPos[5]);
		  SetPlayerCameraPos(playerid, pPos[3], pPos[4], pPos[5]);
		  SetPlayerCameraLookAt(playerid, pPos[0], pPos[1], pPos[2]);
	 }
	 return 1;
}

stock GetPlayersOnServer()
{
	new count;
	for(new x=0, size = GetPlayerPoolSize(); x<= size; x++)
	{
	  if(IsPlayerConnected(x))
	  {
			count++;
		}
	}
	return count;
}

stock SetPlayerCheckpointEx(playerid, cpid, Float:x, Float:y, Float:z, Float:size)
{
	if(cpid < 0 || cpid > MAX_PLAYER_CPS - 1)
	{
		printf("Klaida, jûs negalite sukurti CP su %d ID.", cpid);
		return 1;
	}
	pCPPosX[playerid][cpid] = x;
	pCPPosY[playerid][cpid] = y;
	pCPPosZ[playerid][cpid] = z;
	pCPSize[playerid][cpid] = size;
	pCPShow[playerid][cpid] = true;
	pCPID[playerid] = cpid;
	SetPlayerCheckpoint(playerid, x, y, z, size);
	return 1;
}

stock DisablePlayerCheckpointEx(playerid, cpid)
{
		if(cpid < 0 || cpid > MAX_PLAYER_CPS - 1)
		{
				printf("Klaida, jûs negalite iðtrinti CP su %d ID.", cpid);
				return 1;
		}
		pCPID[playerid] = -1;
		pCPPosX[playerid][cpid] = 0.0;
		pCPPosY[playerid][cpid] = 0.0;
		pCPPosZ[playerid][cpid] = 0.0;
		pCPSize[playerid][cpid] = 0.0;
		pCPShow[playerid][cpid] = false;
		DisablePlayerCheckpoint(playerid);
		for(new cp; cp < MAX_PLAYER_CPS; cp++)
		{
				if(pCPShow[playerid][cp])
				{
						pCPID[playerid] = cp;
						SetPlayerCheckpoint(playerid, pCPPosX[playerid][cp], pCPPosY[playerid][cp], pCPPosZ[playerid][cp], pCPSize[playerid][cp]);
						break;
				}
		}
		return 1;
}

stock DisableAllPlayerCheckpoints(playerid)
{
	pCPID[playerid] = -1;
	DisablePlayerCheckpoint(playerid);
	for(new cp; cp < MAX_PLAYER_CPS; cp++)
	{
		if(pCPShow[playerid][cp])
		{
			pCPPosX[playerid][cp] = 0.0;
			pCPPosY[playerid][cp] = 0.0;
			pCPPosZ[playerid][cp] = 0.0;
			pCPSize[playerid][cp] = 0.0;
			pCPShow[playerid][cp] = false;
		}
	}
	return 1;
}

stock IsPlayerInCheckpointEx(playerid, cpid)
{
	if(cpid < 0 || cpid > MAX_PLAYER_CPS)
	{
		printf("Error, you can't check cp with %d ID.", cpid);
		return false;
	}
	if(!pCPShow[playerid][cpid]) return false;
	if(!IsPlayerInRangeOfPoint(playerid, pCPSize[playerid][cpid] + PLUS_CP_SIZE, pCPPosX[playerid][cpid], pCPPosY[playerid][cpid], pCPPosZ[playerid][cpid])) return false;
	return true;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	/*if(listid == skinlist)
	{
	    if(response)
	    {
		    new str[20];
		    format(str, 20, "%d", modelid);
		    SendClientMessage(playerid, -1, str);
	    }

    	return 1;
	}*/

	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	if(pickupid < 0 || pickupid > MAX_PICKUPS) Kick(playerid);
	//printf("Imam pickupà kurio ID: %d",pickupid);

	if(pickupid == PickupsInfo[PradetiDazasvydi])
	{
		ShowPlayerDialogEx(playerid, DazasvydzioDialog, DIALOG_STYLE_MSGBOX, "Daþasvydis", "{ffffff}Norint áeiti á daþasvydþio arenà jums reikës sumokëti {FFAF00}$1,000{ffffff}.\n \nJeigu sutinkate, spauskite toliau.", "Toliau", "Uþdaryti");

		return 1;
	}

    if(pickupid == PickupsInfo[teleauto])
	{
	    new str[200];

		new Masina1[64], Masina2[64], Masina3[64];

		if(PI[playerid][Transportas1] == -1)		Masina1 = "-";
		else										format(Masina1, sizeof(Masina1), "%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas1]) - 400]);

		if(PI[playerid][Transportas2] == -1)		Masina2 = "-";
		else										format(Masina2, sizeof(Masina2), "%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas2]) - 400]);

		if(!PI[playerid][TransportoSlotas])
		{
			format(str, sizeof(str), "1. %s\n2. %s", Masina1, Masina2);
			ShowPlayerDialogEx(playerid, 10042, DIALOG_STYLE_LIST, "MetroCity.lt Garaþas", str, "Registruoti", "Atgal");
		}
		else
		{
			if(PI[playerid][Transportas3] == -1)	Masina3 = "-";
			else									format(Masina3, sizeof(Masina3), "%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas3]) - 400]);

			format(str, sizeof(str), "1. %s\n2. %s\n3. %s", Masina1, Masina2, Masina3);
			ShowPlayerDialogEx(playerid, 10042, DIALOG_STYLE_LIST, "MetroCity.lt Garaþas", str, "Registruoti", "Atgal");
		}
	    return 1;
	}

	if(pickupid == PickupsInfo[GarazoPirkimas])
	{
		new String[1000], Stringas[230], garagecount = 0;

		if(PI[playerid][VisoPrazaide] < NAUJOKO_LAIKAS) return SendClientMessage(playerid, -1, "{ffffff} Naujokai garaþø nuomotis negali!");

		for(new garageid = 0; garageid < MAX_GARAGES; garageid ++)
		{
		    if(strcmp(GI[garageid][GarageOwner], "Nera", false, MAX_PLAYER_NAME))
		    {
				if(!strcmp(GI[garageid][GarageOwner], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME))
				{
				    garagecount ++;
				    pGarageID[playerid] = garageid;
				}
			}
		}

		if(garagecount > 0) // Jau turi loxas garaþà
		{
			format(Stringas, sizeof(Stringas), "{ffffff}Jûsø garaþo nr. {FFAF00}%d {ffffff}nuoma dar galios iki {FFAF00}%s{ffffff}.\n\n\tAr norite nutraukti nuomos sutartá?", pGarageID[playerid] + 1, TimestampToDate(GI[pGarageID[playerid]][GarageTimeLeft]));
			ShowPlayerDialogEx(playerid, NutrauktiGarazoNuoma, DIALOG_STYLE_MSGBOX, "Nuomos nutraukimas", Stringas, "Nutraukti", "Atðaukti");

			return 1;
		}

		strcat(String, "Garaþo numeris\tGaraþo nuomininkas\tIðnuomotas iki:\n");

		for(new garageid = 0; garageid < MAX_GARAGES; garageid ++)
		{
			if(!strcmp("Nera", GI[garageid][GarageOwner], true))
			{
				format(Stringas, sizeof(Stringas), "Nr. {FFAF00}%d\t{FFAF00}%s\n", garageid + 1, GI[garageid][GarageOwner]);
				strcat(String, Stringas);
			}
			else
			{
				format(Stringas, sizeof(Stringas), "Nr. {FFAF00}%d\t{FFAF00}%s\t{FFAF00}%s\n", garageid + 1, GI[garageid][GarageOwner], TimestampToDate(GI[garageid][GarageTimeLeft]));
				strcat(String, Stringas);
			}
		}

		ShowPlayerDialogEx(playerid, PirktiGaraza, DIALOG_STYLE_TABLIST_HEADERS, "Garaþo nuoma", String, "Pasirinkti", "Uþdaryti");
	}

	if(PickupsInfo[sKuras][0] <= pickupid <= PickupsInfo[sKuras][sizeof(PickupsInfo[sKuras]) - 1])
	{
		new str[300];

		if(IpyleSuma[playerid] == 0.0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite uþ kà susimokëti!");

		format(str, 300, "{ffffff}Ið viso uþ ásipiltà kurà turite susimokëti {FFAF00}$%s{ffffff}.\n \n{ffffff}\tAr mokësite?", konvertuoti_pinigus(IpyleSuma[playerid]));
		ShowPlayerDialogEx(playerid, AtsiskaitymasUzKura, DIALOG_STYLE_MSGBOX, "Kasa", str, "Taip", "Ne");

		return 1;
	}

	if(PickupsInfo[IseitiIsDazasvydzio][0] <= pickupid <= PickupsInfo[IseitiIsDazasvydzio][sizeof(PickupsInfo[IseitiIsDazasvydzio]) - 1])
	{
		ShowPlayerDialogEx(playerid, IsejimasDialog, DIALOG_STYLE_MSGBOX, "Daþasvydis", "{ffffff}Ar tikrai norite iðeiti ið daþasvydþio?", "Taip", "Ne");

		return 1;
	}

	if(PickupsInfo[sKuras1][0] <= pickupid <= PickupsInfo[sKuras1][sizeof(PickupsInfo[sKuras1]) - 1])
	{
		if(GetPlayerMoneyA(playerid) < 80) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

		if(PI[playerid][bakelis] == true) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite kuro bakelá. Já panaudoti galite paraðæ {FFAF00} /piltikura{ffffff}!");

		SendClientMessage(playerid, -1, "{ffffff} Nusipirkote kuro bakelá. Já panaudoti galite paraðæ {FFAF00} /piltikura{ffffff}!");

		PI[playerid][bakelis] = true;

		GivePlayerMoneyA(playerid, -80);

		return 1;
	}

	if(PickupsInfo[MaistoParduotuve][0] <= pickupid <= PickupsInfo[MaistoParduotuve][sizeof(PickupsInfo[MaistoParduotuve]) - 1])
	{
		new str[300];

		if(PI[playerid][PardSaskaita] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite uþ kà susimokëti!");

		format(str, 300, "{ffffff}Ið viso uþ nupirktas prekes turite susimokëti {FFAF00}$%s{ffffff}.\n \n{ffffff}\tAr mokësite?", konvertuoti_pinigus(PI[playerid][PardSaskaita]));
		ShowPlayerDialogEx(playerid, AtsiskaitymasUzMaista, DIALOG_STYLE_MSGBOX, "Kasa", str, "Taip", "Ne");

		return 1;
	}

	/*if(pickupid == PickupsInfo[ChristmasHatPickup])
	{
		SendClientMessage(playerid, -1, "{ffffff} Uþsidëjote Kalëdinæ kepuræ. Nuimti jà galite paraðæ {FFAF00} /nkepure{ffffff}!");

		SetPlayerAttachedObject(playerid, POLICETAZER_ATTACH_SLOT, 19065, 2, 0.107970, 0.030432, 0.003309, 99.160842, 100.209602, 349.527191, 1.057792, 1.205194, 1.080717); // SantaHat 2

		return 1;
	}

	if(pickupid == PickupsInfo[ChristmasPickup])
	{
		new String[500];

		strcat(String, "{ffffff}Jums reikia rasti Kalëdø senelio namà, ten bus paliktas Kalëdø\n");
		strcat(String, "{ffffff}senelio laiðkas, kurá reikës perskaityti ir vygdyti tolimesnius\n");
		strcat(String, "{ffffff}nurodymus. Kalëdø senelio namas randasi kaþkur Angel Pine\n");
		strcat(String, "{ffffff}apylinkëse, bûtinai uþsidëkite Kalëdinæ kepuræ ir leiskite á kelionæ!\n\n");
		strcat(String, "{ffffff}Sëkmës!");

		ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Kalëdø event", String, "Uþdaryti", "");

		return 1;
	}

	if(pickupid == PickupsInfo[SantaClausPickup])
	{
		new String[500];

		strcat(String, "{ffffff}Labas, jeigu skaitai ðá laiðkà reiðkia tiki kalëdomis ir nori man padëti\n");
		strcat(String, "{ffffff}iðgelbëti Kalëdas, Kalëdos jau èia pat, bet netikëtai pabëgo visi mano elniai!\n");
		strcat(String, "{ffffff}Kadangi per vienà naktá niekaip nespësiu aplankyti visuss gyventojus tu turi man padëti,\n");
		strcat(String, "{ffffff}nes be tavæs to padaryti nesugebësiu!\n\n");
		strcat(String, "{ffffff}Informacijà apie turimus elnius ir uþuomenas perskaitysite paraðæ {FFAF00} /elniai\n\n");
		strcat(String, "{ffffff}Sëkmës!");

		ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Kalëdø event", String, "Uþdaryti", "");

		return 1;
	}

	if(pickupid == PickupsInfo[ChristmasPrizePickup])
	{
		if(PI[playerid][IvygdeEvent] == true) return SendClientMessage(playerid, -1, "{ffffff} Jus jau atsiëmete savo prizà!");

		if(PI[playerid][Stirna1] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus suradote ne visus elnius!");
		if(PI[playerid][Stirna2] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus suradote ne visus elnius!");
		if(PI[playerid][Stirna3] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus suradote ne visus elnius!");
		if(PI[playerid][Stirna4] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus suradote ne visus elnius!");
		if(PI[playerid][Stirna5] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus suradote ne visus elnius!");

		new String[200];

		KiekIvygde ++;

		PI[playerid][IvygdeEvent] = true;

		PI[playerid][KiekTuriRepTasku] += 20;
		GivePlayerMoneyA(playerid, 12000);
		GivePlayerExperience(playerid, 700);

		SendClientMessage(playerid, -1, "{24F34A} KALËDOS  {ffffff}Sëkmingai ávygdëte Kalëdiná event'à ir uþ tai gavote dovanø nuo Kalëdø Senelio:");
		SendClientMessage(playerid, -1, "{24F34A} KALËDOS  {ffffff}Patirties taðkai: {FFAF00}700{ffffff}, pinigai: {FFAF00}$12,000{ffffff}, reputacija: {FFAF00}20{ffffff}.");

		format(String, 200, "{24F34A} KALËDOS  {ffffff}Þaidëjas {FFAF00}%s{ffffff} ávygdë Kalëdø event'à. Tai padarë jau {FFAF00}%d {ffffff}þaidëjø!", GetPlayerNameEx(playerid), KiekIvygde);
		SendClientMessageToAll(-1, String);

		format(String, 100, "UPDATE `sinfo` SET `KiekIvygde` = '%d'", KiekIvygde);
		mysql_query(String);

		return 1;
	}*/

	if(pickupid == PickupsInfo[KasyklosInfo])
	{
		new String[1500];

		strcat(String, "{ffffff}Metalo kasykla yra dar vienas lengvø pinigø ðaltinis. Viso yra\n");
		strcat(String, "{ffffff}6 skirtingo metalo rûðys, ir visø metalø kainos yra skirtingos.\n");
		strcat(String, "{ffffff}Turbût nesunku suprasti, kad kuo metalas brangesnis - tuo ji\n");
		strcat(String, "{ffffff}sunkiau iðkasti. O kaip gi galima pradëti kasti? Jums tereikës\n");
		strcat(String, "{ffffff}kastuvo kurá galite ásigyti betkuriame Lietuvos Spauda kioske\n");
		strcat(String, "{ffffff}ir ágûdþiø (greito mygtukø spaudinëjimo), turint kastuva jums\n");
		strcat(String, "{ffffff}paspausti kairájá pëlës mygtukà, atsiradus progressbar'ui\n");
		strcat(String, "{ffffff}spaudinëkite tà patá mygtukà kaip ámanoma greièiau iki kol\n");
		strcat(String, "{ffffff}neatkasit metalo. Spaudinëjant per lëtai duobë gali uþsikasti.\n");
		strcat(String, "{ffffff}Turint 250.00 KG metalo jus turësite viskà parduoti, nes daugiau\n");
		strcat(String, "{ffffff}nepaneðite.\n \n");
		strcat(String, "{ffffff}Parduoti visà metalà galite èia: {FFAF00} /gps > Kitos vietovës > MetroCity.lt Turgus{ffffff}.\n \n");
		strcat(String, "{ffffff}Sëkmës!");
		ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Metalo kasykla", String, "Uþdaryti", "");

		return 1;
	}

	if(pickupid == PickupsInfo[MetroCityStebuklai])
	{
		new String[1500];

		if(PI[playerid][VisoPrazaide] < NAUJOKO_LAIKAS)
		{
			SendClientMessage(playerid, -1, "{ffffff} Stebuklø vykdymà pradëti galësite tik praþaidus {FFAF00}"#NAUJOKO_LAIKAS"{ffffff} min!");

			return 1;
		}

		if(PI[playerid][AtsiemePriza] == true) return SendClientMessage(playerid, -1, "{ffffff} Jus jau ávykdëte ðias uþduotis ir prizà atsiemëte!");

		if(PI[playerid][stebuklas1] == 0)
        {
            strcat(String, "{ffffff}Pirmasis MetroCity.lt Stebuklas\n \n");
            strcat(String, "{ffffff}Kaþkur Dykumos apskrityje prieð daug metø vaiduokliai\n");
            strcat(String, "{ffffff}paliko maðinà. Dabar ði maðina yra apleista ir stovi daug metø\n");
            strcat(String, "{ffffff}nenaudojama. Jûsø tikslas yra surasti ðià maðinà, suradus jà\n");
            strcat(String, "{ffffff}gráþkite èia ir gausite uþuomenà apie kità MetroCity.lt Stebuklà.\n \n");
            strcat(String, "{ffffff}Sëkmës!");
            ShowPlayerDialogEx(playerid, 4590, DIALOG_STYLE_MSGBOX, "7 uliunø Stebuklai", String, "Uþdaryti", "");

            return 1;
        }

        if(PI[playerid][stebuklas2] == 0)
        {
            strcat(String, "{ffffff}Antrasis MetroCity.lt Stebuklas\n \n");
            strcat(String, "{ffffff}Ragana, kuri buvo prakeikta labai daug metø pagaliau mirë.\n");
            strcat(String, "{ffffff}Jos nemëgo visas San Fierro miestas, taèiau prieð mirtá ji\n");
            strcat(String, "{ffffff}paliko nuodingàjá viralà, kuris greitai gali pasklisti po\n");
            strcat(String, "{ffffff}visà miestà ir taip uþkrësti visus þmones! Jûsø tikslas yra\n");
            strcat(String, "{ffffff}surasti viralà ir sunaikinti já. Kur tas viralas randasi\n");
            strcat(String, "{ffffff}tiksliai niekas neþino, taèiau sklinda gandai, jog tai gali\n");
            strcat(String, "{ffffff}bûti kaþkur apleistoje bakûþëje Polomino Creeck apylinkëse. Sunaikinus viralà\n");
            strcat(String, "{ffffff}gráþkite èia ir gausite uþuomenà apie kità MetroCity.lt Stebuklà.\n \n");
            strcat(String, "{ffffff}Sëkmës!");
            ShowPlayerDialogEx(playerid, 4590, DIALOG_STYLE_MSGBOX, "7 uliunø Stebuklai", String, "Uþdaryti", "");

            return 1;
        }

        if(PI[playerid][stebuklas3] == 0)
        {
            strcat(String, "{ffffff}Treèiasis MetroCity.lt Stebuklas\n \n");
            strcat(String, "{ffffff}Sklinda gandai, kad senoji bobutë norëjusi uþsidirbti pinigø\n");
            strcat(String, "{ffffff}pragyvenimui pardavinëjo jos kieme auganèius obuolius, surinkus\n");
            strcat(String, "{ffffff}pora pintiniø obuoliø ji jas pardavë, taèiau liko viena pintinë\n");
            strcat(String, "{ffffff}pilna stebuklingø obuoliø, bobutë to neþinojo ir paliko jas prie\n");
            strcat(String, "{ffffff}netoliese kur gyveno daug benamiø, kaþkur prie SanFierro savartyno.\n");
            strcat(String, "{ffffff}Ðie obuoliai, kaip daugelis sako gali iðgydyti visas ligas. Todël\n");
            strcat(String, "{ffffff}jûsø tikslas yra surasti ðià pintinæ ir padëti sunkiai sergantiems\n");
            strcat(String, "{ffffff}þmonëms. Suradus pintinæ, gráþkite èia ir gausite uþuomenà apie\n");
            strcat(String, "{ffffff}kità MetroCity.lt Stebuklà.\n \n");
            strcat(String, "{ffffff}Sëkmës!");
            ShowPlayerDialogEx(playerid, 4590, DIALOG_STYLE_MSGBOX, "7 uliunø Stebuklai", String, "Uþdaryti", "");

            return 1;
        }

        if(PI[playerid][stebuklas4] == 0)
        {
            strcat(String, "{ffffff}Ketvirtasis MetroCity.lt Stebuklas\n \n");
            strcat(String, "{ffffff}Prieð daug daug metø, vienas benamis senukas þvejojant pabandë\n");
            strcat(String, "{ffffff}uþkurti lauþà, nes jam buvo ðalta. Surinkæs malkas Los Santos miðkuose\n");
            strcat(String, "{ffffff}Atëjo prie pakrantës jis uþkûrë lauþà, kuris pasirodo yra stebuklingas!\n");
            strcat(String, "{ffffff}Senukas nesitikëjo, kad lauþas degs jau kità dienà, taèiau pasirodo\n");
            strcat(String, "{ffffff}jis dega jau pora metø. Deja, senukas jau mirë, bet amþinai degantis\n");
            strcat(String, "{ffffff}lauþas vis dar dega. Jûsø tikslas yra surasti ðá lauþà. Suradus já\n");
            strcat(String, "{ffffff}gráþkite èia ir gausite kità MetroCity.lt Stebuklà.\n \n");
            strcat(String, "{ffffff}Sëkmës!");
            ShowPlayerDialogEx(playerid, 4590, DIALOG_STYLE_MSGBOX, "7 uliunø Stebuklai", String, "Uþdaryti", "");

            return 1;
        }

        if(PI[playerid][stebuklas5] == 0)
        {
            strcat(String, "{ffffff}Penktasis MetroCity.lt Stebuklas\n \n");
            strcat(String, "{ffffff}Garsaus gitaristo koncerto metu ávyko tragedija. Tris ið kalëjimo\n");
            strcat(String, "{ffffff}pabëgæ kaliniai su kaukëm ábëgo á scenà ir suðaudë daug tuo metu\n");
            strcat(String, "{ffffff}koncerte buvusiø þmoniø, taip pat vienas ið jø buvo tas garsusis\n");
            strcat(String, "{ffffff}gitaristas. Uþpuolikø tikslas buvo pavogti gitarà, kurios vertë\n");
            strcat(String, "{ffffff}tuo metu buvo net $1,500,000! Pavogæ gitarà jie pabëgo kaþkur ant\n");
            strcat(String, "{ffffff}Los Santos gaujø mikro rajono, ten jà kaþkur ir paslëpë kad sugavus pareigûnams\n");
            strcat(String, "{ffffff}jie neatimtø tos gitaros. Taip ir atsitiko, pareigûnai bëglius sugavo\n");
            strcat(String, "{ffffff}o gitara liko gulëti ten kur jie jà padëjo. Jûsø tikslas yra surasti\n");
            strcat(String, "{ffffff}ðià gitarà, kol to nepadarë kiti. Suradus jà gráþkite èia ir gausite\n");
            strcat(String, "{ffffff}kità MetroCity.lt Stebuklà.\n \n");
            strcat(String, "{ffffff}Sëkmës!");
            ShowPlayerDialogEx(playerid, 4590, DIALOG_STYLE_MSGBOX, "7 uliunø Stebuklai", String, "Uþdaryti", "");

            return 1;
        }

        if(PI[playerid][stebuklas6] == 0)
        {
            strcat(String, "{ffffff}Ðeðtasis MetroCity.lt Stebuklas\n \n");
            strcat(String, "{ffffff}Kaþkada neþinomas þmogus sukûrë gyvybës eliksyrà, kuris leis jums\n");
            strcat(String, "{ffffff}gyventi ilgiau, o gal net amþinai! Taèiau niekas neþino kur tas\n");
            strcat(String, "{ffffff}þmogus paliko eliksyrà. Bet sklando gandai, kad kaþkas paskutinis\n");
            strcat(String, "{ffffff}kuris matë ðá þmogø matë já ant Egipto piramidës. Galbût jis ten\n");
            strcat(String, "{ffffff}ir paliko tà eliksyrà? Jûsø tikslas yra surasti eliksyrà. Suradus\n");
            strcat(String, "{ffffff}Suradus já gráþkite èia ir gausite kità MetroCity.lt Stebuklà.\n \n");
            strcat(String, "{ffffff}Sëkmës!");
            ShowPlayerDialogEx(playerid, 4590, DIALOG_STYLE_MSGBOX, "7 uliunø Stebuklai", String, "Uþdaryti", "");

            return 1;
        }

        if(PI[playerid][stebuklas7] == 0)
        {
            strcat(String, "{ffffff}Septintasis MetroCity.lt Stebuklas\n \n");
            strcat(String, "{ffffff}Ta pati ragana, kuri prieð mirtá paliko nuodingàjá viralà paliko\n");
            strcat(String, "{ffffff}dar ir savo kepuræ, kà tiksliai ði kepurë gali padaryti þmonëms\n");
            strcat(String, "{ffffff}neþinoma, taèiau neabëjojama, jog tai yra dar viena raganos iðdaiga\n");
            strcat(String, "{ffffff}kuri galëtø pakenkti þmonijai. Kaip sako raganà paþinojæ þmonës,\n");
            strcat(String, "{ffffff}ji gyveno Las-Venturas dykûmø namelyje, todël ten tikriausiai ir paliko\n");
            strcat(String, "{ffffff}savo kepuræ. Jûsø tikslas surasti ir sunaikinti ðià kepuræ.\n");
            strcat(String, "{ffffff}Suradus jà gráþkite èia ir gausite prizà, dël kurio stengëtes tiek laiko.\n \n");
            strcat(String, "{ffffff}Sëkmës!");
            ShowPlayerDialogEx(playerid, 4590, DIALOG_STYLE_MSGBOX, "7 uliunø Stebuklai", String, "Uþdaryti", "");
        }
        else
        {
            strcat(String, "{ffffff}Sveikiname, jus ávykdëte visus 7 MetroCity.lt Stebuklus!\n \n");
            strcat(String, "{ffffff}Spauskite \"Prizas\" norëdami atsiimti prizà.");
            ShowPlayerDialogEx(playerid, 4590, DIALOG_STYLE_MSGBOX, "7 uliunø Stebuklai", String, "Prizas", "");
        }

		return 1;
	}

	if(pickupid == PickupsInfo[Atstatymas])
	{
		new Masina1[64], Masina2[64], Masina3[64], String[300];

		if(PI[playerid][Transportas1] == -1)		Masina1 = "-";
		else												format(Masina1, sizeof(Masina1), "%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas1]) - 400]);

		if(PI[playerid][Transportas2] == -1)		Masina2 = "-";
		else												format(Masina2, sizeof(Masina2), "%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas2]) - 400]);

		if(!PI[playerid][TransportoSlotas])
		{
			format(String, sizeof(String), "1. %s\n2. %s", Masina1, Masina2);
			ShowPlayerDialogEx(playerid, MasinuPagrDialogas2, DIALOG_STYLE_LIST, "MetroCity.lt Garaþas", String, "Atstatyti", "Uþdaryti");
		}
		else
		{
			if(PI[playerid][Transportas3] == -1)	Masina3 = "-";
			else											format(Masina3, sizeof(Masina3), "%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas3]) - 400]);

			format(String, sizeof(String), "1. %s\n2. %s\n3. %s", Masina1, Masina2, Masina3);
			ShowPlayerDialogEx(playerid, MasinuPagrDialogas2, DIALOG_STYLE_LIST, "MetroCity.lt Garaþas", String, "Atstatyti", "Uþdaryti");
		}

		return 1;
	}

	if(pickupid == PickupsInfo[lAtstatymas])
	{
		new Masina1[64], Masina2[64], Masina3[64], String[300];

		if(PI[playerid][Transportas1] == -1)		Masina1 = "-";
		else												format(Masina1, sizeof(Masina1), "%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas1]) - 400]);

		if(PI[playerid][Transportas2] == -1)		Masina2 = "-";
		else												format(Masina2, sizeof(Masina2), "%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas2]) - 400]);

		if(!PI[playerid][TransportoSlotas])
		{
			format(String, sizeof(String), "1. %s\n2. %s", Masina1, Masina2);
			ShowPlayerDialogEx(playerid, MasinuPagrDialogas3, DIALOG_STYLE_LIST, "Laivø atstatymas", String, "Atstatyti", "Uþdaryti");
		}
		else
		{
			if(PI[playerid][Transportas3] == -1)	Masina3 = "-";
			else											format(Masina3, sizeof(Masina3), "%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas3]) - 400]);

			format(String, sizeof(String), "1. %s\n2. %s\n3. %s", Masina1, Masina2, Masina3);
			ShowPlayerDialogEx(playerid, MasinuPagrDialogas3, DIALOG_STYLE_LIST, "Laivø atstatymas", String, "Atstatyti", "Uþdaryti");
		}

		return 1;
	}

	if(PickupsInfo[LeduPickup][0] <= pickupid <= PickupsInfo[LeduPickup][sizeof(PickupsInfo[LeduPickup]) - 1])
	{
		ShowPlayerDialogEx(playerid, LeduPirkimoDialogas, DIALOG_STYLE_TABLIST_HEADERS, "Ledai", "Rûðis\tKaina\n1. Nykðtukas\t{FFAF00}$3\n2. Pols\t{FFAF00}$4\n3. Dadu\t{FFAF00}$2\n4. Baltija\t{FFAF00}$5", "Pasirinkti", "Uþdaryti");

		return 1;
	}

	if(PickupsInfo[HotdogPickup][0] <= pickupid <= PickupsInfo[HotdogPickup][sizeof(PickupsInfo[HotdogPickup]) - 1])
	{
		ShowPlayerDialogEx(playerid, HotDogPirkimoDialogas, DIALOG_STYLE_MSGBOX, "Hot-Dog'ai", "{ffffff}Hot-Dog'as kainuoja {FFAF00}$5{ffffff}.\n\n\tAr tikrai norite já nupirkti?", "Taip", "Ne");

		return 1;
	}

	if(PickupsInfo[FastFoodPickup][0] <= pickupid <= PickupsInfo[FastFoodPickup][sizeof(PickupsInfo[FastFoodPickup]) - 1])
	{
		ShowPlayerDialogEx(playerid, FastFoodPirkimoDialogas, DIALOG_STYLE_MSGBOX, "Makaronø sriuba", "{ffffff}Makaronø sriuba kainuoja {FFAF00}$10{ffffff}.\n\n\tAr tikrai norite jà nupirkti?", "Taip", "Ne");

		return 1;
	}

	if(PickupsInfo[BurgerShot][0] <= pickupid <= PickupsInfo[BurgerShot][sizeof(PickupsInfo[BurgerShot]) - 1])
	{
		ShowPlayerDialogEx(playerid, BurgerShotDialogas, DIALOG_STYLE_TABLIST_HEADERS, "Burger Shot",
		"Pasirinkimas\tKaina\n1. Sumuðtinis su sûriu ir bulvytës\t{FFAF00}$15\n2. Dvigubas sumuðtinis su sûriu ir bulvytës\t{FFAF00}$20\n3. Maþas BigMac kompleksas\t{FFAF00}$18\n\
		4. Didelis BigMac kompleksas\t{FFAF00}$22\n5. Viðtienos kepsneliai McNuggets\t{FFAF00}$13\n6. Sumuðtinis Big Tasty\t{FFAF00}$11\n7. Sumuðtinis Royal\t{FFAF00}$12", "Pirkti", "Uþdaryti");

		return 1;
	}

	if(PickupsInfo[CluckinBell][0] <= pickupid <= PickupsInfo[CluckinBell][sizeof(PickupsInfo[CluckinBell]) - 1])
	{
		ShowPlayerDialogEx(playerid, CluckinBellDialogas, DIALOG_STYLE_TABLIST_HEADERS, "Cluckin Bell",
		"Pasirinkimas\tKaina\n1. Sumuðtinis su sûriu ir bulvytës\t{FFAF00}$15\n2. Dvigubas sumuðtinis su sûriu ir bulvytës\t{FFAF00}$20\n3. Maþas keptø viðtienos blauzdeliø kompleksas\t{FFAF00}$17\n\
		4. Didelis keptø viðtienos blauzdeliø kompleksas\t{FFAF00}$21\n5. Keptø viðtienos blauzdeliø ir bulvyèiø kompleksas\t{FFAF00}$22\n6. McWrap suktinukas su viðtiena\t{FFAF00}$14\n7. Cezario salotos su traðkia viðtiena\t{FFAF00}$12", "Pirkti", "Uþdaryti");

		return 1;
	}

	if(PickupsInfo[Picerija][0] <= pickupid <= PickupsInfo[Picerija][sizeof(PickupsInfo[Picerija]) - 1])
	{
		ShowPlayerDialogEx(playerid, PicerijosDialogas, DIALOG_STYLE_TABLIST_HEADERS, "The Well Stacked Pizza",
		"Pasirinkimas\tKaina\n1. Studentø pica\t{FFAF00}$8\n2. Havajø pica\t{FFAF00}$11\n3. Italiðka pica\t{FFAF00}$16\n\
		4. Kaimiðka pica\t{FFAF00}$7\n5. Portobelo pica\t{FFAF00}$13\n6. Sicilieèiø pica\t{FFAF00}$12\n7. Ðefo specialioji pica\t{FFAF00}$22", "Pirkti", "Uþdaryti");

		return 1;
	}

	if(pickupid == PickupsInfo[GreitasIsejimas])
	{
		if(PI[playerid][JustDie] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gydomas, todël ið ligoninës galite iðeiti paprastai.");

		ShowPlayerDialogEx(playerid, LigoninesIsejimas, DIALOG_STYLE_MSGBOX, "Iðëjimas ið ligoninës", "{ffffff}Greitas iðëjimas ið ligoninës kainuoja {FFAF00}$500{ffffff}.\n\n\tAr norite iðeiti ið ligoninës anksèiau laiko?", "Taip", "Ne");

		return 1;
	}

	if(pickupid == PickupsInfo[Registracija])
	{
		ShowPlayerDialogEx(playerid, GarazasDialog, DIALOG_STYLE_TABLIST_HEADERS, "MetroCity.lt Garaþas", "Pasirinkimas\tKaina\n1. Uþregistruoti transportà\t{FFAF00}$600\n2. Apdrausti transportà\t{FFAF00}$1,500", "Pasirinkti", "Uþdaryti");

		return 1;
	}

	if(pickupid == PickupsInfo[TADujos][0])
	{
		new Medikai = 0;

		for(new p = 0; p < MAX_PLAYERS; p++)
		{
			if(IsPlayerConnected(p) && !PI[p][AFK_Stat])
			{
				switch(PI[p][specialybe])
				{
					case MECHANIKAI: Medikai ++;
				}
			}
		}

		if(Medikai > 2) return SendClientMessage(playerid, -1, "{ffffff} Serveryje yra mechanikø, praðome naudotis jø paslaugomis!");

		ShowPlayerDialogEx(playerid, PagrTAdialog, DIALOG_STYLE_MSGBOX,
		"MetroCity.lt Garaþas", "{ffffff}Ar tikrai norite montuoti dujø árangà kurios kaina {FFAF00}$1,200{ffffff}?", "Montuoti", "Uþdaryti");

		return 1;
	}

	if(pickupid == PickupsInfo[TADujos][1])
	{
		new Medikai = 0;

		for(new p = 0; p < MAX_PLAYERS; p++)
		{
			if(IsPlayerConnected(p) && !PI[p][AFK_Stat])
			{
				switch(PI[p][specialybe])
				{
					case MECHANIKAI: Medikai ++;
				}
			}
		}

		if(Medikai > 2) return SendClientMessage(playerid, -1, "{ffffff} Serveryje yra mechanikø, praðome naudotis jø paslaugomis!");

		ShowPlayerDialogEx(playerid, PagrTAdialog1, DIALOG_STYLE_MSGBOX,
		"MetroCity.lt Garaþas", "{ffffff}Ar tikrai norite atlikti techninæ apþiûrà kurios kaina {FFAF00}$550{ffffff}?", "Atlikti", "Uþdaryti");

		return 1;
	}

	if(pickupid == PickupsInfo[TransportoSalonas])
	{
		new String[128];
		PI[playerid][PasirinktaMasina] 	= 0;
		PI[playerid][KaPerka]			= 1;

		PI[playerid][SukurtaMasina] = CreateServerVehicle(SportinesMasinos[PI[playerid][PasirinktaMasina]][0], -1945.6490, 271.0439, 35.5445, 120.2910, random(126), random(126), -1);
		SetVehicleVirtualWorld(PI[playerid][SukurtaMasina], playerid + 1);

		VehicleInfo[PI[playerid][SukurtaMasina]][vNupirkta] = 2;

		SetPlayerVirtualWorld(playerid, playerid + 1);

	    SetPlayerCameraPos   (playerid, -1953.4459,272.9034,37.5290);
		SetPlayerCameraLookAt(playerid, -1945.6490, 271.0439, 35.5445);

		TogglePlayerControllable(playerid, false);
		ShowCarShopTextDraws	(playerid);
		TextDrawSetString 		(transporto_salonas_g[4], "masinu salonas");

		format(String, sizeof(String), "~r~-~w~ Pavadinimas: ~p~%s~r~ -~n~-~w~ kaina:~g~ $%s~r~ -~n~-~w~ numeris:~y~ %d/%d~r~ -",
		VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(SportinesMasinos[PI[playerid][PasirinktaMasina]][1]), PI[playerid][PasirinktaMasina] + 1, sizeof(SportinesMasinos));
		PlayerTextDrawSetString(playerid, transporto_salonas_p[playerid][0], String);

		return 1;
	}

	if(pickupid == PickupsInfo[MotocikluSalonas])
	{
		new String[128];
		PI[playerid][PasirinktaMasina] 	= 0;
		PI[playerid][KaPerka]			= 2;

		PI[playerid][SukurtaMasina] = CreateServerVehicle(Motociklai[PI[playerid][PasirinktaMasina]][0], -1946.1865, 266.0375, 40.5899, 90.0000, random(126), random(126), -1);
		SetVehicleVirtualWorld(PI[playerid][SukurtaMasina], playerid + 1);

		VehicleInfo[PI[playerid][SukurtaMasina]][vNupirkta] = 2;

		SetPlayerVirtualWorld(playerid, playerid + 1);

	    SetPlayerCameraPos   (playerid, -1949.4642,260.0727,43.1425);
		SetPlayerCameraLookAt(playerid, -1946.1865, 266.0375, 40.5899);

		TogglePlayerControllable(playerid, false);
		ShowCarShopTextDraws	(playerid);
		TextDrawSetString 		(transporto_salonas_g[4], "motociklu salonas");

		format(String, sizeof(String), "~r~-~w~ Pavadinimas: ~p~%s~r~ -~n~-~w~ kaina:~g~ $%s~r~ -~n~-~w~ numeris:~y~ %d/%d~r~ -",
		VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(Motociklai[PI[playerid][PasirinktaMasina]][1]), PI[playerid][PasirinktaMasina] + 1, sizeof(Motociklai));
		PlayerTextDrawSetString(playerid, transporto_salonas_p[playerid][0], String);

		return 1;
	}

	if(pickupid == PickupsInfo[LaivuSalonas])
	{
		new String[128];
		PI[playerid][PasirinktaMasina] 	= 0;
		PI[playerid][KaPerka]			= 3;

		PI[playerid][SukurtaMasina] = CreateServerVehicle(Laivai[PI[playerid][PasirinktaMasina]][0], -2983.6296, 494.5702, 0.1902, 0.0000, random(126), random(126), -1);
		SetVehicleVirtualWorld(PI[playerid][SukurtaMasina], playerid + 1);

		VehicleInfo[PI[playerid][SukurtaMasina]][vNupirkta] = 2;

		SetPlayerVirtualWorld(playerid, playerid + 1);

	    SetPlayerCameraPos   (playerid, -2997.5020,512.0856,10.5114);
		SetPlayerCameraLookAt(playerid, -2983.6296, 494.5702, 0.1902);

		TogglePlayerControllable(playerid, false);
		ShowCarShopTextDraws	(playerid);
		TextDrawSetString 		(transporto_salonas_g[4], "laivu parduotuve");

		format(String, sizeof(String), "~r~-~w~ Pavadinimas: ~p~%s~r~ -~n~-~w~ kaina:~g~ $%s~r~ -~n~-~w~ numeris:~y~ %d/%d~r~ -",
		VehicleNames[GetVehicleModel(PI[playerid][SukurtaMasina]) - 400], konvertuoti_pinigus(Laivai[PI[playerid][PasirinktaMasina]][1]), PI[playerid][PasirinktaMasina] + 1, sizeof(Laivai));
		PlayerTextDrawSetString(playerid, transporto_salonas_p[playerid][0], String);

		return 1;
	}

	if(pickupid == PickupsInfo[MasinosAtsiemimas])
	{
		ShowPlayerDialogEx(playerid, 5426, DIALOG_STYLE_MSGBOX, "KMA", "{ffffff}Transp. priemonës atsiëmimas kainuoja {FFAF00}$1,500{ffffff}. Jus turësite 1 minutæ atsiimti savo transp. priemonæ.\n\n\tAr norite jà atsiimti?", "Taip", "Ne");

		return 1;
	}

	if(pickupid == PickupsInfo[MobilePhoneShop])
	{
		new String[300];

		format(String, sizeof(String), "1. iPhone \t\t{FFAF00}$%s\n2. Samsung \t\t{FFAF00}$%s\n3. Nokia \t\t{FFAF00}$%s\n4. Sony \t\t\t{FFAF00}$%s\n5. Alcatel \t\t{FFAF00}$%s\n6. HTC \t\t\t{FFAF00}$%s\n \n7. Mobiliojo ryðio kortelës/sutartys",
		konvertuoti_pinigus(iPhonePrice), konvertuoti_pinigus(SamsungPrice), konvertuoti_pinigus(NokiaPrice), konvertuoti_pinigus(SonyPrice), konvertuoti_pinigus(AlcatelPrice), konvertuoti_pinigus(HTCPrice));
		ShowPlayerDialogEx(playerid, MainMobilePhoneShopDialog, DIALOG_STYLE_LIST, "Telefonø salonas", String, "Pasirinkti", "Uþdaryti");

		return 1;
	}

	if(pickupid == PickupsInfo[PizzaDelivery])
	{
		if(PI[playerid][specialybe] == 20)
		{
			if(PI[playerid][uniformd])
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
				{
					if(NesaPica[playerid] == 0)
					{
						NesaPica[playerid] = 1;

						for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i ++)
					    {
					        if(IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);
					    }

						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

						SetPlayerAttachedObject(playerid, PIZZA_ATTACH_SLOT, 1582, 1, -0.04, 0.491794, -0.005850, 0.000000, 87.603507, 0.654105, 1.000000, 1.000000, 1.000000);

						PicaCP[playerid] = false;

						SendClientMessage(playerid, -1, "{ffffff} Pasiemëte picà. Padëti/paimti jà galite paspaudæ mygtukà {FFAF00}N {ffffff}stovint prie motorolerio!");
					}
				}
			}
		}

		return 1;
	}

	if(pickupid == PickupsInfo[GunsPickup][0])
	{
		new GangID = GangMember(playerid);
		if(!ArVeikiaSandelis()) return SendClientMessage(playerid, -1, "{ffffff} Narkotikø/ginklø sandëlis veikia tik nuo 19:00 iki 20:00!");

		new String[216], RandomMoney = 40 + random(10);

		switch(PI[playerid][specialybe])
		{
			case 1, 5:
			{
				if(PI[playerid][gMember] == -1)
				{
					if(ShotgunBulletCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Sandelyje nëra ko naikinti!");

					if(PI[playerid][PasiemeShotgun] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 1 minutë nuo paskutinio karto, kai sunaikinote ginklà Shotgun!");

					if(ShotgunBulletCount < 150)
					{
						switch(PI[playerid][specialybe])
						{
							case 1: Pelnas[0] += RandomMoney;
							case 5: Pelnas[4] += RandomMoney;
						}

						format(String, sizeof(String), "{ffffff} Sunaikinote {FFAF00}%d {ffffff}Shotgun kulkø. Uþ tai á jûsø darbo pelnà buvo pervesta {FFAF00}$%d{ffffff}!", ShotgunBulletCount, RandomMoney);
						SendClientMessage(playerid, -1, String);

						ShotgunBulletCount = 0;

						//Shotgun
						format(String, sizeof(String), "Shotgun sandëlis\nYra kulkø: {FFAF00}%d/10000", ShotgunBulletCount);
						Update3DTextLabelText(GunsLabel[0], -1, String);

						PI[playerid][PasiemeShotgun] = gettime() + 60;

						return 1;
					}

					ShotgunBulletCount -= 150;

					switch(PI[playerid][specialybe])
					{
						case 1: Pelnas[0] += RandomMoney;
						case 5: Pelnas[4] += RandomMoney;
					}

					format(String, sizeof(String), "{ffffff} Sunaikinote {FFAF00}150 {ffffff}Shotgun kulkø. Uþ tai á jûsø darbo pelnà buvo pervesta {FFAF00}$%d{ffffff}!", RandomMoney);
					SendClientMessage(playerid, -1, String);

					//Shotgun
					format(String, sizeof(String), "Shotgun sandëlis\nYra kulkø: {FFAF00}%d/10000", ShotgunBulletCount);
					Update3DTextLabelText(GunsLabel[0], -1, String);

					PI[playerid][PasiemeShotgun] = gettime() + 60;
				}
			}

			default:
			{
				if(PI[playerid][gMember] != -1)
				{
					if(ShotgunBulletCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Sandelyje nëra ginklo Shotgun!");

					if(PI[playerid][PasiemeShotgun] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 1 minutë nuo paskutinio karto, kai pasiëmëte ginklà Shotgun!");

					if(ShotgunBulletCount < 100)
					{
						//ac_GivePlayerWeapon(playerid, 25, ShotgunBulletCount);

						format(String, sizeof(String), "{ffffff} Pasidëjote á gaujos sandëlá ginklo Shotgun {FFAF00}%d {ffffff}kulkø!", ShotgunBulletCount);
						SendClientMessage(playerid, -1, String);

						ShotgunBulletCount = 0;

						//Shotgun
						format(String, sizeof(String), "Shotgun sandëlis\nYra kulkø: {FFAF00}%d/10000", ShotgunBulletCount);
						Update3DTextLabelText(GunsLabel[0], -1, String);

						PI[playerid][PasiemeShotgun] = gettime() + 60;

						GangInfo[GangID][Ginklai1] += ShotgunBulletCount;

						format(String, sizeof(String), "UPDATE `gaujuinfo` SET `Ginklai1` = '%d' WHERE `ID` = '%d'", GangInfo[PI[playerid][gMember]][Ginklai1], PI[playerid][gMember]);
						mysql_query(String);

						return 1;
					}

					//ac_GivePlayerWeapon(playerid, 25, 100);

					ShotgunBulletCount -= 100;

					SendClientMessage(playerid, -1, "{ffffff} Pasidëjote á gaujos sandëlá ginklo Shotgun {FFAF00}100 {ffffff}kulkø!");

					//Shotgun
					format(String, sizeof(String), "Shotgun sandëlis\nYra kulkø: {FFAF00}%d/10000", ShotgunBulletCount);
					Update3DTextLabelText(GunsLabel[0], -1, String);

					PI[playerid][PasiemeShotgun] = gettime() + 60;

					GangInfo[GangID][Ginklai1] += 100;

					format(String, sizeof(String), "UPDATE `gaujuinfo` SET `Ginklai1` = '%d' WHERE `ID` = '%d'", GangInfo[PI[playerid][gMember]][Ginklai1], PI[playerid][gMember]);
					mysql_query(String);
				}
			}
		}

		return 1;
	}

	if(pickupid == PickupsInfo[GunsPickup][1])
	{
		new GangID = GangMember(playerid);
		if(!ArVeikiaSandelis()) return SendClientMessage(playerid, -1, "{ffffff} Narkotikø/ginklø sandëlis veikia tik nuo 19:00 iki 20:00!");

		new String[216], RandomMoney = 40 + random(10);

		switch(PI[playerid][specialybe])
		{
			case 1, 5:
			{
				if(PI[playerid][gMember] == -1)
				{
					if(Ak47BulletCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Sandelyje nëra ko naikinti!");

					if(PI[playerid][PasiemeAk47] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 1 minutë nuo paskutinio karto, kai sunaikinote ginklà AK-47!");

					if(Ak47BulletCount < 200)
					{
						switch(PI[playerid][specialybe])
						{
							case 1: Pelnas[0] += RandomMoney;
							case 5: Pelnas[4] += RandomMoney;
						}

						format(String, sizeof(String), "{ffffff} Sunaikinote {FFAF00}%d {ffffff}AK-47 kulkø. Uþ tai á jûsø darbo pelnà buvo pervesta {FFAF00}$%d{ffffff}!", Ak47BulletCount, RandomMoney);
						SendClientMessage(playerid, -1, String);

						Ak47BulletCount = 0;

						//AK-47
						format(String, sizeof(String), "AK-47 sandëlis\nYra kulkø: {FFAF00}%d/10000", Ak47BulletCount);
						Update3DTextLabelText(GunsLabel[1], -1, String);

						PI[playerid][PasiemeAk47] = gettime() + 60;

						return 1;
					}

					Ak47BulletCount -= 200;

					switch(PI[playerid][specialybe])
					{
						case 1: Pelnas[0] += RandomMoney;
						case 5: Pelnas[4] += RandomMoney;
					}

					format(String, sizeof(String), "{ffffff} Sunaikinote {FFAF00}200 {ffffff}AK-47 kulkø. Uþ tai á jûsø darbo pelnà buvo pervesta {FFAF00}$%d{ffffff}!", RandomMoney);
					SendClientMessage(playerid, -1, String);

					//AK-47
					format(String, sizeof(String), "AK-47 sandëlis\nYra kulkø: {FFAF00}%d/10000", Ak47BulletCount);
					Update3DTextLabelText(GunsLabel[1], -1, String);

					PI[playerid][PasiemeAk47] = gettime() + 60;
				}
			}

			default:
			{
				if(PI[playerid][gMember] != -1)
				{
					if(Ak47BulletCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Sandelyje nëra ginklo AK-47!");

					if(PI[playerid][PasiemeAk47] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 1 minutë nuo paskutinio karto, kai pasiëmëte ginklà Ak-47!");

					if(Ak47BulletCount < 200)
					{
						//ac_GivePlayerWeapon(playerid, 25, Ak47BulletCount);

						format(String, sizeof(String), "{ffffff} Pasidëjote á gaujos sandëlá ginklo Ak-47 {FFAF00}%d {ffffff}kulkø!", Ak47BulletCount);
						SendClientMessage(playerid, -1, String);

						Ak47BulletCount = 0;

						//AK-47
						format(String, sizeof(String), "AK-47 sandëlis\nYra kulkø: {FFAF00}%d/10000", Ak47BulletCount);
						Update3DTextLabelText(GunsLabel[1], -1, String);

						PI[playerid][PasiemeAk47] = gettime() + 60;

						GangInfo[GangID][Ginklai2] += Ak47BulletCount;

						format(String, sizeof(String), "UPDATE `gaujuinfo` SET `Ginklai2` = '%d' WHERE `ID` = '%d'", GangInfo[PI[playerid][gMember]][Ginklai2], PI[playerid][gMember]);
						mysql_query(String);

						return 1;
					}

					//ac_GivePlayerWeapon(playerid, 30, 200);

					Ak47BulletCount -= 200;

					SendClientMessage(playerid, -1, "{ffffff} Pasidëjote á gaujos sandëlá ginklo AK-47 {FFAF00}200 {ffffff}kulkø!");

					//AK-47
					format(String, sizeof(String), "AK-47 sandëlis\nYra kulkø: {FFAF00}%d/10000", Ak47BulletCount);
					Update3DTextLabelText(GunsLabel[1], -1, String);

					PI[playerid][PasiemeAk47] = gettime() + 60;

					GangInfo[GangID][Ginklai2] += 200;

					format(String, sizeof(String), "UPDATE `gaujuinfo` SET `Ginklai2` = '%d' WHERE `ID` = '%d'", GangInfo[PI[playerid][gMember]][Ginklai2], PI[playerid][gMember]);
					mysql_query(String);
				}
			}
		}

		return 1;
	}

	if(pickupid == PickupsInfo[GunsPickup][2])
	{
		new GangID = GangMember(playerid);
		if(!ArVeikiaSandelis()) return SendClientMessage(playerid, -1, "{ffffff} Narkotikø/ginklø sandëlis veikia tik nuo 19:00 iki 20:00!");

		new String[216], RandomMoney = 40 + random(10);

		switch(PI[playerid][specialybe])
		{
			case 1, 5:
			{
				if(PI[playerid][gMember] == -1)
				{
					if(DeagleBulletCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Sandelyje nëra ko naikinti!");

					if(PI[playerid][PasiemeDeagle] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 1 minutë nuo paskutinio karto, kai sunaikinote ginklà Deagle!");

					if(DeagleBulletCount < 100)
					{
						switch(PI[playerid][specialybe])
						{
							case 1: Pelnas[0] += RandomMoney;
							case 5: Pelnas[4] += RandomMoney;
						}

						format(String, sizeof(String), "{ffffff} Sunaikinote {FFAF00}%d {ffffff}Deagle kulkø. Uþ tai á jûsø darbo pelnà buvo pervesta {FFAF00}$%d{ffffff}!", DeagleBulletCount, RandomMoney);
						SendClientMessage(playerid, -1, String);

						DeagleBulletCount = 0;

						//Deagle
						format(String, sizeof(String), "Deagle sandëlis\nYra kulkø: {FFAF00}%d/10000", DeagleBulletCount);
						Update3DTextLabelText(GunsLabel[2], -1, String);

						PI[playerid][PasiemeDeagle] = gettime() + 60;

						return 1;
					}

					DeagleBulletCount -= 100;

					switch(PI[playerid][specialybe])
					{
						case 1: Pelnas[0] += RandomMoney;
						case 5: Pelnas[4] += RandomMoney;
					}

					format(String, sizeof(String), "{ffffff} Sunaikinote {FFAF00}100 {ffffff}Deagle kulkø. Uþ tai á jûsø darbo pelnà buvo pervesta {FFAF00}$%d{ffffff}!", RandomMoney);
					SendClientMessage(playerid, -1, String);

					//Deagle
					format(String, sizeof(String), "Deagle sandëlis\nYra kulkø: {FFAF00}%d/10000", DeagleBulletCount);
					Update3DTextLabelText(GunsLabel[2], -1, String);

					PI[playerid][PasiemeDeagle] = gettime() + 60;
				}
			}

			default:
			{
				if(PI[playerid][gMember] != -1)
				{
					if(DeagleBulletCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Sandelyje nëra ginklo Deagle!");

					if(PI[playerid][PasiemeDeagle] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 1 minutë nuo paskutinio karto, kai pasiëmëte ginklà Deagle!");

					if(DeagleBulletCount < 50)
					{
						//ac_GivePlayerWeapon(playerid, 25, DeagleBulletCount);

						format(String, sizeof(String), "{ffffff} Pasidëjote á gaujos sandëlá ginklo Deagle {FFAF00}%d {ffffff}kulkø!", DeagleBulletCount);
						SendClientMessage(playerid, -1, String);

						DeagleBulletCount = 0;

						//Deagle
						format(String, sizeof(String), "Deagle sandëlis\nYra kulkø: {FFAF00}%d/10000", DeagleBulletCount);
						Update3DTextLabelText(GunsLabel[2], -1, String);

						PI[playerid][PasiemeDeagle] = gettime() + 60;

						GangInfo[GangID][Ginklai3] += DeagleBulletCount;

						format(String, sizeof(String), "UPDATE `gaujuinfo` SET `Ginklai3` = '%d' WHERE `ID` = '%d'", GangInfo[PI[playerid][gMember]][Ginklai3], PI[playerid][gMember]);
						mysql_query(String);

						return 1;
					}

					//ac_GivePlayerWeapon(playerid, 25, 100);

					DeagleBulletCount -= 50;

					SendClientMessage(playerid, -1, "{ffffff} Pasidëjote á gaujos sandëlá ginklo Deagle {FFAF00}50 {ffffff}kulkø!");

					//Deagle
					format(String, sizeof(String), "Deagle sandëlis\nYra kulkø: {FFAF00}%d/10000", DeagleBulletCount);
					Update3DTextLabelText(GunsLabel[2], -1, String);

					PI[playerid][PasiemeDeagle] = gettime() + 60;

					GangInfo[GangID][Ginklai3] += 50;

					format(String, sizeof(String), "UPDATE `gaujuinfo` SET `Ginklai3` = '%d' WHERE `ID` = '%d'", GangInfo[PI[playerid][gMember]][Ginklai3], PI[playerid][gMember]);
					mysql_query(String);
				}
			}
		}

		return 1;
	}

	if(pickupid == PickupsInfo[DrugsPickup][0])
	{
		new GangID = GangMember(playerid);
		if(!ArVeikiaSandelis()) return SendClientMessage(playerid, -1, "{ffffff} Narkotikø/ginklø sandëlis veikia tik nuo 19:00 iki 20:00!");

		new String[216], RandomMoney = 40 + random(10);

		switch(PI[playerid][specialybe])
		{
			case 1, 5:
			{
				if(PI[playerid][gMember] == -1)
				{
					if(PI[playerid][uniformd] == false) return SendClientMessage(playerid, -1, "{ffffff} Narkotikus naikinti galima tik su uniforma!");

					if(HeroineDoseCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Sandelyje nëra ko naikinti!");

					if(PI[playerid][PasiemeHeroina] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 1 minutë nuo paskutinio karto, kai sunaikinote heroinà!");

					if(HeroineDoseCount < 20)
					{
						switch(PI[playerid][specialybe])
						{
							case 1: Pelnas[0] += RandomMoney;
							case 5: Pelnas[4] += RandomMoney;
						}
						
						format(String, sizeof(String), "{ffffff} Sunaikinote {FFAF00}%d {ffffff}ml heroino. Uþ tai á jûsø darbo pelnà buvo pervesta {FFAF00}$%d{ffffff}!", HeroineDoseCount, RandomMoney);
						SendClientMessage(playerid, -1, String);

						HeroineDoseCount = 0;

						//Heroinas
						format(String, sizeof(String), "Heroino sandëlis\nYra: {FFAF00}%d/1000 {ffffff}ml", HeroineDoseCount);
						Update3DTextLabelText(DrugsLabel[0], -1, String);

						PI[playerid][PasiemeHeroina] = gettime() + 60;

						return 1;
					}

					HeroineDoseCount -= 20;

					switch(PI[playerid][specialybe])
					{
						case 1: Pelnas[0] += RandomMoney;
						case 5: Pelnas[4] += RandomMoney;
					}

					format(String, sizeof(String), "{ffffff} Sunaikinote {FFAF00}20 {ffffff}ml heroino. Uþ tai á jûsø darbo pelnà buvo pervesta {FFAF00}$%d{ffffff}!", RandomMoney);
					SendClientMessage(playerid, -1, String);

					//Heroinas
					format(String, sizeof(String), "Heroino sandëlis\nYra: {FFAF00}%d/1000 {ffffff}ml", HeroineDoseCount);
					Update3DTextLabelText(DrugsLabel[0], -1, String);

					PI[playerid][PasiemeHeroina] = gettime() + 60;
				}
			}

			default:
			{
				if(PI[playerid][gMember] != -1)
				{
					if(HeroineDoseCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Sandelyje nëra heroino!");

					if(PI[playerid][PasiemeHeroina] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 1 minutë nuo paskutinio karto, kai pasiëmëte heroinà!");

					if(HeroineDoseCount < 10)
					{
						PI[playerid][Heroinas] += HeroineDoseCount;

						format(String, sizeof(String), "{ffffff} Pasidëjote á gaujos sandëlá {FFAF00}%d {ffffff}ml heroino!", HeroineDoseCount);
						SendClientMessage(playerid, -1, String);

						HeroineDoseCount = 0;

						//Heroinas
						format(String, sizeof(String), "Heroino sandëlis\nYra: {FFAF00}%d/1000 {ffffff}ml", HeroineDoseCount);
						Update3DTextLabelText(DrugsLabel[0], -1, String);

						PI[playerid][PasiemeHeroina] = gettime() + 60;

						GangInfo[GangID][Narkai1] += HeroineDoseCount;

						format(String, sizeof(String), "UPDATE `gaujuinfo` SET `Narkai1` = '%d' WHERE `ID` = '%d'", GangInfo[PI[playerid][gMember]][Narkai1], PI[playerid][gMember]);
						mysql_query(String);

						return 1;
					}

					PI[playerid][Heroinas] += 10;

					HeroineDoseCount -= 10;

					SendClientMessage(playerid, -1, "{ffffff} Pasidëjote á gaujos sandëlá {FFAF00}10 {ffffff}ml heroino!");

					//Heroinas
					format(String, sizeof(String), "Heroino sandëlis\nYra: {FFAF00}%d/1000 {ffffff}ml", HeroineDoseCount);
					Update3DTextLabelText(DrugsLabel[0], -1, String);

					PI[playerid][PasiemeHeroina] = gettime() + 60;

					GangInfo[GangID][Narkai1] += 10;

					format(String, sizeof(String), "UPDATE `gaujuinfo` SET `Narkai1` = '%d' WHERE `ID` = '%d'", GangInfo[PI[playerid][gMember]][Narkai1], PI[playerid][gMember]);
					mysql_query(String);
				}
			}
		}

		return 1;
	}

	if(pickupid == PickupsInfo[DrugsPickup][1])
	{
		new GangID = GangMember(playerid);
		if(!ArVeikiaSandelis()) return SendClientMessage(playerid, -1, "{ffffff} Narkotikø/ginklø sandëlis veikia tik nuo 19:00 iki 20:00!");

		new String[216], RandomMoney = 40 + random(10);

		switch(PI[playerid][specialybe])
		{
			case 1, 5:
			{
				if(PI[playerid][gMember] == -1)
				{
					if(PI[playerid][uniformd] == false) return SendClientMessage(playerid, -1, "{ffffff} Narkotikus naikinti galima tik su uniforma!");

					if(CocaineDoseCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Sandelyje nëra ko naikinti!");

					if(PI[playerid][PasiemeKokaina] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 1 minutë nuo paskutinio karto, kai sunaikinote kokainà!");

					if(CocaineDoseCount < 20)
					{
						switch(PI[playerid][specialybe])
						{
							case 1: Pelnas[0] += RandomMoney;
							case 5: Pelnas[4] += RandomMoney;
						}
						
						format(String, sizeof(String), "{ffffff} Sunaikinote {FFAF00}%d {ffffff}mg kokaino. Uþ tai á jûsø darbo pelnà buvo pervesta {FFAF00}$%d{ffffff}!", CocaineDoseCount, RandomMoney);
						SendClientMessage(playerid, -1, String);

						CocaineDoseCount = 0;

						//Kokainas
						format(String, sizeof(String), "Kokaino sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", CocaineDoseCount);
						Update3DTextLabelText(DrugsLabel[1], -1, String);

						PI[playerid][PasiemeKokaina] = gettime() + 60;

						return 1;
					}

					CocaineDoseCount -= 20;

					switch(PI[playerid][specialybe])
					{
						case 1: Pelnas[0] += RandomMoney;
						case 5: Pelnas[4] += RandomMoney;
					}

					format(String, sizeof(String), "{ffffff} Sunaikinote {FFAF00}20 {ffffff}mg kokaino. Uþ tai á jûsø darbo pelnà buvo pervesta {FFAF00}$%d{ffffff}!", RandomMoney);
					SendClientMessage(playerid, -1, String);

					//Kokainas
					format(String, sizeof(String), "Kokaino sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", CocaineDoseCount);
					Update3DTextLabelText(DrugsLabel[1], -1, String);

					PI[playerid][PasiemeKokaina] = gettime() + 60;
				}
			}

			default:
			{
				if(PI[playerid][gMember] != -1)
				{
					if(CocaineDoseCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Sandelyje nëra kokaino!");

					if(PI[playerid][PasiemeKokaina] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 1 minutë nuo paskutinio karto, kai pasiëmëte kokainà!");

					if(CocaineDoseCount < 10)
					{
						PI[playerid][Kokainas] += CocaineDoseCount;

						format(String, sizeof(String), "{ffffff} Pasidëjote á gaujos sandëlá {FFAF00}%d {ffffff}mg kokaino!", CocaineDoseCount);
						SendClientMessage(playerid, -1, String);

						CocaineDoseCount = 0;

						//Kokainas
						format(String, sizeof(String), "Kokaino sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", CocaineDoseCount);
						Update3DTextLabelText(DrugsLabel[1], -1, String);

						PI[playerid][PasiemeKokaina] = gettime() + 60;

						GangInfo[GangID][Narkai2] += CocaineDoseCount;

						format(String, sizeof(String), "UPDATE `gaujuinfo` SET `Narkai2` = '%d' WHERE `ID` = '%d'", GangInfo[PI[playerid][gMember]][Narkai2], PI[playerid][gMember]);
						mysql_query(String);

						return 1;
					}

					PI[playerid][Kokainas] += 10;

					CocaineDoseCount -= 10;

					SendClientMessage(playerid, -1, "{ffffff} Pasidëjote á gaujos sandëlá {FFAF00}10 {ffffff}mg kokaino!");

					//Kokainas
					format(String, sizeof(String), "Kokaino sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", CocaineDoseCount);
					Update3DTextLabelText(DrugsLabel[1], -1, String);

					PI[playerid][PasiemeKokaina] = gettime() + 60;

					GangInfo[GangID][Narkai2] += 10;

					format(String, sizeof(String), "UPDATE `gaujuinfo` SET `Narkai2` = '%d' WHERE `ID` = '%d'", GangInfo[PI[playerid][gMember]][Narkai2], PI[playerid][gMember]);
					mysql_query(String);
				}
			}
		}

		return 1;
	}

	if(pickupid == PickupsInfo[DrugsPickup][2])
	{
		new GangID = GangMember(playerid);
		if(!ArVeikiaSandelis()) return SendClientMessage(playerid, -1, "{ffffff} Narkotikø/ginklø sandëlis veikia tik nuo 19:00 iki 20:00!");

		new String[216], RandomMoney = 40 + random(10);

		switch(PI[playerid][specialybe])
		{
			case 1, 5:
			{
				if(PI[playerid][gMember] == -1)
				{
					if(PI[playerid][uniformd] == false) return SendClientMessage(playerid, -1, "{ffffff} Narkotikus naikinti galima tik su uniforma!");

					if(WeedDoseCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Sandelyje nëra ko naikinti!");

					if(PI[playerid][PasiemeZole] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 1 minutë nuo paskutinio karto, kai sunaikinote þolæ!");

					if(WeedDoseCount < 20)
					{
						switch(PI[playerid][specialybe])
						{
							case 1: Pelnas[0] += RandomMoney;
							case 5: Pelnas[4] += RandomMoney;
						}
						
						format(String, sizeof(String), "{ffffff} Sunaikinote {FFAF00}%d {ffffff}mg þolës. Uþ tai á jûsø darbo pelnà buvo pervesta {FFAF00}$%d{ffffff}!", WeedDoseCount, RandomMoney);
						SendClientMessage(playerid, -1, String);

						WeedDoseCount = 0;

						//Þolë
						format(String, sizeof(String), "Þolës sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", WeedDoseCount);
						Update3DTextLabelText(DrugsLabel[2], -1, String);

						PI[playerid][PasiemeZole] = gettime() + 60;

						return 1;
					}

					WeedDoseCount -= 20;

					switch(PI[playerid][specialybe])
					{
						case 1: Pelnas[0] += RandomMoney;
						case 5: Pelnas[4] += RandomMoney;
					}

					format(String, sizeof(String), "{ffffff} Sunaikinote {FFAF00}20 {ffffff}mg þolës. Uþ tai á jûsø darbo pelnà buvo pervesta {FFAF00}$%d{ffffff}!", RandomMoney);
					SendClientMessage(playerid, -1, String);

					//Þolë
					format(String, sizeof(String), "Þolës sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", WeedDoseCount);
					Update3DTextLabelText(DrugsLabel[2], -1, String);

					PI[playerid][PasiemeZole] = gettime() + 60;
				}
			}

			default:
			{
				if(PI[playerid][gMember] != -1)
				{
					if(WeedDoseCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Sandelyje nëra þolës!");

					if(PI[playerid][PasiemeZole] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 1 minutë nuo paskutinio karto, kai pasiëmëte þolæ!");

					if(WeedDoseCount < 10)
					{
						PI[playerid][Weed] += WeedDoseCount;

						format(String, sizeof(String), "{ffffff} Pasidëjote á gaujos sandëlá {FFAF00}%d {ffffff}mg þolës!", WeedDoseCount);
						SendClientMessage(playerid, -1, String);

						WeedDoseCount = 0;

						//Þolë
						format(String, sizeof(String), "Þolës sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", WeedDoseCount);
						Update3DTextLabelText(DrugsLabel[2], -1, String);

						PI[playerid][PasiemeZole] = gettime() + 60;

						GangInfo[GangID][Narkai3] += WeedDoseCount;

						format(String, sizeof(String), "UPDATE `gaujuinfo` SET `Narkai3` = '%d' WHERE `ID` = '%d'", GangInfo[PI[playerid][gMember]][Narkai3], PI[playerid][gMember]);
						mysql_query(String);

						return 1;
					}

					PI[playerid][Weed] += 10;

					WeedDoseCount -= 10;

					SendClientMessage(playerid, -1, "{ffffff} Pasidëjote á gaujos sandëlá {FFAF00}10 {ffffff}mg þolës!");

					//Þolë
					format(String, sizeof(String), "Þolës sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", WeedDoseCount);
					Update3DTextLabelText(DrugsLabel[2], -1, String);

					PI[playerid][PasiemeZole] = gettime() + 60;

					GangInfo[GangID][Narkai3] += 10;

					format(String, sizeof(String), "UPDATE `gaujuinfo` SET `Narkai3` = '%d' WHERE `ID` = '%d'", GangInfo[PI[playerid][gMember]][Narkai3], PI[playerid][gMember]);
					mysql_query(String);
				}
			}
		}

		return 1;
	}

	if(pickupid == PickupsInfo[DrugsPickup][3])
	{
		new GangID = GangMember(playerid);
		if(!ArVeikiaSandelis()) return SendClientMessage(playerid, -1, "{ffffff} Narkotikø/ginklø sandëlis veikia tik nuo 19:00 iki 20:00!");

		new String[216], RandomMoney = 40 + random(10);

		switch(PI[playerid][specialybe])
		{
			case 1, 5:
			{
				if(PI[playerid][gMember] == -1)
				{
					if(PI[playerid][uniformd] == false) return SendClientMessage(playerid, -1, "{ffffff} Narkotikus naikinti galima tik su uniforma!");

					if(EkstaziDoseCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Sandelyje nëra ko naikinti!");

					if(PI[playerid][PasiemeEkstazi] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 1 minutë nuo paskutinio karto, kai sunaikinote ekstazá!");

					if(EkstaziDoseCount < 20)
					{
						switch(PI[playerid][specialybe])
						{
							case 1: Pelnas[0] += RandomMoney;
							case 5: Pelnas[4] += RandomMoney;
						}

						format(String, sizeof(String), "{ffffff} Sunaikinote {FFAF00}%d {ffffff}mg ekstazi. Uþ tai á jûsø darbo pelnà buvo pervesta {FFAF00}$%d{ffffff}!", EkstaziDoseCount, RandomMoney);
						SendClientMessage(playerid, -1, String);

						EkstaziDoseCount = 0;

						//Ekstazi
						format(String, sizeof(String), "Ekstazi sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", EkstaziDoseCount);
						Update3DTextLabelText(DrugsLabel[3], -1, String);

						PI[playerid][PasiemeEkstazi] = gettime() + 60;

						return 1;
					}

					EkstaziDoseCount -= 20;

					switch(PI[playerid][specialybe])
					{
						case 1: Pelnas[0] += RandomMoney;
						case 5: Pelnas[4] += RandomMoney;
					}

					format(String, sizeof(String), "{ffffff} Sunaikinote {FFAF00}20 {ffffff}mg ekstazi. Uþ tai á jûsø darbo pelnà buvo pervesta {FFAF00}$%d{ffffff}!", RandomMoney);
					SendClientMessage(playerid, -1, String);

					//Ekstazi
					format(String, sizeof(String), "Ekstazi sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", EkstaziDoseCount);
					Update3DTextLabelText(DrugsLabel[3], -1, String);

					PI[playerid][PasiemeEkstazi] = gettime() + 60;
				}
			}

			default:
			{
				if(PI[playerid][gMember] != -1)
				{
					if(EkstaziDoseCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Sandelyje nëra ekstazi!");

					if(PI[playerid][PasiemeEkstazi] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 1 minutë nuo paskutinio karto, kai pasiëmëte ekstazá!");

					if(EkstaziDoseCount < 10)
					{
						PI[playerid][Ekstazi] += EkstaziDoseCount;

						format(String, sizeof(String), "{ffffff} Pasidëjote á gaujos sandëlá {FFAF00}%d {ffffff}mg ekstazi!", EkstaziDoseCount);
						SendClientMessage(playerid, -1, String);

						EkstaziDoseCount = 0;

						//Ekstazi
						format(String, sizeof(String), "Ekstazi sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", EkstaziDoseCount);
						Update3DTextLabelText(DrugsLabel[3], -1, String);

						PI[playerid][PasiemeEkstazi] = gettime() + 60;

						GangInfo[GangID][Narkai4] += EkstaziDoseCount;

						format(String, sizeof(String), "UPDATE `gaujuinfo` SET `Narkai4` = '%d' WHERE `ID` = '%d'", GangInfo[PI[playerid][gMember]][Narkai4], PI[playerid][gMember]);
						mysql_query(String);

						return 1;
					}

					PI[playerid][Ekstazi] += 10;

					EkstaziDoseCount -= 10;

					SendClientMessage(playerid, -1, "{ffffff} Pasidëjote á gaujos sandëlá {FFAF00}10 {ffffff}mg ekstazi!");

					//Ekstazi
					format(String, sizeof(String), "Ekstazi sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", EkstaziDoseCount);
					Update3DTextLabelText(DrugsLabel[3], -1, String);

					PI[playerid][PasiemeEkstazi] = gettime() + 60;

					GangInfo[GangID][Narkai4] += 10;

					format(String, sizeof(String), "UPDATE `gaujuinfo` SET `Narkai4` = '%d' WHERE `ID` = '%d'", GangInfo[PI[playerid][gMember]][Narkai4], PI[playerid][gMember]);
					mysql_query(String);
				}
			}
		}

		return 1;
	}

	if(pickupid == PickupsInfo[TreniruociuZona])
	{
		if(PI[playerid][specialybe] == 1 || PI[playerid][specialybe] == 5)
		{
			//ac_GivePlayerWeapon(playerid, 24, 300);
			ac_GivePlayerWeapon(playerid, 25, 300);
			ac_GivePlayerWeapon(playerid, 29, 300);
			ac_GivePlayerWeapon(playerid, 31, 300);
		}

		return 1;
	}

	if(pickupid == PickupsInfo[DrabuziuPirkimas])
	{
		new String[256];

		if(PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Pirmiausia nusivilkite darbinius drabuþius!");

		SelectedSkin[playerid] = 0;

		format(String, sizeof(String), "~w~Numeris: ~g~%d/%d~n~~w~Kaina: ~g~$%d~n~Norint iseiti: ~y~/baigti", SelectedSkin[playerid] + 1, TotalClothesShopSkins, ClothesShopSkinPrices[SelectedSkin[playerid]]);
		ShowInfoText(playerid, String, 10000, false);

		SetPlayerInterior       (playerid, 15);
		AC_SetPlayerPos            (playerid, 218.6656, -98.5581, 1005.2578);
		SetPlayerFacingAngle    (playerid, 90.000);
		SetPlayerCameraPos      (playerid, 213.8421, -98.5443, 1006.0427);
		SetPlayerCameraLookAt   (playerid, 218.6656, -98.5581, 1005.2578);
		TogglePlayerControllable(playerid, false);

		SetPlayerSkin        (playerid, ClothesShopSkins[SelectedSkin[playerid]]);
		SetPlayerVirtualWorld(playerid, playerid + 1);

		ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "{ffffff}Drabuþiø parduotuvë", "{ffffff}\tDrabuþiø parduotuvës valdymas:\n\nNorint pakeisti drabuþius spausti {FFAF00}6 {ffffff}ir {FFAF00}4 {ffffff} arba (Y ir H) mygtukus\nNorint pirki drabuþius spausti mygtukà {FFAF00}Space", "Uþdaryti", "");
		return 1;
	}

	if(pickupid == PickupsInfo[GaujosDrabuziuPirkimas])
	{
		new String[256];

		if(PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Pirmiausia nusivilkite darbinius drabuþius!");

		SelectedGangSkin[playerid] = 0;

		format(String, sizeof(String), "~w~Numeris: ~g~%d/%d~n~~w~Kaina: ~g~$%d~n~Norint iseiti: ~y~/baigti", SelectedGangSkin[playerid] + 1, GangTotalClothesShopSkins, GangClothesShopSkinPrices[SelectedGangSkin[playerid]]);
		ShowInfoText(playerid, String, 10000, false);

		//SetPlayerInterior       (playerid, 15);
		AC_SetPlayerPos         (playerid, -2087.4241,81.7659,35.3479);
		SetPlayerFacingAngle    (playerid, 0.000);
		SetPlayerCameraPos      (playerid, -2087.3430,85.5552,35.4918);
		SetPlayerCameraLookAt   (playerid, -2087.4241,81.7659,35.3479);
		TogglePlayerControllable(playerid, false);

		SetPlayerSkin        (playerid, GangClothesShopSkins[SelectedGangSkin[playerid]]);
		SetPlayerVirtualWorld(playerid, playerid + 1);

		ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "{ffffff}Drabuþiø parduotuvë", "{ffffff}\tDrabuþiø parduotuvës valdymas:\n\nNorint pakeisti drabuþius spausti {FFAF00}6 {ffffff}ir {FFAF00}4 {ffffff} arba (Y ir H) mygtukus\nNorint pirki drabuþius spausti mygtukà {FFAF00}Space", "Uþdaryti", "");
		return 1;
	}

	if(pickupid == PickupsInfo[AkiniuPirkimas])
	{
		return ShowPlayerDialogEx(playerid, GlassesShopDialog, DIALOG_STYLE_LIST, "{ffffff}Akiniø parduotuvë", "{ffffff}1. Akiniai Common raudoni\n2. Akiniai Common oranþiniai\n3. Akiniai Common þali\n4. Akiniai Common melyni\n\n5. Akiniai Common Transparent\n6. Akiniai Common X-Ray\n7. Akiniai Square geltoni\n8. Akiniai Circular", "Uþsidëti", "Uþdaryti");
	}

	if(pickupid == PickupsInfo[Paremimas])
	{
		if(PI[playerid][VisoPrazaide] < NAUJOKO_LAIKAS)
		{
			SendClientMessage(playerid, -1, "{ffffff} Paremti darbus galësite tik praþaidus {FFAF00}"#NAUJOKO_LAIKAS"{ffffff} min!");

			return 1;
		}

		ShowPlayerDialogEx(playerid, DIALOG_DARBU_PAREMIMAS, DIALOG_STYLE_LIST, "Darbø rëmimas",
		"1. Paremti policijos departamentà\n2. Paremti medicinos departamentà\n3. Paremti kurjerius\n4. Paremti autoservisà ECO\n5. Paremti fûristus\n6. Paremti spec. bûrio pajëgas ARAS\n6. Paremti taksistus", "Pasirinkti", "Uþdaryti");
		//ShowPlayerDialogEx(playerid, DIALOG_DARBU_PAREMIMAS, DIALOG_STYLE_LIST, "Paremimas", "Paremti Policijos departamentà\nParemti Medikus\nParemti Mechanikus\nParemti Fûristus\nParemti Dylerius", "Rinktis", "Iðeiti");
		return true;
	}

	if(pickupid == PickupsInfo[BaudosSusimokejimas])
	{
		if(PI[playerid][Ieskomas] < 1) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate ieðkomas!");

		if(PI[playerid][Ieskomas] > 61) return SendClientMessage(playerid, -1, "{ffffff} Iðsiteisinti galima tik turint maþiau nei 60 ieðkomumo lygiø!");

		new masyvas[216];

		new bauda = PI[playerid][Ieskomas] * 100;

		format(masyvas, 216, "{FFFFFF}Baudos mokëjimas. 1 ieðkomumo lygio kaina - {FFAF00}$100{FFFFFF}.\nJus esate ieðkomas {FFAF00}%d {ffffff}lygiu.\nJums reikës mokëti: {FFAF00}%s{ffffff}.\n \nAr mokësite?",PI[playerid][Ieskomas], konvertuoti_pinigus(bauda));
		ShowPlayerDialogEx(playerid, DIALOG_BAUDOS_MOKEJIMAS_PASTATE, DIALOG_STYLE_MSGBOX, "Baudos mokëjimas", masyvas, "Taip", "Ne");

		return 1;
	}

	if(pickupid == PickupsInfo[IspirkosMokejimas])
	{
		ShowPlayerDialogEx(playerid, Uzstatas1, DIALOG_STYLE_INPUT, "Iðpirkos mokëjimas",
		"{ffffff}Áveskite þaidëjo vardà (arba ID) uþ kurá norite sumokëti iðpirkà:\n \nPavyzdys: Domka_Quattro", "Toliau", "Uþdaryti");

		return 1;
	}

	if(pickupid == PickupsInfo[SveikatosPazymejimas])
	{
		ShowPlayerDialogEx(playerid, 10719, DIALOG_STYLE_MSGBOX, "Sveikatos paþymëjimas", "{ffffff}Ar norësite pirkti sveikatos paþymëjimà 3 dienom uþ {FFAF00}$2,000{ffffff}?", "Taip", "Ne");

		return 1;
	}

	if(pickupid == PickupsInfo[ZvejuTurgus])
	{
		ShowPlayerDialogEx(playerid, 8651, DIALOG_STYLE_TABLIST_HEADERS, "Þvejybos turgus",
		"Pasirinkimas\tVienetai\tKaina\n1. Informacija apie þvejybà\t \t \n \n2. Pirkti meðkëræ\t{FFAF00}1\t{FFAF00}$250\n3. Pirkti valà\t{FFAF00}1\t{FFAF00}$80\n4. Pirkti masalà\t{FFAF00}25\t{FFAF00}$50", "Pasirinkti", "Uþdaryti");

		return 1;
	}

	if(pickupid == PickupsInfo[MetroCityTurgusMetalas])
	{
		new String[1000], Stringas[1000];

		new Float: visometalo = PI[playerid][Auksas] + PI[playerid][Sidabras] + PI[playerid][Aliuminis] + PI[playerid][Varis] + PI[playerid][Zalvaris] + PI[playerid][Titanas];
		new visogaus = (floatround(PI[playerid][Auksas]) * AUKSAS) + (floatround(PI[playerid][Sidabras]) * SIDABRAS) + (floatround(PI[playerid][Aliuminis]) * ALIUMINIS) +
		(floatround(PI[playerid][Varis]) * VARIS) + (floatround(PI[playerid][Zalvaris]) * ZALVARIS) + (floatround(PI[playerid][Titanas]) * TITANAS);

		strcat(Stringas, "Metalas\tJo vertë ($/KG)\tTurimas kiekis\tKiek gausite\n");
		format(String, sizeof(String), "1. Auksas\t{FFAF00}$"#AUKSAS"/KG\t%.2f {ffffff}KG\t{FFAF00}$%s\n", PI[playerid][Auksas], konvertuoti_pinigus(floatround(PI[playerid][Auksas]) * AUKSAS)); 				strcat(Stringas, String);
		format(String, sizeof(String), "2. Sidabras\t{FFAF00}$"#SIDABRAS"/KG\t%.2f {ffffff}KG\t{FFAF00}$%s\n", PI[playerid][Sidabras], konvertuoti_pinigus(floatround(PI[playerid][Sidabras]) * SIDABRAS)); 		strcat(Stringas, String);
		format(String, sizeof(String), "3. Aliuminis\t{FFAF00}$"#ALIUMINIS"/KG\t%.2f {ffffff}KG\t{FFAF00}$%s\n", PI[playerid][Aliuminis], konvertuoti_pinigus(floatround(PI[playerid][Aliuminis]) * ALIUMINIS)); 	strcat(Stringas, String);
		format(String, sizeof(String), "4. Varis\t{FFAF00}$"#VARIS"/KG\t%.2f {ffffff}KG\t{FFAF00}$%s\n", PI[playerid][Varis], konvertuoti_pinigus(floatround(PI[playerid][Varis]) * VARIS)); 						strcat(Stringas, String);
		format(String, sizeof(String), "5. Þalvaris\t{FFAF00}$"#ZALVARIS"/KG\t%.2f {ffffff}KG\t{FFAF00}$%s\n", PI[playerid][Zalvaris], konvertuoti_pinigus(floatround(PI[playerid][Zalvaris]) * ZALVARIS)); 		strcat(Stringas, String);
		format(String, sizeof(String), "6. Titanas\t{FFAF00}$"#TITANAS"/KG\t%.2f {ffffff}KG\t{FFAF00}$%s\n \n", PI[playerid][Titanas], konvertuoti_pinigus(floatround(PI[playerid][Titanas]) * TITANAS)); 		strcat(Stringas, String);
		format(String, sizeof(String), "Parduoti viskà\t \t%.2f {ffffff}KG\t{FFAF00}$%s\n", visometalo, konvertuoti_pinigus(visogaus)); 																								strcat(Stringas, String);

		ShowPlayerDialogEx(playerid, 8653, DIALOG_STYLE_TABLIST_HEADERS, "Metalo supirkimas", Stringas, "Parduoti", "Uþdaryti");

		return 1;
	}

	if(pickupid == PickupsInfo[MetroCityTurgusZuvis])
	{
		new String[1000], Stringas[1000];

		/*new visometalo = PI[playerid][Auksas] + PI[playerid][Sidabras] + PI[playerid][Aliuminis] + PI[playerid][Varis] + PI[playerid][Zalvaris] + PI[playerid][Titanas];
		new visogaus = (floatround(PI[playerid][Auksas]) * AUKSAS) + (floatround(PI[playerid][Sidabras]) * SIDABRAS) + (floatround(PI[playerid][Aliuminis]) * ALIUMINIS) +
		(floatround(PI[playerid][Varis]) * VARIS) + (floatround(PI[playerid][Zalvaris]) * ZALVARIS) + (floatround(PI[playerid][Titanas]) * TITANAS);*/

		new unguriai = PI[playerid][ungurys];
		new karosai = PI[playerid][karosas];
		new karpiai = PI[playerid][karpis];
		new karsiai = PI[playerid][karsis];
		new lydekos = PI[playerid][lydeka];

		new visozuvies 	= unguriai + karosai + karpiai + karsiai + lydekos;
		new visogaus 	= unguriai * 8 + karosai * 5 + karpiai * 15 + karsiai * 11 + lydekos * 19;

		strcat(Stringas, "Þûvies rûðis\tJos vertë ($/KG)\tTurimas kiekis\tKiek gausite\n");
		format(String, sizeof(String), "1. Ungurys\t{FFAF00}$8/KG\t%d {ffffff}KG\t{FFAF00}$%s\n", unguriai, konvertuoti_pinigus(unguriai * 8)); 		strcat(Stringas, String);
		format(String, sizeof(String), "2. Karosas\t{FFAF00}$5/KG\t%d {ffffff}KG\t{FFAF00}$%s\n", karosai, konvertuoti_pinigus(karosai * 5)); 		strcat(Stringas, String);
		format(String, sizeof(String), "3. Karpis\t{FFAF00}$15/KG\t%d {ffffff}KG\t{FFAF00}$%s\n", karpiai, konvertuoti_pinigus(karpiai * 15)); 		strcat(Stringas, String);
		format(String, sizeof(String), "4. Karðis\t{FFAF00}$11/KG\t%d {ffffff}KG\t{FFAF00}$%s\n", karsiai, konvertuoti_pinigus(karsiai * 11)); 		strcat(Stringas, String);
		format(String, sizeof(String), "5. Lydeka\t{FFAF00}$19/KG\t%d {ffffff}KG\t{FFAF00}$%s\n \n", lydekos, konvertuoti_pinigus(lydekos * 19)); 	strcat(Stringas, String);
		format(String, sizeof(String), "Parduoti viskà\t \t%d {ffffff}KG\t{FFAF00}$%s\n", visozuvies, konvertuoti_pinigus(visogaus)); 																								strcat(Stringas, String);

		ShowPlayerDialogEx(playerid, 8654, DIALOG_STYLE_TABLIST_HEADERS, "Þuvies supirkimas", Stringas, "Parduoti", "Uþdaryti");

		return 1;
	}

	//if(pickupid == PickupsInfo[MasinuSalonas][0]) return ShowPlayerDialogEx(playerid, vSHOP_DIALOGID1, DIALOG_STYLE_LIST, "{ffffff}Wang Cars", "{ffffff}  Paprastos maðinos.\n Sportinës maðinos.\n Motociklai.", "Rinktis", "Iðeiti");
	//if(pickupid == PickupsInfo[MasinuSalonas][1]) return ShowPlayerDialogEx(playerid, DIALOG_MASINU_IMONTAVIMAI, DIALOG_STYLE_MSGBOX, " ","Pasirinkite transporto priemonæ", "1", "2");

	if(PickupsInfo[CashMachine][0] <= pickupid <= PickupsInfo[CashMachine][sizeof(PickupsInfo[CashMachine]) - 1])
	{
		if(PI[playerid][KreditineKortele] == false) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite kreditinës kortelës. Jà iðsiimti galite banke!");

		ShowPlayerDialogEx(playerid, 50, DIALOG_STYLE_LIST, "Bankomatas", "1. Pinigø balansas\n2. Nusiimti pinigus", "Pasirinkti", "Uþdaryti");

		return 1;
	}

	if(pickupid == PickupsInfo[GinkluParduotuve])
	{
		ShowPlayerDialogEx(playerid, GinkluParduotuvesDialog, DIALOG_STYLE_TABLIST_HEADERS, "Ginklø parduotuvë",
		"Ginklo pavadinimas\tKiekis (vnt/kulkos)\tKaina\n1. Baseball Bat\t1\t{FFAF00}$340\n2. 9mm\t50\t{FFAF00}$1,800\n3. Shotgun\t30\t{FFAF00}$2,200\n4. Country Rifle\t50\t{FFAF00}$1,100\n5. Ðarvai\t \t{FFAF00}$800 \n6. Ginklø licenzija\t \t{FFAF00}$15,000", "Pasirinkti", "Uþdaryti");

		return 1;
	}

	if(pickupid == PickupsInfo[BankoValdymas])
	{
		if(PI[playerid][SusikuresKorta])
		{
			ShowPlayerDialogEx(playerid, BankAccountDialog, DIALOG_STYLE_LIST, "Bankas", "{FFFFFF}1. Pinigø balansas\n2. Padëti pinigus á banko sàskaità\n3. Pasiimti pinigø ið banko sàskaitos\n4. Pervesti pinigus kitam þaidëjui (kuriama)\n5. Iðsiimti kreditinæ kortelæ", "Pasirinkti", "Uþdaryti");
		}
		else
		{
			ShowPlayerDialogEx(playerid, BankAccountCreateDialog, DIALOG_STYLE_MSGBOX, "Bankas", "{FFFFFF}Jus neturite susikuræs banko sàskaitos, jà susikurti kainuoja {FFAF00}$200{ffffff}.\n\n\tAr norite susikurti banko sàskaità?", "Taip", "Ne");
		}
		return 1;
	}

	if(PickupsInfo[LietuvosSpauda][0] <= pickupid <= PickupsInfo[LietuvosSpauda][sizeof(PickupsInfo[LietuvosSpauda]) - 1])
	{
		new String[300], Stringas[128];

		strcat(String, "Pasirinkimas\tKaina\n");
		format(Stringas, sizeof(Stringas), "1. Mobiliojo ryðio kortelë\t{FFAF00}$%d\n", DefaultContractPrice); strcat(String, Stringas);
		strcat(String, "2. Sàskaitos papildymai\n");
		strcat(String, "3. Coca-Cola\t{FFAF00}$4\n");
		strcat(String, "4. Sultys\t{FFAF00}$5\n");
		strcat(String, "5. Bandelë\t{FFAF00}$7\n");
		strcat(String, "6. Ledai\t{FFAF00}$3\n");
		strcat(String, "7. Ðokoladinis batonëlis\t{FFAF00}$2\n");
		strcat(String, "8. Kastuvas\t{FFAF00}$500\n");
		strcat(String, "9. Kauliukas\t{FFAF00}$90");

		ShowPlayerDialogEx(playerid, 1543, DIALOG_STYLE_TABLIST_HEADERS, "Lietuvos Spauda", String, "Pasirinkti", "Uþdaryti");

		return 1;
	}

	if(PickupsInfo[BarPickup][0] <= pickupid <= PickupsInfo[BarPickup][sizeof(PickupsInfo[BarPickup]) - 1])
	{
		ShowPlayerDialogEx(playerid, 5787, DIALOG_STYLE_LIST, "Baras",
		"1. Ðampanas {FFAF00}$22\n2. Vynas {FFAF00}$20\n3. Alus {FFAF00}$7\n4. Degtinë {FFAF00}$35\n5. Brendis {FFAF00}$40", "Pasirinkti", "Uþdaryti");

		return 1;
	}

	//I kalejma pas mentus
	if(PickupsInfo[KalejimoPickup][0] <= pickupid <= PickupsInfo[KalejimoPickup][sizeof(PickupsInfo[KalejimoPickup]) - 1])
	{
		if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5)
		{
			if(PI[playerid][Ieskomas] > 0) return JailPlayer(playerid, PI[playerid][Ieskomas]);
		}

		return 1;
	}

	if(pickupid == PickupsInfo[Apmokymai])
	{
		ShowPlayerDialogEx(playerid, 31999, DIALOG_STYLE_MSGBOX, "www.MetroCity.lt apmokymai",
		"{ffffff}Ar tikrai norite þiûrëti apmokymus?", "Taip", "Ne");

		return 1;
	}

	if(pickupid == PickupsInfo[NewbieHeal])
	{
		if(PI[playerid][VisoPrazaide] > NAUJOKO_LAIKAS) return SendClientMessage(playerid, -1, "{ffffff} Pasigydymas skirtas tik serverio naujokams!");

		SetPlayerHealthEx(playerid, 99);
		SendClientMessage(playerid, -1, "{ffffff} Sëkmingai pasigydëte!");

		return 1;
	}

	if(pickupid == PickupsInfo[HPHeal])
	{
		new Medikai = 0;

		for(new p = 0; p < MAX_PLAYERS; p++)
		{
			if(IsPlayerConnected(p) && !PI[p][AFK_Stat])
			{
				switch(PI[p][specialybe])
				{
					case MEDIKAI: Medikai ++;
				}
			}
		}

		if(Medikai > 2) return SendClientMessage(playerid, -1, "{ffffff} Serveryje yra medikø, praðome naudotis jø paslaugomis!");

		if(GetPlayerMoneyA(playerid) < 1000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

		GivePlayerMoneyA (playerid, -1000);
		SetPlayerHealthEx(playerid, 99);
		SendClientMessage(playerid, -1, "{ffffff} Sëkmingai pasigydëte!");

		return 1;
	}

	if(pickupid == PickupsInfo[Theory])
	{
		new String[216];

		if(PI[playerid][teorija]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate iðlaikæs teorijos egzaminà!");

		format(String, sizeof(String), "{ffffff}Èia galite iðsilaikyti teorijos egzaminà, jis bus sudarytas ið {FFAF00}10 {ffffff}nesudëtingø klausimø.\n \nJums tai kainuos {FFAF00}$%d{ffffff}.\n\n\tAr norite pradëti laikyti teorijos egzaminà?", TheoryLicensePrice);
		ShowPlayerDialogEx(playerid, TheoryLicenseDialog, DIALOG_STYLE_MSGBOX, "Vairavimo mokykla", String, "Taip", "Ne");

		return 1;
	}

	if(pickupid == PickupsInfo[AlgosAtsiemimas])
	{
		new String[216];

		format(String, sizeof(String), "{ffffff}Algas galima atsiimti kiekvienà dienà nuo 19:00 iki 22:00.\nDabar jus esate uþdirbæ {FFAF00}$%s{ffffff}.\n\n\tAr norite juos atsiimti?", konvertuoti_pinigus(PI[playerid][alga]));
		ShowPlayerDialogEx(playerid, 5424, DIALOG_STYLE_MSGBOX, "Alga", String, "Taip", "Ne");

		return 1;
	}

	if(pickupid == PickupsInfo[PolicijosGinklai])
	{
		if(PI[playerid][specialybe] != 1) return 1;

		if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

		//if(PI[playerid][PaemePDGinklus] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Ginklø paketà galima imti tik kas 5 minutes!");

		//PI[playerid][PaemePDGinklus] = gettime() + 300;

		ac_ResetPlayerWeapons(playerid);

		ac_GivePlayerWeapon(playerid, 3, 1);
		ac_GivePlayerWeapon(playerid, 24, 50);
		ac_GivePlayerWeapon(playerid, 25, 80);
		ac_GivePlayerWeapon(playerid, 29, 150);
		ac_GivePlayerWeapon(playerid, 31, 200);
		//ac_GivePlayerWeapon(playerid, 34, 30);

		SendClientMessage(playerid, -1, "{ffffff} Pasiemëte policijos ginklø paketà bei pasigydëte!");

		SetPlayerArmourEx   (playerid, 100);
		SetPlayerHealthEx   (playerid, 100);

		return 1;
	}

	if(pickupid == PickupsInfo[ArasGinklai])
	{
		if(PI[playerid][specialybe] != 5) return 1;

		if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

		//if(PI[playerid][PaemePDGinklus] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Ginklø paketà galima imti tik kas 5 minutes!");

		//PI[playerid][PaemePDGinklus] = gettime() + 300;

		ac_ResetPlayerWeapons(playerid);
		ac_GivePlayerWeapon(playerid, 17, 5);
		ac_GivePlayerWeapon(playerid, 24, 50);
		ac_GivePlayerWeapon(playerid, 25, 80);
		ac_GivePlayerWeapon(playerid, 29, 150);
		ac_GivePlayerWeapon(playerid, 31, 200);
		//ac_GivePlayerWeapon(playerid, 34, 30);

		SendClientMessage(playerid, -1, "{ffffff} Pasiemëte spec. bûrio pajëgø ARAS ginklø paketà bei pasigydëte!");

		SetPlayerArmourEx   (playerid, 100);
		SetPlayerHealthEx   (playerid, 100);

		return 1;
	}

	if(pickupid == PickupsInfo[NascarPickup])
	{
		ShowPlayerDialogEx(playerid, 1050, DIALOG_STYLE_MSGBOX, "Nascar Trasa", "{ffffff}Ar tikrai norite nusiteliportuoti á MetroCity.lt?", "Taip", "Ne");
		return 1;
	}

	if(pickupid == PickupsInfo[SalmoPirkimas])
	{
		ShowPlayerDialogEx(playerid, 1030, DIALOG_STYLE_LIST, "Ðalmo pirkimas", "{ffffff}Ar tikrai norite pirkti ðalmà? Kaina: {FFAF00}$300{ffffff}.", "Taip", "Ne");
		return 1;
	}

	if(pickupid == PickupsInfo[PolicijosIsidarbinimas])
	{
		ShowPlayerDialogEx(playerid, 1000, DIALOG_STYLE_LIST, "Darbo valdymas", "1. Darbo informacija\n2. Ásidarbinti darbe\n3. Palikti darbà\n4. Persirengti á darbinius arba paprastus drabuþius\n5. Direktoriaus valdymo pultas", "Pasirinkti", "Uþdaryti");
		return 1;
	}

	if(pickupid == PickupsInfo[MechanikuIsidarbinimas])
	{
		ShowPlayerDialogEx(playerid, 1001, DIALOG_STYLE_LIST, "Darbo valdymas", "1. Darbo informacija\n2. Ásidarbinti darbe\n3. Palikti darbà\n4. Persirengti á darbinius arba paprastus drabuþius\n5. Direktoriaus valdymo pultas", "Pasirinkti", "Uþdaryti");
		return 1;
	}

	if(pickupid == PickupsInfo[KurjeriuIsidarbinimas])
	{
		ShowPlayerDialogEx(playerid, 1002, DIALOG_STYLE_LIST, "Darbo valdymas", "1. Darbo informacija\n2. Ásidarbinti darbe\n3. Palikti darbà\n4. Persirengti á darbinius arba paprastus drabuþius\n5. Direktoriaus valdymo pultas", "Pasirinkti", "Uþdaryti");
		return 1;
	}

	if(pickupid == PickupsInfo[MedikuIsidarbinimas])
	{
		ShowPlayerDialogEx(playerid, 1003, DIALOG_STYLE_LIST, "Darbo valdymas", "1. Darbo informacija\n2. Ásidarbinti darbe\n3. Palikti darbà\n4. Persirengti á darbinius arba paprastus drabuþius\n5. Direktoriaus valdymo pultas", "Pasirinkti", "Uþdaryti");
		return 1;
	}
	if(pickupid == PickupsInfo[TaxiIsidarbinimas])
	{
		ShowPlayerDialogEx(playerid, 7011, DIALOG_STYLE_LIST, "Darbo valdymas", "1. Darbo informacija\n2. Ásidarbinti darbe\n3. Palikti darbà\n4. Persirengti á darbinius arba paprastus drabuþius\n5. Direktoriaus valdymo pultas", "Pasirinkti", "Uþdaryti");
		return 1;
	}

	if(pickupid == PickupsInfo[DyleriuIsidarbinimas])
	{
		ShowPlayerDialogEx(playerid, 1004, DIALOG_STYLE_LIST, "Darbo valdymas", "1. Darbo informacija\n2. Ásidarbinti darbe\n3. Palikti darbà\n4. Persirengti á darbinius arba paprastus drabuþius\n5. Direktoriaus valdymo pultas", "Pasirinkti", "Uþdaryti");
	 	return 1;
   	}

	if(pickupid == PickupsInfo[FuristuIsidarbinimas])
	{
		ShowPlayerDialogEx(playerid, 1104, DIALOG_STYLE_LIST, "Darbo valdymas", "1. Darbo informacija\n2. Ásidarbinti darbe\n3. Palikti darbà\n4. Persirengti á darbinius arba paprastus drabuþius\n5. Direktoriaus valdymo pultas", "Pasirinkti", "Uþdaryti");
		return 1;
	}

	//Picø iðveþiotojø ásidarbinimasfv

	if(pickupid == PickupsInfo[PicuIsidarbinimas])
	{
		if(PI[playerid][specialybe] == 20) return ShowPlayerDialogEx(playerid, 987, DIALOG_STYLE_MSGBOX, "Darbo palikimas", "{ffffff}\tAr tikrai norite palikti savo darbà?", "Taip", "Ne");

		if(PI[playerid][specialybe] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite kità darbà!");

		if(GetPlayerScore(playerid) < PICU_ISIDARBINIMO_XP) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka patirties taðkø!");

		SendClientMessage(playerid, -1, "{ffffff} Sëkmingai ásidarbinote ðiame darbe!");

		PI[playerid][drabuziai]  = GetPlayerSkin(playerid);
		PI[playerid][specialybe] = 20;
		PI[playerid][uniformd]   = true;

		ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);

		switch(PI[playerid][lytis])
		{
			case 0:  PI[playerid][uniforma] = 155;
			case 1:  PI[playerid][uniforma] = 201;
		}

		SetPlayerSkin(playerid, PI[playerid][uniforma]);

		return 1;
	}


	//Keliø valytojø ásidarbinimas

	if(pickupid == PickupsInfo[ValytojuIsidarbinimas])
	{
		if(PI[playerid][specialybe] == 22) return ShowPlayerDialogEx(playerid, 987, DIALOG_STYLE_MSGBOX, "Darbo palikimas", "{ffffff}\tAr tikrai norite palikti savo darbà?", "Taip", "Ne");

		if(PI[playerid][specialybe] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite kità darbà!");

		if(GetPlayerScore(playerid) < VALYTOJU_ISIDARBINIMO_XP) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka patirties taðkø!");

		SendClientMessage(playerid, -1, "{ffffff} Sëkmingai ásidarbinote ðiame darbe!");

		PI[playerid][drabuziai]  = GetPlayerSkin(playerid);
		PI[playerid][specialybe] = 22;
		PI[playerid][uniformd]   = true;

		ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);

		switch(PI[playerid][lytis])
		{
			case 0:  PI[playerid][uniforma] = 16;
			case 1:  PI[playerid][uniforma] = 53;
		}

		SetPlayerSkin(playerid, PI[playerid][uniforma]);

		return 1;
	}

	//Gaisrininkø ásidarbinimas

	if(pickupid == PickupsInfo[GaisrininkuIsidarbinimas])
	{
		if(PI[playerid][specialybe] == 26) return ShowPlayerDialogEx(playerid, 987, DIALOG_STYLE_MSGBOX, "Darbo palikimas", "{ffffff}\tAr tikrai norite palikti savo darbà?", "Taip", "Ne");

		if(PI[playerid][specialybe] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite kità darbà!");

		if(GetPlayerScore(playerid) < GAISRININKU_ISIDARBINIMO_XP) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka patirties taðkø!");

		SendClientMessage(playerid, -1, "{ffffff} Sëkmingai ásidarbinote ðiame darbe!");

		PI[playerid][drabuziai]  = GetPlayerSkin(playerid);
		PI[playerid][specialybe] = GAISRAI;
		PI[playerid][uniformd]   = true;

		ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);

		switch(PI[playerid][lytis])
		{
			case 0:  PI[playerid][uniforma] = 279;
			case 1:  PI[playerid][uniforma] = 279;
		}

		SetPlayerSkin(playerid, PI[playerid][uniforma]);

		return 1;
	}


	//Autobusø vairuotojø ásidarbinimas

	if(pickupid == PickupsInfo[AutobusininkuIsidarbinimas])
	{
		if(PI[playerid][specialybe] == 24) return ShowPlayerDialogEx(playerid, 987, DIALOG_STYLE_MSGBOX, "Darbo palikimas", "{ffffff}\tAr tikrai norite palikti savo darbà?", "Taip", "Ne");

		if(PI[playerid][specialybe] != 0) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite kità darbà!");

		if(GetPlayerScore(playerid) < AUTOBUSU_ISIDARBINIMO_XP) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka patirties taðkø!");

		SendClientMessage(playerid, -1, "{ffffff} Sëkmingai ásidarbinote ðiame darbe!");

		PI[playerid][drabuziai]  = GetPlayerSkin(playerid);
		PI[playerid][specialybe] = 24;
		PI[playerid][uniformd]   = true;

		ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);

		switch(PI[playerid][lytis])
		{
			case 0:  PI[playerid][uniforma] = 15;
			case 1:  PI[playerid][uniforma] = 11;
		}

		SetPlayerSkin(playerid, PI[playerid][uniforma]);

		return 1;
	}

	//Pirkti elektronikos prietaisus
	if(pickupid == PickupsInfo[ElektronikosPard][0] || pickupid == PickupsInfo[ElektronikosPard][1])
	{
		new String[400];

		format(String, 400, "Pasirinkimas\tKaina\tTurimas kiekis\n1. Laikrodis\t{FFAF00}$70\t{FFAF00}%d {ffffff}vnt\n2. Fotoaparatas (100 kadrø)\t{FFAF00}$45\t{FFAF00}%d {ffffff}vnt\n3. GPS navigacija\t{FFAF00}$320\t{FFAF00}%d {ffffff}vnt",
		Laikrodziai, Fotikai, Navigacijos);
		ShowPlayerDialogEx(playerid, 5722, DIALOG_STYLE_TABLIST_HEADERS, "El. Parduotuvë", String, "Pirkti", "Uþdaryti");

		return 1;
	}

	if(pickupid == PickupsInfo[Loterija])
	{
		if(PI[playerid][bilietas])
		{
			new RandomMoney, String[216];

			PI[playerid][bilietas] = false;
			PI[playerid][KadaZaide] = gettime() + 300;

			switch(random(500))
			{
				case 0..349:
				{
					SendClientMessage(playerid, -1, "{ffffff} Jûsø bilietas nelaimingas!");
					return 1;
				}

				case 350..419:
				{
					RandomMoney = 10 + random(40);
				}

				case 420..449:
				{
					RandomMoney = 100 + random(400);
				}

				case 450..469:
				{
					RandomMoney = 500 + random(500);
				}

				case 470..489:
				{
					RandomMoney = 1000 + random(1000);
				}

				case 490..499:
				{
					RandomMoney = 5000 + random(5000);
				}
			}

			format(String, sizeof(String), "{ffffff} Jûsø bilietas laimingas! Laimëjote {FFAF00}$%d{ffffff}!", RandomMoney);
			SendClientMessage 	(playerid, -1, String);
			GivePlayerMoneyA 	(playerid, RandomMoney);
		

			return 1;
		}
		else
		{
			if(PI[playerid][KadaZaide] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} TELELOTO þaisti galima tik kas 5 minutes!");

			if(GetPlayerMoneyA(playerid) < 10) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

			SendClientMessage 	(playerid, -1, "{ffffff} Nusipirkote {FFAF00}TELELOTO {ffffff}bilietà uþ {FFAF00}$10{ffffff}!");
			SendClientMessage 	(playerid, -1, "{ffffff} Já pasitikrinti galësite èia pat po keliø minuèiø!");
			GivePlayerMoneyA 	(playerid, -10);

			PI[playerid][bilietas] = true;
		}
		return 1;
	}

   	return 1;
}

public OnGameModeExit()
{
	for(new p = 0, size = GetPlayerPoolSize(); p <= size; p ++)
	{
		if(IsPlayerConnected(p))
		{
			if(Prisijunges[p])
			{
				SavePlayerVehicle1 	(p, true);
				SavePlayerVehicle2	(p, true);
				SavePlayerVehicle3	(p, true);
				SavePlayerData 		(p);
			}
		}
	}

	SaveTurgus();
	SaveAllGangZones  ();

	DestroyObject(GamblingMachine);
	for(new i = 0; i < sizeof(BanditLocs); i++)
    {
        Delete3DTextLabel(GambleLabel[i]);
    }

	mysql_close();
	Profiler_Dump();
	Profiler_Stop();
	return 1;
}

public OnQueryError(errorid, error[], resultid, extraid, callback[], query[], connectionHandle)
{
	printf("MYSQL ERROR #%d [(R): %d , (E): %d]", errorid, resultid, extraid);
	printf("%s", error);
	printf("[Q]: %s", query);
	printf("[C]: %s", callback);
}

public IsPlayerSwimming(playerid)
{
	if(swimming[playerid]) return 1;
	return 0;
}

public OnPlayerStartSwimming(playerid)
{
	// EXAMPLE CODE START //
	//SendClientMessage(playerid, 0x33CCFFAA, "You started swimming!");
	// EXAMPLE CODE END //
	return 1;
}

public OnPlayerStopSwimming(playerid)
{
	// EXAMPLE CODE START //
	//SendClientMessage(playerid, 0x33CCFFAA, "You stopped swimming!");
	// EXAMPLE CODE END //
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(PI[playerid][AFK_Label] != Text3D:INVALID_3DTEXT_ID)
	{
		Delete3DTextLabel(PI[playerid][AFK_Label]);
		PI[playerid][AFK_Label] = Text3D:INVALID_3DTEXT_ID;
	}
	PI[playerid][AFK_Stat] = false;

	if(GetPlayerWeapon(playerid) != ac_LastWeapon[playerid])
	{
		ac_OnPlayerChangeWeapon(playerid, GetPlayerWeapon(playerid), ac_LastWeapon[playerid]);
	}

	if(GetPlayerAnimationIndex(playerid))
	{
		new animlib[32];
		new animname[32];
		GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
		if(strcmp(animlib, "SWIM", true) == 0 && !swimming[playerid])
		{
		    swimming[playerid] = true;
		    OnPlayerStartSwimming(playerid);
		}
		else if(strcmp(animlib, "SWIM", true) != 0 && swimming[playerid] && strfind(animname, "jump", true) == -1)
		{
		    swimming[playerid] = false;
		    OnPlayerStopSwimming(playerid);
		}
	}
	else if(swimming[playerid])
	{
	    swimming[playerid] = false;
	    OnPlayerStopSwimming(playerid);
	}

	if(IsPlayerInAnyVehicle(playerid))
	{
		static s_iVehicle;
		if(g_fSpeedCap[playerid] != 0.0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			s_iVehicle = GetPlayerVehicleID(playerid);
			if (s_iVehicle)
			{
				static Float:s_fX, Float:s_fY, Float:s_fZ, Float:s_fVX, Float:s_fVY, Float:s_fVZ;
				GetVehiclePos(s_iVehicle, s_fX, s_fY, s_fZ);
				GetVehicleVelocity(s_iVehicle, s_fVX, s_fVY, s_fVZ);
				if(!IsPlayerInRangeOfPoint(playerid, g_fSpeedCap[playerid] + 0.05, s_fX + s_fVX, s_fY + s_fVY, s_fZ + s_fVZ))
				{
					static Float:s_fLength;
					s_fLength = floatsqroot((s_fVX * s_fVX) + (s_fVY * s_fVY) + (s_fVZ * s_fVZ));
					s_fVX = (s_fVX / s_fLength) * g_fSpeedCap[playerid];
					s_fVY = (s_fVY / s_fLength) * g_fSpeedCap[playerid];
					s_fVZ = (s_fVZ / s_fLength) * g_fSpeedCap[playerid];
					if(s_iVehicle)
					{
						SetVehicleVelocity(s_iVehicle, s_fVX, s_fVY, s_fVZ);
					}
					else
					{
						SetPlayerVelocity(playerid, s_fVX, s_fVY, s_fVZ);
					}
				}
			}
		}
	}

	if(PI[playerid][kalejimo_laikas] > 0)
	{
		new	valandos, minutes, sekundes, msg[100], Hour, Minute, Second;
		gettime(Hour, Minute, Second);
		sekundes = PI[playerid][kalejimo_laikas];
		while(sekundes >= 60)
		{
			sekundes -= 60;
			minutes++;
		}
		while(minutes >= 60)
		{
			minutes -= 60;
			valandos++;
		}
		format(msg, sizeof(msg), "LIKO SEDETI: ~g~%d~w~:~g~%d~w~:~g~%d", valandos, minutes, sekundes);
		TextDrawSetString(KalejimoLaikoTd[playerid], msg);
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid != 0)
		{
			GetVehiclePos(vehicleid, VehPos[vehicleid][0], VehPos[vehicleid][1], VehPos[vehicleid][2]);
			GetVehicleZAngle(vehicleid, VehPos[vehicleid][3]);
			new model = GetVehicleModel(vehicleid);
			if(model == 525 || model == 403 || model == 514 || model == 515)
			{
				new trailerid = GetVehicleTrailer(vehicleid);
				if(trailerid != 0)
				{
					GetVehiclePos(trailerid, VehPos[trailerid][0], VehPos[trailerid][1], VehPos[trailerid][2]);
					GetVehicleZAngle(trailerid, VehPos[trailerid][3]);
				}
			}
		}
	}

	if( CanCheckABX[playerid])
    {
        if(!CanCheckAirBreak[playerid])
        {
            AC_AirBreakReset(playerid);
            CanCheckAirBreak[playerid] = true;
        }
        else
        {
            if( NeedCheckTuningAB[ playerid ] == 1 )
            {
                NeedCheckTuningAB[ playerid ] = 0;
                CanCheckAirBreak[ playerid ] = false;
            }
            else if( NeedCheckTuningAB[ playerid ] > 0 ) NeedCheckTuningAB[ playerid ]--;
            else
            {
                new AC_playerState = GetPlayerState(playerid);
                if(AC_oldPlayerState[playerid] == AC_playerState)
                {
                    if(AC_playerState == PLAYER_STATE_ONFOOT || AC_playerState == PLAYER_STATE_DRIVER || AC_playerState == PLAYER_STATE_PASSENGER)
                    {
                        if(AC_playerState == PLAYER_STATE_ONFOOT)
                        {
                            new AC_animIndex = GetPlayerAnimationIndex(playerid);
                            if(AC_animIndex)
                            {
                                new animLib[32], animName[32];
                                GetAnimationName(AC_animIndex, animLib, 32, animName, 32);
                                if(!strcmp(animName, "FALL_LAND", true) || !strcmp(animName, "CLIMB_JUMP2FALL", true) || !strcmp(animName, "CLIMB_PULL", true) || !strcmp(animName, "CLIMB_JUMP_B", true))
                                {
                                    CanCheckAirBreak[playerid] = false;
                                    return true;
                                }
                            }
                        }

                        new Float:AC_fPos[3], Float:AC_fSpeed;
                        if(AC_playerState == PLAYER_STATE_DRIVER) GetVehicleVelocity(GetPlayerVehicleID(playerid), AC_fPos[0], AC_fPos[1], AC_fPos[2]);
                        else GetPlayerVelocity(playerid, AC_fPos[0], AC_fPos[1], AC_fPos[2]);
                        AC_fSpeed = floatsqroot(floatpower(AC_fPos[0], 2) + floatpower(AC_fPos[1], 2) + floatpower(AC_fPos[2], 2)) * 200;
                        if(AC_oldPos[playerid][0] != 0.0)
                        {
                            GetPlayerPos(playerid, AC_fPos[0], AC_fPos[1], AC_fPos[2]);

                            if( IsPlayerInRangeOfPoint(playerid, 5.0, 616.7820, -74.8151, 997.6350 ) || IsPlayerInRangeOfPoint(playerid, 5.0, 615.2851, -124.2390, 997.6350 ) || IsPlayerInRangeOfPoint(playerid, 5.0, 617.5380, -1.9900, 1000.6829 ) )
                            {
                                NeedCheckTuningAB [ playerid ] = 10;
                            }

                            if( NeedCheckTuningAB [ playerid ] == 0 )
                            {
                                new Float:AC_traveledDistance = GetDistanceBetweenPoints(AC_fPos[0], AC_fPos[1], AC_fPos[2], AC_oldPos[playerid][0], AC_oldPos[playerid][1], AC_oldPos[playerid][2]);

                                AC_oldPos[playerid][0] = AC_fPos[0];
                                AC_oldPos[playerid][1] = AC_fPos[1];
                                AC_oldPos[playerid][2] = AC_fPos[2];
                                if(AC_traveledDistance > AC_fSpeed > 6.2)
                                {
                            		if(PI[playerid][AdminLevel] < LEVEL_OWNER)
                            		{
                            			new String[216];
		                                   format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}buvo iðmestas ið serverio!", GetPlayerNameEx(playerid));
										SendClientMessageToAll(-1, String);
										SendClientMessageToAll(-1, "{ffffff} Prieþastis: {FFAF00}AIR-BRK/TELEPORT naudojimas.");
		                                IsmestiZaideja(playerid, 100);
		                                NeedCheckTuningAB[playerid] = 20;
	                                }
	                            }
	                        }
                        }
                        else GetPlayerPos(playerid, AC_oldPos[playerid][0], AC_oldPos[playerid][1], AC_oldPos[playerid][2]);
                    }
                }
                else CanCheckAirBreak[playerid] = false;
                AC_oldPlayerState[playerid] = AC_playerState;
            }
        }
	}
	else
	{
        if(AC_oldPos[playerid][0] != 0.0) AC_AirBreakReset(playerid);
	}

	return 1;
}

/*stock KraunamNarkotikusGinklus()
{
	new uzkl[128];

 	mysql_query("SELECT * FROM `narkotikaiginklai`");

	mysql_store_result();

	mysql_retrieve_row();

	if(mysql_num_rows())
	{
		mysql_fetch_field_row(uzkl, "DealersDocksHaveExstazi");   	DealersDocksHaveExstazi = strval(uzkl);
		mysql_fetch_field_row(uzkl, "DealersDocksHaveCocaine");   	DealersDocksHaveCocaine = strval(uzkl);
		mysql_fetch_field_row(uzkl, "DealersDocksHaveWeed");      	DealersDocksHaveWeed = strval(uzkl);
		mysql_fetch_field_row(uzkl, "DealersDocksHaveHeroin");    	DealersDocksHaveHeroin = strval(uzkl);
		mysql_fetch_field_row(uzkl, "VieluKiekis");    				VieluKiekis = strval(uzkl);
	}

	mysql_free_result();

	return 1;
}*/

forward ac_AntiCheatTimer();
public ac_AntiCheatTimer()
{
	for(new p = 0, size = GetPlayerPoolSize(); p <= size; p++)
	{
		if(ac_SkipCheck[p] > 0) ac_SkipCheck[p]--;
		else
		{
			ac_CheckWeaponCheat(p);
		}
	}	
	SetTimer("ac_AntiCheatTimer", 			500, false);
	return 1;
}

stock ac_RepairVehicle(vehicleid)
{
	ac_VehicleHealth[vehicleid] = 1000.0;
	return RepairVehicle(vehicleid);
}

stock ac_CheckVehicleHealth(vehicleid)
{
	new Float:cur_health;
	GetVehicleHealth(vehicleid, cur_health);
	if(cur_health < ac_VehicleHealth[vehicleid])
	{
		ac_VehicleHealth[vehicleid] = cur_health;
	}
	if(ac_VehicleHealth[vehicleid] < cur_health)
	{
		SetVehicleHealth(vehicleid, ac_VehicleHealth[vehicleid]);
	}
	return 1;
}

stock ac_SetVehicleToRespawn(vehicleid)
{
	ac_VehicleHealth[vehicleid] = 1000.0;
	return SetVehicleToRespawn(vehicleid);
}

stock ac_OnPlayerChangeWeapon(playerid, newweapon, oldweapon)
{
	if(newweapon != 0)
	{
		new
			newslot = ac_GetWeaponSlot(newweapon),
			newammo;
		GetPlayerWeaponData(playerid, newslot, newammo, newammo);
		if(ac_Weapons[playerid][newslot][ac_WeaponId] != newweapon && newweapon != 0 && newammo > 0)
		{
		 	ac_KickWeapon(playerid);
			return 1;
		}
		if(ac_Weapons[playerid][newslot][ac_Ammo] < newammo)
		{
			ac_KickWeapon(playerid);
			return 1;
		}
		else if(ac_Weapons[playerid][newslot][ac_Ammo] > newammo)
		{
			ac_Weapons[playerid][newslot][ac_Ammo] = newammo;
		}
	}
	if(oldweapon != 0)
	{
		new 
			oldammo,
			oldslot = ac_GetWeaponSlot(oldweapon);
		GetPlayerWeaponData(playerid, oldslot, oldammo, oldammo);
		if(oldammo <= 0)
		{
			ac_ClearWeaponSlot(playerid, oldslot);
		}
		else if(ac_Weapons[playerid][oldslot][ac_Ammo] > oldammo)
		{
			ac_Weapons[playerid][oldslot][ac_Ammo] = oldammo;
		}
	}
	return 1;
}

stock ac_GetPlayerAmmo(playerid, weaponid)
{
	new slot = ac_GetWeaponSlot(weaponid);
	return ac_Weapons[playerid][slot][ac_Ammo];
}

stock ac_GivePlayerWeapon(playerid, weaponid, ammo)
{
	new 
		slot = ac_GetWeaponSlot(weaponid);
	if(slot != 0xFFFF)
	{
		ac_SkipCheck[playerid] = 2;
		if(weaponid < 0 || weaponid > 46 || ammo < 0) return false;
		if(ac_Weapons[playerid][slot][ac_WeaponId] != weaponid)
		{
			if(ac_Weapons[playerid][slot][ac_WeaponId] != 0)
			{
				ac_ClearWeaponSlot(playerid, slot);
				ac_SkipCheck[playerid] = 3;
			}
			ac_Weapons[playerid][slot][ac_Ammo] = ammo;
			ac_Weapons[playerid][slot][ac_WeaponId] = weaponid;
		}
		else if(ac_Weapons[playerid][slot][ac_WeaponId] == weaponid)
		{
			ac_Weapons[playerid][slot][ac_Ammo] += ammo;
		}
		return GivePlayerWeapon(playerid, weaponid, ammo);
	}
	return false;
}

stock ac_ResetPlayerWeapons(playerid, skip = 5)
{
	ac_SkipCheck[playerid] = skip;
	ac_Reset(playerid);
	return ResetPlayerWeapons(playerid);
}

stock ac_ResetPlayerWeapon(playerid, weaponid)
{
	new slot = ac_GetWeaponSlot(weaponid);
	return ac_ClearWeaponSlot(playerid, slot);
}

stock ac_ClearWeaponSlot(playerid, slot)
{
	new
		weapondata[13][2];
	ac_SkipCheck[playerid] = 3;
	for(new i = 0; i < 13; i++)
	{
		if(i != slot)
		{
			GetPlayerWeaponData(playerid, i, weapondata[i][0], weapondata[i][1]);
		}
	}
	ac_ResetPlayerWeapons(playerid);
	for(new i = 0; i < 13; i++)
	{
		if(weapondata[i][0] != 0 && weapondata[i][1] > 0 && i != slot)
		{
			ac_GivePlayerWeapon(playerid, weapondata[i][0], weapondata[i][1]);
		}
	}
	return 1;
}


stock ac_GetWeaponSlot(weaponid) 
{ 
    switch(weaponid) 
    { 
        case 1: return 0; 
        case 2..9: return 1; 
        case 22..24: return 2; 
        case 25..27: return 3; 
        case 28, 29, 32: return 4; 
        case 30, 31: return 5; 
        case 33, 34: return 6; 
        case 35..38: return 7; 
        case 16..18, 39: return 8; 
        case 41..43: return 9; 
        case 10..15: return 10; 
        case 44..46: return 11; 
        case 40: return 12; 
    } 
    return 0xFFFF; 
}

stock ac_Reset(playerid)
{
	new reset[E_AC_WEAPONS];
	for(new i = 0; i < 13; i++)
	{
		ac_Weapons[playerid][i] = reset;
	}
	return 1;
}

stock ac_CheckWeaponCheat(playerid, weaponid = -1)
{
	if(weaponid != -1)
	{
		new slot = ac_GetWeaponSlot(weaponid),
			clear, ammo;
		GetPlayerWeaponData(playerid, slot, clear, ammo);
		if(((ac_Weapons[playerid][slot][ac_WeaponId] != weaponid && weaponid > 0 && ammo > 0) || ac_Weapons[playerid][slot][ac_Ammo] < ammo) && (ammo > 0))
		{
			ac_ResetPlayerWeapons(playerid);
			ac_KickWeapon(playerid);
			return true;
		}
	}
	else
	{
		new data[2];
		for(new i = 0; i < 13; i++)
		{
			GetPlayerWeaponData(playerid, i, data[0], data[1]);
			if(((ac_Weapons[playerid][i][ac_WeaponId] != data[0] && data[0] > 0 && data[1] > 0) || ac_Weapons[playerid][i][ac_Ammo] < data[1]) && (data[1] > 0))
			{
				ac_ResetPlayerWeapons(playerid);
				ac_KickWeapon(playerid);
				return true;
			}
		}
	}
	return false;
}

stock ac_KickWeapon(playerid)
{
	ac_SkipCheck[playerid] = 3;

	new String[256];
	format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}buvo iðmestas ið serverio!", GetPlayerNameEx(playerid));
	SendClientMessageToAll(-1, String);

	SendClientMessageToAll(-1, "{ffffff} Prieþastis: {FFAF00}Ginklø èytinimas.");

	ac_ResetPlayerWeapons(playerid);
    IsmestiZaideja(playerid, 100);
    return 1;
}

stock AC_SetPlayerPos( playerid, Float:pPosX, Float:pPosY, Float:pPosZ )
{
        CanCheckABX     [ playerid ] = false;
        CanCheckAirBreak[ playerid ] = false;
        NeedCheckTuningAB [ playerid ] = 5;
        SetPlayerPos( playerid, pPosX, pPosY, pPosZ );
        CanCheckABX     [ playerid ] = true;
}

stock AC_AirBreakReset( playerid )
{
        AC_oldPos[playerid][0] = 0.0;
        AC_oldPos[playerid][1] = 0.0;
        AC_oldPos[playerid][2] = 0.0;
}

stock AC_PutPlayerInVehicle(playerid, vehicleid, seatid)
{
		CanCheckABX     [ playerid ] = false;
        CanCheckAirBreak[ playerid ] = false;
        NeedCheckTuningAB [ playerid ] = 5;
        PutPlayerInVehicle( playerid, pvehicleid, pseatid );
        CanCheckABX     [ playerid ] = true;
}
#define PutPlayerInVehicle AC_PutPlayerInVehicle

stock AC_CreateVehicle(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay)
{
	new vehicleid = CreateVehicle(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay);
	VehPos[vehicleid][0] = x;
	VehPos[vehicleid][1] = y;
	VehPos[vehicleid][2] = z;
	VehPos[vehicleid][3] = angle;
	VehicleInfo[vehicleid][vColor][0] = color1;
	VehicleInfo[vehicleid][vColor][1] = color2;
	ac_VehicleHealth[vehicleid] = 1000.0;
	CanCheckVehiclePos[vehicleid] = gettime() + 7;
	return vehicleid;
}

stock AC_SetVehiclePos(vehicleid, Float:x, Float:y, Float:z)
{
	VehPos[vehicleid][0] = x;
	VehPos[vehicleid][1] = y;
	VehPos[vehicleid][2] = z;
	SetVehiclePos(vehicleid, x, y, z);
	return 1;
}

stock AC_SetVehicleZAngle(vehicleid, Float:z_angl)
{
	VehPos[vehicleid][3] = z_angl;
	SetVehicleZAngle(vehicleid, z_angl);
	return 1;
}

stock AC_SetVehiclePosEx(vehicleid, Float:x, Float:y, Float:z, Float:z_angl)
{
	VehPos[vehicleid][0] = x;
	VehPos[vehicleid][1] = y;
	VehPos[vehicleid][2] = z;
	VehPos[vehicleid][3] = z_angl;
	AC_SetVehiclePos(vehicleid, x, y, z);
	AC_SetVehicleZAngle(vehicleid, z_angl);
	return 1;
}

stock SaveVehicleCurrentPos(vehicleid)
{
	GetVehiclePos(vehicleid, VehPos[vehicleid][0], VehPos[vehicleid][1], VehPos[vehicleid][2]);
	GetVehicleZAngle(vehicleid, VehPos[vehicleid][3]);
	return 1;
}

stock CreateEntrance(EntranceName[], Float: EnterX, Float: EnterY, Float: EnterZ, InteriorID, VirtualWorld, Float: InteriorX, Float: InteriorY, Float: InteriorZ)
{
	new String[128];
    HowMuchEntrancesIs ++;
	strcat(EntranceSystem[HowMuchEntrancesIs - 1][EntranceTitle], EntranceName, 64);

	EntranceSystem[HowMuchEntrancesIs - 1][EntranceEnterPos][0]    = EnterX;
	EntranceSystem[HowMuchEntrancesIs - 1][EntranceEnterPos][1]    = EnterY;
	EntranceSystem[HowMuchEntrancesIs - 1][EntranceEnterPos][2]    = EnterZ;
	EntranceSystem[HowMuchEntrancesIs - 1][EntranceInteriorPos][0] = InteriorX;
	EntranceSystem[HowMuchEntrancesIs - 1][EntranceInteriorPos][1] = InteriorY;
	EntranceSystem[HowMuchEntrancesIs - 1][EntranceInteriorPos][2] = InteriorZ;
	EntranceSystem[HowMuchEntrancesIs - 1][EntranceInteriorID]     = InteriorID;
	EntranceSystem[HowMuchEntrancesIs - 1][EntranceVirtualWorld]   = VirtualWorld;

	format(String, sizeof(String), "{FF9C21}%s\n{ffffff}Norint áeiti, spauskite ENTER", EntranceName);
	CreateDynamic3DTextLabel(String, -1, EnterX, EnterY, EnterZ, 10.0);
	//CreateDynamic3DTextLabel(String, -1, EnterX, EnterY, EnterZ, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, VirtualWorld, InteriorID);

	format(String, sizeof(String), "{FF9C21}%s\n{ffffff}Norint iðeiti, spauskite ENTER", EntranceName);
	//CreateDynamic3DTextLabel(String, -1, InteriorX, InteriorY, InteriorZ, 10.0);
	CreateDynamic3DTextLabel(String, -1, InteriorX, InteriorY, InteriorZ, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, VirtualWorld, InteriorID);

	//CreateDynamic3DTextLabel("{B1B1B1}Iðëjimas\n{DCDCDC}Spausti ENTER", -1, InteriorX, InteriorY, InteriorZ, 10.0);

	CreatePickup 		(19197, 1, EnterX, EnterY, EnterZ,          -1);
	CreateDynamicPickup (19197, 1, InteriorX, InteriorY, InteriorZ , VirtualWorld, InteriorID);

	return HowMuchEntrancesIs - 1;
}

stock CheckEntranceEnter(playerid, bool: NowTeleport) // Ieina
{
	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 0.5, EntranceSystem[i][EntranceEnterPos][0], EntranceSystem[i][EntranceEnterPos][1], EntranceSystem[i][EntranceEnterPos][2]))
		{
	        if(NowTeleport)
	        {
				AC_SetPlayerPos      	(playerid, EntranceSystem[i][EntranceInteriorPos][0], EntranceSystem[i][EntranceInteriorPos][1], EntranceSystem[i][EntranceInteriorPos][2]);
				SetPlayerInterior    	(playerid, EntranceSystem[i][EntranceInteriorID]);
				SetPlayerVirtualWorld	(playerid, EntranceSystem[i][EntranceVirtualWorld]);
				UzsaldytiZaideja		(playerid, 3000);
				GameTextForPlayer(playerid, "~h~KRAUNAMA", 1500, 5);

				return 1;
			}
			else
			{
				return StarPlayerTextDrawUpdate(playerid, 0, 0, 0, 0, 0, USING_ENTER_BUILDING);
			}
		}
	}

	return 0;
}

stock CheckEntranceExit(playerid, bool: NowTeleport = true) // Iðeina
{
	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 0.5, EntranceSystem[i][EntranceInteriorPos][0], EntranceSystem[i][EntranceInteriorPos][1], EntranceSystem[i][EntranceInteriorPos][2]))
		{
		    if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");
		    
			if(i == LigoninesID)
		    {
		        if(PI[playerid][JustDie] > 0)
		        {
		        	SendClientMessage(playerid, -1, "{ffffff} Jus dar negalite iðeiti ið ligoninës, nes esate gydomas!");

		        	return 0;
		        }
		    }

		    if(NowTeleport)
		    {
				switch(GetPlayerVirtualWorld(playerid))
				{
					//case CLUCKIN1: 				AC_SetPlayerPos(playerid, -1972.2321,95.4998,27.6950);
					case CLUCKIN2: 				AC_SetPlayerPos(playerid, -2671.5986,258.4459,4.6328);
					case CLUCKIN3: 				AC_SetPlayerPos(playerid, -1816.5332,618.3926,35.1719);
					case CLUCKIN4: 				AC_SetPlayerPos(playerid, -2255.0740,542.0226,35.3708);
					case BURGER1:				AC_SetPlayerPos(playerid, -2355.9619,1008.1473,50.8984);
					case BURGER2:				AC_SetPlayerPos(playerid, -2336.8367,-166.7432,35.5756);
					case BURGER3:				AC_SetPlayerPos(playerid, -1912.2773,827.9753,35.2181);
					case PICERIJA1:				AC_SetPlayerPos(playerid, -1721.1998,1359.7131,7.1853);
					case PICERIJA2:				AC_SetPlayerPos(playerid, -1905.2576,443.7498,35.1709);
					case PICERIJA3:				AC_SetPlayerPos(playerid, -1808.5455,945.7303,24.8906);
					case MAISTO_PARDUOTUVE1:	AC_SetPlayerPos(playerid, -2442.6538,755.3444,35.1719);
					case MAISTO_PARDUOTUVE2:	AC_SetPlayerPos(playerid, -1967.3960,421.9390,35.1709);
					case STOTIES_DEGALINE:		AC_SetPlayerPos(playerid, -2032.9487,161.5207,29.0248);
					case VIDUTINE_DEGALINE:		AC_SetPlayerPos(playerid, -2420.0518,969.9656,45.2969);
					case DIDELE_DEGALINE:		AC_SetPlayerPos(playerid, -1675.9139,432.0653,7.1373);
					case DIDELE_DEGALINE1:		AC_SetPlayerPos(playerid, -1762.0352,-173.7098,3.6089);
					case DIDELE_DEGALINE2:		AC_SetPlayerPos(playerid, -78.3835,-1169.9236,2.1354);
					default: 					AC_SetPlayerPos(playerid, EntranceSystem[i][EntranceEnterPos][0], EntranceSystem[i][EntranceEnterPos][1], EntranceSystem[i][EntranceEnterPos][2]);
				}

				SetPlayerInterior    	(playerid, 0);
				SetPlayerVirtualWorld	(playerid, 0);
				UzsaldytiZaideja		(playerid, 3000);
				GameTextForPlayer(playerid, "~h~KRAUNAMA", 1500, 5);

				return 1;
			}
			else
			{
			    return StarPlayerTextDrawUpdate(playerid, 0, 0, 0, 0, 0, USING_ENTER_FROM_BUILDING);
			}
		}
	}

	return 0;
}



stock Clear(playerid)
{
    PI[playerid][arKaroZonoje] = false;
	PI[playerid][KadaZaide] = 0;
	PI[playerid][IeskojoLekt] = 0;
	FS[playerid][Fishing] = 0;
	FS[playerid][FishingColor] = -1;
	FS[playerid][FishingExperience] = 0;
	FS[playerid][FishingLevel] = 1;
	FS[playerid][FishWeight] = 0;
	FS[playerid][FishingProgress] = 0.0;
	SelectedCreditHouseID[playerid] = -1;
	KoksNarkotikas[playerid] = -1;
	Dazasvydis[playerid] = 0;
	PI[playerid][Kauliukas] = 0;
	KS[playerid][KS_firstplayer] = -1;
	KS[playerid][KS_secondplayer] = -1;
	KS[playerid][KS_money] = 0;
	KS[playerid][KS_time] = 0;
	KS[playerid][KS_playedtime] = 0;
	pGarageID[playerid] = -1;
	nGarageID[playerid] = -1;
	HudasPasleptas[playerid] = false;
	PI[playerid][rasestab] = 0;
	PI[playerid][Velkamas] = -1;
	KokiaGaujaValdo[playerid] 			= -1;
	PI[playerid][bakelis] = false;
	playerInfo[playerid][0] = false;
	playerInfo[playerid][1] = false;
	spectateInfo[playerid][0] = INVALID_PLAYER_ID;
	spectateInfo[playerid][1] = 0;
	spectateInfo[playerid][2] = 0;
	spectateInfo[playerid][3] = 0;

	for(new i = 0; i < MAX_INBOX_SENT_SLOTS; i ++) strdel(PlayerTelphoneInbox[playerid][i], 0, 800);
	for(new index = 0; index < 3; index ++) PI[playerid][SiandienPriimta][index] 	= 0;
	for(new index = 0; index < 3; index ++) PI[playerid][SiaSavaitePriimta][index] 	= 0;
	for(new index = 0; index < 3; index ++) PI[playerid][IsVisoPriimta][index] 		= 0;
	for(new index = 0; index < 3; index ++) PI[playerid][DarboCP][index] 			= 0.0;
	for(new index = 0; index < 5; index ++) PI[playerid][DarboCMD][index] 			= 0;

	PI[playerid][Stirna1] = 0;
	PI[playerid][Stirna2] = 0;
	PI[playerid][Stirna3] = 0;
	PI[playerid][Stirna4] = 0;
	PI[playerid][Stirna5] = 0;
	PI[playerid][teorija] = false;
	PI[playerid][IvygdeEvent] = false;
	PI[playerid][VezeKrovini] 	= 0;
	PI[playerid][AODtime] 	= 0;
	SkaitymoLaikas[playerid]					= 0;
	KelintasApmokymas[playerid]					= 0;
	RandomScreenShowNumber[playerid] 			= 0;
	PI[playerid][Issikrauna] 			= false;
	PI[playerid][Kraunasi] 				= false;
	PI[playerid][KaPasikroves] 			= -1;
	PI[playerid][KrovinioVerte] 		= 0;
	PI[playerid][KrovinioAtlygis] 		= 0;
	PI[playerid][GydymoLaikas] 		= 0;
	PI[playerid][KrovimoLaikas] 		= 0;
	PI[playerid][IssikrovimoLaikas]		= 0;
	PI[playerid][AtsiemePriza] 			= false;
	PI[playerid][stebuklas1] 			= 0;
	PI[playerid][stebuklas2] 			= 0;
	PI[playerid][stebuklas3] 			= 0;
	PI[playerid][stebuklas4] 			= 0;
	PI[playerid][stebuklas5] 			= 0;
	PI[playerid][stebuklas6] 			= 0;
	PI[playerid][stebuklas7] 			= 0;
	PI[playerid][KaKviecia]				= -1;
	PI[playerid][DirbaTaksi] 			= false;
	PI[playerid][KasPosX]				= 0.0;
	PI[playerid][KasPosY]				= 0.0;
	PI[playerid][KasPosZ]				= 0.0;
	PI[playerid][Aliuminis]				= 0.0;
	PI[playerid][Varis]					= 0.0;
	PI[playerid][Zalvaris]				= 0.0;
	PI[playerid][Auksas]				= 0.0;
	PI[playerid][Titanas]				= 0.0;
	PI[playerid][Sidabras]				= 0.0;
	PI[playerid][Viela] = 0;
	PI[playerid][dViela] = 0;
	PI[playerid][BandoAtsirakinti] = -1;
	PI[playerid][BandoAtristi] = -1;
	PI[playerid][KaPerka] = 0;
	PI[playerid][AOD] = false;
	TuriGaisra[playerid] = false;
	TuriIskvietima[playerid] = false;
	Ugnis[playerid] = INVALID_OBJECT_ID;
	UgniesProc[playerid] = 0;
	garageID[playerid] = -1;
	PI[playerid][Priziuretojas] = 0;
	VersloID[playerid] = -1;
	VersloKaina[playerid] = 0;
	PI[playerid][VairavimoKlaidos] = 0;
	GaisroPos[playerid][0] = 0.0;
	GaisroPos[playerid][1] = 0.0;
	GaisroPos[playerid][2] = 0.0;
	format(PI[playerid][KadaUzsiregino], 32, "-");
	format(PI[playerid][LastActive], 32, "-");
	PI[playerid][PardSaskaita] = 0;
	PI[playerid][Ledai] = 0;
	PI[playerid][Sokoladas] = 0;
	PI[playerid][Duona] = 0;
	PI[playerid][Desra] = 0;
	PI[playerid][Sultys] = 0;
	PI[playerid][Pizza] = 0;
	PI[playerid][Surelis] = 0;
	PI[playerid][gps]					= false;
	LaikPasleptas[playerid]						= false;
	ItariamasZaidejas[playerid]					= -1;
	AntiF4[playerid] 							= 0;
	NeedCheckTuningAB [playerid]		 		= 0;
	CanCheckAirBreak[playerid] 					= false;
	CanCheckABX[playerid] 						= true;
	Prisijunges[playerid]                 		= false;
	HouseID[playerid]                     		= -1;
	ChoosedPlayer[playerid]               		= INVALID_PLAYER_ID;
	HouseCost[playerid]                   		= 0;
	AntiAntiBan[playerid] 						= false;
	PI[playerid][Alkis]					= 0.0;
	PI[playerid][Ieskomas]				= 0;
	PI[playerid][HaveTimeUntilDeath]	= 0;
	NoCheckEntrancePickup[playerid] 			= 0;
	PI[playerid][JustDie]				= 0;
	KiekIpyle[playerid]							= 0.0;
	IpyleSuma[playerid]							= 0;
	MasinosKainaEx[playerid]					= 0;
	PasirinktasZaidejas[playerid]				= -1;
	KraunaMasinaP[playerid] 					= false;
	IskraunaMasinaP[playerid]					= false;
	PI[playerid][TurgausMasina]			= -1;
	PI[playerid][PasirinktasKuras] 		= 0;
	PI[playerid][KokiaDegaline]			= -1;
	PI[playerid][SukurtaMasina] 		= -1;
	PI[playerid][PasirinktaMasina] 		= -1;
	PI[playerid][TransportoSlotas]		= false;
	PI[playerid][Transportas1]			= -1;
	PI[playerid][Transportas2]			= -1;
	PI[playerid][Transportas3]			= -1;
	PI[playerid][VisoPrazaide]			= 0;
	PI[playerid][RaseMapp]				= 0;
	PI[playerid][GavoZala]				= 0;
	PI[playerid][banded]				= false;
	PI[playerid][DarboRangas]			= 0;
	KiekSugavo[playerid] 						= 0;
	KiekIskases[playerid]						= 0;
	PI[playerid][Heroinas]				= 0;
	PI[playerid][Ekstazi]				= 0;
	PI[playerid][Kokainas]				= 0;
	PI[playerid][Weed]					= 0;
	PI[playerid][Experience]			= 0;
	PI[playerid][Battery] 				= 0;
	PI[playerid][TelMokesciai]			= 0.0;
	PI[playerid][PhoneMoney]			= 0.0;
	PI[playerid][PhoneStatus] 			= 0;
	PI[playerid][TelphoneCalling] 		= 0;
	PI[playerid][TelphoneInUse] 		= -1;
	PI[playerid][MobilePhoneNumber] 	= 0;
	PI[playerid][Sutartis] 				= 0;
	PI[playerid][MobilePhone] 			= 0;
    ChoosedPlayers[playerid] 					= INVALID_PLAYER_ID;
	PropertyPrice[playerid] 					= 0;
	VardaiIsjungti[playerid] = false;
	PI[playerid][CorrectTheoryAnswers] = 0;
	PI[playerid][KreditineKortele] = false;
	InTrainingZone[playerid] = false;
	SelectedSkin[playerid] = -1;
	SelectedGangSkin[playerid] = -1;
	PI[playerid][HaveGlassesOn] = 0;
	PI[playerid][KiekTuriRepTasku] = 0;
	PI[playerid][KelintaMisija] = 0;
	PI[playerid][pinigai] = 0;
	Prisijunges[playerid] = false;
	PI[playerid][PlayerHealth] = 100.0;
	PI[playerid][PlayerArmour] = 0.0;
	PI[playerid][pHealthCheck] = -5;
	format(PI[playerid][PlayerName], 21, "--");
	format(PI[playerid][PlayerIP], 16, "--");
	PI[playerid][FloodTime] = 0;
	PI[playerid][FloodWarns] = 0;
	PI[playerid][gMember] = -1;
	Logged[playerid] = false;
	PI[playerid][Login] = -1;
	PI[playerid][pavdrk]=0;
	Tazed[playerid] = false;
	Tazer[playerid] = false;
	KvieciaTarnyba[playerid] = false;
	PI[playerid][GetPos][0] = 0.0;
	PI[playerid][GetPos][1] = 0.0;
	PI[playerid][GetPos][2] = 0.0;
	PI[playerid][PasiuleGet] = 0;
	PI[playerid][GetVW] = 0;
	PI[playerid][GetInt] = 0;
	GreitiMatuoja[playerid] = 0;
	PI[playerid][DeleteAcc] = false;
	PI[playerid][gLicenzija] = false;
	PI[playerid][ParaseAdminams] = 0;
	PI[playerid][ParaseVipams] = 0;
	PI[playerid][ParasePavaduotojam] = 0;
	PI[playerid][ParaseDyrikas] = 0;
	PI[playerid][ParaseAdminas] = 0;
	PI[playerid][ParaseVipas] = 0;
	PI[playerid][ParaseSkelbima] = 0;
	PI[playerid][ParaseGauja] = 0;
	PI[playerid][uztvara] = INVALID_OBJECT_ID;
	//PI[playerid][Nuskriaude] = INVALID_PLAYER_ID;
	PI[playerid][FakeKill] = 0;
	PI[playerid][vVeh] = -1;
	PI[playerid][vPressed] = -1;
	PI[playerid][Transportas1] = -1;
	PI[playerid][Transportas2] = -1;
	PI[playerid][AdminLevel] = 0;
	PI[playerid][Muted] = 0;
	PI[playerid][medicinospazyma] = 0;
	PI[playerid][BanLaikas] = 0;
	PI[playerid][CanTakeCar] = -1;
	PI[playerid][CarCost] = -1;
	PI[playerid][authstate]=-1;
	PI[playerid][beglys] = false;
	PI[playerid][laikrodis]=0;
	PI[playerid][prisikroves]=0;
	PI[playerid][uzsisakedviracius]=0;
	PI[playerid][uzsisakebaldus]=0;
	PI[playerid][uzsisakebuittech]=0;
	PI[playerid][uzsisakeanglis]=0;
	PI[playerid][uzsisakezvyra]=0;
	PI[playerid][uzsisakegunus]=0;
	PI[playerid][uzsisakenarkus]=0;
	PI[playerid][uzsisakezole]=0;
	PI[playerid][teises]=false;
	PI[playerid][Mteises]=false;
	PI[playerid][FTeises]=false;
	for(new faction=0; faction < 15; faction++) PI[playerid][leanvited][faction]=false;
	PI[playerid][ikalintas]=false;
	PI[playerid][cuffed]=false;
	PI[playerid][masina]=-1;
	PI[playerid][banke]=0;
	PI[playerid][alga]=0;
	PI[playerid][stazasteisesaugos]=0;
	PI[playerid][stazaskurj]=0;
	PI[playerid][stazasmediku]=0;
	PI[playerid][stazastaxi]=0;
	PI[playerid][stazasfuristu]=0;
	PI[playerid][stazasmechaniku]=0;
	PI[playerid][stazaspaprastodarbo]=0;
	PI[playerid][GreicioBalai]=0;
	PI[playerid][ispejimai]=0;
	PI[playerid][dispejimai]=0;
	PI[playerid][AdminWarns]=0;
	PI[playerid][Ekstazi]=0;
	PI[playerid][Heroinas]=0;
	PI[playerid][specialybe]=0;
	PI[playerid][kalejimo_laikas]=0;
	PI[playerid][bilietas]=false;
	PI[playerid][lytis]=0;
	PI[playerid][uniforma]=-1;
	PI[playerid][drabuziai]=-1;
	PI[playerid][rid][6]=30;
	PI[playerid][lektuvas]=-1;
	PI[playerid][pradirbo]=0;
	PI[playerid][prazaide]=0;
	PI[playerid][pinigai] = 0;
	PI[playerid][uniformd]=false;
	PI[playerid][plead]=0;
	PI[playerid][pila]=false;
	PI[playerid][SusikuresKorta] = false;
	PI[playerid][Dirzas] = false;
	Ribotuvas[playerid] = false;
	Warns[playerid] = 0;
	PI[playerid][sGyvybiuKaina] = 0;
	PI[playerid][sPicosKaina] = 0;
	PI[playerid][sArmoroKaina] = 0;
	PI[playerid][sPazymosKaina] = 0;
	IsPlayerInZone[playerid] = false;
	PI[playerid][mNusipirktiCar] = false;
	PI[playerid][mNusipirktiNama] = false;
	PI[playerid][mNusipirktiVersla] = false;
	PI[playerid][misTeises] = false;
	PI[playerid][mMTeises] = false;
	PI[playerid][mFTeises] = false;
	PI[playerid][mGLicenzija] = false;
	PI[playerid][mUzsidirbt100k] = false;
	PI[playerid][mUzsidirbt500k] = false;
	PI[playerid][mUzsidirbt1m] = false;
	PI[playerid][mTureti300k] = false;
	PI[playerid][mTureti900k] = false;
	PI[playerid][mTureti5m] = false;
	PI[playerid][mButKalejme] = false;
	PI[playerid][mButDarbe] = false;
	PI[playerid][mButGaujoje] = false;
	PI[playerid][mTuret1000xp] = false;
	PI[playerid][mTuret10000xp] = false;
	PI[playerid][mTuret50000xp] = false;
	//PD
	PI[playerid][mdSuimtZmogu] = false;
	PI[playerid][mdDuotBauda] = false;
	PI[playerid][mdAtimtTeises] = false;
	PI[playerid][mdPatikrintiZmogu] = false;
	//Mech
	PI[playerid][mdFixCar] = false;
	PI[playerid][mdPiltDegalus] = false;
	//Taxi
	PI[playerid][mdPaveztZmogu] = false;
	//Fûristø
	PI[playerid][mdNuveztKrovini] = false;
	//Medikø
	PI[playerid][mdParduotiSveikPaz] = false;
	PI[playerid][mdPagydytiZmogu] = false;
	//Þvejyba
	PI[playerid][ungurys] = 0;
	PI[playerid][karosas] = 0;
	PI[playerid][karpis] = 0;
	PI[playerid][karsis] = 0;
	PI[playerid][lydeka] = 0;
	PI[playerid][meskere] = false;
	PI[playerid][masalas] = 0;
	PI[playerid][valas] = false;
	PI[playerid][zvejoja] = false;
	PI[playerid][kasa] = false;
	PI[playerid][kiekistrauke] = 0;
	PI[playerid][kiekiskase] = 0;
	PI[playerid][laikastraukti] = false;
	//Banino
	PI[playerid][baninolaikui] = 0;
	PI[playerid][baninopaprastai] = 0;
	//AFK
	PI[playerid][AFK_Stat] = false;
	PI[playerid][AFK_Label] = Text3D:INVALID_3DTEXT_ID;
	//VM
	PI[playerid][EgzaminoCP] = 0;
	PI[playerid][AikstelesCPB] = 0;
	PI[playerid][AikstelesCPA] = 0;
	PI[playerid][Apraktika] = true;
	PI[playerid][Bpraktika] = true;
	//Autopilotas
	PI[playerid][suautopilotu] = false;
	//Anti home
	PI[playerid][AntiHomeKint] = INVALID_VEHICLE_ID;
	//Ar emigruotas kint 0;
	PI[playerid][ArEmigruotas] = false;

	PI[playerid][AdminLaikas] = 0;
	PI[playerid][AlgosLaikas] = 0;
	PI[playerid][pAlga] = false;
	//
	PI[playerid][NaudojoTazeri] = 0;
	//Iðkvietimai
	PI[playerid][IskvietesPolicija] = false;
	PI[playerid][IskvietesMedikus] = false;
	PI[playerid][IskvietesTaxi] = false;
	PI[playerid][Iskvietesmechanikus] = false;
	//Kita
	PI[playerid][KadaVeze] = 0;
	PI[playerid][KiekKulku] = 0;
	PI[playerid][KainaKulku] = 0;
	PI[playerid][KadaGydes] = 0;
	PI[playerid][KadaGun] = 0;
	PI[playerid][KokiGinkla] = 0;

	//My
	SekamasZaidejas[playerid] = -1;
	PI[playerid][AlgosKiekis] = 0;
	Floodas[playerid] = 0;
	return 0;
}
stock LoadPlayerGuns(playerid)
{
	new kulka[10], lQuery[512], aaaaa[1500];

	strcat(lQuery,"SELECT Ginklas0,Ammo0,Ginklas1,Ammo1,Ginklas2,Ammo2,Ginklas3,Ammo3,Ginklas4,Ammo4,Ginklas5,Ammo5,Ginklas6,Ammo6,Ginklas7,Ammo7,Ginklas8,Ammo8,Ginklas9,Ammo9,");
	format(lQuery, sizeof lQuery, "%sGinklas10,Ammo10 FROM `players` WHERE `Vardas` = '%s'", lQuery, GetPlayerNameEx(playerid));

	mysql_query 		(lQuery);
	mysql_store_result	();

	if(mysql_num_rows())
	{
		mysql_fetch_row(aaaaa);

		mysql_fetch_field_row(lQuery, "Ginklas0"); mysql_fetch_field_row(kulka, "Ammo0");
	    ac_GivePlayerWeapon( playerid, strval(lQuery), strval(kulka));

	    mysql_fetch_field_row(lQuery, "Ginklas1"); mysql_fetch_field_row(kulka, "Ammo1");
	    ac_GivePlayerWeapon( playerid, strval(lQuery), strval(kulka));

	    mysql_fetch_field_row(lQuery, "Ginklas2"); mysql_fetch_field_row(kulka, "Ammo2");
	    ac_GivePlayerWeapon( playerid, strval(lQuery), strval(kulka));

	    mysql_fetch_field_row(lQuery, "Ginklas3"); mysql_fetch_field_row(kulka, "Ammo3");
	    ac_GivePlayerWeapon( playerid, strval(lQuery), strval(kulka));

	    mysql_fetch_field_row(lQuery, "Ginklas4"); mysql_fetch_field_row(kulka, "Ammo4");
	    ac_GivePlayerWeapon( playerid, strval(lQuery), strval(kulka));

	    mysql_fetch_field_row(lQuery, "Ginklas5"); mysql_fetch_field_row(kulka, "Ammo5");
	    ac_GivePlayerWeapon( playerid, strval(lQuery), strval(kulka));

	    mysql_fetch_field_row(lQuery, "Ginklas6"); mysql_fetch_field_row(kulka, "Ammo6");
	    ac_GivePlayerWeapon( playerid, strval(lQuery), strval(kulka));

	    mysql_fetch_field_row(lQuery, "Ginklas7"); mysql_fetch_field_row(kulka, "Ammo7");
	    ac_GivePlayerWeapon( playerid, strval(lQuery), strval(kulka));

	    mysql_fetch_field_row(lQuery, "Ginklas8"); mysql_fetch_field_row(kulka, "Ammo8");
	    ac_GivePlayerWeapon( playerid, strval(lQuery), strval(kulka));

	    mysql_fetch_field_row(lQuery, "Ginklas9"); mysql_fetch_field_row(kulka, "Ammo9");
	    ac_GivePlayerWeapon( playerid, strval(lQuery), strval(kulka));

	    mysql_fetch_field_row(lQuery, "Ginklas10"); mysql_fetch_field_row(kulka, "Ammo10");
	    ac_GivePlayerWeapon( playerid, strval(lQuery), strval(kulka));
	    
	    mysql_fetch_field_row(lQuery, "Ginklas11"); mysql_fetch_field_row(kulka, "Ammo11");
	    ac_GivePlayerWeapon( playerid, strval(lQuery), strval(kulka));
	    
	    mysql_fetch_field_row(lQuery, "Ginklas12"); mysql_fetch_field_row(kulka, "Ammo12");
	    ac_GivePlayerWeapon( playerid, strval(lQuery), strval(kulka));
	}

	mysql_free_result();

	return 1;
}

stock SavePlayerGuns(playerid)
{
	new lQuery[656];

	format( lQuery, sizeof(lQuery), "UPDATE `players` SET \
	    `Ginklas0` = %d, `Ammo0` = %d, \
		`Ginklas1` = %d, `Ammo1` = %d, \
		`Ginklas2` = %d, `Ammo2` = %d, \
		`Ginklas3` = %d, `Ammo3` = %d, \
		`Ginklas4` = %d, `Ammo4` = %d, \
		`Ginklas5` = %d, `Ammo5` = %d, \
		`Ginklas6` = %d, `Ammo6` = %d,",
       	ac_Weapons[playerid][0][ac_WeaponId], ac_Weapons[playerid][0][ac_Ammo],
       	ac_Weapons[playerid][1][ac_WeaponId], ac_Weapons[playerid][1][ac_Ammo],
       	ac_Weapons[playerid][2][ac_WeaponId], ac_Weapons[playerid][2][ac_Ammo],
       	ac_Weapons[playerid][3][ac_WeaponId], ac_Weapons[playerid][3][ac_Ammo],
       	ac_Weapons[playerid][4][ac_WeaponId], ac_Weapons[playerid][4][ac_Ammo],
       	ac_Weapons[playerid][5][ac_WeaponId], ac_Weapons[playerid][5][ac_Ammo],
       	ac_Weapons[playerid][6][ac_WeaponId], ac_Weapons[playerid][6][ac_Ammo]);

    format( lQuery, sizeof(lQuery), "%s`Ginklas7` = %d, `Ammo7` = %d, \
		`Ginklas8` = %d, `Ammo8` = %d, \
		`Ginklas9` = %d, `Ammo9` = %d, \
		`Ginklas10` = %d, `Ammo10` = %d, \
		`Ginklas11` = %d, `Ammo11` = %d, \
		`Ginklas12` = %d, `Ammo12` = %d WHERE `Vardas` = '%s'", lQuery,
       	ac_Weapons[playerid][7][ac_WeaponId], ac_Weapons[playerid][7][ac_Ammo],
       	ac_Weapons[playerid][8][ac_WeaponId], ac_Weapons[playerid][8][ac_Ammo],
       	ac_Weapons[playerid][9][ac_WeaponId], ac_Weapons[playerid][9][ac_Ammo],
       	ac_Weapons[playerid][10][ac_WeaponId], ac_Weapons[playerid][10][ac_Ammo], 
       	ac_Weapons[playerid][11][ac_WeaponId], ac_Weapons[playerid][11][ac_Ammo], 
       	ac_Weapons[playerid][12][ac_WeaponId], ac_Weapons[playerid][12][ac_Ammo], GetPlayerNameEx(playerid));
    mysql_query(lQuery);

	return 1;
}

stock LoadPlayerData(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;
	new Float:gpPos[3], lQuery[200], aaaaa[1500];
	format(lQuery, sizeof(lQuery), "SELECT * FROM `players` WHERE `Vardas` = '%s'", GetPlayerNameEx(playerid));
	mysql_query(lQuery);
	mysql_store_result();

	if(mysql_num_rows() != 0)
	{
		mysql_fetch_row(aaaaa);
		mysql_fetch_field_row(lQuery, "Xp"); 					PI[playerid][Experience] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "World"); 				SetPlayerVirtualWorld(playerid, strval(lQuery));
		mysql_fetch_field_row(lQuery, "Wanted"); 				PI[playerid][Ieskomas] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Girtumas"); 				SetPlayerDrunkLevel(playerid, strval(lQuery));
		mysql_fetch_field_row(lQuery, "Gyvybes"); 				SetPlayerHealthEx(playerid, 99.9);
		mysql_fetch_field_row(lQuery, "Sarvai");				SetPlayerArmourEx(playerid, floatstr(lQuery));

		SetPlayerScore(playerid, PI[playerid][Experience]);

		mysql_fetch_field_row(lQuery, "Admin"); 				PI[playerid][AdminLevel] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Priziuretojas"); 		PI[playerid][Priziuretojas] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Muted"); 				PI[playerid][Muted] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "MedicinosPazyma"); 		PI[playerid][medicinospazyma] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "BanLaikas"); 			PI[playerid][BanLaikas] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Laikrodis"); 			PI[playerid][laikrodis] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "MoneyBank"); 			PI[playerid][banke] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Alga"); 					PI[playerid][alga] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Stazasteisesaugos"); 	PI[playerid][stazasteisesaugos] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Stazaskurj"); 			PI[playerid][stazaskurj] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Stazasmediku"); 			PI[playerid][stazasmediku] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Stazasfuristu"); 		PI[playerid][stazasfuristu] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Stazasmechaniku"); 		PI[playerid][stazasmechaniku] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Stazaspaprastodarbo"); 	PI[playerid][stazaspaprastodarbo] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Vairavimobaud"); 		PI[playerid][GreicioBalai] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Rangas"); 				PI[playerid][DarboRangas] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Ispejimai"); 			PI[playerid][ispejimai] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Dispejimai"); 			PI[playerid][dispejimai] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "AdminWarns"); 			PI[playerid][AdminWarns] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Pradirbo"); 				PI[playerid][pradirbo] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Prazaide"); 				PI[playerid][prazaide] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Lytis"); 				PI[playerid][lytis] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Drabuziai"); 			PI[playerid][drabuziai] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Uniforma"); 				PI[playerid][uniforma] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Lead"); 					PI[playerid][plead] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Kalejime"); 				PI[playerid][kalejimo_laikas] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Job"); 					PI[playerid][specialybe] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Kokainas"); 				PI[playerid][Kokainas] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Ekstazi"); 				PI[playerid][Ekstazi] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Heroinas");		 		PI[playerid][Heroinas] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Zole"); 					PI[playerid][Weed] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "pavdrk"); 				PI[playerid][pavdrk] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "pos_X"); 				gpPos[0] = floatstr(lQuery);
		mysql_fetch_field_row(lQuery, "pos_Y"); 				gpPos[1] = floatstr(lQuery);
		mysql_fetch_field_row(lQuery, "pos_Z"); 				gpPos[2] = floatstr(lQuery);
		mysql_fetch_field_row(lQuery, "KadaUzsiregino");   	   	format(PI[playerid][KadaUzsiregino], 32, "%s", lQuery);

		AC_SetPlayerPos(playerid, gpPos[0], gpPos[1], gpPos[2] + 1);

		mysql_fetch_field_row(lQuery, "Interior"); 				SetPlayerInterior(playerid, strval(lQuery));
		mysql_fetch_field_row(lQuery, "KiekTuriRepTasku"); 		PI[playerid][KiekTuriRepTasku] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "FondoPinigai");     		PI[playerid][FondoPinigai] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "ZaidejoIspejimai"); 		PI[playerid][ZaidejoIspejimai] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "KelintaMisija");    		PI[playerid][KelintaMisija] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Salmas");           		PI[playerid][Salmas] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "gMember");          		PI[playerid][gMember] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Glasses"); 				PI[playerid][HaveGlassesOn] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "PasiemeAlga"); 			PI[playerid][PasiemeAlga] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "KreditineKortele"); 		PI[playerid][KreditineKortele] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "Theory"); 				PI[playerid][teorija] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "Praktika"); 				PI[playerid][Apraktika] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "BPraktika"); 			PI[playerid][Bpraktika] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "HouseID");          		HouseID[playerid] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "GPS"); 					PI[playerid][gps] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "TuriTaksiLic"); 			PI[playerid][TuriTaksiLic] = !!strval(lQuery);

		mysql_fetch_field_row(lQuery, "MobilePhone"); 			PI[playerid][MobilePhone] 		= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "MobilePhoneNumber"); 	PI[playerid][MobilePhoneNumber] = strval(lQuery);
	    mysql_fetch_field_row(lQuery, "Sutartis"); 				PI[playerid][Sutartis] 			= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "PhoneStatus"); 			PI[playerid][PhoneStatus] 		= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "PhoneMoney"); 			PI[playerid][PhoneMoney]		= floatstr(lQuery);
	    mysql_fetch_field_row(lQuery, "TelMokesciai"); 			PI[playerid][TelMokesciai]		= floatstr(lQuery);
	    mysql_fetch_field_row(lQuery, "Battery"); 				PI[playerid][Battery] 			= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "VisoPrazaide"); 			PI[playerid][VisoPrazaide] 		= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "TransportoSlotas"); 		PI[playerid][TransportoSlotas] 	= !!strval(lQuery);
	    mysql_fetch_field_row(lQuery, "Alkis"); 				PI[playerid][Alkis] 			= floatstr(lQuery);
	    mysql_fetch_field_row(lQuery, "Surelis"); 				PI[playerid][Surelis] 			= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "Duona"); 				PI[playerid][Duona] 			= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "Pizza"); 				PI[playerid][Pizza] 			= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "Sokoladas"); 			PI[playerid][Sokoladas] 		= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "Sultys"); 				PI[playerid][Sultys] 			= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "Desra"); 				PI[playerid][Desra] 			= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "Ledai"); 				PI[playerid][Ledai] 			= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "PardSaskaita"); 			PI[playerid][PardSaskaita] 		= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "FishingExperience"); 	FS[playerid][FishingExperience] = strval(lQuery);
	    mysql_fetch_field_row(lQuery, "FishingLevel"); 			FS[playerid][FishingLevel] 		= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "Viela"); 				PI[playerid][Viela] 			= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "dViela"); 				PI[playerid][dViela] 			= strval(lQuery);
	    mysql_fetch_field_row(lQuery, "Aliuminis"); 			PI[playerid][Aliuminis]			= floatstr(lQuery);
	    mysql_fetch_field_row(lQuery, "Varis"); 				PI[playerid][Varis]				= floatstr(lQuery);
	    mysql_fetch_field_row(lQuery, "Zalvaris"); 				PI[playerid][Zalvaris]			= floatstr(lQuery);
	    mysql_fetch_field_row(lQuery, "Auksas"); 				PI[playerid][Auksas]			= floatstr(lQuery);
	    mysql_fetch_field_row(lQuery, "Titanas"); 				PI[playerid][Titanas]			= floatstr(lQuery);
	    mysql_fetch_field_row(lQuery, "Sidabras"); 				PI[playerid][Sidabras]			= floatstr(lQuery);

		//PASIEKIMAI ÞAIDËJO
		mysql_fetch_field_row(lQuery, "mNusipirktiCar"); 		PI[playerid][mNusipirktiCar] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mNusipirktiNama"); 		PI[playerid][mNusipirktiNama] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mNusipirktiVersla"); 	PI[playerid][mNusipirktiVersla] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mTeises"); 				PI[playerid][misTeises] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mMTeises"); 				PI[playerid][mMTeises] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mFTeises"); 				PI[playerid][mFTeises] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mGLicenzija"); 			PI[playerid][mGLicenzija] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mUzsidirbt100k"); 		PI[playerid][mUzsidirbt100k] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mUzsidirbt500k"); 		PI[playerid][mUzsidirbt500k] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mUzsidirbt1m"); 			PI[playerid][mUzsidirbt1m] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mTureti300k"); 			PI[playerid][mTureti300k] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mTureti900k"); 			PI[playerid][mTureti900k] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mTureti5m"); 			PI[playerid][mTureti5m] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mButKalejme"); 			PI[playerid][mButKalejme] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mButDarbe");			 	PI[playerid][mButDarbe] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mButGaujoje"); 			PI[playerid][mButGaujoje] = !!strval(lQuery);
				//PASIEKIMAI DARBØ
		mysql_fetch_field_row(lQuery, "mdSuimtZmogu"); 			PI[playerid][mdSuimtZmogu] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mdDuotBauda"); 			PI[playerid][mdDuotBauda] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mdAtimtTeises"); 		PI[playerid][mdAtimtTeises] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mdPatikrintiZmogu"); 	PI[playerid][mdPatikrintiZmogu] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mdFixCar"); 				PI[playerid][mdFixCar] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mdPiltDegalus"); 		PI[playerid][mdPiltDegalus] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mdPaveztZmogu"); 		PI[playerid][mdPaveztZmogu] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mdNuveztKrovini"); 		PI[playerid][mdNuveztKrovini] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mdParduotiSveikPaz"); 	PI[playerid][mdParduotiSveikPaz] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "mdPagydytiZmogu"); 		PI[playerid][mdPagydytiZmogu] = !!strval(lQuery);

		//BOOL KINT LOAD
		mysql_fetch_field_row(lQuery, "Surakintas"); 			PI[playerid][cuffed] = !!strval(lQuery);
		//mysql_fetch_field_row(lQuery, "Suristas"); 				PI[playerid][banded] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "License"); 				PI[playerid][teises] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "LicenseBike"); 			PI[playerid][Mteises] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "LicenseFura"); 			PI[playerid][FTeises] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "Uniformd"); 				PI[playerid][uniformd] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "SusikuresKorta");		PI[playerid][SusikuresKorta] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "Ikalintas"); 			PI[playerid][ikalintas] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "gLicenzija"); 			PI[playerid][gLicenzija] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "Uzbanintas"); 			PI[playerid][Uzbanintas] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "ArEmigruotas"); 			PI[playerid][ArEmigruotas] = !!strval(lQuery);

		//Privilegijos
		mysql_fetch_field_row(lQuery, "AdminLaikas"); 			PI[playerid][AdminLaikas] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "pAlga"); 				PI[playerid][pAlga] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "AlgosLaikas"); 			PI[playerid][AlgosLaikas] = strval(lQuery);

		//Þvejyba
		mysql_fetch_field_row(lQuery, "Meskere"); 				PI[playerid][meskere] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "Valas"); 				PI[playerid][valas] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "Masalas"); 				PI[playerid][masalas] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Ungurys"); 				PI[playerid][ungurys] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Karosas"); 				PI[playerid][karosas] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Karpis"); 				PI[playerid][karpis] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Karsis"); 				PI[playerid][karsis] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Lydeka"); 				PI[playerid][lydeka] = strval(lQuery);

		mysql_fetch_field_row(lQuery, "SelectedHouse"); 		SelectedCreditHouseID[playerid] = strval(lQuery);

		mysql_fetch_field_row(lQuery, "1stebuklas"); 			PI[playerid][stebuklas1] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "2stebuklas"); 			PI[playerid][stebuklas2] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "3stebuklas"); 			PI[playerid][stebuklas3] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "4stebuklas"); 			PI[playerid][stebuklas4] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "5stebuklas"); 			PI[playerid][stebuklas5] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "6stebuklas"); 			PI[playerid][stebuklas6] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "7stebuklas"); 			PI[playerid][stebuklas7] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "AtsiemePriza"); 			PI[playerid][AtsiemePriza] = !!strval(lQuery);

		//Baninimo likes laikas
		mysql_fetch_field_row(lQuery, "BaninoPaprastai"); 		PI[playerid][baninopaprastai] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "BaninoLaikui"); 			PI[playerid][baninolaikui] = strval(lQuery);

		//Kita..
		mysql_fetch_field_row(lQuery, "KadaVeze"); 				PI[playerid][KadaVeze] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Beglys"); 				PI[playerid][beglys] = !!strval(lQuery);

		mysql_fetch_field_row(lQuery, "garageID"); 				garageID[playerid] = strval(lQuery);

		mysql_fetch_field_row(lQuery, "HelpsForToday"); 		AHS[playerid][HelpsForToday] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "HelpsForWeek"); 			AHS[playerid][HelpsForWeek] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "HelpsInAll"); 			AHS[playerid][HelpsInAll] = strval(lQuery);

		mysql_fetch_field_row(lQuery, "Stirna1"); 				PI[playerid][Stirna1] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Stirna2"); 				PI[playerid][Stirna2] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Stirna3"); 				PI[playerid][Stirna3] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Stirna4"); 				PI[playerid][Stirna4] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Stirna5"); 				PI[playerid][Stirna5] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "IvygdeEvent"); 			PI[playerid][IvygdeEvent] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "bakelis"); 				PI[playerid][bakelis] = !!strval(lQuery);
		mysql_fetch_field_row(lQuery, "Kauliukas"); 			PI[playerid][Kauliukas] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "KadaZaide"); 			PI[playerid][KadaZaide] = strval(lQuery);
		mysql_fetch_field_row(lQuery, "Stazastaxi"); 			PI[playerid][stazastaxi] = strval(lQuery);

		switch(PI[playerid][specialybe])
		{
			case 1:
			{
				mysql_fetch_field_row(lQuery, "SiandienPriimta"); 		PI[playerid][SiandienPriimta][0] = strval(lQuery);
				mysql_fetch_field_row(lQuery, "IsVisoPriimta"); 		PI[playerid][SiaSavaitePriimta][0] = strval(lQuery);
				mysql_fetch_field_row(lQuery, "SiaSavaitePriimta"); 	PI[playerid][IsVisoPriimta][0] = strval(lQuery);
			}

			case 2:
			{
				mysql_fetch_field_row(lQuery, "SiandienPriimta"); 		PI[playerid][SiandienPriimta][1] = strval(lQuery);
				mysql_fetch_field_row(lQuery, "IsVisoPriimta"); 		PI[playerid][SiaSavaitePriimta][1] = strval(lQuery);
				mysql_fetch_field_row(lQuery, "SiaSavaitePriimta"); 	PI[playerid][IsVisoPriimta][1] = strval(lQuery);
			}

			case 4:
			{
				mysql_fetch_field_row(lQuery, "SiandienPriimta"); 		PI[playerid][SiandienPriimta][2] = strval(lQuery);
				mysql_fetch_field_row(lQuery, "IsVisoPriimta"); 		PI[playerid][SiaSavaitePriimta][2] = strval(lQuery);
				mysql_fetch_field_row(lQuery, "SiaSavaitePriimta"); 	PI[playerid][IsVisoPriimta][2] = strval(lQuery);
			}
		}

		mysql_fetch_field_row(lQuery, "MoneyPocket");			PI[playerid][pinigai] = strval(lQuery);

		//PI[playerid][pCashCheck] = gettime() + 15;

		new Querry[150];
		format(Querry, 150, "UPDATE players SET `MoneyPocket` = '%d' WHERE `Vardas` = '%s'", PI[playerid][pinigai], GetPlayerNameEx(playerid));
		mysql_query(Querry);

		format(Querry, sizeof(Querry),  "~w~$~g~%s", konvertuoti_pinigus(PI[playerid][pinigai]));
		PlayerTextDrawSetString(playerid, hudas_p[playerid][2], Querry);
	}

	mysql_free_result();

	LoadPlayerGuns(playerid);

	Prisijunges[playerid] = true;
	//garageID[playerid] = HouseID[playerid];

	new str[128];

	for(new s = 0; s < 3; s ++) PlayerTextDrawShow(playerid, hudas_p[playerid][s]);
	for(new s = 0; s < 5; s ++)	TextDrawShowForPlayer(playerid, hudas_g[s]);

	PlayerTextDrawShow(playerid, sumustinis[playerid][0]);

	new Float: Progress = (496.161132 + (PI[playerid][Alkis] * 1.11638916));
	PlayerTextDrawTextSize(playerid, hudas_p[playerid][0], Progress, 0.000000);

	format(str, sizeof(str), "~y~[]~w~ ITARIMO LYGIS:~R~ %d", PI[playerid][Ieskomas]);
	PlayerTextDrawSetString(playerid, hudas_p[playerid][1], str);

	format(str, sizeof(str),  "~w~$~g~%s", konvertuoti_pinigus(PI[playerid][pinigai]));
	PlayerTextDrawSetString(playerid, hudas_p[playerid][2], str);

	PlayerTextDrawHide(playerid, hudas_p[playerid][0]);
	PlayerTextDrawShow(playerid, hudas_p[playerid][0]);

	// -------------------------------------------------------------------
	if(PI[playerid][cuffed])
	{
		if(PI[playerid][Ieskomas] > 0)
		{
			JailPlayer(playerid, PI[playerid][Ieskomas] * 2 + 120);

			SendClientMessage(playerid, -1, "{E8D664}» Jus atsijungëte kai buvote surakintas, todël esate pasodintas á kalëjimà 2 valandom.");
			format(str, sizeof(str), "{E8D664}» Taipogi jums prisidëjo %d minutës, nes buvote ieðkomas.", PI[playerid][Ieskomas] * 2);
			SendClientMessage(playerid, -1, str);
		}
		else
		{
			JailPlayer(playerid, 120);

			SendClientMessage(playerid, -1, "{E8D664}» Jus atsijungëte kai buvote surakintas, todël esate pasodintas á kalëjimà 2 valandom.");
		}
	}

	// -------------------------------------------------------------------
	if(PI[playerid][banded])
    {
    	//JailPlayer(playerid, 120);
    }

	// -------------------------------------------------------------------
	if(PI[playerid][kalejimo_laikas] > 0)
	{
		MovePlayerToJail(playerid);
	}

	// -------------------------------------------------------------------
	if(PI[playerid][uniformd])
	{
		SetPlayerSkin(playerid, PI[playerid][uniforma]);
	}
	else
	{
		SetPlayerSkin(playerid, PI[playerid][drabuziai]);
	}

	if(PI[playerid][AdminLevel] == LEVEL_VIP)
	{
		if(PI[playerid][AdminLaikas] < gettime())
		{
			SendClientMessage(playerid, -1, "{ffffff} Jûsø VIP nario statuso galiojimo laikas pasibaigë!");

			PI[playerid][AdminLevel] 	= LEVEL_NONE;
			PI[playerid][AdminLaikas] 	= 0;
		}
	}

	if(PI[playerid][pAlga])
	{
		if(PI[playerid][AlgosLaikas] < gettime())
		{
			PI[playerid][pAlga] = false;
			PI[playerid][AlgosLaikas] = 0;
			SendClientMessage(playerid, RED, "* Jûsø paslaugai 'Algos padidinimas 50LT', baigësi laikas!");
		}
	}

	if(PI[playerid][HaveGlassesOn] > 19000)
	{
		SetPlayerAttachedObject(playerid, SUNGLASSES_ATTACH_SLOT, PI[playerid][HaveGlassesOn], 2, GlassesSkinOffSet[GetPlayerSkin(playerid)][0], GlassesSkinOffSet[GetPlayerSkin(playerid)][1], GlassesSkinOffSet[GetPlayerSkin(playerid)][2], GlassesSkinOffSet[GetPlayerSkin(playerid)][3], GlassesSkinOffSet[GetPlayerSkin(playerid)][4], GlassesSkinOffSet[GetPlayerSkin(playerid)][5]);
	}

	PI[playerid][authstate] = 3;

	return 1;
}

stock SavePlayerData(playerid)
{
	if(Prisijunges[playerid])
	{
		new zQuery[500], Float:gpPos[3];
		GetPlayerPos(playerid, gpPos[0], gpPos[1], gpPos[2]);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Xp` = '%d', `MoneyPocket` = '%d', `MoneyBank` = '%d' WHERE `Vardas` = '%s'",
		PI[playerid][Experience], PI[playerid][pinigai], PI[playerid][banke], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		if(Dazasvydis[playerid] == 0)
		{
			format(zQuery, sizeof(zQuery), "UPDATE `players` SET `pos_X` = '%f', `pos_Y` = '%f', pos_Z = '%f', Interior = '%d' WHERE `Vardas` = '%s'",
			gpPos[0], gpPos[1], gpPos[2], GetPlayerInterior(playerid), GetPlayerNameEx(playerid));
			mysql_query(zQuery);
		}
		else
		{
			format(zQuery, sizeof(zQuery), "UPDATE `players` SET `pos_X` = '-2456.1487', `pos_Y` = '503.9107', pos_Z = '30.0781', Interior = '0' WHERE `Vardas` = '%s'", GetPlayerNameEx(playerid));
			mysql_query(zQuery);

			ac_ResetPlayerWeapons (playerid);
		}

		format(zQuery, sizeof(zQuery), "UPDATE players SET Gyvybes = '%f', Sarvai = '%f', TuriTaksiLic = '%d' WHERE Vardas = '%s'",
		PI[playerid][PlayerHealth], PI[playerid][PlayerArmour], PI[playerid][TuriTaksiLic], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE players SET Admin = '%d', AdminLaikas = '%d', AdminWarns = '%d', Kauliukas = '%d' WHERE Vardas = '%s'",
		PI[playerid][AdminLevel], PI[playerid][AdminLaikas], PI[playerid][AdminWarns], PI[playerid][Kauliukas], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE players SET Alga = '%d', Wanted = '%d', Girtumas = '%d', Lead = '%d', Kalejime = '%d' WHERE `Vardas` = '%s'",
		PI[playerid][alga], PI[playerid][Ieskomas], GetPlayerDrunkLevel(playerid), PI[playerid][plead], PI[playerid][kalejimo_laikas], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE players SET Muted = '%d', BanLaikas = '%d', Laikrodis = '%d' WHERE Vardas = '%s'",
		PI[playerid][Muted], PI[playerid][BanLaikas], PI[playerid][laikrodis], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE players SET Job = '%d', Drabuziai = '%d', Uniforma = '%d' WHERE Vardas = '%s'",
		PI[playerid][specialybe], PI[playerid][drabuziai], PI[playerid][uniforma], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE players SET Lytis = '%d', Kokainas = '%d', Ekstazi = '%d', Heroinas = '%d', World = '%d', Zole = '%d' WHERE Vardas = '%s'",
		PI[playerid][lytis], PI[playerid][Kokainas], PI[playerid][Ekstazi], PI[playerid][Heroinas], GetPlayerVirtualWorld(playerid), PI[playerid][Weed], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Surakintas` = '%d', `License` = '%d',`gLicenzija` = '%d',LicenseBike = '%d', LicenseFura = '%d' WHERE Vardas = '%s'",
		PI[playerid][cuffed], PI[playerid][teises], PI[playerid][gLicenzija], PI[playerid][Mteises], PI[playerid][FTeises], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET Uniformd = '%d', SusikuresKorta = '%d', Ikalintas = '%d', pavdrk = '%d' WHERE Vardas = '%s'",
		PI[playerid][uniformd], PI[playerid][SusikuresKorta], PI[playerid][ikalintas], PI[playerid][pavdrk], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Meskere` = '%d', Valas = '%d', Masalas = '%d', Ungurys = '%d', Karosas = '%d', Karpis = '%d' WHERE Vardas = '%s'",
		PI[playerid][meskere], PI[playerid][valas], PI[playerid][masalas], PI[playerid][ungurys], PI[playerid][karosas], PI[playerid][karpis], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `BaninoPaprastai` = '%d', BaninoLaikui = '%d', Uzbanintas = '%d', ArEmigruotas = '%d' WHERE Vardas = '%s'",
		PI[playerid][baninopaprastai], PI[playerid][baninolaikui], PI[playerid][Uzbanintas], PI[playerid][ArEmigruotas], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET Vairavimobaud = '%d', Rangas = '%d', Ispejimai = '%d', Dispejimai = '%d',Prazaide = '%d',MedicinosPazyma = '%d' WHERE Vardas = '%s'",
		PI[playerid][GreicioBalai], PI[playerid][DarboRangas], PI[playerid][ispejimai], PI[playerid][dispejimai], PI[playerid][prazaide], PI[playerid][medicinospazyma], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Karpis` = '%d',`Karsis` = '%d', `Lydeka` = '%d'",
		PI[playerid][karpis], PI[playerid][karsis], PI[playerid][lydeka], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `1stebuklas` = '%d',`2stebuklas` = '%d', `3stebuklas` = '%d' WHERE Vardas = '%s'",
		PI[playerid][stebuklas1], PI[playerid][stebuklas2], PI[playerid][stebuklas3], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `4stebuklas` = '%d',`5stebuklas` = '%d', `6stebuklas` = '%d' WHERE Vardas = '%s'",
		PI[playerid][stebuklas4], PI[playerid][stebuklas5], PI[playerid][stebuklas6], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `7stebuklas` = '%d' WHERE Vardas = '%s'", PI[playerid][stebuklas7], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `AtsiemePriza` = '%d' WHERE Vardas = '%s'", PI[playerid][AtsiemePriza], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET KadaVeze = '%d' WHERE Vardas = '%s'", PI[playerid][KadaVeze], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET SelectedHouse = '%d' WHERE Vardas = '%s'", SelectedCreditHouseID[playerid], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET Stazasteisesaugos = '%d', Stazaskurj = '%d', Stazasmediku = '%d',Stazasfuristu ='%d',Stazasmechaniku='%d' WHERE Vardas = '%s'",
		PI[playerid][stazasteisesaugos],PI[playerid][stazaskurj],PI[playerid][stazasmediku],PI[playerid][stazasfuristu],PI[playerid][stazasmechaniku], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET Stazaspaprastodarbo = '%d' WHERE Vardas = '%s'", PI[playerid][stazaspaprastodarbo],GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET Beglys = '%d' WHERE Vardas = '%s'", PI[playerid][beglys], GetPlayerNameEx(playerid));
		mysql_query(zQuery);
		format(zQuery, sizeof(zQuery), "UPDATE `players` SET pAlga = '%d', AlgosLaikas = '%d' WHERE Vardas = '%s'",
		PI[playerid][pAlga], PI[playerid][AlgosLaikas], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `mNusipirktiCar` = '%d', `mNusipirktiNama` = '%d', `mNusipirktiVersla` = '%d' WHERE `Vardas` = '%s'", PI[playerid][mNusipirktiCar],PI[playerid][mNusipirktiNama],PI[playerid][mNusipirktiVersla], GetPlayerNameEx(playerid));
		mysql_query(zQuery);
		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `mTeises` = '%d', `mMTeises` = '%d', `mFTeises` = '%d',`mGLicenzija` = '%d' WHERE `Vardas` = '%s'", PI[playerid][misTeises],PI[playerid][mMTeises],PI[playerid][mFTeises],PI[playerid][mGLicenzija],GetPlayerNameEx(playerid));
		mysql_query(zQuery);
		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `mUzsidirbt100k` = '%d',mUzsidirbt500k = '%d',mUzsidirbt1m = '%d',mTureti300k = '%d' WHERE `Vardas` = '%s'", PI[playerid][mUzsidirbt100k],PI[playerid][mUzsidirbt500k],PI[playerid][mUzsidirbt1m],PI[playerid][mTureti300k], GetPlayerNameEx(playerid));
		mysql_query(zQuery);
		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `mTureti900k` = '%d',mTureti5m = '%d',mButKalejme = '%d',mButDarbe = '%d',mButGaujoje = '%d' WHERE `Vardas` = '%s'", PI[playerid][mTureti900k],PI[playerid][mTureti5m],PI[playerid][mButKalejme],PI[playerid][mButDarbe],PI[playerid][mButGaujoje], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		//ÞAIDËJO DARBØ PASIEKIMAI

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `mdSuimtZmogu` = '%d',mdDuotBauda = '%d',mdAtimtTeises = '%d',mdPatikrintiZmogu = '%d' WHERE `Vardas` = '%s'", PI[playerid][mdSuimtZmogu],PI[playerid][mdDuotBauda],PI[playerid][mdAtimtTeises],PI[playerid][mdPatikrintiZmogu], GetPlayerNameEx(playerid));
		mysql_query(zQuery);
		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `mdFixCar` = '%d',mdPiltDegalus = '%d',mdPaveztZmogu = '%d',mdNuveztKrovini = '%d' WHERE `Vardas` = '%s'", PI[playerid][mdFixCar],PI[playerid][mdPiltDegalus],PI[playerid][mdPaveztZmogu],PI[playerid][mdNuveztKrovini], GetPlayerNameEx(playerid));
		mysql_query(zQuery);
		format(zQuery, sizeof(zQuery), "UPDATE `players` SET mdParduotiSveikPaz = '%d',mdPagydytiZmogu = '%d' WHERE `Vardas` = '%s'",PI[playerid][mdParduotiSveikPaz],PI[playerid][mdPagydytiZmogu], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `KiekTuriRepTasku` = '%d' WHERE Vardas = '%s'", PI[playerid][KiekTuriRepTasku], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `FondoPinigai` = '%d'  WHERE Vardas = '%s'", PI[playerid][FondoPinigai], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `KelintaMisija` = '%d'  WHERE Vardas = '%s'", PI[playerid][KelintaMisija], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Salmas` = '%d'  WHERE Vardas = '%s'", PI[playerid][Salmas], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Pradirbo` = '%d', KadaZaide = '%d' WHERE Vardas = '%s'", PI[playerid][pradirbo], PI[playerid][KadaZaide], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `gMember` = '%d'  WHERE Vardas = '%s'", PI[playerid][gMember], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Theory` = '%d', `Praktika` = '%d'  WHERE Vardas = '%s'", PI[playerid][teorija], PI[playerid][Apraktika], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `BPraktika` = '%d'  WHERE Vardas = '%s'", PI[playerid][Bpraktika], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Glasses` = '%d'  WHERE Vardas = '%s'", PI[playerid][HaveGlassesOn], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `KadaUzsiregino` = '%s'  WHERE Vardas = '%s'", PI[playerid][KadaUzsiregino], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `PasiemeAlga` = '%d'  WHERE Vardas = '%s'", PI[playerid][PasiemeAlga], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `KreditineKortele` = '%d'  WHERE Vardas = '%s'", PI[playerid][KreditineKortele], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `HouseID` = '%d'  WHERE Vardas = '%s'", HouseID[playerid], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `MobilePhone` = '%d', `MobilePhoneNumber` = '%d', `Sutartis` = '%d' WHERE `Vardas` = '%s'",
		PI[playerid][MobilePhone], PI[playerid][MobilePhoneNumber], PI[playerid][Sutartis], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `PhoneStatus` = '%d', `PhoneMoney` = '%f', `TelMokesciai` = '%f', `Battery` = '%d' WHERE `Vardas` = '%s'",
		PI[playerid][PhoneStatus], PI[playerid][PhoneMoney], PI[playerid][TelMokesciai], PI[playerid][Battery], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Suristas` = '%d'  WHERE Vardas = '%s'", PI[playerid][banded], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `VisoPrazaide` = '%d'  WHERE Vardas = '%s'", PI[playerid][VisoPrazaide], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Alkis` = '%f' WHERE Vardas = '%s'", PI[playerid][Alkis], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `TransportoSlotas` = '%d'  WHERE Vardas = '%s'", PI[playerid][TransportoSlotas], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `GPS` = '%d'  WHERE Vardas = '%s'", PI[playerid][gps], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Sultys` = '%d', `Surelis` = '%d', `Duona` = '%d' WHERE Vardas = '%s'", PI[playerid][Sultys], PI[playerid][Surelis], PI[playerid][Duona], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Pizza` = '%d', `Sokoladas` = '%d', `Desra` = '%d', `Ledai` = '%d' WHERE Vardas = '%s'", PI[playerid][Pizza], PI[playerid][Sokoladas], PI[playerid][Desra], PI[playerid][Ledai], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `PardSaskaita` = '%d', `Priziuretojas` = '%d'  WHERE Vardas = '%s'", PI[playerid][PardSaskaita], PI[playerid][Priziuretojas], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `FishingLevel` = '%d', `FishingExperience` = '%d' WHERE Vardas = '%s'", FS[playerid][FishingLevel], FS[playerid][FishingExperience], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Viela` = '%d'  WHERE Vardas = '%s'", PI[playerid][Viela], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `dViela` = '%d'  WHERE Vardas = '%s'", PI[playerid][dViela], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Aliuminis` = '%f', `Varis` = '%f', `Zalvaris` = '%f' WHERE `Vardas` = '%s'",
		PI[playerid][Aliuminis], PI[playerid][Varis], PI[playerid][Zalvaris], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Auksas` = '%f', `Titanas` = '%f', `Sidabras` = '%f' WHERE `Vardas` = '%s'",
		PI[playerid][Auksas], PI[playerid][Titanas], PI[playerid][Sidabras], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `garageID` = '%d'  WHERE Vardas = '%s'", garageID[playerid], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Stirna1` = '%d'  WHERE Vardas = '%s'", PI[playerid][Stirna1], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Stirna2` = '%d'  WHERE Vardas = '%s'", PI[playerid][Stirna2], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Stirna3` = '%d'  WHERE Vardas = '%s'", PI[playerid][Stirna3], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Stirna4` = '%d'  WHERE Vardas = '%s'", PI[playerid][Stirna4], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `Stirna5` = '%d'  WHERE Vardas = '%s'", PI[playerid][Stirna5], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `IvygdeEvent` = '%d'  WHERE Vardas = '%s'", PI[playerid][IvygdeEvent], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `bakelis` = '%d'  WHERE Vardas = '%s'", PI[playerid][bakelis], GetPlayerNameEx(playerid));
		mysql_query(zQuery);
		
		format(zQuery, sizeof(zQuery), "UPDATE `players` SET Stazastaxi = '%d' WHERE Vardas = '%s'", PI[playerid][stazastaxi], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		if(Tazer[playerid]) ac_ResetPlayerWeapon(playerid, TAZE_WEAPON);
		SavePlayerGuns(playerid);

		format(PI[playerid][LastActive], 32, "%s", GetDateEx());

		format(zQuery, sizeof(zQuery), "UPDATE `players` SET `LastActive` = '%s' WHERE `Vardas` = '%s'", PI[playerid][LastActive], GetPlayerNameEx(playerid));
		mysql_query(zQuery);

		printf("Saugojimas %s þaidëjas",GetPlayerNameEx(playerid));
	}
	else printf("Þaidëjas %s buvo blogai iðsaugotas",GetPlayerNameEx(playerid));
	return 1;
}

stock InvalidNickKick(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,sizeof(name));
	new where = strfind(name,"_",true);
	new lenght = strlen(name)-1;
	new invalid = strfind(name,"[",true);
	if(invalid == -1) invalid = strfind(name,"]",true);

	if(name[0] < 65 || name[0] > 90)
	{
		new msg[128];
		SendClientMessage(playerid,RED,"* Jûsø slapyvardis netinkamas. Vardas_Pavardë raðomi ið didþiosios raidës!");
		SendClientMessage(playerid,RED,"* Teisinga slapyvardþio forma bûtø.");
		SendClientMessage(playerid,RED,"* Vardas_Pavardë");
		format(msg,sizeof(msg),"* ]]] %s  [[ ]] %i [[[ *", name[0], name[0]);
		SendClientMessage(playerid, RED, msg);
		SetTimerEx("KickEx", 100, false, "d", playerid);
		return 1;
	 }

	 if(name[where+1] < 65 || name[where+1] > 90)
	{
		SendClientMessage(playerid,RED,"* Jûsø slapyvardis netinkamas. Vardas_Pavardë raðomi ið didþiosios raidës!");
		SendClientMessage(playerid,RED,"* Teisinga slapyvardþio forma bûtø.");
		SendClientMessage(playerid,RED,"* Vardas_Pavardë");
		SetTimerEx("KickEx", 100, false, "d", playerid);
		return 1;
	 }

	for(new i = 1; i < where-1; i++)
	{
		if(name[i] < 97 || name[i] > 122)
		{
			SendClientMessage(playerid,RED,"* Jûsø slapyvardis netinkamas dël: (didþiosios raidës arba skaièiaius vardo viduryje)");
			SendClientMessage(playerid,RED,"* Teisinga slapyvardþio forma bûtø:");
			SendClientMessage(playerid,RED,"* Vardas_Pavardë");
			SetTimerEx("KickEx", 100, false, "d", playerid);
			return 1;
		}
	}
	if(where == 0 || where == lenght || where==-1)
	{
		SendClientMessage(playerid,RED,"* Jûsø slapyvardis netinkamas.");
		SendClientMessage(playerid,RED,"* Teisinga slapyvardþio forma bûtø:");
		SendClientMessage(playerid,RED,"* Vardas_Pavardë");
		SetTimerEx("KickEx", 100, false, "d", playerid);
		return 1;
	 }

	 if(strlen(name[where])<4)
	 {
		SendClientMessage(playerid,RED,"* Jûsø pavardë per trumpa");
		SendClientMessage(playerid,RED,"* Teisinga slapyvardþio forma bûtø:");
		SendClientMessage(playerid,RED,"* Vardas_Pavardë");
		SetTimerEx("KickEx", 100, false, "d", playerid);
		return 1;
	 }

	 if(where<3)
	 {
		SendClientMessage(playerid,RED,"* Jûsø vardas per trumpas");
		SendClientMessage(playerid,RED,"* Teisinga slapyvardþio forma bûtø:");
		SendClientMessage(playerid,RED,"* Vardas_Pavardë");
		SetTimerEx("KickEx", 100, false, "d", playerid);
		return 1;
	 }


	 if(invalid != -1)
	 {
		SendClientMessage(playerid,RED,"* Varde rastà netinkamø raidþiø.");
		SendClientMessage(playerid,RED,"* Teisinga slapyvardþio forma bûtø:");
		SendClientMessage(playerid,RED,"* Vardas_Pavardë");
		SetTimerEx("KickEx", 100, false, "d", playerid);
		return 1;
	 }

	for(new i = where+2; i < MAX_PLAYER_NAME; i++)
	{
		if(name[i] < 97 || name[i] > 122)
		{
			if(name[i] == 0){i = MAX_PLAYER_NAME; return 0;}
			SendClientMessage(playerid,RED,"* Jûsø slapyvardis netinkamas dël: (didþiosios raidës arba skaièiai pavardës viduryje)");
			SendClientMessage(playerid,RED,"* Teisinga slapyvardþio forma bûtø:");
			SendClientMessage(playerid,RED,"* Vardas_Pavardë");
			SetTimerEx("KickEx", 100, false, "d", playerid);
			return 1;
		}
	}
	return 0;
}

stock ArVeikiaSandelis()
{
	new bool: veikia;

	new valandos, minutes, sekundes;
	gettime(valandos, minutes, sekundes);

	if(valandos == 19)
	{
		switch(minutes)
		{
			case 0..59: veikia = true;
			default:  	veikia = false;
		}
	}

	/*if(GetWeekDay() == 2 || GetWeekDay() == 4 || GetWeekDay() == 6)
	{
		new valandos, minutes, sekundes;
		gettime(valandos, minutes, sekundes);

		if(valandos == 19)
		{
			switch(minutes)
			{
				case 0..59: veikia = true;
				default:  	veikia = false;
			}
		}
	}*/

	return veikia;
}

f_public: Zaidimas()
{
	new GerGaujaString[64];

	for(new gauja = 0; gauja < MAX_GANGS; gauja ++)
	{
		if(GangInfo[gauja][gPoints] > GangInfo[KokeGauja][gPoints])
		{
			KokeGauja = gauja;
		}
	}

	format(GerGaujaString, sizeof(GerGaujaString), "%s", GangInfo[KokeGauja][gTitle]);
	SetDynamicObjectMaterialText(GerGauja, 0, GerGaujaString, 80, "Calibri", 22, 1, 0xFF700000, 0x00000000, 0);

	for(new garageid = 0; garageid < MAX_GARAGES; garageid ++)
	{
		if(strcmp("Nera", GI[garageid][GarageOwner], true))
		{
			if(GI[garageid][GarageTimeLeft] < gettime())
			{
				strdel(GI[garageid][GarageOwner], 0,         24);
				strcat(GI[garageid][GarageOwner], "Nera", 	24);

				UpdateGarageLabel(garageid);
			}
		}
	}

	for(new cHouseID = 0; cHouseID < MAX_CREDIT_HOUSES; cHouseID ++)
	{
		if(strcmp("Nera", CHD[cHouseID][_cHouseOwner], true))
		{
			if(CHD[cHouseID][_cHouseTimeLeft] < gettime())
			{
				ClearCreditHouseVariables(cHouseID);
			}
		}
	}

	for(new i = 0; i < HowMuchGangZonesIs + 1; i ++)
	{
	    switch(GangZonesSystem[i][gZoneOwner])
		{
			case GANG_ZONE_OWNER_ID_1: GangInfo[1][gChest] += GangZonesSystem[i][gZoneYield];
		    case GANG_ZONE_OWNER_ID_2: GangInfo[2][gChest] += GangZonesSystem[i][gZoneYield];
		    case GANG_ZONE_OWNER_ID_3: GangInfo[3][gChest] += GangZonesSystem[i][gZoneYield];
		}
	}

	SavePelnai();

	new Valandos, Minutes, Sekundes;
	gettime(Valandos, Minutes, Sekundes);

	new vehicleid, model;

	//for(new p = 0; p < MAX_PLAYERS; p++)
	for(new p, size = GetPlayerPoolSize(); p <= size; p++)
	{
		FixTimeForPlayer(p);
		if(Valandos == 00 && Minutes == 00)
		{
			mysql_query("UPDATE `players` SET `Prazaide` = '0', `Pradirbo` = '0', `HelpsForToday` = '0', `SiandienPriimta` = '0'");

			PI[p][prazaide] 		= 0;
			PI[p][pradirbo] 		= 0;
			AHS[p][HelpsForToday] 	= 0;
			PI[p][SiandienPriimta] 	= 0;
		}
		if(GetWeekDay() == 7)
		{
			new valandos, minutes, sekundes;
			gettime(valandos, minutes, sekundes);

			if(valandos == 00)
			{
				mysql_query("UPDATE `players` SET `HelpsForWeek` = '0', `SiaSavaitePriimta` = '0'");

				AHS[p][HelpsForWeek] 		= 0;
				PI[p][SiaSavaitePriimta] 	= 0;
			}
		}

		switch(Valandos)
		{
			case 19:
			{
				switch(Minutes)
				{
					case 0:
					{
						if(SandelisP == false)
						{
							new String[200];

							SandelisP = true;

							ZinuteRacija("{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Gavome informacijà, kad iki 20:00 atsidarë narkotikø/ginklø sandëlis!", POLICIJA);
							ZinuteRacija("{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Gavome informacijà, kad iki 20:00 atsidarë narkotikø/ginklø sandëlis!", 5);

							if(PI[p][gMember] != -1)
							{
								format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gavome informacijà, kad iki 20:00 atsidarë narkotikø/ginklø sandëlis!", GangInfo[PI[p][gMember]][gTitle]);
								SendClientMessage(p, -1, String);
							}
						}
					}
				}
			}

			case 20:
			{
				switch(Minutes)
				{
					case 0:
					{
						if(SandelisP == true)
						{
							new String[200];

							SandelisP = false;

							ZinuteRacija("{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Gavome informacijà, kad narkotikø/ginklø sandëlis uþsidarë!", POLICIJA);
							ZinuteRacija("{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Gavome informacijà, kad narkotikø/ginklø sandëlis uþsidarë!", 5);

							if(PI[p][gMember] != -1)
							{
								format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gavome informacijà, kad narkotikø/ginklø sandëlis uþsidarë!", GangInfo[PI[p][gMember]][gTitle]);
								SendClientMessage(p, -1, String);
							}
						}
					}
				}
			}
		}

		if(Prisijunges[p])
		{
			if(!PI[p][AFK_Stat])
			{
				new String[200];

				if(PlayerHaveProperty(p) != -1)
				{
					PropertyInfo[PlayerHaveProperty(p)][pProfit] += PropertyInfo[PlayerHaveProperty(p)][pEarning];

			    	format(String, sizeof(String), "UPDATE `verslai` SET pProfit = '%d' WHERE ID = '%d'", PropertyInfo[PlayerHaveProperty(p)][pProfit], PlayerHaveProperty(p));
					mysql_query(String);
				}

				if(!IsPlayerInRangeOfPoint(p, 1.0, PI[p][AntiAFK][0], PI[p][AntiAFK][1], PI[p][AntiAFK][2]))
				{
					switch(PI[p][AdminLevel])
					{
						case LEVEL_NONE: 				
						{
							if(ViskasDuX) 	GivePlayerExperience(p, 4);
							else 			GivePlayerExperience(p, 2);
						}

						case LEVEL_VIP..LEVEL_OWNER:
						{
							if(ViskasDuX) 	GivePlayerExperience(p, 8);
							else 			GivePlayerExperience(p, 4);
						}
					}
				}

				if(Dazasvydis[p] == 0)
				{
					if(PI[p][Alkis] > 0) Sotumas(p, -1.0);
				}

				if(PI[p][Alkis] == 10.0)
				{
					if(GetPlayerDrunkLevel(p) < 2000)
			        {
			        	SetPlayerDrunkLevel(p, 3000);
					}

					SendClientMessage(p, -1, "{ffffff} Jums reiktø tuètuojau pavalgyti, nes greitu metu numirsite ið bado!");
				}
				else if(PI[p][Alkis] == 3.0)
				{
					if(GetPlayerDrunkLevel(p) < 2000)
			        {
			        	SetPlayerDrunkLevel(p, 5000);
					}

					SendClientMessage(p, -1, "{ffffff} Jeigu tuoj pat nepavalgysite - numirsite ið bado!");
				}
				else if(PI[p][Alkis] == 0.0)
				{
					SendClientMessage(p, -1, "{ffffff} Numirëte ið bado!");
					SetPlayerHealthEx(p, 0);
				}

				if(!IsPlayerInRangeOfPoint(p, 1.0, PI[p][AntiAFK][0], PI[p][AntiAFK][1], PI[p][AntiAFK][2]))
				{
					if(PI[p][Dirzas])
					{
						PI[p][alga] += 10;
					}

					PI[p][VisoPrazaide] ++;
					PI[p][prazaide] 	++;
				}
			}
			else
			{
				if(GetPlayerInterior(p) == 32)
				{
					if(ViskasDuX)
					{
						GivePlayerExperience(p, 2);
						GivePlayerMoneyA(p, 12);

						SendClientMessage(p, -1, "{ffffff} Gavai {FFAF00}2 {FFFFFF}EXP ir {FFAF00}$12{FFFFFF}!");
					}
					else
					{
						GivePlayerExperience(p, 1);
						GivePlayerMoneyA(p, 6);

						SendClientMessage(p, -1, "{ffffff} Gavai {FFAF00}1 {FFFFFF}EXP ir {FFAF00}$6{FFFFFF}!");
					}
				}
			}

			if(PI[p][AdminLevel] == LEVEL_VIP)
			{
				if(PI[p][AdminLaikas] < gettime())
				{
					SendClientMessage(p, -1, "{ffffff} Jûsø VIP nario statuso galiojimo laikas pasibaigë!");

     PI[p][AdminLevel] 	= LEVEL_NONE;
					PI[p][AdminLaikas] 	= 0;
				}
			}

			if(GetPlayerSpecialAction(p) == SPECIAL_ACTION_USEJETPACK)
			{
				if(PI[p][AdminLevel] < LEVEL_OWNER)
				{
					new String[128];
					format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}buvo iðmestas ið serverio!", GetPlayerNameEx(p));
					SendClientMessageToAll(-1, String);

					SendClientMessageToAll(-1, "{ffffff} Prieþastis: {FFAF00}Jet-pack naudojimas.");

					IsmestiZaideja(p, 100);
				}
			}

			if(GetPlayerState(p) != PLAYER_STATE_DRIVER) continue; // Toliau jeigu zaidejas masinoje

			vehicleid = GetPlayerVehicleID(p);
			model = GetVehicleModel(vehicleid);

			if(!PI[p][AFK_Stat])
			{
				if(!IsPlayerInRangeOfPoint(p, 1.0, PI[p][AntiAFK][0], PI[p][AntiAFK][1], PI[p][AntiAFK][2]))
				{
					if(PI[p][suautopilotu]) PI[p][alga] += 20;
				}

				if(TaksiMasina[0] <= vehicleid <= TaksiMasina[sizeof(TaksiMasina) - 1])
				{
						if(IsPlayerInRangeOfPoint(p, 3.0, -1994.9846,161.7788,27.7268))
						{
							if(ViskasDuX) 	GivePlayerMoneyA(p, 40);
							else 			GivePlayerMoneyA(p, 20);
						}

						if(IsPlayerInRangeOfPoint(p, 3.0, -1995.0682,166.8560,27.7268))
						{
							if(ViskasDuX) 	GivePlayerMoneyA(p, 40);
							else 			GivePlayerMoneyA(p, 20);
						}

						if(IsPlayerInRangeOfPoint(p, 3.0, -2640.5859,629.4922,14.4529))
						{
							if(ViskasDuX) 	GivePlayerMoneyA(p, 40);
							else 			GivePlayerMoneyA(p, 20);
						}

						if(IsPlayerInRangeOfPoint(p, 3.0, -2647.7336,629.4244,14.4529))
						{
							if(ViskasDuX) 	GivePlayerMoneyA(p, 40);
							else 			GivePlayerMoneyA(p, 20);
						}
					if(ArTaksi[vehicleid])
					{
						if(IsPlayerInRangeOfPoint(p, 3.0, -1994.9846,161.7788,27.7268))
						{
							if(ViskasDuX) 	GivePlayerMoneyA(p, 40);
							else 			GivePlayerMoneyA(p, 20);
						}

						if(IsPlayerInRangeOfPoint(p, 3.0, -1995.0682,166.8560,27.7268))
						{
							if(ViskasDuX) 	GivePlayerMoneyA(p, 40);
							else 			GivePlayerMoneyA(p, 20);
						}

						if(IsPlayerInRangeOfPoint(p, 3.0, -2640.5859,629.4922,14.4529))
						{
							if(ViskasDuX) 	GivePlayerMoneyA(p, 40);
							else 			GivePlayerMoneyA(p, 20);
						}

						if(IsPlayerInRangeOfPoint(p, 3.0, -2647.7336,629.4244,14.4529))
						{
							if(ViskasDuX) 	GivePlayerMoneyA(p, 40);
							else 			GivePlayerMoneyA(p, 20);
					}
				}
				}

				if(!IsPlayerInRangeOfPoint(p, 1.0, PI[p][AntiAFK][0], PI[p][AntiAFK][1], PI[p][AntiAFK][2]))
				{
					if(ViskasDuX)
					{
						if(TaksiMasina[0] <= vehicleid <= TaksiMasina[sizeof(TaksiMasina) - 1])
						{
							PI[p][alga]	+= 30;

							if(PI[p][pAlga])
							{
								PI[p][alga] += 50;
							}
							}
    		 			if(ArTaksi[vehicleid])
						 {
							PI[p][alga]	+= 30;

							if(PI[p][pAlga])
							{
								PI[p][alga] += 50;
							}

						}

						switch(PI[p][specialybe])
						{
							case POLICIJA:
							{
								//Policija
								if(PolicijosMasina[0] <= vehicleid <= PolicijosMasina[sizeof(PolicijosMasina) - 1])
								{
									PI[p][alga]					+= PI[p][AlgosKiekis] * 2;
									Pelnas[0] 					+= I_PD_PELNA;
									PI[p][stazasteisesaugos] 	+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}

							case PICAI:
							{
 								if(Pizzaboy[0] <= vehicleid <= Pizzaboy[sizeof(Pizzaboy) - 1])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis] * 2;
									PI[p][stazaspaprastodarbo] 	+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}

							case MECHANIKAI:
							{
								if(MechanikuMasina[0] <= vehicleid <= MechanikuMasina[sizeof(MechanikuMasina) - 1])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis] * 2;
									Pelnas[1] 					+= I_MECHANIKU_PELNA;
									PI[p][stazasmechaniku] 		+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}

							case MEDIKAI:
							{
								if(MedikuMasina[0] <= vehicleid <= MedikuMasina[sizeof(MedikuMasina) - 1])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis] * 2;
									Pelnas[3] 					+= I_MEDIKU_PELNA;
									PI[p][stazasmediku] 		+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}
							case TAXI:
							{
									if(TaksiMasina[0] <= vehicleid <= TaksiMasina[sizeof(TaksiMasina) - 1])
									{
									PI[p][stazastaxi] 			+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
									if(ArTaksi[vehicleid])
									{
									PI[p][stazastaxi] 			+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}
							case DYLERIAI:
							{
								if(ArasMasina[0] <= vehicleid <= ArasMasina[sizeof(ArasMasina) - 1])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis] * 2;
									Pelnas[4] 					+= I_ARAS_PELNA;
									PI[p][stazasteisesaugos] 	+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}

							case KURJERIAI:
							{
								if(KurjeriuMasina[0] <= vehicleid <= KurjeriuMasina[sizeof(KurjeriuMasina) - 1])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis] * 2;
									Pelnas[2] 					+= I_KURJ_PELNA;
									PI[p][stazaskurj] 			+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}

							case AUTOBUSAI:
							{
								if(vehicleid >= BusDriversVehicle[0] && vehicleid <= BusDriversVehicle[6])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis] * 2;
									PI[p][stazaspaprastodarbo] 	+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}

							case FURISTAI:
							{
								if(FuristuMasina[0] <= vehicleid <= FuristuMasina[sizeof(FuristuMasina) - 1])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis] * 2;
									Pelnas[8] 					+= I_FURU_PELNA;
									PI[p][stazasfuristu] 		+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}	

							case KELIAI:
							{
								if(model == 574)
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis] * 2;
									PI[p][stazaspaprastodarbo] 	+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}

							case GAISRAI:
							{
								if(model == 407)
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis] * 2;
									PI[p][stazaspaprastodarbo] 	+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}
						}
					}
					else
					{
						switch(PI[p][specialybe])
						{
							case POLICIJA:
							{
								//Policija
								if(PolicijosMasina[0] <= vehicleid <= PolicijosMasina[sizeof(PolicijosMasina) - 1])
								{
									PI[p][alga]					+= PI[p][AlgosKiekis];
									Pelnas[0] 					+= I_PD_PELNA;
									PI[p][stazasteisesaugos] 	+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}

							case PICAI:
							{
 								if(Pizzaboy[0] <= vehicleid <= Pizzaboy[sizeof(Pizzaboy) - 1])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis];
									PI[p][stazaspaprastodarbo] 	+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}

							case MECHANIKAI:
							{
								if(MechanikuMasina[0] <= vehicleid <= MechanikuMasina[sizeof(MechanikuMasina) - 1])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis];
									Pelnas[1] 					+= I_MECHANIKU_PELNA;
									PI[p][stazasmechaniku] 		+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}

							case MEDIKAI:
							{
								if(MedikuMasina[0] <= vehicleid <= MedikuMasina[sizeof(MedikuMasina) - 1])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis];
									Pelnas[3] 					+= I_MEDIKU_PELNA;
									PI[p][stazasmediku] 		+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}
							case TAXI:
							{
								if(TaksiMasina[0] <= vehicleid <= TaksiMasina[sizeof(TaksiMasina) - 1])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis];
									Pelnas[9] 					+= I_TAXI_PELNA;
									PI[p][stazastaxi] 			+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
								if(ArTaksi[vehicleid])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis];
									Pelnas[9] 					+= I_TAXI_PELNA;
									PI[p][stazastaxi] 			+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
								
							}

							case DYLERIAI:
							{
								if(ArasMasina[0] <= vehicleid <= ArasMasina[sizeof(ArasMasina) - 1])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis];
									Pelnas[4] 					+= I_ARAS_PELNA;
									PI[p][stazasteisesaugos] 	+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}

							case KURJERIAI:
							{
								if(KurjeriuMasina[0] <= vehicleid <= KurjeriuMasina[sizeof(KurjeriuMasina) - 1])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis];
									Pelnas[2] 					+= I_KURJ_PELNA;
									PI[p][stazaskurj] 			+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}

							case AUTOBUSAI:
							{
								if(vehicleid >= BusDriversVehicle[0] && vehicleid <= BusDriversVehicle[6])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis];
									PI[p][stazaspaprastodarbo] 	+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}

							case FURISTAI:
							{
								if(FuristuMasina[0] <= vehicleid <= FuristuMasina[sizeof(FuristuMasina) - 1])
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis];
									Pelnas[8] 					+= I_FURU_PELNA;
									PI[p][stazasfuristu] 		+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}	

							case KELIAI:
							{
								if(model == 574)
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis];
									PI[p][stazaspaprastodarbo] 	+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}

							case GAISRAI:
							{
								if(model == 407)
								{
									PI[p][alga] 				+= PI[p][AlgosKiekis];
									PI[p][stazaspaprastodarbo] 	+= 5;
									PI[p][pradirbo] 			++;

									if(PI[p][pAlga])
									{
										PI[p][alga] += 50;
									}
								}
							}
						}
					}
				}
			}

			if(GetWeekDay() == 3 || GetWeekDay() == 6)
			{
				new valandos,minutes,sekundes;
				gettime(valandos,minutes,sekundes);
				if(valandos == 00)
				{
					mysql_query("UPDATE `players` SET `Pradirbo` = '0'");
					PI[p][pradirbo] = 0;
				}
			}

			if(!IsABike(vehicleid))
			{
				new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;
				GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);

				if(VehicleInfo[vehicleid][vNuoma])
				{
					if(GetPlayerMoneyA(p) < NuomosKaina[vehicleid])
					{
						SendClientMessage 		(p, -1, "{ffffff} Jums neuþtenka pinigø ðios transp. priemonës nuomai!");
						RemovePlayerFromVehicle	(p);

						return 1;
					}

					GivePlayerMoneyA(p, -NuomosKaina[vehicleid]);
				}

				if(Engine)
				{
					if(VehicleInfo[vehicleid][vDujos])
					{
						if(VehicleInfo[vehicleid][vIjungta])
						{
							if(VehicleInfo[vehicleid][vDujuLikutis] >= VehicleInfo[vehicleid][vSanaudos]) // Yra dujø
							{
								VehicleInfo[vehicleid][vDujuLikutis] -= VehicleInfo[vehicleid][vSanaudos] / 1.1;

								UpdateFuelBar(p);
							}
							else // Nebëra dujø
							{
								if(VehicleInfo[vehicleid][vDujuLikutis] != 0.0)
								{
									VehicleInfo[vehicleid][vDujuLikutis] = 0.0;

									GameTextForPlayer	(p, "~w~Variklis ~r~uzgeso!", 2000, 4);
									GetVehicleParamsEx	(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
									SetVehicleParamsEx	(vehicleid, false, Lights, Alarm, Doors, Bonnet, Boot, Objective);
								}

								UpdateFuelBar(p);
							}
						}
						else
						{
							if(VehicleInfo[vehicleid][vKuras] >= VehicleInfo[vehicleid][vSanaudos]) // Yra kuro
							{
								switch(VehicleInfo[vehicleid][vKuroTipas])
								{
									case BENZINAS: 	VehicleInfo[vehicleid][vKuras] -= VehicleInfo[vehicleid][vSanaudos] / 1.4;
									case DYZELIS: 	VehicleInfo[vehicleid][vKuras] -= VehicleInfo[vehicleid][vSanaudos] / 1.1;
								}

								UpdateFuelBar(p);
							}
							else // Nebëra kuro
							{
								if(VehicleInfo[vehicleid][vKuras] != 0.0)
								{
									VehicleInfo[vehicleid][vKuras] = 0.0;

									GameTextForPlayer	(p, "~w~Variklis ~r~uzgeso!", 2000, 4);
									GetVehicleParamsEx	(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
									SetVehicleParamsEx	(vehicleid, false, Lights, Alarm, Doors, Bonnet, Boot, Objective);
								}

								UpdateFuelBar(p);
							}
						}
					}
					else
					{
						if(VehicleInfo[vehicleid][vKuras] > VehicleInfo[vehicleid][vSanaudos]) // Yra kuro
						{
							switch(VehicleInfo[vehicleid][vKuroTipas])
							{
								case BENZINAS: 	VehicleInfo[vehicleid][vKuras] -= VehicleInfo[vehicleid][vSanaudos] / 1.7;
								case DYZELIS: 	VehicleInfo[vehicleid][vKuras] -= VehicleInfo[vehicleid][vSanaudos] / 1.3;
							}

							UpdateFuelBar(p);
						}
						else // Nebëra kuro
						{
							if(VehicleInfo[vehicleid][vKuras] != 0.0)
							{
								VehicleInfo[vehicleid][vKuras] = 0.0;

								GameTextForPlayer	(p, "~w~Variklis ~r~uzgeso!", 2000, 4);
								GetVehicleParamsEx	(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
								SetVehicleParamsEx	(vehicleid, false, Lights, Alarm, Doors, Bonnet, Boot, Objective);
							}

							UpdateFuelBar(p);
						}
					}
				}
			}
		}

		GetPlayerPos(p, PI[p][AntiAFK][0], PI[p][AntiAFK][1], PI[p][AntiAFK][2]);
	}

	return 1;
}

stock UpdateFuelBar(playerid)
{
	new msg[128], vehicleid = GetPlayerVehicleID(playerid);

	if(VehicleInfo[vehicleid][vDujos] == false)
	{
		TextDrawHideForPlayer(playerid, spidometras_g[6]);
		TextDrawHideForPlayer(playerid, spidometras_g[7]);

		new Float: TurimasKuras = VehicleInfo[vehicleid][vKuras], Float: BakoTuris = VehicleInfo[vehicleid][vBakas];
		new Float: Skirtumas 	= 173.759887 / BakoTuris; // 1.73759887

		new Float: Progress = (453.000000 + (TurimasKuras * Skirtumas));
		PlayerTextDrawTextSize(playerid, spidometras_p[playerid][0], Progress, 0.000000);

		PlayerTextDrawHide(playerid, spidometras_p[playerid][0]);
		PlayerTextDrawShow(playerid, spidometras_p[playerid][0]);

		switch(VehicleInfo[vehicleid][vKuroTipas])
		{
			case BENZINAS: 	format(msg, 31, "BENZINAS: %.2f/%.2f~Y~L", VehicleInfo[vehicleid][vKuras], VehicleInfo[vehicleid][vBakas]);
			case DYZELIS: 	format(msg, 31, "DYZELIS: %.2f/%.2f~Y~L", VehicleInfo[vehicleid][vKuras], VehicleInfo[vehicleid][vBakas]);
		}

		PlayerTextDrawSetString(playerid, spidometras_p[playerid][5], msg);
	}
	else
	{
		PlayerTextDrawShow(playerid, spidometras_p[playerid][7]);

		new Float: TurimasKuras = VehicleInfo[vehicleid][vKuras], Float: BakoTuris = VehicleInfo[vehicleid][vBakas];
		new Float: Skirtumas 	= 173.759887 / BakoTuris;

		new Float: Progress = (453.000000 + (TurimasKuras * Skirtumas));
		PlayerTextDrawTextSize(playerid, spidometras_p[playerid][0], Progress, 0.000000);

		PlayerTextDrawHide(playerid, spidometras_p[playerid][0]);
		PlayerTextDrawShow(playerid, spidometras_p[playerid][0]);

		switch(VehicleInfo[vehicleid][vKuroTipas])
		{
			case BENZINAS: 	format(msg, 31, "BENZINAS: %.2f/%.2f~Y~L", VehicleInfo[vehicleid][vKuras], VehicleInfo[vehicleid][vBakas]);
			case DYZELIS: 	format(msg, 31, "DYZELIS: %.2f/%.2f~Y~L", VehicleInfo[vehicleid][vKuras], VehicleInfo[vehicleid][vBakas]);
		}

		PlayerTextDrawSetString(playerid, spidometras_p[playerid][5], msg);

		TextDrawShowForPlayer(playerid, spidometras_g[6]);
		TextDrawShowForPlayer(playerid, spidometras_g[7]);

		//Dujos
		new Float: dTurimasKuras = VehicleInfo[vehicleid][vDujuLikutis], Float: dBakoTuris = VehicleInfo[vehicleid][vDujuBakas];
		new Float: dSkirtumas 	= -3.410841 / dBakoTuris;

		new Float: dProgress = (-0.772005 + (dTurimasKuras * dSkirtumas));
		PlayerTextDrawLetterSize(playerid, spidometras_p[playerid][6], 0.000000, dProgress);

		PlayerTextDrawHide(playerid, spidometras_p[playerid][6]);
		PlayerTextDrawShow(playerid, spidometras_p[playerid][6]);

		format(msg, 31, "DUJOS:~n~%.0f/%.0f~Y~L", VehicleInfo[vehicleid][vDujuLikutis], VehicleInfo[vehicleid][vDujuBakas]);
		PlayerTextDrawSetString(playerid, spidometras_p[playerid][7], msg);
	}
}

f_public: ClearA(playerid) return ClearAnimations(playerid);

f_public: ServerioPranesimai()
{
	switch(random(19))
	{
		case 0:
		{
			SendClientMessageToAll(-1, "{ffffff} Oficialus mûsø tinklalapis: {FFAF00}www.MetroCity.lt{ffffff}!");
			SendClientMessageToAll(-1, "{ffffff} Oficialus mûsø teamspeak: {FFAF00}ts.MetroCity.lt{ffffff}!");
		}
		case 1:
		{
			SendClientMessageToAll(-1, "{ffffff} Radote serverio klaidà kuri trukdo þaisti serveryje?");
			SendClientMessageToAll(-1, "{ffffff} Praneðkite apie jà mûsø tinklalapyje: {FFAF00}www.MetroCity.lt{ffffff}!");
		}
		case 2:
		{
			SendClientMessageToAll(-1, "{ffffff} Trukdo laikrodis arba uþraðas {FFAF00}www.MetroCity.lt {ffffff}po mini þemëlapiu?");
			SendClientMessageToAll(-1, "{ffffff} Iðjunkite ðiuos uþraðus paraðæ komandà {FFAF00} /nustatymai{ffffff}!");
		}
		case 3:
		{
			SendClientMessageToAll(-1, "{ffffff} Oficialus mûsø tinklalapis: {FFAF00}www.MetroCity.lt{ffffff}!");
			SendClientMessageToAll(-1, "{ffffff} Oficialus mûsø teamspeak: {FFAF00}ts.MetroCity.lt{ffffff}!");
		}
		case 4:
		{
			SendClientMessageToAll(-1, "{ffffff} Norite paþiûrëti kelintas serveryje esat pagal skirtingus kriterijus?");
			SendClientMessageToAll(-1, "{ffffff} Raðykite komandà {FFAF00} /top{ffffff}!");
		}
		case 5:
		{
			SendClientMessageToAll(-1, "{ffffff} Nuobodu? Norite uþsidirbti pinigø, patirties taðkø, kreditø?");
			SendClientMessageToAll(-1, "{ffffff} Atlikite serverio misijas: {FFAF00} /misija{ffffff}!");
		}
		case 6:
		{
			SendClientMessageToAll(-1, "{ffffff} Norite greièiau gauti pinigø, patirties taðkø arba kokias nors privilegijas?");
			SendClientMessageToAll(-1, "{ffffff} Uþsakykite kreditus su komanda {FFAF00} /paslaugos{ffffff}, tuo paèiu jus paremsite mûsø serverá!");
		}
		case 7:
		{
			SendClientMessageToAll(-1, "{ffffff} Patinka ðokti, þiûrëti á striptizo ðokëjas? Mëgsti tikrà, labai geros kokybës klubinæ muzikà?");
			SendClientMessageToAll(-1, "{ffffff} Tada patariame apsilankyti naktiniame klube ir atsipalaiduoti po sunkios darbo dienos!");
			SendClientMessageToAll(-1, "{ffffff} Naktiná klubà rasite: {FFAF00} /gps > Kitos vietovës > Naktinis klubas{ffffff}!");
		}
		case 8:
		{
			SendClientMessageToAll(-1, "{ffffff} Norite uþsidirbti ðiek tiek pinigø ir patirties taðkø nieko neveikdami?");
			SendClientMessageToAll(-1, "{ffffff} Naudokites {FFAF00}AFK zona{ffffff}, jà rasite: {FFAF00} /gps > Kitos vietovës > AFK zona{ffffff}!");
		}
		case 9:
		{
			SendClientMessageToAll(-1, "{ffffff} Norite turite aukðtesnes privilegijas serveryje, bet neþinote komandø?");
			SendClientMessageToAll(-1, "{ffffff} Raðykite {FFAF00} /akomandos{ffffff} ir iðrinkite tai, kas jums labiausiai tiks!");
		}
		case 10:
		{
			SendClientMessageToAll(-1, "{ffffff} Algà atsiimti galite kiekvienà dienà nuo {FFAF00}19:00 {ffffff}iki {FFAF00}22:00{ffffff} vyriausybëje!");
			SendClientMessageToAll(-1, "{ffffff} Vyriausybæ rasite: {FFAF00} /gps > Kitos vietovës > Vyriausybë{ffffff}!");
		}
		case 11:
		{
			SendClientMessageToAll(-1, "{ffffff} Pastoviai kamuoja alkis bet neþinote kur nusipirkti maisto produktø?");
			SendClientMessageToAll(-1, "{ffffff} Nebëda! Maisto produktø nusipirkti galite maisto prekiø parduotuvëje!");
			SendClientMessageToAll(-1, "{ffffff} Jà rasite: {FFAF00} /gps > Uþkandinës, restoranai ir kita > Maisto prekiø parduotuvë{ffffff}.");
		}
		case 12:
		{
			SendClientMessageToAll(-1, "{ffffff} Serveryje reguliariai vyksta þvejybos varþybos (kas 1 - 3 valandas).");
			SendClientMessageToAll(-1, "{ffffff} Jas laimëjæs þmogus gaus atitinkamà atlygá! Þvejybvietæ rasite: {FFAF00} /gps > Kitos vietovës > Þvejybvietë{ffffff}.");
		}
		case 13:
		{
			SendClientMessageToAll(-1, "{ffffff} Norite nesunkiai uþsidirbti papildomø pinigø? Pirkite kastuvà ir vaþiuokite á kasyklà!");
			SendClientMessageToAll(-1, "{ffffff} Jà rasite: {FFAF00} /gps > Kitos vietovës > Kasykla{ffffff}.");
			SendClientMessageToAll(-1, "{ffffff} Kastuvà nusipirkti galite Lietuvos spauda kioske, o metalà parduoti MetroCity.lt turguje!");
		}
		case 14:
		{
			SendClientMessageToAll(-1, "{ffffff} Serveryje reguliariai vyksta metalo kasimo varþybos (kas 1 - 3 valandas).");
			SendClientMessageToAll(-1, "{ffffff} Jas laimëjæs þmogus gaus atitinkamà atlygá! Kasyklà rasite: {FFAF00} /gps > Kitos vietovës > Metalo kasykla{ffffff}.");
		}
		case 15:
		{
			SendClientMessageToAll(-1, "{ffffff} Serverio pagrindinë administracija : {FFAF00}James_Gibson{ffffff} ir {FFAF00}Simonas_Juska");
			SendClientMessageToAll(-1, "{ffffff} Sø serverio pagrindine administracija galima susiekti : {FFAF00} asmenine SERVERIO / FORUMO þinute !{ffffff}.");
			SendClientMessageToAll(-1, "{ffffff} Vykdyk serverio uþduotis! Plaèiau: {FFAF00} /uzduotys{ffffff}.");
		}
		case 16:
		{
			SendClientMessageToAll(-1, "{ffffff} Mëgsti daug vaþinëtis, kelti ridà ir uþ tai dar gauti pinigø?");
			SendClientMessageToAll(-1, "{ffffff} Pradëk dirbti taksistu! Dirbti galima tik suo nuosava transp. priemone!");
			SendClientMessageToAll(-1, "{ffffff} Taksisto licenzijà iðsilaikyti galima licenzijø centre ({FFAF00} /gps > Kitos vietovës > Licenzijø centras{ffffff}).");
			SendClientMessageToAll(-1, "{ffffff} O darbà pradëti galite paraðæ: {FFAF00} /dirbtitaksi{ffffff}.");
		}
		case 17:
		{
			SendClientMessageToAll(-1, "{ffffff} Kiekvienà dienà lygiai nuo 19:00 iki 20:00 serveryje atsidaro narkotikø bei ginklø sandëliai!");
			SendClientMessageToAll(-1, "{ffffff} Ten policija bei gaujos turës kariauti tarpusavyje kas sunaikins arba paims daugiau narkotikø arba ginklø!");
			SendClientMessageToAll(-1, "{ffffff} O fûristø darbas yra aprûpinti sandëlá iki atitinkamos dienos, nes nuo to labai priklausys fûristø pajamos.");
		}
		case 18:
		{
			SendClientMessageToAll(-1, "{ffffff} Tuninguoti, daþyti maðinas serveryje gali tik autoserviso ECO darbuotojai, visi tuningo bei daþymo garaþai neveikia!");
			SendClientMessageToAll(-1, "{ffffff} Tr. priemones patys susitaisyti galite autoservise ECO arba iðkvietus serviso darbuotojà!");
			SendClientMessageToAll(-1, "{ffffff} Autoservisà ECO rasite({FFAF00} /gps > Normaliø darbø vietovës > Autoservisas ECO{ffffff}).");
		}
	}
	return 1;
}

f_public: AFKTikrinimoTimeris()
{
	for(new p = 0, size = GetPlayerPoolSize(); p <= size; p++)
	{
		if(IsPlayerConnected(p))
		{
			if(Prisijunges[p])
			{
				if(PI[p][AFK_Stat] && PI[p][AFK_Label] == Text3D:INVALID_3DTEXT_ID)
				{
					PI[p][AFK_Label] = Create3DTextLabel("Þaidëjas AFK bûsenoje!", 0x66ff00FF, 0.0, 0.0, 0.0, 15.0, 0, 1);
					Attach3DTextLabelToPlayer(PI[p][AFK_Label], p, 0.0, 0.0, 0.5);
				}
			}
			PI[p][AFK_Stat] = true;
		}
	 }
	 return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	if(enterexit == 0)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(VehicleInfo[vehicleid][vNupirkta])
		{
			for(new tune = 0; tune < 13; tune++)
			{
				VehicleInfo[vehicleid][vTune][tune] = GetVehicleComponentInSlot(vehicleid, tune);
			}
		}
	}
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	VehicleInfo[vehicleid][vPaintjob] = paintjobid;
	ChangeVehiclePaintjob(vehicleid, paintjobid);
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	VehicleInfo[vehicleid][vColor][0] = color1; VehicleInfo[vehicleid][vColor][1] = color2;
	ChangeVehicleColor(vehicleid, color1, color2);
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	// Declare the array of bits.
	// Each of the first dimensions are
	// the information for a given mode.
	// The BITS in the second dimension
	// represent which vehicle has it.
	static const
		cs_bMods[194][7] =
		{
			// 1000 - Spoileris Pro - Certain Transfender cars
			{
				ANTI_V(404) | ANTI_V(405) | ANTI_V(421),
				0,
				ANTI_V(489) | ANTI_V(492),
				ANTI_V(505) | ANTI_V(516),
				ANTI_V(547),
				ANTI_V(589),
				0
			},
			// 1001 - Spoileris Win - Certain Transfender cars
			{
				ANTI_V(401) | ANTI_V(405) | ANTI_V(410) | ANTI_V(415) | ANTI_V(420) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(439),
				0,
				ANTI_V(496) | ANTI_V(518) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(540) | ANTI_V(546) | ANTI_V(549) | ANTI_V(550),
				ANTI_V(580) | ANTI_V(585),
				ANTI_V(603)
			},
			// 1002 - Spoileris Drag - Certain Transfender cars
			{
				ANTI_V(404) | ANTI_V(418),
				0,
				ANTI_V(489),
				ANTI_V(496) | ANTI_V(505) | ANTI_V(516) | ANTI_V(517),
				ANTI_V(546) | ANTI_V(551),
				0,
				0
			},
			// 1003 - Spoileris Alpha - Certain Transfender cars
			{
				ANTI_V(401) | ANTI_V(410) | ANTI_V(415) | ANTI_V(420) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(439),
				ANTI_V(491),
				ANTI_V(496) | ANTI_V(517) | ANTI_V(518),
				ANTI_V(529) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551),
				ANTI_V(585),
				0
			},
			// 1004 - Hood Champ Scoop - Certain Transfender cars
			{
				ANTI_V(401) | ANTI_V(420) | ANTI_V(426),
				0,
				ANTI_V(478) | ANTI_V(489) | ANTI_V(492),
				ANTI_V(505) | ANTI_V(516),
				ANTI_V(540) | ANTI_V(546) | ANTI_V(550),
				ANTI_V(589),
				ANTI_V(600)
			},
			// 1005 - Hood Fury Scoop - Certain Transfender cars
			{
				ANTI_V(401) | ANTI_V(420) | ANTI_V(426),
				0,
				ANTI_V(478) | ANTI_V(489) | ANTI_V(492),
				ANTI_V(505) | ANTI_V(518),
				ANTI_V(550) | ANTI_V(551),
				ANTI_V(589),
				ANTI_V(600)
			},
			// 1006 - Roof Roof Scoop - Certain Transfender cars
			{
				ANTI_V(401) | ANTI_V(418) | ANTI_V(426),
				ANTI_V(436),
				ANTI_V(477) | ANTI_V(489) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(505) | ANTI_V(518),
				ANTI_V(529) | ANTI_V(540) | ANTI_V(546) | ANTI_V(550) | ANTI_V(551),
				ANTI_V(580) | ANTI_V(585) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(603)
			},
			// 1007 - Sideskirt Right Sideskirt - Certain Transfender cars
			{
				ANTI_V(401) | ANTI_V(404) | ANTI_V(410) | ANTI_V(415) | ANTI_V(422),
				ANTI_V(436) | ANTI_V(439),
				ANTI_V(477) | ANTI_V(491),
				ANTI_V(496) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(540) | ANTI_V(546) | ANTI_V(549),
				ANTI_V(580) | ANTI_V(585) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(603)
			},
			// 1008 - Nitro 5 times - Most cars, Most planes and Most Helicopters
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1009 - Nitro 2 times - Most cars, Most planes and Most Helicopters
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1010 - Nitro 10 times - Most cars, Most planes and Most Helicopters
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1011 - Hood Race Scoop - Certain Transfender cars
			{
				0,
				0,
				0,
				ANTI_V(496),
				ANTI_V(529) | ANTI_V(549),
				0,
				0
			},
			// 1012 - Hood Worx Scoop - Certain Transfender cars
			{
				0,
				0,
				ANTI_V(478),
				0,
				ANTI_V(529) | ANTI_V(549),
				0,
				0
			},
			// 1013 - Lamps Round Fog - Certain Transfender cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(404) | ANTI_V(410) | ANTI_V(422),
				ANTI_V(436) | ANTI_V(439),
				ANTI_V(478) | ANTI_V(489),
				ANTI_V(500) | ANTI_V(505) | ANTI_V(518),
				0,
				ANTI_V(585) | ANTI_V(589),
				ANTI_V(600)
			},
			// 1014 - Spoileris Champ - Certain Transfender cars
			{
				ANTI_V(405) | ANTI_V(421),
				0,
				ANTI_V(491),
				ANTI_V(527),
				ANTI_V(542),
				0,
				0
			},
			// 1015 - Spoileris Race - Certain Transfender cars
			{
				0,
				0,
				0,
				ANTI_V(516) | ANTI_V(527),
				ANTI_V(542),
				0,
				0
			},
			// 1016 - Spoileris Worx - Certain Transfender cars
			{
				ANTI_V(404) | ANTI_V(418) | ANTI_V(421),
				0,
				ANTI_V(489) | ANTI_V(492),
				ANTI_V(505) | ANTI_V(516) | ANTI_V(517),
				ANTI_V(547) | ANTI_V(551),
				ANTI_V(589),
				0
			},
			// 1017 - Sideskirt Left Sideskirt - Certain Transfender cars
			{
				ANTI_V(401) | ANTI_V(404) | ANTI_V(410) | ANTI_V(415) | ANTI_V(422),
				ANTI_V(436) | ANTI_V(439),
				ANTI_V(477) | ANTI_V(491),
				ANTI_V(496) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(540) | ANTI_V(546) | ANTI_V(549),
				ANTI_V(580) | ANTI_V(585) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(603)
			},
			// 1018 - Exhaust Upswept - Certain Transfender cars
			{
				ANTI_V(400) | ANTI_V(405) | ANTI_V(415) | ANTI_V(421),
				0,
				ANTI_V(477) | ANTI_V(489) | ANTI_V(491),
				ANTI_V(505) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(540) | ANTI_V(542) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551),
				ANTI_V(580) | ANTI_V(585) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(603)
			},
			// 1019 - Exhaust Twin - Certain Transfender cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(404) | ANTI_V(405) | ANTI_V(410) | ANTI_V(415) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(426),
				ANTI_V(436),
				ANTI_V(477) | ANTI_V(489) | ANTI_V(491),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(516) | ANTI_V(517),
				ANTI_V(529) | ANTI_V(540) | ANTI_V(542) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551),
				ANTI_V(585),
				ANTI_V(603)
			},
			// 1020 - Exhaust Large - Certain Transfender cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(404) | ANTI_V(405) | ANTI_V(410) | ANTI_V(418) | ANTI_V(421) | ANTI_V(422),
				ANTI_V(436),
				ANTI_V(477) | ANTI_V(478) | ANTI_V(489) | ANTI_V(491),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(540) | ANTI_V(542) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551),
				ANTI_V(580) | ANTI_V(585) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(603)
			},
			// 1021 - Exhaust Medium - Certain Transfender cars
			{
				ANTI_V(400) | ANTI_V(404) | ANTI_V(405) | ANTI_V(410) | ANTI_V(418) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(426),
				ANTI_V(436),
				ANTI_V(477) | ANTI_V(478) | ANTI_V(491),
				ANTI_V(500) | ANTI_V(516) | ANTI_V(527),
				ANTI_V(542) | ANTI_V(547) | ANTI_V(551),
				0,
				0
			},
			// 1022 - Exhaust Small - Certain Transfender cars
			{
				0,
				ANTI_V(436),
				ANTI_V(478),
				0,
				0,
				0,
				ANTI_V(600)
			},
			// 1023 - Spoileris Fury - Certain Transfender cars
			{
				ANTI_V(405) | ANTI_V(410) | ANTI_V(415) | ANTI_V(421),
				ANTI_V(439),
				ANTI_V(491),
				ANTI_V(496) | ANTI_V(517) | ANTI_V(518),
				ANTI_V(529) | ANTI_V(540) | ANTI_V(546) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551),
				ANTI_V(580) | ANTI_V(585),
				ANTI_V(603)
			},
			// 1024 - Lamps Square Fog - Certain Transfender cars
			{
				ANTI_V(400) | ANTI_V(410),
				0,
				ANTI_V(478) | ANTI_V(489),
				ANTI_V(500) | ANTI_V(505),
				ANTI_V(540) | ANTI_V(546),
				ANTI_V(589),
				ANTI_V(603)
			},
			// 1025 - Wheels Offroad - Certain Transfender cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1026 - Sideskirt Right Alien Sideskirt - Sultan
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(560),
				0
			},
			// 1027 - Sideskirt Left Alien Sideskirt - Sultan
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(560),
				0
			},
			// 1028 - Exhaust Alien - Sultan
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(560),
				0
			},
			// 1029 - Exhaust X-Flow - Sultan
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(560),
				0
			},
			// 1030 - Sideskirt Left X-Flow Sideskirt - Sultan
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(560),
				0
			},
			// 1031 - Sideskirt Right X-Flow Sideskirt - Sultan
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(560),
				0
			},
			// 1032 - Roof Alien Roof Vent - Sultan
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(560),
				0
			},
			// 1033 - Roof X-Flow Roof Vent - Sultan
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(560),
				0
			},
			// 1034 - Exhaust Alien - Elegy
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(562),
				0
			},
			// 1035 - Roof X-Flow Roof Vent - Elegy
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(562),
				0
			},
			// 1036 - SideSkirt Right Alien Sideskirt - Elegy
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(562),
				0
			},
			// 1037 - Exhaust X-Flow - Elegy
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(562),
				0
			},
			// 1038 - Roof Alien Roof Vent - Elegy
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(562),
				0
			},
			// 1039 - SideSkirt Left X-Flow Sideskirt - Elegy
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(562),
				0
			},
			// 1040 - SideSkirt Left Alien Sideskirt - Elegy
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(562),
				0
			},
			// 1041 - SideSkirt Right X-Flow Sideskirt - Elegy
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(562),
				0
			},
			// 1042 - SideSkirt Right Chrome Sideskirt - Broadway
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(575),
				0
			},
			// 1043 - Exhaust Slamin - Broadway
			{
				ANTI_V(401),
				ANTI_V(439),
				ANTI_V(491),
				ANTI_V(496) | ANTI_V(517) | ANTI_V(518),
				ANTI_V(540) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550),
				ANTI_V(585),
				ANTI_V(603)
			},
			// 1044 - Exhaust Chrome - Broadway
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(575),
				0
			},
			// 1045 - Exhaust X-Flow - Flash
			{
				ANTI_V(401),
				ANTI_V(439),
				ANTI_V(491),
				ANTI_V(517) | ANTI_V(518),
				ANTI_V(540) | ANTI_V(542) | ANTI_V(546) | ANTI_V(549) | ANTI_V(550),
				ANTI_V(585) | ANTI_V(589),
				ANTI_V(603)
			},
			// 1046 - Exhaust Alien - Flash
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(565),
				0
			},
			// 1047 - SideSkirt Right Alien Sideskirt - Flash
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(565),
				0
			},
			// 1048 - SideSkirt Right X-Flow Sideskirt - Flash
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(565),
				0
			},
			// 1049 - Spoileris Alien - Flash
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(565),
				0
			},
			// 1050 - Spoileris X-Flow - Flash
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(565),
				0
			},
			// 1051 - SideSkirt Left Alien Sideskirt - Flash
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(565),
				0
			},
			// 1052 - SideSkirt Left X-Flow Sideskirt - Flash
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(565),
				0
			},
			// 1053 - Roof X-Flow - Flash
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(565),
				0
			},
			// 1054 - Roof Alien - Flash
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(565),
				0
			},
			// 1055 - Roof Alien - Stratum
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(561),
				0
			},
			// 1056 - Sideskirt Right Alien Sideskirt - Stratum
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(561),
				0
			},
			// 1057 - Sideskirt Right X-Flow Sideskirt - Stratum
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(561),
				0
			},
			// 1058 - Spoileris Alien - Stratum
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(561),
				0
			},
			// 1059 - Exhaust X-Flow - Stratum
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(561),
				0
			},
			// 1060 - Spoileris X-Flow - Stratum
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(561),
				0
			},
			// 1061 - Roof X-Flow - Stratum
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(561),
				0
			},
			// 1062 - Sideskirt Left Alien Sideskirt - Stratum
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(561),
				0
			},
			// 1063 - Sideskirt Left X-Flow Sideskirt - Stratum
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(561),
				0
			},
			// 1064 - Exhaust Alien - Stratum
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(561),
				0
			},
			// 1065 - Exhaust Alien - Jester
			{
				0,
				0,
				0,
				0,
				ANTI_V(559),
				0,
				0
			},
			// 1066 - Exhaust X-Flow - Jester
			{
				0,
				0,
				0,
				0,
				ANTI_V(559),
				0,
				0
			},
			// 1067 - Roof Alien - Jester
			{
				0,
				0,
				0,
				0,
				ANTI_V(559),
				0,
				0
			},
			// 1068 - Roof X-Flow - Jester
			{
				0,
				0,
				0,
				0,
				ANTI_V(559),
				0,
				0
			},
			// 1069 - Sideskirt Right Alien Sideskirt - Jester
			{
				0,
				0,
				0,
				0,
				ANTI_V(559),
				0,
				0
			},
			// 1070 - Sideskirt Right X-Flow Sideskirt - Jester
			{
				0,
				0,
				0,
				0,
				ANTI_V(559),
				0,
				0
			},
			// 1071 - Sideskirt Left Alien Sideskirt - Jester
			{
				0,
				0,
				0,
				0,
				ANTI_V(559),
				0,
				0
			},
			// 1072 - Sideskirt Left X-Flow Sideskirt - Jester
			{
				0,
				0,
				0,
				0,
				ANTI_V(559),
				0,
				0
			},
			// 1073 - Wheels Shadow - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1074 - Wheels Mega - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1075 - Wheels Rimshine - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1076 - Wheels Wires - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1077 - Wheels Classic - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1078 - Wheels Twist - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1079 - Wheels Cutter - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1080 - Wheels Switch - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1081 - Wheels Grove - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1082 - Wheels Import - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1083 - Wheels Dollar - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1084 - Wheels Trance - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1085 - Wheels Atomic - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1086 - Stereo - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1087 - Hydraulics - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1088 - Roof Alien - Uranus
			{
				0,
				0,
				0,
				0,
				ANTI_V(558),
				0,
				0
			},
			// 1089 - Exhaust X-Flow - Uranus
			{
				0,
				0,
				0,
				0,
				ANTI_V(558),
				0,
				0
			},
			// 1090 - Sideskirt Right Alien Sideskirt - Uranus
			{
				0,
				0,
				0,
				0,
				ANTI_V(558),
				0,
				0
			},
			// 1091 - Roof X-Flow - Uranus
			{
				0,
				0,
				0,
				0,
				ANTI_V(558),
				0,
				0
			},
			// 1092 - Exhaust Alien - Uranus
			{
				0,
				0,
				0,
				0,
				ANTI_V(558),
				0,
				0
			},
			// 1093 - Sideskirt Left X-Flow Sideskirt - Uranus
			{
				0,
				0,
				0,
				0,
				ANTI_V(558),
				0,
				0
			},
			// 1094 - Sideskirt Left Alien Sideskirt - Uranus
			{
				0,
				0,
				0,
				0,
				ANTI_V(558),
				0,
				0
			},
			// 1095 - Sideskirt Right X-Flow Sideskirt - Uranus
			{
				0,
				0,
				0,
				0,
				ANTI_V(558),
				0,
				0
			},
			// 1096 - Wheels Ahab - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1097 - Wheels Virtual - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1098 - Wheels Access - Most cars
			{
				ANTI_V(400) | ANTI_V(401) | ANTI_V(402) | ANTI_V(404) | ANTI_V(405) | ANTI_V(409) | ANTI_V(410) | ANTI_V(411) | ANTI_V(412) | ANTI_V(415) | ANTI_V(418) | ANTI_V(419) | ANTI_V(420) | ANTI_V(421) | ANTI_V(422) | ANTI_V(424) | ANTI_V(426),
				ANTI_V(436) | ANTI_V(438) | ANTI_V(439) | ANTI_V(442) | ANTI_V(445) | ANTI_V(451) | ANTI_V(458),
				ANTI_V(466) | ANTI_V(467) | ANTI_V(474) | ANTI_V(475) | ANTI_V(477) | ANTI_V(478) | ANTI_V(479) | ANTI_V(480) | ANTI_V(489) | ANTI_V(491) | ANTI_V(492),
				ANTI_V(496) | ANTI_V(500) | ANTI_V(505) | ANTI_V(506) | ANTI_V(507) | ANTI_V(516) | ANTI_V(517) | ANTI_V(518) | ANTI_V(526) | ANTI_V(527),
				ANTI_V(529) | ANTI_V(533) | ANTI_V(534) | ANTI_V(535) | ANTI_V(536) | ANTI_V(540) | ANTI_V(541) | ANTI_V(542) | ANTI_V(545) | ANTI_V(546) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550) | ANTI_V(551) | ANTI_V(555) | ANTI_V(558) | ANTI_V(559),
				ANTI_V(560) | ANTI_V(561) | ANTI_V(562) | ANTI_V(565) | ANTI_V(566) | ANTI_V(567) | ANTI_V(575) | ANTI_V(576) | ANTI_V(579) | ANTI_V(580) | ANTI_V(585) | ANTI_V(587) | ANTI_V(589),
				ANTI_V(600) | ANTI_V(602) | ANTI_V(603)
			},
			// 1099 - Sideskirt Left Chrome Sideskirt - Broadway
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(575),
				0
			},
			// 1100 - Bullbar Chrome Grill - Remington
			{
				0,
				0,
				0,
				0,
				ANTI_V(534),
				0,
				0
			},
			// 1101 - Sideskirt Left `Chrome Flames` Sideskirt - Remington
			{
				0,
				0,
				0,
				0,
				ANTI_V(534),
				0,
				0
			},
			// 1102 - Sideskirt Left `Chrome Strip` Sideskirt - Savanna
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(567),
				0
			},
			// 1103 - Roof Covertible - Blade
			{
				0,
				0,
				0,
				0,
				ANTI_V(536),
				0,
				0
			},
			// 1104 - Exhaust Chrome - Blade
			{
				0,
				0,
				0,
				0,
				ANTI_V(536),
				0,
				0
			},
			// 1105 - Exhaust Slamin - Blade
			{
				0,
				0,
				0,
				0,
				ANTI_V(536),
				0,
				0
			},
			// 1106 - Sideskirt Right `Chrome Arches` - Remington
			{
				0,
				0,
				0,
				0,
				ANTI_V(534),
				0,
				0
			},
			// 1107 - Sideskirt Left `Chrome Strip` Sideskirt - Blade
			{
				0,
				0,
				0,
				0,
				ANTI_V(536),
				0,
				0
			},
			// 1108 - Sideskirt Right `Chrome Strip` Sideskirt - Blade
			{
				0,
				0,
				0,
				0,
				ANTI_V(536),
				0,
				0
			},
			// 1109 - Rear Bullbars Chrome - Slamvan
			{
				0,
				0,
				0,
				0,
				ANTI_V(535),
				0,
				0
			},
			// 1110 - Rear Bullbars Slamin - Slamvan
			{
				0,
				0,
				0,
				0,
				ANTI_V(535),
				0,
				0
			},
			// 1111 - Front Sign? Little Sign? - Slamvan
			{
				0,
				0,
				0,
				0,
				ANTI_V(535),
				0,
				0
			},
			// 1112 - Front Sign? Little Sign? - Slamvan
			{
				0,
				0,
				0,
				0,
				ANTI_V(535),
				0,
				0
			},
			// 1113 - Exhaust Chrome - Slamvan
			{
				0,
				0,
				0,
				0,
				ANTI_V(535),
				0,
				0
			},
			// 1114 - Exhaust Slamin - Slamvan
			{
				0,
				0,
				0,
				0,
				ANTI_V(535),
				0,
				0
			},
			// 1115 - Front Bullbars Chrome - Slamvan
			{
				0,
				0,
				0,
				0,
				ANTI_V(535),
				0,
				0
			},
			// 1116 - Front Bullbars Slamin - Slamvan
			{
				0,
				0,
				0,
				0,
				ANTI_V(535),
				0,
				0
			},
			// 1117 - Front Bumper Chrome - Slamvan
			{
				0,
				0,
				0,
				0,
				ANTI_V(535),
				0,
				0
			},
			// 1118 - Sideskirt Right `Chrome Trim` Sideskirt - Slamvan
			{
				0,
				0,
				0,
				0,
				ANTI_V(535),
				0,
				0
			},
			// 1119 - Sideskirt Right `Wheelcovers` Sideskirt - Slamvan
			{
				0,
				0,
				0,
				0,
				ANTI_V(535),
				0,
				0
			},
			// 1120 - Sideskirt Left `Chrome Trim` Sideskirt - Slamvan
			{
				0,
				0,
				0,
				0,
				ANTI_V(535),
				0,
				0
			},
			// 1121 - Sideskirt Left `Wheelcovers` Sideskirt - Slamvan
			{
				0,
				0,
				0,
				0,
				ANTI_V(535),
				0,
				0
			},
			// 1122 - Sideskirt Right `Chrome Flames` Sideskirt - Remington
			{
				0,
				0,
				0,
				0,
				ANTI_V(534),
				0,
				0
			},
			// 1123 - Bullbars Bullbar Chrome Bars - Remington
			{
				0,
				0,
				0,
				0,
				ANTI_V(534),
				0,
				0
			},
			// 1124 - Sideskirt Left `Chrome Arches` Sideskirt - Remington
			{
				0,
				0,
				0,
				0,
				ANTI_V(534),
				0,
				0
			},
			// 1125 - Bullbars Bullbar Chrome Lights - Remington
			{
				0,
				0,
				0,
				0,
				ANTI_V(534),
				0,
				0
			},
			// 1126 - Exhaust Chrome Exhaust - Remington
			{
				0,
				0,
				0,
				0,
				ANTI_V(534),
				0,
				0
			},
			// 1127 - Exhaust Slamin Exhaust - Remington
			{
				0,
				0,
				0,
				0,
				ANTI_V(534),
				0,
				0
			},
			// 1128 - Roof Vinyl Hardtop - Blade
			{
				0,
				0,
				0,
				0,
				ANTI_V(536),
				0,
				0
			},
			// 1129 - Exhaust Chrome - Savanna
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(567),
				0
			},
			// 1130 - Roof Hardtop - Savanna
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(567),
				0
			},
			// 1131 - Roof Softtop - Savanna
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(567),
				0
			},
			// 1132 - Exhaust Slamin - Savanna
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(567),
				0
			},
			// 1133 - Sideskirt Right `Chrome Strip` Sideskirt - Savanna
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(567),
				0
			},
			// 1134 - SideSkirt Right `Chrome Strip` Sideskirt - Tornado
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(576),
				0
			},
			// 1135 - Exhaust Slamin - Tornado
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(576),
				0
			},
			// 1136 - Exhaust Chrome - Tornado
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(576),
				0
			},
			// 1137 - Sideskirt Left `Chrome Strip` Sideskirt - Tornado
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(576),
				0
			},
			// 1138 - Spoileris Alien - Sultan
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(560),
				0
			},
			// 1139 - Spoileris X-Flow - Sultan
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(560),
				0
			},
			// 1140 - Rear Bumper X-Flow - Sultan
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(560),
				0
			},
			// 1141 - Rear Bumper Alien - Sultan
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(560),
				0
			},
			// 1142 - Vents Left Oval Vents - Certain Transfender Cars
			{
				ANTI_V(401),
				ANTI_V(439),
				ANTI_V(491),
				ANTI_V(496) | ANTI_V(517) | ANTI_V(518),
				ANTI_V(540) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550),
				ANTI_V(585),
				ANTI_V(603)
			},
			// 1143 - Vents Right Oval Vents - Certain Transfender Cars
			{
				ANTI_V(401),
				ANTI_V(439),
				ANTI_V(491),
				ANTI_V(496) | ANTI_V(517) | ANTI_V(518),
				ANTI_V(540) | ANTI_V(547) | ANTI_V(549) | ANTI_V(550),
				ANTI_V(585),
				ANTI_V(603)
			},
			// 1144 - Vents Left Square Vents - Certain Transfender Cars
			{
				ANTI_V(401),
				ANTI_V(439),
				ANTI_V(491),
				ANTI_V(517) | ANTI_V(518),
				ANTI_V(540) | ANTI_V(542) | ANTI_V(549) | ANTI_V(550),
				ANTI_V(585) | ANTI_V(589),
				ANTI_V(603)
			},
			// 1145 - Vents Right Square Vents - Certain Transfender Cars
			{
				ANTI_V(401),
				ANTI_V(439),
				ANTI_V(491),
				ANTI_V(517) | ANTI_V(518),
				ANTI_V(540) | ANTI_V(542) | ANTI_V(549) | ANTI_V(550),
				ANTI_V(585) | ANTI_V(589),
				ANTI_V(603)
			},
			// 1146 - Spoileris X-Flow - Elegy
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(562),
				0
			},
			// 1147 - Spoileris Alien - Elegy
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(562),
				0
			},
			// 1148 - Rear Bumper X-Flow - Elegy
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(562),
				0
			},
			// 1149 - Rear Bumper Alien - Elegy
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(562),
				0
			},
			// 1150 - Rear Bumper Alien - Flash
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(565),
				0
			},
			// 1151 - Rear Bumper X-Flow - Flash
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(565),
				0
			},
			// 1152 - Front Bumper X-Flow - Flash
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(565),
				0
			},
			// 1153 - Front Bumper Alien - Flash
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(565),
				0
			},
			// 1154 - Rear Bumper Alien - Stratum
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(561),
				0
			},
			// 1155 - Front Bumper Alien - Stratum
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(561),
				0
			},
			// 1156 - Rear Bumper X-Flow - Stratum
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(561),
				0
			},
			// 1157 - Front Bumper X-Flow - Stratum
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(561),
				0
			},
			// 1158 - Spoileris X-Flow - Jester
			{
				0,
				0,
				0,
				0,
				ANTI_V(559),
				0,
				0
			},
			// 1159 - Rear Bumper Alien - Jester
			{
				0,
				0,
				0,
				0,
				ANTI_V(559),
				0,
				0
			},
			// 1160 - Front Bumper Alien - Jester
			{
				0,
				0,
				0,
				0,
				ANTI_V(559),
				0,
				0
			},
			// 1161 - Rear Bumper X-Flow - Jester
			{
				0,
				0,
				0,
				0,
				ANTI_V(559),
				0,
				0
			},
			// 1162 - Spoileris Alien - Jester
			{
				0,
				0,
				0,
				0,
				ANTI_V(559),
				0,
				0
			},
			// 1163 - Spoileris X-Flow - Uranus
			{
				0,
				0,
				0,
				0,
				ANTI_V(558),
				0,
				0
			},
			// 1164 - Spoileris Alien - Uranus
			{
				0,
				0,
				0,
				0,
				ANTI_V(558),
				0,
				0
			},
			// 1165 - Front Bumper X-Flow - Uranus
			{
				0,
				0,
				0,
				0,
				ANTI_V(558),
				0,
				0
			},
			// 1166 - Front Bumper Alien - Uranus
			{
				0,
				0,
				0,
				0,
				ANTI_V(558),
				0,
				0
			},
			// 1167 - Rear Bumper X-Flow - Uranus
			{
				0,
				0,
				0,
				0,
				ANTI_V(558),
				0,
				0
			},
			// 1168 - Rear Bumper Alien - Uranus
			{
				0,
				0,
				0,
				0,
				ANTI_V(558),
				0,
				0
			},
			// 1169 - Front Bumper Alien - Sultan
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(560),
				0
			},
			// 1170 - Front Bumper X-Flow - Sultan
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(560),
				0
			},
			// 1171 - Front Bumper Alien - Elegy
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(562),
				0
			},
			// 1172 - Front Bumper X-Flow - Elegy
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(562),
				0
			},
			// 1173 - Front Bumper X-Flow - Jester
			{
				0,
				0,
				0,
				0,
				ANTI_V(559),
				0,
				0
			},
			// 1174 - Front Bumper Chrome - Broadway
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(575),
				0
			},
			// 1175 - Rear Bumper Slamin - Broadway
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(575),
				0
			},
			// 1176 - Front Bumper Chrome - Broadway
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(575),
				0
			},
			// 1177 - Rear Bumper Slamin - Broadway
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(575),
				0
			},
			// 1178 - Rear Bumper Slamin - Remington
			{
				0,
				0,
				0,
				0,
				ANTI_V(534),
				0,
				0
			},
			// 1179 - Front Bumper Chrome - Remington
			{
				0,
				0,
				0,
				0,
				ANTI_V(534),
				0,
				0
			},
			// 1180 - Rear Bumper Chrome - Remington
			{
				0,
				0,
				0,
				0,
				ANTI_V(534),
				0,
				0
			},
			// 1181 - Front Bumper Slamin - Blade
			{
				0,
				0,
				0,
				0,
				ANTI_V(536),
				0,
				0
			},
			// 1182 - Front Bumper Chrome - Blade
			{
				0,
				0,
				0,
				0,
				ANTI_V(536),
				0,
				0
			},
			// 1183 - Rear Bumper Slamin - Blade
			{
				0,
				0,
				0,
				0,
				ANTI_V(536),
				0,
				0
			},
			// 1184 - Rear Bumper Chrome - Blade
			{
				0,
				0,
				0,
				0,
				ANTI_V(536),
				0,
				0
			},
			// 1185 - Front Bumper Slamin - Remington
			{
				0,
				0,
				0,
				0,
				ANTI_V(534),
				0,
				0
			},
			// 1186 - Rear Bumper Slamin - Savanna
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(567),
				0
			},
			// 1187 - Rear Bumper Chrome - Savanna
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(567),
				0
			},
			// 1188 - Front Bumper Slamin - Savanna
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(567),
				0
			},
			// 1189 - Front Bumper Chrome - Savanna
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(567),
				0
			},
			// 1190 - Front Bumper Slamin - Tornado
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(576),
				0
			},
			// 1191 - Front Bumper Chrome - Tornado
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(576),
				0
			},
			// 1192 - Rear Bumper Chrome - Tornado
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(576),
				0
			},
			// 1193 - Rear Bumper Slamin - Tornado
			{
				0,
				0,
				0,
				0,
				0,
				ANTI_V(576),
				0
			}
		};
	// Check if the componentid is in range
	if (1000 <= componentid <= 1193)
	{
		new
			model = GetVehicleModel(vehicleid);
		// Check the model is in range
		// We are dealing with cheaters after all
		if (400 <= model <= 603)
		{
			// Adjust the model to the range of our array
			model -= 400;
			// This is the line that does all the work.
			// Should be very fast and efficient.
			// Uses bit manipulation instead of
			// divisions and mods of 32.
			// The other way of doing it would be:
			// return cs_bMods[((componentid - 1000) * 7) + (model >> 5)]
			// But this is probably better as it's all native.
			// Could run tests if you really wanted, but
			// that would require compressing the array
			// above into a 1d array (saving no space).
			return cs_bMods[componentid - 1000][model >> 5] & (1 << (model & 0x1F));
		}
	}

	if(!(IsPlayerInRangeOfPoint(playerid, 15.0, 616.7820, -74.8151, 997.6350) || IsPlayerInRangeOfPoint(playerid, 15.0, 615.2851, -124.2390, 997.6350) ||
	IsPlayerInRangeOfPoint(playerid, 15.0, 617.5380, -1.9900, 1000.6829)) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(VehicleInfo[vehicleid][vNupirkta])
		{
			AC_SetVehiclePos(vehicleid, VehicleInfo[vehicleid][vLastPos][0], VehicleInfo[vehicleid][vLastPos][1], VehicleInfo[vehicleid][vLastPos][2]);
			SetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vLastPos][3]);
		}
		else
		{
			ac_SetVehicleToRespawn(vehicleid);
		}

		new String[216];

		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}buvo iðmestas ið serverio!", GetPlayerNameEx(playerid));
		SendClientMessageToAll(-1, String);

		SendClientMessageToAll(-1, "{ffffff} Prieþastis: {FFAF00}Car upgrade hack.");

		IsmestiZaideja(playerid, 100);
	}
	return 1;
}

f_public: StabdytiAnim(playerid)
{
	ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0 );
}

f_public: KickEx(playerid, pID)
{
	Kick(playerid);
}

f_public: MatuojaGreiti()
{
	new pSpeed, String[216];
	for(new playerid, size = GetPlayerPoolSize(); playerid <= size; playerid++)
	{
		if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid)) continue;
		if(IsPlayerInRangeOfPoint(playerid, 20.0, -1587.04651, 455.08087, 6.17790)
		|| IsPlayerInRangeOfPoint(playerid, 20.0, -2012.12048, 231.69223, 27.47608)
		|| IsPlayerInRangeOfPoint(playerid, 20.0, -2012.89014, -59.91755, 34.16014)
		|| IsPlayerInRangeOfPoint(playerid, 20.0, -2265.38794, -33.64073, 34.29243)
		|| IsPlayerInRangeOfPoint(playerid, 20.0, -2294.61084, 573.75916, 34.16080)
		|| IsPlayerInRangeOfPoint(playerid, 20.0, -2359.18359, 1385.09766, 6.24980))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(!IsABike(vehicleid))
				{
					if(!PI[playerid][suautopilotu])
					{
						if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5 && PI[playerid][specialybe] != 2)
						{
							if(PI[playerid][AdminLevel] < LEVEL_OWNER)
							{
								new Hours; gettime(Hours);

								switch(Hours)
								{
									case 22, 23, 00, 1, 2, 3, 4, 5, 6:
									{
 										return 1;
									}

									default:
									{
										pSpeed = GetPlayerSpeed(playerid);

										switch(pSpeed)
										{
											case 91..99:
											{
												if(GreitiMatuoja[playerid] <= gettime())
												{
													GreitiMatuoja[playerid] = gettime() + 4;

													format(String, sizeof(String), "{ffffff} Virðijote leistinà {FFAF00}90 {ffffff}KM/H greitá ({FFAF00}%d {ffffff}KM/H)!", pSpeed);
													SendClientMessage(playerid, -1, String);

													SendClientMessage(playerid, -1, "{ffffff} Kadangi greitá virðijote nedaug, gaunate tik áspëjimà!");
													FadeScreenForPlayer(playerid, FADE_OUT, 0xFFFFFFFF);
												}
											}

											case 100..500:
											{
												if(GreitiMatuoja[playerid] <= gettime())
												{
													GreitiMatuoja[playerid] = gettime() + 4;

													if(PI[playerid][pinigai] > 299) 	GivePlayerMoneyA(playerid, -300);
													if(PI[playerid][teises]) 			PI[playerid][GreicioBalai] ++;

													format(String, sizeof(String), "{ffffff} Virðijote leistinà {FFAF00}90 {ffffff}KM/H greitá ({FFAF00}%d {ffffff}KM/H). Bauda: {FFAF00}$300{ffffff}!", pSpeed);
													SendClientMessage(playerid, -1, String);

													format(String, sizeof(String), "{ffffff} Gavote {FFAF00}%d/10 {ffffff}vairavimo baudos balà (-us)!", PI[playerid][GreicioBalai]);
													if(PI[playerid][teises]) SendClientMessage(playerid, -1, String);

													FadeScreenForPlayer(playerid, FADE_OUT, 0xFFFFFFFF);

													if(PI[playerid][GreicioBalai] > 9 && PI[playerid][teises])
													{
														SendClientMessage(playerid, -1, "{ffffff} Praradote vairavimo teisës, nes surinkote {FFAF00}10 {ffffff}vairavimo baudos balø!");

														PI[playerid][teises] 		= false;
														PI[playerid][GreicioBalai] 	= 0;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	return 1;
}

f_public: count2()
{
	for(new i; i < MAX_PLAYERS; i++)
	{
		GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~-~g~ 2 ~g~-",1000,3);
		PlaySound(i, 1056);
	}
}

f_public: count1()
{
	for(new i; i < MAX_PLAYERS; i++)
	{
		GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~-~r~ 1 ~g~-",1000,3);
		PlaySound(i, 1056);
	}
}

f_public: countgo()
{
	for(new i; i < MAX_PLAYERS; i++)
	{
		GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~-~b~ Pirmyn ~g~-",1000,3);
		PlaySound(i, 1057);
	}
}

f_public: stop()
{
   Skaicevimas = false;
}

stock GivePlayerExperience(playerid, ammount)
{
	PI[playerid][Experience] += ammount;

	SetPlayerScore(playerid, PI[playerid][Experience]);
}

stock ShowPlayerStats(playerid, clickedid)
{
	new String[2000], Stringas[1000], AdminLevelName[50], Gender[24];

	ChoosedPlayer[playerid] = clickedid;

	switch(PI[clickedid][AdminLevel])
	{
		case LEVEL_NONE: 	AdminLevelName = "{FFAF00}Nëra";
		case LEVEL_VIP: 	AdminLevelName = "{FFFF00}VIP";
		case LEVEL_FIRST: 	AdminLevelName = "{3AD73A}I lygio administratorius";
		case LEVEL_SECOND: 	AdminLevelName = "{3AD73A}II lygio administratorius";
		case LEVEL_THIRD: 	AdminLevelName = "{3AD73A}III lygio administratorius";
		case LEVEL_OWNER: 	AdminLevelName = "{FFAF00}Savininkas";
		default: 			AdminLevelName = "{FFAF00}Nenustatyta";
	}

	switch(PI[clickedid][lytis])
	{
		case 1: Gender = "{ffffff} Moteris";
		case 0: Gender = "{ffffff} Vyras";
		default: Gender = "{FFAF00}Nenustatyta";
	}

	new Float: Health;

	GetPlayerHealth(clickedid, Health);

	new KoksDarbas[50];
	switch(PI[clickedid][specialybe])
	{
		case 1:      KoksDarbas = "Policininkas";
		case 2:      KoksDarbas = "Medikas";
		case 3:      KoksDarbas = "Kurjeris";
		case 4:      KoksDarbas = "autoserviso ECO darbuotojas";
		case 5:      KoksDarbas = "spec. bûrio pajëgø ARAS darbuotojas";
		case 11:     KoksDarbas = "Fûristas";

		case 20:     KoksDarbas = "Picø iðveþiotojas";
		case 22:     KoksDarbas = "Keliø valytojas";
		case 24:     KoksDarbas = "Autobusø vairuotojas";
		case 26:     KoksDarbas = "Gaisrininkas";
		case 13:     KoksDarbas = "Taksistas";

		default:     KoksDarbas = "Bedarbis";
	}

	new aKategorija[24];
	if(!PI[clickedid][Mteises]) aKategorija = "{FFAF00}Neturi";
	else aKategorija = "{ffffff} Turi";

	new bKategorija[24];
	if(!PI[clickedid][teises]) bKategorija = "{FFAF00}Neturi";
	else bKategorija = "{ffffff} Turi";

	new cKategorija[24];
	if(!PI[clickedid][FTeises]) cKategorija = "{FFAF00}Neturi";
	else cKategorija = "{ffffff} Turi";

	new glic[24];
	if(PI[clickedid][gLicenzija]) glic = "{ffffff} Turi";
	else glic = "{FFAF00}Neturi";

	new sPazymejimas[50];

	if(PI[clickedid][medicinospazyma] < gettime()) sPazymejimas = "{FFAF00}Negalioja";
	else sPazymejimas = ConvertSeconds(PI[clickedid][medicinospazyma] - gettime());

	new NeoficialiGauja[64];

	switch(PI[clickedid][gMember])
	{
		case -1: NeoficialiGauja = "{FFAF00}Nëra";
		default: format(NeoficialiGauja, sizeof(NeoficialiGauja), "%s", GangInfo[PI[clickedid][gMember]][gTitle]);
	}

	new Pavadinimas[30];

	switch(PI[clickedid][MobilePhone])
	{
		case 0: Pavadinimas = "{FFAF00}Nëra";
		case 1: Pavadinimas = "iPhone";
		case 2: Pavadinimas = "Samsung";
		case 3: Pavadinimas = "Nokia";
		case 4: Pavadinimas = "Sony";
		case 5: Pavadinimas = "Alcatel";
		case 6: Pavadinimas = "HTC";
	}

	new Numeris[10];
	switch(PI[clickedid][MobilePhoneNumber])
	{
		case 0: 	Numeris = "{FFAF00}-";
		default:	format(Numeris, sizeof(Numeris), "%d", PI[clickedid][MobilePhoneNumber]);
	}

	new Verslas[64], Namas[30], Masina1[30], Masina2[30], Masina3[30];

	if(PlayerHaveProperty(clickedid) == -1) 	Verslas = "{FFAF00}Neturi";
	else 										format(Verslas, sizeof(Verslas), "{ffffff} %s", PropertyInfo[PlayerHaveProperty(clickedid)][pTitle]);

	if(PlayerHaveHouse(clickedid) == -1) 		Namas = "{FFAF00}Neturi";
	else 										Namas = "{ffffff} Turi";

	if(PI[clickedid][Transportas1] == -1)		Masina1 = "{FFAF00}Neturi";
	else 										format(Masina1, sizeof(Masina1), "{ffffff} %s", VehicleNames[GetVehicleModel(PI[clickedid][Transportas1]) - 400]);

	if(PI[clickedid][Transportas2] == -1)		Masina2 = "{FFAF00}Neturi";
	else 										format(Masina2, sizeof(Masina2), "{ffffff} %s", VehicleNames[GetVehicleModel(PI[clickedid][Transportas2]) - 400]);

	if(PI[clickedid][Transportas3] == -1)		Masina3 = "{FFAF00}Neturi";
	else 										format(Masina3, sizeof(Masina3), "{ffffff} %s", VehicleNames[GetVehicleModel(PI[clickedid][Transportas3]) - 400]);

	new Prizius[30];

	switch(PI[clickedid][Priziuretojas])
	{
		case PRIZ_NIEKO:		Prizius = "{ffffff} Nëra";
		case PRIZ_ADMIN:		Prizius = "{ffffff} Administratoriø";
		case PRIZ_DIRK: 		Prizius = "{ffffff} Direktoriø";
		case PRIZ_VIP: 			Prizius = "{ffffff} VIP nariø";
		case PRIZ_BAN: 			Prizius = "{ffffff} BAN/UNBAN";
		case PRIZ_GAUJOS: 		Prizius = "{ffffff} Gaujø";
	}

	format(Stringas, sizeof(Stringas),
	"{ffffff}Vardas_Pavardë: {FFAF00}%s\n{ffffff}Lytis: %s\n{ffffff}Patirtis: {FFAF00}%s\n{ffffff}Þvejybos lygis: {FFAF00}%s\n{ffffff}Reputacija: {FFAF00}%s\n{ffffff}Ieðkomumas: {FFAF00}%d\n{ffffff}Sveikata: {FFAF00}%d\n",
	GetPlayerNameEx(clickedid), Gender, konvertuoti_pinigus(GetPlayerScore(clickedid)), konvertuoti_pinigus(FS[clickedid][FishingLevel]), konvertuoti_pinigus(PI[clickedid][KiekTuriRepTasku]), PI[clickedid][Ieskomas], floatround(Health));
	strcat(String, Stringas);

	format(Stringas, sizeof(Stringas), "{ffffff}Pinigai rankose: {FFAF00}$%s\n{ffffff}Pinigai banke: {FFAF00}$%s\n{ffffff}Alga: {FFAF00}$%s\n{ffffff}Darbas: {ffffff} %s\n{ffffff}Neoficiali gauja: {ffffff} %s\n{ffffff}Verslas: %s\n{ffffff}Namas: %s\n\
	{ffffff}Pirmoji transp. priemonë: %s\n{ffffff}Antroji transp. priemonë: %s\n{ffffff}Treèioji transp. priemonë: %s\n",
	konvertuoti_pinigus(GetPlayerMoneyA(clickedid)), konvertuoti_pinigus(PI[clickedid][banke]), konvertuoti_pinigus(PI[clickedid][alga]), KoksDarbas, NeoficialiGauja, Verslas, Namas, Masina1, Masina2, Masina3);
	strcat(String, Stringas);

	format(Stringas, sizeof(Stringas), "{ffffff}A kategorijos vairavimo teisës: %s\n{ffffff}B kategorijos vairavimo teisës: %s\n{ffffff}C kategorijos vairavimo teisës: %s\n{ffffff}Ginklø licenzija: %s\n",
	aKategorija, bKategorija, cKategorija, glic);
	strcat(String, Stringas);

	format(Stringas, sizeof(Stringas), "{ffffff}Telefonas: {ffffff} %s {ffffff}(numeris: {FFAF00}%s{ffffff})\n{ffffff}Darbe pradirbta: {FFAF00}%s {ffffff}min\n{ffffff}Ðiandien praþaista: {FFAF00}%s {ffffff}min\n{ffffff}Ið viso praþaista: {FFAF00}%s {ffffff}min\n\
	{ffffff}Uþsiregistravo: {FFAF00}%s\n{ffffff}Sveikatos paþymëjimas galios dar: {FFAF00}%s\n{ffffff}Statusas: {ffffff} %s {ffffff}({FFAF00}%s{ffffff})\n{ffffff}Priþiûrëtojas: %s\n\n",
	Pavadinimas, Numeris, konvertuoti_pinigus(PI[clickedid][pradirbo]), konvertuoti_pinigus(PI[clickedid][prazaide]), konvertuoti_pinigus(PI[clickedid][VisoPrazaide]), PI[clickedid][KadaUzsiregino], sPazymejimas, AdminLevelName,
	ConvertSeconds(PI[clickedid][AdminLaikas] - gettime()), Prizius);
	strcat(String, Stringas);

	switch(PI[clickedid][specialybe])
	{
		case 1:
		{
			format(Stringas, sizeof(Stringas), "{ffffff}Darbo statistika:\n{ffffff}Ðiandien priimta {FFAF00}%d{ffffff} iðkvietimø\n{ffffff}Ðià savaitæ priimta {FFAF00}%d {ffffff}iðkvietimø\n{ffffff}Ið viso priimta {FFAF00}%d {ffffff}iðkvietimø\n\n",
			PI[clickedid][SiandienPriimta][0], PI[clickedid][SiaSavaitePriimta][0], PI[clickedid][IsVisoPriimta][0]);
			strcat(String, Stringas);
		}

		case 2:
		{
			format(Stringas, sizeof(Stringas), "{ffffff}Darbo statistika:\n{ffffff}Ðiandien priimta {FFAF00}%d{ffffff} iðkvietimø\n{ffffff}Ðià savaitæ priimta {FFAF00}%d {ffffff}iðkvietimø\n{ffffff}Ið viso priimta {FFAF00}%d {ffffff}iðkvietimø\n\n",
			PI[clickedid][SiandienPriimta][1], PI[clickedid][SiaSavaitePriimta][1], PI[clickedid][IsVisoPriimta][1]);
			strcat(String, Stringas);
		}

		case 4:
		{
			format(Stringas, sizeof(Stringas), "{ffffff}Darbo statistika:\n{ffffff}Ðiandien priimta {FFAF00}%d{ffffff} iðkvietimø\n{ffffff}Ðià savaitæ priimta {FFAF00}%d {ffffff}iðkvietimø\n{ffffff}Ið viso priimta {FFAF00}%d {ffffff}iðkvietimø\n\n",
			PI[clickedid][SiandienPriimta][2], PI[clickedid][SiaSavaitePriimta][2], PI[clickedid][IsVisoPriimta][2]);
			strcat(String, Stringas);
		}
	}

	if(PI[clickedid][AdminLevel] > LEVEL_VIP)
	{
		format(Stringas, sizeof(Stringas), "{ffffff}Administratoriaus statistika:\n{ffffff}Ðiandien padëjo {FFAF00}%d {ffffff}kartø\n{ffffff}Ið viso padëjo {FFAF00}%d {ffffff}kartø",
		AHS[clickedid][HelpsForToday], AHS[clickedid][HelpsInAll]);
		strcat(String, Stringas);
	}

	ShowPlayerDialogEx(playerid, 8965, DIALOG_STYLE_MSGBOX, "Informacija", String, "+ REP", "Uþdaryti");

	return 1;
}

stock GetClosestVehicle(playerid, &Float: dis = (Float: 0x7F800000))
{
	if(GetPlayerVehicleID(playerid) > 0)
	{
	    return GetPlayerVehicleID(playerid);
	}

	dis = (Float: 0x7F800000);
  	new Float: X, Float: Y, Float: Z;

  	if(GetPlayerPos(playerid, X, Y, Z))
	{
  		new vehicleid = INVALID_VEHICLE_ID;
    	for(new v, Float: temp, Float: VX, Float: VY, Float: VZ; v != MAX_VEHICLES; v ++)
		{
      		if(GetVehiclePos(v, VX, VY, VZ))
			{
        		VX -= X, VY -= Y, VZ -= Z;
        		temp = VX * VX + VY * VY + VZ * VZ;
        		if(temp < dis) dis = temp, vehicleid = v;
      		}
    	}

    	dis = floatpower(dis, 0.5);

    	return vehicleid;
  	}

  	return INVALID_VEHICLE_ID;
}


//stock RemoveObjectsForPlayer(playerid)

stock ExitFromCarShop(playerid)
{
	if(PI[playerid][PasirinktaMasina] != -1)
   	{
   	    SetCameraBehindPlayer   (playerid);
	    SetPlayerVirtualWorld   (playerid, 0);
	    TogglePlayerControllable(playerid, true);

	    if(PI[playerid][SukurtaMasina] != -1)
		{
			if(VehicleInfo[PI[playerid][SukurtaMasina]][vNupirkta] == 2)
			{
				SetVehicleVirtualWorld	(PI[playerid][SukurtaMasina], 0);
				DestroyVehicle			(PI[playerid][SukurtaMasina]);

				PI[playerid][SukurtaMasina] = -1;
			}
		}

		PI[playerid][PasirinktaMasina] = -1;

		HideCarShopTextDraws(playerid);
	}
}

stock UpdateSpeedo(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return 1;

	new vehicleid = GetPlayerVehicleID(playerid);

	new msg[128];

	new Float: vHP;

	new pSpeed = GetPlayerSpeed(playerid);

	GetVehicleHealth(vehicleid, vHP);

	format(msg, 40, "%s", VehicleNames[GetVehicleModel(vehicleid) - 400]);
	PlayerTextDrawSetString(playerid, spidometras_p[playerid][2], msg);

	format(msg, 40, "~W~%d%", floatround((vHP / 1000) * 100));
	PlayerTextDrawSetString(playerid, spidometras_p[playerid][4], msg);

	format(msg, 40, "rida: ~p~ %.2f ~w~km", VehicleInfo[vehicleid][vRida]);
	PlayerTextDrawSetString(playerid, spidometras_p[playerid][3], msg);

	if(pSpeed == 0)
	{
		format(msg, 40, "~w~00%d", pSpeed);
		PlayerTextDrawSetString(playerid, spidometras_p[playerid][1], msg);
	}
	else if(pSpeed > 0 && pSpeed < 10)
	{
		format(msg, 40, "~w~00%d", pSpeed);
		PlayerTextDrawSetString(playerid, spidometras_p[playerid][1], msg);
	}
	else if(pSpeed > 10 && pSpeed <= 90)
	{
		format(msg, 40, "~w~0%d", pSpeed);
		PlayerTextDrawSetString(playerid, spidometras_p[playerid][1], msg);
	}
	else if(pSpeed > 90 && pSpeed < 100)
	{
		format(msg, 40, "~w~0%d", pSpeed);
		PlayerTextDrawSetString(playerid, spidometras_p[playerid][1], msg);
	}
	else if(pSpeed >= 100)
	{
		format(msg, 40, "~w~%d", pSpeed);
		PlayerTextDrawSetString(playerid, spidometras_p[playerid][1], msg);
	}

	return 0;
}

stock ClearVehicleVariables(vehicleid)
{
	format(VehicleInfo[vehicleid][vSavininkas], 21, "-");
	format(VehicleInfo[vehicleid][vNumeriai], 14, "-");
	format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "-");

	for(new tune = 0; tune < 13; tune ++) 	VehicleInfo[vehicleid][vTune][tune] = 0;
	for(new color = 0; color < 2; color ++) VehicleInfo[vehicleid][vColor][color] = 0;

	VehicleInfo[vehicleid][vPaintjob] 	= -1;
	VehicleInfo[vehicleid][vRida] 		= 0.0;
	VehicleInfo[vehicleid][vKuras] 		= 0.0;
	VehicleInfo[vehicleid][vKuroTipas] 	= -1;
	VehicleInfo[vehicleid][vKaina] 		= 0;
	VehicleInfo[vehicleid][vUzraktas] 	= false;
	VehicleInfo[vehicleid][vNupirkta] 	= false;
	VehicleInfo[vehicleid][vSprogusi] 	= false;
	VehicleInfo[vehicleid][vDujos]		= false;
	VehicleInfo[vehicleid][vIjungta]	= false;
	VehicleInfo[vehicleid][vDujuLikutis]= 0.0;
	VehicleInfo[vehicleid][vKaina]		= 0;
	VehicleInfo[vehicleid][vSanaudos]	= 0.0;
	VehicleInfo[vehicleid][vBakas]		= 0.0;
	VehicleInfo[vehicleid][vDujuBakas]	= 0.0;
	VehicleInfo[vehicleid][vTA]			= 0;
	VehicleInfo[vehicleid][vNuoma]		= false;
	VehicleInfo[vehicleid][KasPriekaboje] = -1;
	VehicleInfo[vehicleid][KiekPriekaboje] = 0;
	VehicleInfo[vehicleid][Draudimas] = 0;
	VehicleInfo[vehicleid][IsInGarage]  = false;

	for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
	{
		VehicleTrunkInfo[vehicleid][i][ItemID] = 0;
		VehicleTrunkInfo[vehicleid][i][ItemAmmount] = 0;
	}

	return 1;
}

f_public: PilamKura(playerid)
{
	new String[128];
	new vehicleid = PI[playerid][masina];

	TogglePlayerControllable(playerid, false);
	SelectTextDraw			(playerid, 0x336633FF);

	switch(PI[playerid][PasirinktasKuras])
	{
		case BENZINAS..DYZELIS:
		{
			if(VehicleInfo[vehicleid][vKuras] >= VehicleInfo[vehicleid][vBakas])
			{
				switch(PI[playerid][PasirinktasKuras])
				{
					case BENZINAS:
					{
						format(String, sizeof(String), "{ffffff} Transp. priemonës bakas pilnas. Ápylëte: {FFAF00}%.1f L{ffffff}, ið viso sumokëti reikia: {FFAF00}$%d{ffffff}!", KiekIpyle[playerid], IpyleSuma[playerid] = 3 * floatround(KiekIpyle[playerid]));
						SendClientMessage(playerid, -1, String);

						SendClientMessage(playerid, -1, "{ffffff} Sumokëti uþ kurà galite áëjus á degalinës vidø!");
					}

					case DYZELIS:
					{
						format(String, sizeof(String), "{ffffff} Transp. priemonës bakas pilnas. Ápylëte: {FFAF00}%.1f L{ffffff}, ið viso sumokëti reikia: {FFAF00}$%d{ffffff}!", KiekIpyle[playerid], IpyleSuma[playerid] = 2 * floatround(KiekIpyle[playerid]));
						SendClientMessage(playerid, -1, String);

						SendClientMessage(playerid, -1, "{ffffff} Sumokëti uþ kurà galite áëjus á degalinës vidø!");
					}
				}

				CancelSelectTextDraw	(playerid);
				KillTimer				(FuelTimer[playerid]);
				TogglePlayerControllable(playerid, true);

				KiekIpyle[playerid] = 0.0;

				for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
				for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

				return 1;
			}
		}

		case DUJOS:
		{
			if(VehicleInfo[vehicleid][vDujuLikutis] >= VehicleInfo[vehicleid][vDujuBakas])
			{
				format(String, sizeof(String), "{ffffff} Transp. priemonës dujø bakas pilnas. Ápylëte: {FFAF00}%.1f L{ffffff}, ið viso sumokëti reikia: {FFAF00}$%d{ffffff}!", KiekIpyle[playerid], IpyleSuma[playerid] = 2 * floatround(KiekIpyle[playerid]));
				SendClientMessage(playerid, -1, String);

				SendClientMessage(playerid, -1, "{ffffff} Sumokëti uþ kurà galite áëjus á degalinës vidø!");

				CancelSelectTextDraw	(playerid);
				KillTimer				(FuelTimer[playerid]);
				TogglePlayerControllable(playerid, true);

				KiekIpyle[playerid] = 0.0;

				for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
				for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

				return 1;
			}
		}
	}

	switch(PI[playerid][PasirinktasKuras])
	{
		case BENZINAS:
		{
			if(GetPlayerMoneyA(playerid) < 3)
			{
				SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø kuro pilimui!");
				CancelSelectTextDraw	(playerid);
				KillTimer				(FuelTimer[playerid]);
				TogglePlayerControllable(playerid, true);

				KiekIpyle[playerid] = 0.0;

				for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
				for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

				return 1;
			}

			KiekIpyle[playerid] += 1.0;

			IpyleSuma[playerid] = 3 * floatround(KiekIpyle[playerid]);

			VehicleInfo[vehicleid][vKuras] += 1.0;

			format(String, sizeof(String), "Kuro tipas:~y~ benzinas~w~~n~Tarifas:~y~ $3/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
			PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);
		}

		case DYZELIS:
		{
			if(GetPlayerMoneyA(playerid) < 2)
			{
				SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø kuro pilimui!");
				CancelSelectTextDraw	(playerid);
				KillTimer				(FuelTimer[playerid]);
				TogglePlayerControllable(playerid, true);

				KiekIpyle[playerid] = 0.0;

				for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
				for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

				return 1;
			}

			KiekIpyle[playerid] += 1.0;

			IpyleSuma[playerid] = 2 * floatround(KiekIpyle[playerid]);

			VehicleInfo[vehicleid][vKuras] += 1.0;

			format(String, sizeof(String), "Kuro tipas:~y~ dyzelis~w~~n~Tarifas:~y~ $2/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
			PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);
		}

		case DUJOS:
		{
			if(GetPlayerMoneyA(playerid) < 2)
			{
				SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø dujø pilimui!");
				CancelSelectTextDraw	(playerid);
				KillTimer				(FuelTimer[playerid]);
				TogglePlayerControllable(playerid, true);

				KiekIpyle[playerid] = 0.0;

				for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
				for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

				return 1;
			}

			KiekIpyle[playerid] += 1.0;

			IpyleSuma[playerid] = 2 * floatround(KiekIpyle[playerid]);

			VehicleInfo[vehicleid][vDujuLikutis] += 1.0;

			format(String, sizeof(String), "Kuro tipas:~y~ dujos~w~~n~Tarifas:~y~ $2/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
			PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);

			PlayerTextDrawSetPreviewModel(playerid, kuro_pilimas_p[playerid][0], 3287);/// 3465 yra degalu o 3287 yra duju
		}
	}

	return 1;
}

stock IsVehicleHaveEngine(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 509, 481, 510, 435, 450, 591, 606, 607, 610, 569, 590, 584,
		570, 608, 611, 441, 464, 465, 501, 564, 594, 449: { return 0; }
	}
	return 1;
}

stock IsVehicleHasTrunk(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 403, 406, 407, 408, 417, 423, 424, 425, 430, 431, 432, 433, 434,
		     435, 437, 441, 443, 444, 446, 447, 448, 449, 450, 452, 453, 454,
			 455, 457, 460, 461, 462, 463, 464, 465, 468, 469, 471, 472, 473,
			 476, 478, 481, 484, 485, 486, 487, 488, 493, 494, 495, 497, 501,
			 502, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 519, 520,
			 521, 522, 523, 524, 525, 530, 531, 532, 537, 538, 539, 543, 544,
			 548, 552, 553, 554, 556, 557, 563, 564, 568, 569, 570, 571, 572,
			 573, 574, 577, 578, 581, 583, 584, 586, 588, 590, 591, 592, 593,
			 594, 595, 601, 606, 607, 608, 610, 611: return 0;
	}
	return 1;
}

CMD:bagazine(playerid)
{
	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	new vehicleid = GetClosestVehicle(playerid);
	new Float: X, Float: Y, Float: Z; GetVehiclePos(vehicleid, X, Y, Z);

	if(vehicleid == INVALID_VEHICLE_ID && !IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z))
    {
    	if(GetPlayerVirtualWorld(playerid) >= 2000)
		{
			vehicleid = GetPlayerVirtualWorld(playerid) - 2000;
		}
	}

	if(vehicleid != INVALID_VEHICLE_ID && IsPlayerInRangeOfPoint(playerid, 4.0, X, Y, Z))
	{
        if(IsVehicleHasTrunk(vehicleid))
        {
        	if(!IsPlayerInAnyVehicle(playerid))
			{
	        	if(VehicleInfo[vehicleid][vNupirkta])
	        	{
	        		new vOwner = GetPlayeridMid(VehicleInfo[vehicleid][vSavininkas]);

	        		if(vOwner != playerid) return SendClientMessage(playerid, -1, "{ffffff} Imti ginklus ið bagaþinës gali tik transporto savininkas!");

	        		new Engine, Lights, Alarm, Doors, EngineCover, Trunk, Objective;
					GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, EngineCover, Trunk, Objective);

					if(Trunk == 1)
					{
						new Header[80];
		    	        format(Header, sizeof(Header), "{FFAF00}%s {ffffff}bagaþinë", VehicleNames[GetVehicleModel(vehicleid) - 400]);
						ShowPlayerDialogEx(playerid, VehicleTrunkSelectionDialog, DIALOG_STYLE_LIST, Header,
						"1. Paimti ginklus\n2. Padëti ginklus", "Pasirinkti", "Uþdaryti");

		                SelectedTrunkVehicleID[playerid] = vehicleid;
					}
					else
					{
					    SendClientMessage(playerid, -1, "{ffffff} Tr. priemonës bagaþinë uþdaryta!");
					}
	        	}
	        	else
				{
				    SendClientMessage(playerid, -1, "{ffffff} Bagaþine galima naudotis tik nupirktoje tr. priemonëje!");
				}
			}
			else
			{
			    SendClientMessage(playerid, -1, "{ffffff} Prie jûsø nëra tr. priemonës arba atsistokite prie pat bagaþinës!");
			}
		}
		else
		{
		    SendClientMessage(playerid, -1, "{ffffff} Tr. priemonë neturi bagaþinës!");
		}
	}
	else
	{
	    SendClientMessage(playerid, -1, "{ffffff} Prie jûsø nëra tr. priemonës arba atsistokite prie pat bagaþinës!");
	}

	return 1;
}

CMD:dirbti(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti uþ vairo!");

	if(PI[playerid][DirbaTaksi] == true) return SendClientMessage(playerid, -1, "{ffffff} Jus jau pradëjote darbà!");
	
	new vehicleid = PI[playerid][masina];
	new vOwner = GetPlayeridMid(VehicleInfo[vehicleid][vSavininkas]);

	if(IsAMoto(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Su ðia transp. priemone dirbti taksistu negalite!");

	if(!VehicleInfo[vehicleid][vNupirkta]) return SendClientMessage(playerid, -1, "{ffffff} Su ðia transp. priemone dirbti taksistu negalite!");

	if(vOwner != playerid) return SendClientMessage(playerid, -1, "{ffffff} Dirbti taksistu galima tik su nuosava transp. priemone!");

	if(!strcmp("Neregistruota", VehicleInfo[vehicleid][vNumeriai], true)) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë yra neregistruota, todël dirbti taksistu negalite!");

	if(VehicleInfo[vehicleid][vTA] < gettime()) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonëje negalioja TA, todël dirbti taksistu negalite!");

	PI[playerid][DirbaTaksi] 	= true;
	ArTaksi[vehicleid]			= true;
	TaksiZenklas[playerid] 		= CreateDynamicObject(19308, 0, 0, 0, 0, 0, 0);

	AttachDynamicObjectToVehicle(TaksiZenklas[playerid], vehicleid, 0.019999, -0.070000, 0.934999, -0.000000, 0.000000, -90.000000);
	
	Streamer_Update(playerid);
	
	SendClientMessage (playerid, -1, "{ffffff} Pradëjote taksi darbà. Baigsite darbà iðlipæ ið transp. priemonës!");
	AlgosZinutes		(playerid);

	return 1;
}

/*CMD:atsirakinti(playerid)
{
	if(!PI[playerid][cuffed]) return SendClientMessage(playerid, -1, "{ffffff} Jus nesurakintas!");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate suriðtas!");

	if(PI[playerid][Viela] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite vielos! Jà gauti galite ið dyleriø.");

	new Float: P_Pos[3]; GetPlayerPos(playerid, P_Pos[0], P_Pos[1], P_Pos[2]);

    foreach(Player, i)
    {
        if(PI[i][specialybe] != 1 && PI[i][specialybe] != 5)
        {
            if(IsPlayerInRangeOfPoint(i, 7.0, P_Pos[0], P_Pos[1], P_Pos[2]))
            {
                return SendClientMessage(playerid, -1, "{ffffff} Netoliese yra policininkø!");
            }
        }
    }

    PI[playerid][BandoAtsirakinti] = 30 + random(30);

	return 1;
}

CMD:atristi(playerid, params[])
{
	new giveplayerid, String[128];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /atristi <vardas_pavardë/id>");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate suriðtas!");

	if(PI[playerid][cuffed]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas!");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(!PI[giveplayerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nëra suriðtas!");

	if(PI[giveplayerid][cuffed]) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra surakintas!");

	if(PI[giveplayerid][BandoAtristi] != -1) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjà jau kaþkas bando atriðti!");

	new Float: P_Pos[3]; GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

    if(!IsPlayerInRangeOfPoint(playerid, 2.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Jus per toli nuo þaidëjo!");

    ChoosedPlayer[giveplayerid] = playerid;

    new randomlaikas = 30 + random(30);

    PI[playerid][BandoAtristi] = randomlaikas;
    PI[giveplayerid][BandoAtristi] = randomlaikas;

    format(String, 128, "{ffffff} Þaidëjas {FFAF00}%s {ffffff}bando jus atriðti...", GetPlayerNameEx(playerid));
    SendClientMessage(giveplayerid, -1, String);

	return 1;
}*/

CMD:piltidyzeli(playerid)
{
	new vehicleid = PI[playerid][masina], Float: V_Pos[3], String[128];

	if(IsPlayerInRangeOfPoint(playerid, 3.0, -1767.7035,-188.1039,1.9604))
	{
		if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Álipkite ir iðlipkite ið transp. priemonës, kuriai norite pilti dujas!");

		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Ðios komandos transp. priemonëje naudoti negalima!");

		if(IsABike(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Dviraèiams dujø ápilti negalite!");

		if(GetVehicleCategory(vehicleid) != BOATS) return SendClientMessage(playerid, -1, "{ffffff} Ði degalinë skirta laivams!");

		if(IpyleSuma[playerid] > 0) return SendClientMessage(playerid, -1, "{ffffff} Iðkart susimokëkite uþ prieð tai piltà kurà!");

		GetVehiclePos(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);

		if(!IsPlayerInRangeOfPoint(playerid, 10.0, V_Pos[0], V_Pos[1], V_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonë per toli!");

		if(VehicleInfo[vehicleid][vKuras] >= VehicleInfo[vehicleid][vBakas]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonës dujø bakas pilnas!");

		new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

		GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);

		if(Engine) return SendClientMessage(playerid, -1, "{ffffff} Uþgesinkite transp. priemonës variklá!");

		PI[playerid][KokiaDegaline] 	= DIDELE_DEGALINE;
		PI[playerid][PasirinktasKuras] 	= DYZELIS;

		for(new s = 0; s < 6; s ++) 	TextDrawShowForPlayer(playerid, kuro_pilimas_g[s]);
		for(new s = 0; s < 3; s ++) 	PlayerTextDrawShow(playerid, kuro_pilimas_p[playerid][s]);

		PlayerTextDrawSetPreviewModel(playerid, kuro_pilimas_p[playerid][0], 3465);/// 3465 yra degalu o 3287 yra duju

		FuelTimer[playerid] = SetTimerEx("PilamKura", 2000, true, "d", playerid);

		TogglePlayerControllable(playerid, false);
		SelectTextDraw			(playerid, 0x336633FF);

		switch(PI[playerid][PasirinktasKuras])
		{
			case DYZELIS:
			{
				if(GetPlayerMoneyA(playerid) < 2)
				{
					SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø kuro pilimui!");
					CancelSelectTextDraw	(playerid);
					KillTimer				(FuelTimer[playerid]);
					TogglePlayerControllable(playerid, true);

					KiekIpyle[playerid] = 0.0;

					for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
					for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

					return 1;
				}

				KiekIpyle[playerid] 			+= 1.0;
				IpyleSuma[playerid] 			= 2 * floatround(KiekIpyle[playerid]);
				VehicleInfo[vehicleid][vKuras] 	+= 1.0;

				format(String, sizeof(String), "Kuro tipas:~y~ dyzelis~w~~n~Tarifas:~y~ $2/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
				PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);
			}
		}
	}
	else
	{
		SendClientMessage(playerid, -1, "{ffffff} Turite stovëti prie pat dyzelio cisternos!");
	}

	return 1;
}

CMD:piltidujas(playerid)
{
	new vehicleid = PI[playerid][masina], Float: V_Pos[3], String[128];

	if(IsPlayerInRangeOfPoint(playerid, 4.0, -2032.7422,136.9115,27.6887)) // Stoties degalinë
	{
		if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Álipkite ir iðlipkite ið transp. priemonës, kuriai norite pilti dujas!");

		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Ðios komandos transp. priemonëje naudoti negalima!");

		if(IsABike(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Dviraèiams dujø ápilti negalite!");

		if(IpyleSuma[playerid] > 0) return SendClientMessage(playerid, -1, "{ffffff} Iðkart susimokëkite uþ prieð tai piltà kurà!");

		GetVehiclePos(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);

		if(!IsPlayerInRangeOfPoint(playerid, 5.0, V_Pos[0], V_Pos[1], V_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonë per toli!");

		if(!VehicleInfo[vehicleid][vNupirkta]) return SendClientMessage(playerid, -1, "{ffffff} Ði transp. priemonë neturi dujø árangos!");

		if(!VehicleInfo[vehicleid][vDujos]) return SendClientMessage(playerid, -1, "{ffffff} Ði transp. priemonë neturi dujø árangos!");

		if(!VehicleInfo[vehicleid][vIjungta]) return SendClientMessage(playerid, -1, "{ffffff} Perjunkite transp. priemonës variklá á dujiná (/perjungtiv)!");

		if(VehicleInfo[vehicleid][vDujuLikutis] >= VehicleInfo[vehicleid][vDujuBakas]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonës dujø bakas pilnas!");

		new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

		GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);

		if(Engine) return SendClientMessage(playerid, -1, "{ffffff} Uþgesinkite transp. priemonës variklá!");

		PI[playerid][KokiaDegaline] 	= STOTIES_DEGALINE;
		PI[playerid][PasirinktasKuras] 	= DUJOS;

		for(new s = 0; s < 6; s ++) 	TextDrawShowForPlayer(playerid, kuro_pilimas_g[s]);
		for(new s = 0; s < 3; s ++) 	PlayerTextDrawShow(playerid, kuro_pilimas_p[playerid][s]);

		PlayerTextDrawSetPreviewModel(playerid, kuro_pilimas_p[playerid][0], 3287);/// 3465 yra degalu o 3287 yra duju

		FuelTimer[playerid] = SetTimerEx("PilamKura", 2000, true, "d", playerid);

		TogglePlayerControllable(playerid, false);
		SelectTextDraw			(playerid, 0x336633FF);

		switch(PI[playerid][PasirinktasKuras])
		{
			case BENZINAS:
			{
				if(GetPlayerMoneyA(playerid) < 3)
				{
					SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø kuro pilimui!");
					CancelSelectTextDraw	(playerid);
					KillTimer				(FuelTimer[playerid]);
					TogglePlayerControllable(playerid, true);

					KiekIpyle[playerid] = 0.0;

					for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
					for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

					return 1;
				}

				KiekIpyle[playerid] += 1.0;

				IpyleSuma[playerid] = 3 * floatround(KiekIpyle[playerid]);

				VehicleInfo[vehicleid][vKuras] += 1.0;

				format(String, sizeof(String), "Kuro tipas:~y~ benzinas~w~~n~Tarifas:~y~ $3/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
				PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);
			}

			case DYZELIS:
			{
				if(GetPlayerMoneyA(playerid) < 2)
				{
					SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø kuro pilimui!");
					CancelSelectTextDraw	(playerid);
					KillTimer				(FuelTimer[playerid]);
					TogglePlayerControllable(playerid, true);

					KiekIpyle[playerid] = 0.0;

					for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
					for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

					return 1;
				}

				KiekIpyle[playerid] += 1.0;

				IpyleSuma[playerid] = 2 * floatround(KiekIpyle[playerid]);

				VehicleInfo[vehicleid][vKuras] += 1.0;

				format(String, sizeof(String), "Kuro tipas:~y~ dyzelis~w~~n~Tarifas:~y~ $2/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
				PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);
			}

			case DUJOS:
			{
				if(GetPlayerMoneyA(playerid) < 2)
				{
					SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø dujø pilimui!");
					CancelSelectTextDraw	(playerid);
					KillTimer				(FuelTimer[playerid]);
					TogglePlayerControllable(playerid, true);

					KiekIpyle[playerid] = 0.0;

					for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
					for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

					return 1;
				}

				KiekIpyle[playerid] += 1.0;

				IpyleSuma[playerid] = 2 * floatround(KiekIpyle[playerid]);

				VehicleInfo[vehicleid][vDujuLikutis] += 1.0;

				format(String, sizeof(String), "Kuro tipas:~y~ dujos~w~~n~Tarifas:~y~ $2/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
				PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);

				PlayerTextDrawSetPreviewModel(playerid, kuro_pilimas_p[playerid][0], 3287);/// 3465 yra degalu o 3287 yra duju
			}
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, -1717.1532,389.2776,7.1373) || IsPlayerInRangeOfPoint(playerid, 2.0, -1720.7896,393.7354,7.1373) || IsPlayerInRangeOfPoint(playerid, 2.0, -1700.6025,407.9304,7.1373) || IsPlayerInRangeOfPoint(playerid, 2.0, -2051.6445,143.2746,28.8146)) // Didelë, netoli PD degalinë
	{
		if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Álipkite ir iðlipkite ið transp. priemonës, kuriai norite pilti dujas!");

		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Ðios komandos transp. priemonëje naudoti negalima!");

		if(IsABike(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Dviraèiams dujø ápilti negalite!");

		if(IpyleSuma[playerid] > 0) return SendClientMessage(playerid, -1, "{ffffff} Iðkart susimokëkite uþ prieð tai piltà kurà!");

		GetVehiclePos(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);

		if(!IsPlayerInRangeOfPoint(playerid, 5.0, V_Pos[0], V_Pos[1], V_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonë per toli!");

		if(!VehicleInfo[vehicleid][vNupirkta]) return SendClientMessage(playerid, -1, "{ffffff} Ði transp. priemonë neturi dujø árangos!");

		if(!VehicleInfo[vehicleid][vDujos]) return SendClientMessage(playerid, -1, "{ffffff} Ði transp. priemonë neturi dujø árangos!");

		if(!VehicleInfo[vehicleid][vIjungta]) return SendClientMessage(playerid, -1, "{ffffff} Perjunkite transp. priemonës variklá á dujiná (/perjungtiv)!");

		if(VehicleInfo[vehicleid][vDujuLikutis] >= VehicleInfo[vehicleid][vDujuBakas]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonës dujø bakas pilnas!");

		new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

		GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);

		if(Engine) return SendClientMessage(playerid, -1, "{ffffff} Uþgesinkite transp. priemonës variklá!");

		PI[playerid][KokiaDegaline] 	= DIDELE_DEGALINE;
		PI[playerid][PasirinktasKuras] 	= DUJOS;

		for(new s = 0; s < 6; s ++) 	TextDrawShowForPlayer(playerid, kuro_pilimas_g[s]);
		for(new s = 0; s < 3; s ++) 	PlayerTextDrawShow(playerid, kuro_pilimas_p[playerid][s]);

		PlayerTextDrawSetPreviewModel(playerid, kuro_pilimas_p[playerid][0], 3287);/// 3465 yra degalu o 3287 yra duju

		FuelTimer[playerid] = SetTimerEx("PilamKura", 2000, true, "d", playerid);

		TogglePlayerControllable(playerid, false);
		SelectTextDraw			(playerid, 0x336633FF);

		switch(PI[playerid][PasirinktasKuras])
		{
			case BENZINAS:
			{
				if(GetPlayerMoneyA(playerid) < 3)
				{
					SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø kuro pilimui!");
					CancelSelectTextDraw	(playerid);
					KillTimer				(FuelTimer[playerid]);
					TogglePlayerControllable(playerid, true);

					KiekIpyle[playerid] = 0.0;

					for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
					for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

					return 1;
				}

				KiekIpyle[playerid] += 1.0;

				IpyleSuma[playerid] = 3 * floatround(KiekIpyle[playerid]);

				VehicleInfo[vehicleid][vKuras] += 1.0;

				format(String, sizeof(String), "Kuro tipas:~y~ benzinas~w~~n~Tarifas:~y~ $3/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
				PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);
			}

			case DYZELIS:
			{
				if(GetPlayerMoneyA(playerid) < 2)
				{
					SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø kuro pilimui!");
					CancelSelectTextDraw	(playerid);
					KillTimer				(FuelTimer[playerid]);
					TogglePlayerControllable(playerid, true);

					KiekIpyle[playerid] = 0.0;

					for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
					for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

					return 1;
				}

				KiekIpyle[playerid] += 1.0;

				IpyleSuma[playerid] = 2 * floatround(KiekIpyle[playerid]);

				VehicleInfo[vehicleid][vKuras] += 1.0;

				format(String, sizeof(String), "Kuro tipas:~y~ dyzelis~w~~n~Tarifas:~y~ $2/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
				PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);
			}

			case DUJOS:
			{
				if(GetPlayerMoneyA(playerid) < 2)
				{
					SendClientMessage 		(playerid, -1, "{ffffff} Jums nebeuþtenka pinigø dujø pilimui!");
					CancelSelectTextDraw	(playerid);
					KillTimer				(FuelTimer[playerid]);
					TogglePlayerControllable(playerid, true);

					KiekIpyle[playerid] = 0.0;

					for(new s = 0; s < 6; s ++) 	TextDrawHideForPlayer(playerid, kuro_pilimas_g[s]);
					for(new s = 0; s < 3; s ++) 	PlayerTextDrawHide(playerid, kuro_pilimas_p[playerid][s]);

					return 1;
				}

				KiekIpyle[playerid] += 1.0;

				IpyleSuma[playerid] = 2 * floatround(KiekIpyle[playerid]);

				VehicleInfo[vehicleid][vDujuLikutis] += 1.0;

				format(String, sizeof(String), "Kuro tipas:~y~ dujos~w~~n~Tarifas:~y~ $2/l~n~~w~ipilta:~y~ %.2fl~n~~w~suma:~r~ $%d", KiekIpyle[playerid], floatround(IpyleSuma[playerid]));
				PlayerTextDrawSetString(playerid, kuro_pilimas_p[playerid][1], String);
				PlayerTextDrawSetPreviewModel(playerid, kuro_pilimas_p[playerid][0], 3287);/// 3465 yra degalu o 3287 yra duju
			}
		}
	}
	else
	{
		SendClientMessage(playerid, -1, "{ffffff} Turite stovëti prie pat dujø cisternos!");
	}

	return 1;
}

CMD:pilti(playerid)
{
	new vehicleid = PI[playerid][masina], Float: V_Pos[3];

	if(IsPlayerInRangeOfPoint(playerid, 2.0, -97.0703, -1173.7500, 3.0313) || IsPlayerInRangeOfPoint(playerid, 2.0, -85.2422, -1165.0313, 2.6328) ||
	IsPlayerInRangeOfPoint(playerid, 2.0, -92.1016, -1161.7891, 2.9609) || IsPlayerInRangeOfPoint(playerid, 2.0, -90.1406, -1176.6250, 2.6328)) // Didelë, netoli PD degalinë
	{
		if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Álipkite ir iðlipkite ið transp. priemonës, kuriai norite pilti kurà!");

		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Ðios komandos transp. priemonëje naudoti negalima!");

		if(IsABike(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Dviraèiams kuro ápilti negalite!");

		if(IpyleSuma[playerid] > 0) return SendClientMessage(playerid, -1, "{ffffff} Iðkart susimokëkite uþ prieð tai piltà kurà!");

		GetVehiclePos(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);

		if(!IsPlayerInRangeOfPoint(playerid, 4.0, V_Pos[0], V_Pos[1], V_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonë per toli!");

		if(VehicleInfo[vehicleid][vIjungta]) return SendClientMessage(playerid, -1, "{ffffff} Perjunkite transp. priemonës variklá á benzininá, dujas galima ásipilti netoliese!");

		if(VehicleInfo[vehicleid][vKuras] >= VehicleInfo[vehicleid][vBakas]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonës bakas pilnas!");

		new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

		GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);

		if(Engine) return SendClientMessage(playerid, -1, "{ffffff} Uþgesinkite transp. priemonës variklá!");

		PI[playerid][KokiaDegaline] = DIDELE_DEGALINE;

		ShowPlayerDialogEx(playerid, PiltiKuraDialog, DIALOG_STYLE_LIST, "Degalinë. Pasirinkite kurà:", " Benzinas\n Dyzelis", "Pasirinkti", "Uþdaryti");
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, -2027.4653,157.6335,29.0177) || IsPlayerInRangeOfPoint(playerid, 2.0, -2027.4579,155.6845,29.0177)) // Stoties degalinë
	{
		if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Álipkite ir iðlipkite ið transp. priemonës, kuriai norite pilti kurà!");

		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Ðios komandos transp. priemonëje naudoti negalima!");

		if(IsABike(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Dviraèiams kuro ápilti negalite!");

		if(IpyleSuma[playerid] > 0) return SendClientMessage(playerid, -1, "{ffffff} Iðkart susimokëkite uþ prieð tai piltà kurà!");

		GetVehiclePos(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);

		if(!IsPlayerInRangeOfPoint(playerid, 4.0, V_Pos[0], V_Pos[1], V_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonë per toli!");

		if(VehicleInfo[vehicleid][vIjungta]) return SendClientMessage(playerid, -1, "{ffffff} Perjunkite transp. priemonës variklá á benzininá, dujas galima ásipilti netoliese!");

		if(VehicleInfo[vehicleid][vKuras] >= VehicleInfo[vehicleid][vBakas]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonës bakas pilnas!");

		new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

		GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);

		if(Engine) return SendClientMessage(playerid, -1, "{ffffff} Uþgesinkite transp. priemonës variklá!");

		PI[playerid][KokiaDegaline] = STOTIES_DEGALINE;

		ShowPlayerDialogEx(playerid, PiltiKuraDialog, DIALOG_STYLE_LIST, "Degalinë. Pasirinkite kurà:", " Benzinas\n Dyzelis", "Pasirinkti", "Uþdaryti");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, -1685.9688, 409.6406, 7.5797) || IsPlayerInRangeOfPoint(playerid, 2.0, -1679.3594, 403.0547, 7.5797) ||
	IsPlayerInRangeOfPoint(playerid, 2.0, -1681.8281, 413.7813, 7.5797) || IsPlayerInRangeOfPoint(playerid, 2.0, -1675.2188, 407.1953, 7.5797) ||
	IsPlayerInRangeOfPoint(playerid, 2.0, -1676.5156, 419.1172, 7.5797) || IsPlayerInRangeOfPoint(playerid, 2.0, -1672.1328, 423.5000, 7.5797) ||
	IsPlayerInRangeOfPoint(playerid, 2.0, -1669.9063, 412.5313, 7.5797) || IsPlayerInRangeOfPoint(playerid, 2.0, -1665.5234, 416.9141, 7.5797)) // Didelë, netoli PD degalinë
	{
		if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Álipkite ir iðlipkite ið transp. priemonës, kuriai norite pilti kurà!");

		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Ðios komandos transp. priemonëje naudoti negalima!");

		if(IsABike(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Dviraèiams kuro ápilti negalite!");

		if(IpyleSuma[playerid] > 0) return SendClientMessage(playerid, -1, "{ffffff} Iðkart susimokëkite uþ prieð tai piltà kurà!");

		GetVehiclePos(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);

		if(!IsPlayerInRangeOfPoint(playerid, 4.0, V_Pos[0], V_Pos[1], V_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonë per toli!");

		if(VehicleInfo[vehicleid][vIjungta]) return SendClientMessage(playerid, -1, "{ffffff} Perjunkite transp. priemonës variklá á benzininá, dujas galima ásipilti netoliese!");

		if(VehicleInfo[vehicleid][vKuras] >= VehicleInfo[vehicleid][vBakas]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonës bakas pilnas!");

		new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

		GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);

		if(Engine) return SendClientMessage(playerid, -1, "{ffffff} Uþgesinkite transp. priemonës variklá!");

		PI[playerid][KokiaDegaline] = DIDELE_DEGALINE;

		ShowPlayerDialogEx(playerid, PiltiKuraDialog, DIALOG_STYLE_LIST, "Degalinë. Pasirinkite kurà:", " Benzinas\n Dyzelis", "Pasirinkti", "Uþdaryti");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2410.8047, 970.8516, 45.6844) || IsPlayerInRangeOfPoint(playerid, 2.0, -2410.8047, 976.1875, 45.6844) ||
	IsPlayerInRangeOfPoint(playerid, 2.0, -2410.8047, 981.5234, 45.6844)) // Vidutinë degalinë
	{
		if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Álipkite ir iðlipkite ið transp. priemonës, kuriai norite pilti kurà!");

		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Ðios komandos transp. priemonëje naudoti negalima!");

		if(IsABike(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Dviraèiams kuro ápilti negalite!");

		if(IpyleSuma[playerid] > 0) return SendClientMessage(playerid, -1, "{ffffff} Iðkart susimokëkite uþ prieð tai piltà kurà!");

		GetVehiclePos(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);

		if(!IsPlayerInRangeOfPoint(playerid, 4.0, V_Pos[0], V_Pos[1], V_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonë per toli!");

		if(VehicleInfo[vehicleid][vIjungta]) return SendClientMessage(playerid, -1, "{ffffff} Perjunkite transp. priemonës variklá á benzininá, dujas galima ásipilti netoliese!");

		if(VehicleInfo[vehicleid][vKuras] >= VehicleInfo[vehicleid][vBakas]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonës bakas pilnas!");

		new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

		GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);

		if(Engine) return SendClientMessage(playerid, -1, "{ffffff} Uþgesinkite transp. priemonës variklá!");

		PI[playerid][KokiaDegaline] = VIDUTINE_DEGALINE;

		ShowPlayerDialogEx(playerid, PiltiKuraDialog, DIALOG_STYLE_LIST, "Degalinë. Pasirinkite kurà:", " Benzinas\n Dyzelis", "Pasirinkti", "Uþdaryti");
	}
	else
	{
		SendClientMessage(playerid, -1, "{ffffff} Turite stovëti prie pat degalinës kolonëles!");
	}

	return 1;
}

CMD:masina(playerid) return pc_cmd_transportas(playerid);

CMD:transportas(playerid)
{
	new Masina1[64], Masina2[64], Masina3[64], TuriSlota[128], String[300];

	if(PI[playerid][Transportas1] == -1)		Masina1 = "{FFAF00}Nëra";
	else												format(Masina1, sizeof(Masina1), "{FFAF00}%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas1]) - 400]);

	if(PI[playerid][Transportas2] == -1)		Masina2 = "{FFAF00}Nëra";
	else												format(Masina2, sizeof(Masina2), "{FFAF00}%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas2]) - 400]);

	if(!PI[playerid][TransportoSlotas])
	{
		TuriSlota = "{ffffff} 3 transp. priemonës slotà ásigyti galite paraðæ {FFAF00}/paslaugos";

		format(String, sizeof(String), "{ffffff} 1-asis transportas: {FFAF00}%s\n{ffffff} 2-asis transportas: %s\n{FFAF00} %s", Masina1, Masina2, TuriSlota);
		ShowPlayerDialogEx(playerid, MasinuPagrDialogas, DIALOG_STYLE_LIST, "Jûsø turimos transp. priemonës", String, "Pasirinkti", "Uþdaryti");
	}
	else
	{
		if(PI[playerid][Transportas3] == -1)	Masina3 = "{FFAF00}Nëra";
		else											format(Masina3, sizeof(Masina3), "{FFAF00}%s", VehicleNames[GetVehicleModel(PI[playerid][Transportas3]) - 400]);

		format(String, sizeof(String), "{F0EA2B} 1-asis transportas: %s\n{F0EA2B} 2-asis transportas: %s\n{F0EA2B} 3-asis transportas: %s", Masina1, Masina2, Masina3);
		ShowPlayerDialogEx(playerid, MasinuPagrDialogas, DIALOG_STYLE_LIST, "Jûsø turimos transp. priemonës", String, "Pasirinkti", "Uþdaryti");
	}

	return 1;
}

CMD:perjungtiv(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti transp. priemonëje!");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(!VehicleInfo[vehicleid][vNupirkta]) return SendClientMessage(playerid, -1, "{ffffff} Ði transp. priemonë neturi dujø árangos!");

	if(!VehicleInfo[vehicleid][vDujos]) return SendClientMessage(playerid, -1, "{ffffff} Ði transp. priemonë neturi dujø árangos!");

	new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

	GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);

	if(Engine) return SendClientMessage(playerid, -1, "{ffffff} Uþgesinkite tr. priemonës variklá!");

	if(VehicleInfo[vehicleid][vIjungta]) // Perjungiam variklá á dyzeliná
	{
		VehicleInfo[vehicleid][vIjungta] = false;

		SendClientMessage(playerid, -1, "{ffffff} Perjungëte transp. priemonës variklá á {FFAF00}benzininá{ffffff}!");
	}
	else // Perjungiam variklá á dujiná
	{
		VehicleInfo[vehicleid][vIjungta] = true;

		SendClientMessage(playerid, -1, "{ffffff} Perjungëte transp. priemonës variklá á {FFAF00}dujiná{ffffff}!");
	}

	return 1;
}

stock IsABike(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 509, 481, 510: return true;
	}

	return false;
}

stock IsAMoto(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 462, 448, 581, 522, 461, 521, 523, 463, 468, 471, 478: return true;
	}

	return false;
}

stock GetPlayerSpeed(playerid)
{
	new Float:ST[4];
	if(IsPlayerInAnyVehicle(playerid))
	GetVehicleVelocity(GetPlayerVehicleID(playerid), ST[0], ST[1], ST[2]);
	else GetPlayerVelocity(playerid, ST[0], ST[1], ST[2]);
	ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 170.3; // 254.3
	return floatround(ST[3]);
}

stock SetPlayerSpeedCap(playerid, Float:value)
{
   if(0 <= playerid < sizeof(g_fSpeedCap)) g_fSpeedCap[playerid] = value;
}

stock DisablePlayerSpeedCap(playerid)
{
	if(0 <= playerid < sizeof(g_fSpeedCap)) g_fSpeedCap[playerid] = 0.0;
}

stock PlayAudioStreamForVehicle(playerid, vehicleid, url[], name[])
{
	GameTextForPlayer(playerid, "~w~Radija ~g~sekmingai ~w~pakeista!", 5000, 5);
	strcpy(RadijosPavadinimas[vehicleid], name, strlen(name) + 1);
	strcpy(RadijosURL        [vehicleid], url,  strlen(url)  + 1);
	SetTimerEx("PakeistiRadija", 3000, false, "d", vehicleid);
	return true;
}

stock StopAudioStreamForVehicle(vehicleid)
{
	for(new p; p < MAX_PLAYERS; p++)
	{
		if(!IsPlayerConnected(p) || !IsPlayerInVehicle(p, vehicleid)) continue;
		StopAudioStreamForPlayer(p);
	}
	RadijosPavadinimas[vehicleid][0] = '\0';
	RadijosURL        [vehicleid][0] = '\0';
	return true;
}

stock GetVehicleDriver(vehicleid)
{
	for(new p = 0; p < MAX_PLAYERS; p++)
	{
		if(IsPlayerConnected(p))
		{
			if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
			{
				if(IsPlayerInVehicle(p, vehicleid)) return p;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

stock SetVehicleSpeed(vehicleid, Float:speed)
{
	new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, Float:a;
	GetVehicleVelocity(vehicleid, x1, y1, z1);
	GetVehiclePos(vehicleid, x2, y2, z2);
	GetVehicleZAngle(vehicleid, a); a = 360 - a;
	x1 = (floatsin(a, degrees) * (speed / 100) + floatcos(a, degrees) * 0 + x2) - x2;
	y1 = (floatcos(a, degrees) * (speed / 100) + floatsin(a, degrees) * 0 + y2) - y2;
	SetVehicleVelocity(vehicleid, x1, y1, z1);
	return true;
}

stock PlayerInZone(playerid, Float:min_X, Float:min_Y, Float:max_X, Float:max_Y)
{
	new Float:pos[3]; GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	if((pos[0] <= max_X && pos[0] >= min_X) && (pos[1] <= max_Y && pos[1] >= min_Y)) return 1;
	return 0;
}

stock SavePelnai()
{
	new String[240];

	mysql_query("SELECT * FROM `sinfo`");

	mysql_store_result();

	if(mysql_num_rows())
	{
		format(String, sizeof(String), "UPDATE `sinfo` SET `PolicijosPelnas` = '%d', `MechanikuPelnas` = '%d', `KurjeriuPelnas` = '%d', `MedikuPelnas` = '%d', `FuristuPelnas` = '%d', `DyleriuPelnas` = '%d', `TaxiPelnas` = '%d'",
		Pelnas[0], Pelnas[1], Pelnas[2], Pelnas[3], Pelnas[8], Pelnas[4], Pelnas[9]);
		mysql_query(String);
	}

	mysql_free_result();

	return 1;
}

stock SavePlayerVehicle1(playerid, bool:mode = false)
{
	new vehicleid = PI[playerid][Transportas1], Float: vPos[4];
	new String[1500], Query[1500];

	GetVehiclePos   (vehicleid, vPos[0], vPos[1], vPos[2]);
	GetVehicleZAngle(vehicleid, vPos[3]);

	if(PI[playerid][Transportas1] == -1)
	{
		format(Query, sizeof(Query), "DELETE FROM `vehicles1` WHERE `Transportas` = '%s'", GetPlayerNameEx(playerid));
		mysql_query(Query);

		return 1;
	}

	format(Query, sizeof(Query), "SELECT * FROM `vehicles1` WHERE `Transportas` = '%s'", GetPlayerNameEx(playerid));
	mysql_query(Query);

	mysql_store_result();

	if(mysql_num_rows())
	{
		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Transportas` = '%s' WHERE `Transportas` = '%s'", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Model` = '%d' WHERE `Transportas` = '%s'", GetVehicleModel(vehicleid), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Pos_X` = '%f' WHERE `Transportas` = '%s'", vPos[0], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Pos_Y` = '%f' WHERE `Transportas` = '%s'", vPos[1], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Pos_Z` = '%f' WHERE `Transportas` = '%s'", vPos[2], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Pos_A` = '%f' WHERE `Transportas` = '%s'", vPos[3], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Rida` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vRida], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `FuelType` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vKuroTipas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Fuel` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vKuras], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Color1` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vColor][0], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Color2` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vColor][1], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Paintjob` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vPaintjob], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Tune0` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 0), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Tune1` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 1), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Tune2` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 2), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Tune3` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 3), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Tune4` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 4), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Tune5` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 5), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Tune6` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 6), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Tune7` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 7), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Tune8` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 8), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Tune9` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 9), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Tune10` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 10), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Tune11` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 11), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Tune12` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 12), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Locked` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vUzraktas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `NumberPlate` = '%s' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vNumeriai], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Sprogusi` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vSprogusi], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Data` = '%s' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vKadaNupirktas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Kaina` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vKaina], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `vSanaudos` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vSanaudos], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `vBakas` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vBakas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `vDujos` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vDujos], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `vIjungta` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vIjungta], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `vDujuLikutis` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vDujuLikutis], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `vDujuBakas` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vDujuBakas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `vTA` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vTA], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `vVW` = '%d' WHERE `Transportas` = '%s'", GetVehicleVirtualWorld(vehicleid), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `IsInGarage` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][IsInGarage], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles1` SET `Draudimas` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][Draudimas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		String[0] 	= EOS;
		Query[0] 	= EOS;

		format(String, sizeof(String), "UPDATE `vehicles1` SET ");
		strcat(Query, String);

		for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
		{
		    format(String, sizeof(String), "`vTrunkItem_%d` = '%d'", i, VehicleTrunkInfo[vehicleid][i][ItemID]);
			strcat(Query, String);

			if(i != MAX_TRUNK_SLOTS - 1)
			{
				format(String, sizeof(String), ", `vTrunkAmmount_%d` = '%d', ", i, VehicleTrunkInfo[vehicleid][i][ItemAmmount]);
				strcat(Query, String);
			}
			else
			{
			    format(String, sizeof(String), ", `vTrunkAmmount_%d` = '%d' WHERE `Transportas` = '%s'", i, VehicleTrunkInfo[vehicleid][i][ItemAmmount], GetPlayerNameEx(playerid));
				strcat(Query, String);
			}
		}

		mysql_query(Query);
	}
	else
	{
		String[0] = EOS;

		format(Query, sizeof(Query),
		"INSERT INTO `vehicles1` (Transportas, Model, Pos_X, Pos_Y, Pos_Z, Pos_A, Rida, Fuel, FuelType, Color1, Color2, Paintjob, Tune0, Tune1, Tune2, Tune3, Tune4, Tune5, Tune6, Tune7, Tune8, Tune9, Tune10, Tune11, Tune12, Locked, NumberPlate, Sprogusi, Data, Kaina, vSanaudos, vBakas, vDujos, vIjungta, vDujuLikutis, vDujuBakas, vTA, vVW, IsInGarage, Draudimas) ");
		strcat(String, Query);

	 	format(Query, sizeof(Query), "VALUES ('%s', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%s', '%d', '%s', '%d', '%f', '%f', '%d', '%d', '%f', '%f', '%d', '%d', '%d', '%d')",

		GetPlayerNameEx(playerid),
		GetVehicleModel(vehicleid),
		vPos[0],
		vPos[1],
		vPos[2],
		vPos[3],
		VehicleInfo[vehicleid][vRida],
		VehicleInfo[vehicleid][vKuras],
		VehicleInfo[vehicleid][vKuroTipas],
		VehicleInfo[vehicleid][vColor][0],
		VehicleInfo[vehicleid][vColor][1],
		VehicleInfo[vehicleid][vPaintjob],
		GetVehicleComponentInSlot(vehicleid, 0),
		GetVehicleComponentInSlot(vehicleid, 1),
		GetVehicleComponentInSlot(vehicleid, 2),
		GetVehicleComponentInSlot(vehicleid, 3),
		GetVehicleComponentInSlot(vehicleid, 4),
		GetVehicleComponentInSlot(vehicleid, 5),
		GetVehicleComponentInSlot(vehicleid, 6),
		GetVehicleComponentInSlot(vehicleid, 7),
		GetVehicleComponentInSlot(vehicleid, 8),
		GetVehicleComponentInSlot(vehicleid, 9),
		GetVehicleComponentInSlot(vehicleid, 10),
		GetVehicleComponentInSlot(vehicleid, 11),
		GetVehicleComponentInSlot(vehicleid, 12),
		VehicleInfo[vehicleid][vUzraktas],
		VehicleInfo[vehicleid][vNumeriai],
		VehicleInfo[vehicleid][vSprogusi],
		VehicleInfo[vehicleid][vKadaNupirktas],
		VehicleInfo[vehicleid][vKaina],
		VehicleInfo[vehicleid][vSanaudos],
		VehicleInfo[vehicleid][vBakas],
		VehicleInfo[vehicleid][vDujos],
		VehicleInfo[vehicleid][vIjungta],
		VehicleInfo[vehicleid][vDujuLikutis],
		VehicleInfo[vehicleid][vDujuBakas],
		VehicleInfo[vehicleid][vTA],
		GetVehicleVirtualWorld(vehicleid),
		VehicleInfo[vehicleid][IsInGarage],
		VehicleInfo[vehicleid][Draudimas]);

		strcat 		(String, Query);
		mysql_query	(String);
	}

	mysql_free_result();

	if(mode)
	{
		DestroyVehicle			(vehicleid);
		ClearVehicleVariables	(vehicleid);

		PI[playerid][Transportas1] = -1;
	}

	return 1;
}

stock LoadPlayerVehicle1(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;

	new Modelis, Float: vPos[4], Color[2];
	new String[600], Query[128];

	format(Query, sizeof(Query), "SELECT * FROM `vehicles1` WHERE `Transportas` = '%s'", GetPlayerNameEx(playerid));
	mysql_query(Query);

	mysql_store_result();

	if(mysql_num_rows() != 0)
	{
		mysql_fetch_row(String);

		mysql_fetch_field_row(Query, "Model");         Modelis = strval(Query);
		mysql_fetch_field_row(Query, "Pos_X");         vPos[0] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_Y");         vPos[1] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_Z");         vPos[2] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_A");         vPos[3] = floatstr(Query);
		mysql_fetch_field_row(Query, "Color1");        Color[0] = strval(Query);
		mysql_fetch_field_row(Query, "Color2");        Color[1] = strval(Query);

		new vehicleid = AC_CreateVehicle(Modelis, vPos[0], vPos[1], vPos[2] + 3, vPos[3], Color[0], Color[1], -1);

		mysql_fetch_field_row(Query, "Pos_X");         VehicleInfo[vehicleid][vLastPos][0] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_Y");         VehicleInfo[vehicleid][vLastPos][1] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_Z");         VehicleInfo[vehicleid][vLastPos][2] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_A");         VehicleInfo[vehicleid][vLastPos][3] = floatstr(Query);
		mysql_fetch_field_row(Query, "Rida");          VehicleInfo[vehicleid][vRida] = floatstr(Query);
		mysql_fetch_field_row(Query, "Fuel");          VehicleInfo[vehicleid][vKuras] = floatstr(Query);
		mysql_fetch_field_row(Query, "FuelType");      VehicleInfo[vehicleid][vKuroTipas] = strval(Query);
		mysql_fetch_field_row(Query, "Paintjob");      VehicleInfo[vehicleid][vPaintjob] = strval(Query);
		mysql_fetch_field_row(Query, "Tune0");         VehicleInfo[vehicleid][vTune][0] = strval(Query);
		mysql_fetch_field_row(Query, "Tune1");         VehicleInfo[vehicleid][vTune][1] = strval(Query);
		mysql_fetch_field_row(Query, "Tune2");         VehicleInfo[vehicleid][vTune][2] = strval(Query);
		mysql_fetch_field_row(Query, "Tune3");         VehicleInfo[vehicleid][vTune][3] = strval(Query);
		mysql_fetch_field_row(Query, "Tune4");         VehicleInfo[vehicleid][vTune][4] = strval(Query);
		mysql_fetch_field_row(Query, "Tune5");         VehicleInfo[vehicleid][vTune][5] = strval(Query);
		mysql_fetch_field_row(Query, "Tune6");         VehicleInfo[vehicleid][vTune][6] = strval(Query);
		mysql_fetch_field_row(Query, "Tune7");         VehicleInfo[vehicleid][vTune][7] = strval(Query);
		mysql_fetch_field_row(Query, "Tune8");         VehicleInfo[vehicleid][vTune][8] = strval(Query);
		mysql_fetch_field_row(Query, "Tune9");         VehicleInfo[vehicleid][vTune][9] = strval(Query);
		mysql_fetch_field_row(Query, "Tune10");        VehicleInfo[vehicleid][vTune][10] = strval(Query);
		mysql_fetch_field_row(Query, "Tune11");        VehicleInfo[vehicleid][vTune][11] = strval(Query);
		mysql_fetch_field_row(Query, "Tune12");        VehicleInfo[vehicleid][vTune][12] = strval(Query);
		mysql_fetch_field_row(Query, "Locked");        VehicleInfo[vehicleid][vUzraktas] = !!strval(Query);
		mysql_fetch_field_row(Query, "Sprogusi");      VehicleInfo[vehicleid][vSprogusi] = !!strval(Query);
		mysql_fetch_field_row(Query, "Kaina");         VehicleInfo[vehicleid][vKaina] = strval(Query);
		mysql_fetch_field_row(Query, "vBakas");        VehicleInfo[vehicleid][vBakas] = floatstr(Query);
		mysql_fetch_field_row(Query, "vSanaudos");     VehicleInfo[vehicleid][vSanaudos] = floatstr(Query);
		mysql_fetch_field_row(Query, "vDujos");        VehicleInfo[vehicleid][vDujos] = !!strval(Query);
		mysql_fetch_field_row(Query, "vIjungta");      VehicleInfo[vehicleid][vIjungta] = !!strval(Query);
		mysql_fetch_field_row(Query, "vDujuLikutis");  VehicleInfo[vehicleid][vDujuLikutis] = floatstr(Query);
		mysql_fetch_field_row(Query, "vDujuBakas");    VehicleInfo[vehicleid][vDujuBakas] = floatstr(Query);
		mysql_fetch_field_row(Query, "vTA");           VehicleInfo[vehicleid][vTA] = strval(Query);
		mysql_fetch_field_row(Query, "vVW");           SetVehicleVirtualWorld(vehicleid, strval(Query));
		mysql_fetch_field_row(Query, "IsInGarage");    VehicleInfo[vehicleid][IsInGarage] = !!strval(Query);
		mysql_fetch_field_row(Query, "Draudimas");     VehicleInfo[vehicleid][Draudimas] = strval(Query);

		mysql_fetch_field_row(Query, "NumberPlate");   format(VehicleInfo[vehicleid][vNumeriai], 15, "%s", Query);
		mysql_fetch_field_row(Query, "Data");   	   format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", Query);

		mysql_fetch_field_row(Query, "vTrunkItem_0"); 		VehicleTrunkInfo[vehicleid][0][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_0"); 	VehicleTrunkInfo[vehicleid][0][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_1"); 			VehicleTrunkInfo[vehicleid][1][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_1"); 	VehicleTrunkInfo[vehicleid][1][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_2"); 			VehicleTrunkInfo[vehicleid][2][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_2"); 	VehicleTrunkInfo[vehicleid][2][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_3"); 			VehicleTrunkInfo[vehicleid][3][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_3"); 	VehicleTrunkInfo[vehicleid][3][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_4"); 			VehicleTrunkInfo[vehicleid][4][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_4"); 	VehicleTrunkInfo[vehicleid][4][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_5"); 			VehicleTrunkInfo[vehicleid][5][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_5"); 	VehicleTrunkInfo[vehicleid][5][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_6"); 			VehicleTrunkInfo[vehicleid][6][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_6"); 	VehicleTrunkInfo[vehicleid][6][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_7"); 			VehicleTrunkInfo[vehicleid][7][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_7"); 	VehicleTrunkInfo[vehicleid][7][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_8"); 			VehicleTrunkInfo[vehicleid][8][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_8"); 	VehicleTrunkInfo[vehicleid][8][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_9"); 			VehicleTrunkInfo[vehicleid][9][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_9"); 	VehicleTrunkInfo[vehicleid][9][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_10"); 			VehicleTrunkInfo[vehicleid][10][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_10"); 	VehicleTrunkInfo[vehicleid][10][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_11"); 			VehicleTrunkInfo[vehicleid][11][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_11"); 	VehicleTrunkInfo[vehicleid][11][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_12"); 			VehicleTrunkInfo[vehicleid][12][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_12"); 	VehicleTrunkInfo[vehicleid][12][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_13"); 			VehicleTrunkInfo[vehicleid][13][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_13"); 	VehicleTrunkInfo[vehicleid][13][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_14"); 			VehicleTrunkInfo[vehicleid][14][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_14"); 	VehicleTrunkInfo[vehicleid][14][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_15"); 			VehicleTrunkInfo[vehicleid][15][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_15"); 	VehicleTrunkInfo[vehicleid][15][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_16"); 			VehicleTrunkInfo[vehicleid][16][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_16"); 	VehicleTrunkInfo[vehicleid][16][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_17"); 			VehicleTrunkInfo[vehicleid][17][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_17"); 	VehicleTrunkInfo[vehicleid][17][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_18"); 			VehicleTrunkInfo[vehicleid][18][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_18"); 	VehicleTrunkInfo[vehicleid][18][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_19"); 			VehicleTrunkInfo[vehicleid][19][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_19"); 	VehicleTrunkInfo[vehicleid][19][ItemAmmount] = strval(Query);

		format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));

		SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

		VehicleInfo[vehicleid][vColor][0] = Color[0];
		VehicleInfo[vehicleid][vColor][1] = Color[1];

		VehicleInfo[vehicleid][vNupirkta] = true;
		PI[playerid][Transportas1] = vehicleid;
		ArTaksi[vehicleid]	= false;

		if(VehicleInfo[vehicleid][IsInGarage] == true)
		{
			SetVehicleVirtualWorld 	(vehicleid, HouseInfo[PlayerHaveHouse(playerid)][htVW]);
			LinkVehicleToInterior 	(vehicleid, PlayerHaveHouse(playerid) + 1);
		}

		DestroyDynamicObject(TaksiZenklas[playerid]);
		ac_SetVehicleToRespawn(vehicleid);
	}

	mysql_free_result();

	return 1;
}

stock SavePlayerVehicle2(playerid, bool:mode = false)
{
	new vehicleid = PI[playerid][Transportas2], Float: vPos[4];
	new String[1500], Query[1500];

	GetVehiclePos   (vehicleid, vPos[0], vPos[1], vPos[2]);
	GetVehicleZAngle(vehicleid, vPos[3]);

	if(PI[playerid][Transportas2] == -1)
	{
		format(Query, sizeof(Query), "DELETE FROM `vehicles2` WHERE `Transportas` = '%s'", GetPlayerNameEx(playerid));
		mysql_query(Query);
		return 1;
	}

	format(Query, sizeof(Query), "SELECT * FROM `vehicles2` WHERE `Transportas` = '%s'", GetPlayerNameEx(playerid));
	mysql_query(Query);

	mysql_store_result();

	if(mysql_num_rows())
	{
		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Transportas` = '%s' WHERE `Transportas` = '%s'", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Model` = '%d' WHERE `Transportas` = '%s'", GetVehicleModel(vehicleid), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Pos_X` = '%f' WHERE `Transportas` = '%s'", vPos[0], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Pos_Y` = '%f' WHERE `Transportas` = '%s'", vPos[1], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Pos_Z` = '%f' WHERE `Transportas` = '%s'", vPos[2], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Pos_A` = '%f' WHERE `Transportas` = '%s'", vPos[3], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Rida` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vRida], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `FuelType` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vKuroTipas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Fuel` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vKuras], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Color1` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vColor][0], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Color2` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vColor][1], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Paintjob` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vPaintjob], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Tune0` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 0), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Tune1` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 1), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Tune2` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 2), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Tune3` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 3), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Tune4` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 4), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Tune5` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 5), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Tune6` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 6), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Tune7` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 7), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Tune8` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 8), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Tune9` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 9), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Tune10` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 10), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Tune11` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 11), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Tune12` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 12), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Locked` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vUzraktas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `NumberPlate` = '%s' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vNumeriai], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Sprogusi` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vSprogusi], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Data` = '%s' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vKadaNupirktas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Kaina` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vKaina], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `vSanaudos` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vSanaudos], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `vBakas` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vBakas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `vDujos` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vDujos], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `vIjungta` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vIjungta], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `vDujuLikutis` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vDujuLikutis], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `vDujuBakas` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vDujuBakas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `vTA` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vTA], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `vVW` = '%d' WHERE `Transportas` = '%s'", GetVehicleVirtualWorld(vehicleid), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `IsInGarage` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][IsInGarage], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles2` SET `Draudimas` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][Draudimas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		String[0] 	= EOS;
		Query[0] 	= EOS;

		format(String, sizeof(String), "UPDATE `vehicles2` SET ");
		strcat(Query, String);

		for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
		{
		    format(String, sizeof(String), "`vTrunkItem_%d` = '%d'", i, VehicleTrunkInfo[vehicleid][i][ItemID]);
			strcat(Query, String);

			if(i != MAX_TRUNK_SLOTS - 1)
			{
				format(String, sizeof(String), ", `vTrunkAmmount_%d` = '%d', ", i, VehicleTrunkInfo[vehicleid][i][ItemAmmount]);
				strcat(Query, String);
			}
			else
			{
			    format(String, sizeof(String), ", `vTrunkAmmount_%d` = '%d' WHERE `Transportas` = '%s'", i, VehicleTrunkInfo[vehicleid][i][ItemAmmount], GetPlayerNameEx(playerid));
				strcat(Query, String);
			}
		}

		mysql_query(Query);
	}
	else
	{
		String[0] = EOS;

		format(Query, sizeof(Query),
		"INSERT INTO `vehicles2` (Transportas, Model, Pos_X, Pos_Y, Pos_Z, Pos_A, Rida, Fuel, FuelType, Color1, Color2, Paintjob, Tune0, Tune1, Tune2, Tune3, Tune4, Tune5, Tune6, Tune7, Tune8, Tune9, Tune10, Tune11, Tune12, Locked, NumberPlate, Sprogusi, Data, Kaina, vSanaudos, vBakas, vDujos, vIjungta, vDujuLikutis, vDujuBakas, vTA, vVW, IsInGarage, Draudimas) ");
		strcat(String, Query);

	 	format(Query, sizeof(Query), "VALUES ('%s', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%s', '%d', '%s', '%d', '%f', '%f', '%d', '%d', '%f', '%f', '%d', '%d', '%d', '%d')",

		GetPlayerNameEx(playerid),
		GetVehicleModel(vehicleid),
		vPos[0],
		vPos[1],
		vPos[2],
		vPos[3],
		VehicleInfo[vehicleid][vRida],
		VehicleInfo[vehicleid][vKuras],
		VehicleInfo[vehicleid][vKuroTipas],
		VehicleInfo[vehicleid][vColor][0],
		VehicleInfo[vehicleid][vColor][1],
		VehicleInfo[vehicleid][vPaintjob],
		GetVehicleComponentInSlot(vehicleid, 0),
		GetVehicleComponentInSlot(vehicleid, 1),
		GetVehicleComponentInSlot(vehicleid, 2),
		GetVehicleComponentInSlot(vehicleid, 3),
		GetVehicleComponentInSlot(vehicleid, 4),
		GetVehicleComponentInSlot(vehicleid, 5),
		GetVehicleComponentInSlot(vehicleid, 6),
		GetVehicleComponentInSlot(vehicleid, 7),
		GetVehicleComponentInSlot(vehicleid, 8),
		GetVehicleComponentInSlot(vehicleid, 9),
		GetVehicleComponentInSlot(vehicleid, 10),
		GetVehicleComponentInSlot(vehicleid, 11),
		GetVehicleComponentInSlot(vehicleid, 12),
		VehicleInfo[vehicleid][vUzraktas],
		VehicleInfo[vehicleid][vNumeriai],
		VehicleInfo[vehicleid][vSprogusi],
		VehicleInfo[vehicleid][vKadaNupirktas],
		VehicleInfo[vehicleid][vKaina],
		VehicleInfo[vehicleid][vSanaudos],
		VehicleInfo[vehicleid][vBakas],
		VehicleInfo[vehicleid][vDujos],
		VehicleInfo[vehicleid][vIjungta],
		VehicleInfo[vehicleid][vDujuLikutis],
		VehicleInfo[vehicleid][vDujuBakas],
		VehicleInfo[vehicleid][vTA],
		GetVehicleVirtualWorld(vehicleid),
		VehicleInfo[vehicleid][IsInGarage],
		VehicleInfo[vehicleid][Draudimas]);

		strcat 		(String, Query);
		mysql_query	(String);
	}

	mysql_free_result();

	if(mode)
	{
		DestroyVehicle			(vehicleid);
		ClearVehicleVariables	(vehicleid);

		PI[playerid][Transportas2] = -1;
	}

	return 1;
}

stock LoadPlayerVehicle2(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;

	new Modelis, Float: vPos[4], Color[2];
	new String[600], Query[128];

	format(Query, sizeof(Query), "SELECT * FROM `vehicles2` WHERE `Transportas` = '%s'", GetPlayerNameEx(playerid));
	mysql_query(Query);

	mysql_store_result();

	if(mysql_num_rows() != 0)
	{
		mysql_fetch_row(String);

		mysql_fetch_field_row(Query, "Model");         Modelis = strval(Query);
		mysql_fetch_field_row(Query, "Pos_X");         vPos[0] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_Y");         vPos[1] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_Z");         vPos[2] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_A");         vPos[3] = floatstr(Query);
		mysql_fetch_field_row(Query, "Color1");        Color[0] = strval(Query);
		mysql_fetch_field_row(Query, "Color2");        Color[1] = strval(Query);

		new vehicleid = AC_CreateVehicle(Modelis, vPos[0], vPos[1], vPos[2] + 3, vPos[3], Color[0], Color[1], -1);

		mysql_fetch_field_row(Query, "Pos_X");         VehicleInfo[vehicleid][vLastPos][0] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_Y");         VehicleInfo[vehicleid][vLastPos][1] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_Z");         VehicleInfo[vehicleid][vLastPos][2] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_A");         VehicleInfo[vehicleid][vLastPos][3] = floatstr(Query);
		mysql_fetch_field_row(Query, "Rida");          VehicleInfo[vehicleid][vRida] = floatstr(Query);
		mysql_fetch_field_row(Query, "Fuel");          VehicleInfo[vehicleid][vKuras] = floatstr(Query);
		mysql_fetch_field_row(Query, "FuelType");      VehicleInfo[vehicleid][vKuroTipas] = strval(Query);
		mysql_fetch_field_row(Query, "Paintjob");      VehicleInfo[vehicleid][vPaintjob] = strval(Query);
		mysql_fetch_field_row(Query, "Tune0");         VehicleInfo[vehicleid][vTune][0] = strval(Query);
		mysql_fetch_field_row(Query, "Tune1");         VehicleInfo[vehicleid][vTune][1] = strval(Query);
		mysql_fetch_field_row(Query, "Tune2");         VehicleInfo[vehicleid][vTune][2] = strval(Query);
		mysql_fetch_field_row(Query, "Tune3");         VehicleInfo[vehicleid][vTune][3] = strval(Query);
		mysql_fetch_field_row(Query, "Tune4");         VehicleInfo[vehicleid][vTune][4] = strval(Query);
		mysql_fetch_field_row(Query, "Tune5");         VehicleInfo[vehicleid][vTune][5] = strval(Query);
		mysql_fetch_field_row(Query, "Tune6");         VehicleInfo[vehicleid][vTune][6] = strval(Query);
		mysql_fetch_field_row(Query, "Tune7");         VehicleInfo[vehicleid][vTune][7] = strval(Query);
		mysql_fetch_field_row(Query, "Tune8");         VehicleInfo[vehicleid][vTune][8] = strval(Query);
		mysql_fetch_field_row(Query, "Tune9");         VehicleInfo[vehicleid][vTune][9] = strval(Query);
		mysql_fetch_field_row(Query, "Tune10");        VehicleInfo[vehicleid][vTune][10] = strval(Query);
		mysql_fetch_field_row(Query, "Tune11");        VehicleInfo[vehicleid][vTune][11] = strval(Query);
		mysql_fetch_field_row(Query, "Tune12");        VehicleInfo[vehicleid][vTune][12] = strval(Query);
		mysql_fetch_field_row(Query, "Locked");        VehicleInfo[vehicleid][vUzraktas] = !!strval(Query);
		mysql_fetch_field_row(Query, "Sprogusi");      VehicleInfo[vehicleid][vSprogusi] = !!strval(Query);
		mysql_fetch_field_row(Query, "Kaina");         VehicleInfo[vehicleid][vKaina] = strval(Query);
		mysql_fetch_field_row(Query, "vBakas");        VehicleInfo[vehicleid][vBakas] = floatstr(Query);
		mysql_fetch_field_row(Query, "vSanaudos");     VehicleInfo[vehicleid][vSanaudos] = floatstr(Query);
		mysql_fetch_field_row(Query, "vDujos");        VehicleInfo[vehicleid][vDujos] = !!strval(Query);
		mysql_fetch_field_row(Query, "vIjungta");      VehicleInfo[vehicleid][vIjungta] = !!strval(Query);
		mysql_fetch_field_row(Query, "vDujuLikutis");  VehicleInfo[vehicleid][vDujuLikutis] = floatstr(Query);
		mysql_fetch_field_row(Query, "vDujuBakas");    VehicleInfo[vehicleid][vDujuBakas] = floatstr(Query);
		mysql_fetch_field_row(Query, "vTA");           VehicleInfo[vehicleid][vTA] = strval(Query);
		mysql_fetch_field_row(Query, "vVW");           SetVehicleVirtualWorld(vehicleid, strval(Query));
		mysql_fetch_field_row(Query, "IsInGarage");    VehicleInfo[vehicleid][IsInGarage] = !!strval(Query);
		mysql_fetch_field_row(Query, "Draudimas");           VehicleInfo[vehicleid][Draudimas] = strval(Query);

		mysql_fetch_field_row(Query, "NumberPlate");   format(VehicleInfo[vehicleid][vNumeriai], 15, "%s", Query);
		mysql_fetch_field_row(Query, "Data");   	   format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", Query);

		mysql_fetch_field_row(Query, "vTrunkItem_0"); 		VehicleTrunkInfo[vehicleid][0][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_0"); 	VehicleTrunkInfo[vehicleid][0][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_1"); 			VehicleTrunkInfo[vehicleid][1][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_1"); 	VehicleTrunkInfo[vehicleid][1][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_2"); 			VehicleTrunkInfo[vehicleid][2][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_2"); 	VehicleTrunkInfo[vehicleid][2][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_3"); 			VehicleTrunkInfo[vehicleid][3][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_3"); 	VehicleTrunkInfo[vehicleid][3][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_4"); 			VehicleTrunkInfo[vehicleid][4][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_4"); 	VehicleTrunkInfo[vehicleid][4][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_5"); 			VehicleTrunkInfo[vehicleid][5][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_5"); 	VehicleTrunkInfo[vehicleid][5][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_6"); 			VehicleTrunkInfo[vehicleid][6][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_6"); 	VehicleTrunkInfo[vehicleid][6][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_7"); 			VehicleTrunkInfo[vehicleid][7][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_7"); 	VehicleTrunkInfo[vehicleid][7][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_8"); 			VehicleTrunkInfo[vehicleid][8][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_8"); 	VehicleTrunkInfo[vehicleid][8][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_9"); 			VehicleTrunkInfo[vehicleid][9][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_9"); 	VehicleTrunkInfo[vehicleid][9][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_10"); 			VehicleTrunkInfo[vehicleid][10][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_10"); 	VehicleTrunkInfo[vehicleid][10][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_11"); 			VehicleTrunkInfo[vehicleid][11][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_11"); 	VehicleTrunkInfo[vehicleid][11][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_12"); 			VehicleTrunkInfo[vehicleid][12][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_12"); 	VehicleTrunkInfo[vehicleid][12][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_13"); 			VehicleTrunkInfo[vehicleid][13][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_13"); 	VehicleTrunkInfo[vehicleid][13][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_14"); 			VehicleTrunkInfo[vehicleid][14][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_14"); 	VehicleTrunkInfo[vehicleid][14][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_15"); 			VehicleTrunkInfo[vehicleid][15][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_15"); 	VehicleTrunkInfo[vehicleid][15][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_16"); 			VehicleTrunkInfo[vehicleid][16][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_16"); 	VehicleTrunkInfo[vehicleid][16][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_17"); 			VehicleTrunkInfo[vehicleid][17][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_17"); 	VehicleTrunkInfo[vehicleid][17][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_18"); 			VehicleTrunkInfo[vehicleid][18][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_18"); 	VehicleTrunkInfo[vehicleid][18][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_19"); 			VehicleTrunkInfo[vehicleid][19][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_19"); 	VehicleTrunkInfo[vehicleid][19][ItemAmmount] = strval(Query);

		format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));

		SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

		VehicleInfo[vehicleid][vColor][0] = Color[0];
		VehicleInfo[vehicleid][vColor][1] = Color[1];

		VehicleInfo[vehicleid][vNupirkta] = true;
		PI[playerid][Transportas2] = vehicleid;
		ArTaksi[vehicleid]	= false;

		if(VehicleInfo[vehicleid][IsInGarage] == true)
		{
			SetVehicleVirtualWorld 	(vehicleid, HouseInfo[PlayerHaveHouse(playerid)][htVW]);
			LinkVehicleToInterior 	(vehicleid, PlayerHaveHouse(playerid) + 1);
		}

		DestroyDynamicObject(TaksiZenklas[playerid]);
		ac_SetVehicleToRespawn(vehicleid);
	}

	mysql_free_result();

	return 1;
}

stock SavePlayerVehicle3(playerid, bool:mode = false)
{
	new vehicleid = PI[playerid][Transportas3], Float: vPos[4];
	new String[1500], Query[1500];

	GetVehiclePos   (vehicleid, vPos[0], vPos[1], vPos[2]);
	GetVehicleZAngle(vehicleid, vPos[3]);

	if(PI[playerid][Transportas3] == -1)
	{
		format(Query, sizeof(Query), "DELETE FROM `vehicles3` WHERE `Transportas` = '%s'", GetPlayerNameEx(playerid));
		mysql_query(Query);

		return 1;
	}

	format(Query, sizeof(Query), "SELECT * FROM `vehicles3` WHERE `Transportas` = '%s'", GetPlayerNameEx(playerid));
	mysql_query(Query);

	mysql_store_result();

	if(mysql_num_rows())
	{
		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Transportas` = '%s' WHERE `Transportas` = '%s'", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Model` = '%d' WHERE `Transportas` = '%s'", GetVehicleModel(vehicleid), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Pos_X` = '%f' WHERE `Transportas` = '%s'", vPos[0], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Pos_Y` = '%f' WHERE `Transportas` = '%s'", vPos[1], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Pos_Z` = '%f' WHERE `Transportas` = '%s'", vPos[2], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Pos_A` = '%f' WHERE `Transportas` = '%s'", vPos[3], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Rida` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vRida], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `FuelType` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vKuroTipas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Fuel` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vKuras], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Color1` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vColor][0], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Color2` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vColor][1], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Paintjob` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vPaintjob], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Tune0` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 0), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Tune1` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 1), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Tune2` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 2), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Tune3` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 3), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Tune4` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 4), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Tune5` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 5), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Tune6` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 6), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Tune7` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 7), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Tune8` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 8), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Tune9` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 9), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Tune10` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 10), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Tune11` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 11), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Tune12` = '%d' WHERE `Transportas` = '%s'", GetVehicleComponentInSlot(vehicleid, 12), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Locked` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vUzraktas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `NumberPlate` = '%s' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vNumeriai], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Sprogusi` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vSprogusi], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Data` = '%s' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vKadaNupirktas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Kaina` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vKaina], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `vSanaudos` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vSanaudos], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `vBakas` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vBakas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `vDujos` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vDujos], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `vIjungta` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vIjungta], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `vDujuLikutis` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vDujuLikutis], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `vDujuBakas` = '%f' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vDujuBakas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `vTA` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][vTA], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `vVW` = '%d' WHERE `Transportas` = '%s'", GetVehicleVirtualWorld(vehicleid), GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `IsInGarage` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][IsInGarage], GetPlayerNameEx(playerid));
		mysql_query(Query);

		format(Query, sizeof(Query), "UPDATE `vehicles3` SET `Draudimas` = '%d' WHERE `Transportas` = '%s'", VehicleInfo[vehicleid][Draudimas], GetPlayerNameEx(playerid));
		mysql_query(Query);

		String[0] 	= EOS;
		Query[0] 	= EOS;

		format(String, sizeof(String), "UPDATE `vehicles3` SET ");
		strcat(Query, String);

		for(new i = 0; i < MAX_TRUNK_SLOTS; i ++)
		{
		    format(String, sizeof(String), "`vTrunkItem_%d` = '%d'", i, VehicleTrunkInfo[vehicleid][i][ItemID]);
			strcat(Query, String);

			if(i != MAX_TRUNK_SLOTS - 1)
			{
				format(String, sizeof(String), ", `vTrunkAmmount_%d` = '%d', ", i, VehicleTrunkInfo[vehicleid][i][ItemAmmount]);
				strcat(Query, String);
			}
			else
			{
			    format(String, sizeof(String), ", `vTrunkAmmount_%d` = '%d' WHERE `Transportas` = '%s'", i, VehicleTrunkInfo[vehicleid][i][ItemAmmount], GetPlayerNameEx(playerid));
				strcat(Query, String);
			}
		}

		mysql_query(Query);
	}
	else
	{
		String[0] = EOS;

		format(Query, sizeof(Query),
		"INSERT INTO `vehicles3` (Transportas, Model, Pos_X, Pos_Y, Pos_Z, Pos_A, Rida, Fuel, FuelType, Color1, Color2, Paintjob, Tune0, Tune1, Tune2, Tune3, Tune4, Tune5, Tune6, Tune7, Tune8, Tune9, Tune10, Tune11, Tune12, Locked, NumberPlate, Sprogusi, Data, Kaina, vSanaudos, vBakas, vDujos, vIjungta, vDujuLikutis, vDujuBakas, vTA, vVW, IsInGarage, Draudimas) ");
		strcat(String, Query);

	 	format(Query, sizeof(Query), "VALUES ('%s', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%s', '%d', '%s', '%d', '%f', '%f', '%d', '%d', '%f', '%f', '%d', '%d', '%d', '%d')",

		GetPlayerNameEx(playerid),
		GetVehicleModel(vehicleid),
		vPos[0],
		vPos[1],
		vPos[2],
		vPos[3],
		VehicleInfo[vehicleid][vRida],
		VehicleInfo[vehicleid][vKuras],
		VehicleInfo[vehicleid][vKuroTipas],
		VehicleInfo[vehicleid][vColor][0],
		VehicleInfo[vehicleid][vColor][1],
		VehicleInfo[vehicleid][vPaintjob],
		GetVehicleComponentInSlot(vehicleid, 0),
		GetVehicleComponentInSlot(vehicleid, 1),
		GetVehicleComponentInSlot(vehicleid, 2),
		GetVehicleComponentInSlot(vehicleid, 3),
		GetVehicleComponentInSlot(vehicleid, 4),
		GetVehicleComponentInSlot(vehicleid, 5),
		GetVehicleComponentInSlot(vehicleid, 6),
		GetVehicleComponentInSlot(vehicleid, 7),
		GetVehicleComponentInSlot(vehicleid, 8),
		GetVehicleComponentInSlot(vehicleid, 9),
		GetVehicleComponentInSlot(vehicleid, 10),
		GetVehicleComponentInSlot(vehicleid, 11),
		GetVehicleComponentInSlot(vehicleid, 12),
		VehicleInfo[vehicleid][vUzraktas],
		VehicleInfo[vehicleid][vNumeriai],
		VehicleInfo[vehicleid][vSprogusi],
		VehicleInfo[vehicleid][vKadaNupirktas],
		VehicleInfo[vehicleid][vKaina],
		VehicleInfo[vehicleid][vSanaudos],
		VehicleInfo[vehicleid][vBakas],
		VehicleInfo[vehicleid][vDujos],
		VehicleInfo[vehicleid][vIjungta],
		VehicleInfo[vehicleid][vDujuLikutis],
		VehicleInfo[vehicleid][vDujuBakas],
		VehicleInfo[vehicleid][vTA],
		GetVehicleVirtualWorld(vehicleid),
		VehicleInfo[vehicleid][IsInGarage],
		VehicleInfo[vehicleid][Draudimas]);

		strcat 		(String, Query);
		mysql_query	(String);
	}

	mysql_free_result();

	if(mode)
	{
		DestroyVehicle			(vehicleid);
		ClearVehicleVariables	(vehicleid);

		PI[playerid][Transportas3] = -1;
	}

	return 1;
}

stock LoadPlayerVehicle3(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;

	new Modelis, Float: vPos[4], Color[2];
	new String[600], Query[128];

	format(Query, sizeof(Query), "SELECT * FROM `vehicles3` WHERE `Transportas` = '%s'", GetPlayerNameEx(playerid));
	mysql_query(Query);

	mysql_store_result();

	if(mysql_num_rows() != 0)
	{
		mysql_fetch_row(String);

		mysql_fetch_field_row(Query, "Model");         Modelis = strval(Query);
		mysql_fetch_field_row(Query, "Pos_X");         vPos[0] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_Y");         vPos[1] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_Z");         vPos[2] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_A");         vPos[3] = floatstr(Query);
		mysql_fetch_field_row(Query, "Color1");        Color[0] = strval(Query);
		mysql_fetch_field_row(Query, "Color2");        Color[1] = strval(Query);

		new vehicleid = AC_CreateVehicle(Modelis, vPos[0], vPos[1], vPos[2] + 3, vPos[3], Color[0], Color[1], -1);

		mysql_fetch_field_row(Query, "Pos_X");         VehicleInfo[vehicleid][vLastPos][0] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_Y");         VehicleInfo[vehicleid][vLastPos][1] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_Z");         VehicleInfo[vehicleid][vLastPos][2] = floatstr(Query);
		mysql_fetch_field_row(Query, "Pos_A");         VehicleInfo[vehicleid][vLastPos][3] = floatstr(Query);
		mysql_fetch_field_row(Query, "Rida");          VehicleInfo[vehicleid][vRida] = floatstr(Query);
		mysql_fetch_field_row(Query, "Fuel");          VehicleInfo[vehicleid][vKuras] = floatstr(Query);
		mysql_fetch_field_row(Query, "FuelType");      VehicleInfo[vehicleid][vKuroTipas] = strval(Query);
		mysql_fetch_field_row(Query, "Paintjob");      VehicleInfo[vehicleid][vPaintjob] = strval(Query);
		mysql_fetch_field_row(Query, "Tune0");         VehicleInfo[vehicleid][vTune][0] = strval(Query);
		mysql_fetch_field_row(Query, "Tune1");         VehicleInfo[vehicleid][vTune][1] = strval(Query);
		mysql_fetch_field_row(Query, "Tune2");         VehicleInfo[vehicleid][vTune][2] = strval(Query);
		mysql_fetch_field_row(Query, "Tune3");         VehicleInfo[vehicleid][vTune][3] = strval(Query);
		mysql_fetch_field_row(Query, "Tune4");         VehicleInfo[vehicleid][vTune][4] = strval(Query);
		mysql_fetch_field_row(Query, "Tune5");         VehicleInfo[vehicleid][vTune][5] = strval(Query);
		mysql_fetch_field_row(Query, "Tune6");         VehicleInfo[vehicleid][vTune][6] = strval(Query);
		mysql_fetch_field_row(Query, "Tune7");         VehicleInfo[vehicleid][vTune][7] = strval(Query);
		mysql_fetch_field_row(Query, "Tune8");         VehicleInfo[vehicleid][vTune][8] = strval(Query);
		mysql_fetch_field_row(Query, "Tune9");         VehicleInfo[vehicleid][vTune][9] = strval(Query);
		mysql_fetch_field_row(Query, "Tune10");        VehicleInfo[vehicleid][vTune][10] = strval(Query);
		mysql_fetch_field_row(Query, "Tune11");        VehicleInfo[vehicleid][vTune][11] = strval(Query);
		mysql_fetch_field_row(Query, "Tune12");        VehicleInfo[vehicleid][vTune][12] = strval(Query);
		mysql_fetch_field_row(Query, "Locked");        VehicleInfo[vehicleid][vUzraktas] = !!strval(Query);
		mysql_fetch_field_row(Query, "Sprogusi");      VehicleInfo[vehicleid][vSprogusi] = !!strval(Query);
		mysql_fetch_field_row(Query, "Kaina");         VehicleInfo[vehicleid][vKaina] = strval(Query);
		mysql_fetch_field_row(Query, "vBakas");        VehicleInfo[vehicleid][vBakas] = floatstr(Query);
		mysql_fetch_field_row(Query, "vSanaudos");     VehicleInfo[vehicleid][vSanaudos] = floatstr(Query);
		mysql_fetch_field_row(Query, "vDujos");        VehicleInfo[vehicleid][vDujos] = !!strval(Query);
		mysql_fetch_field_row(Query, "vIjungta");      VehicleInfo[vehicleid][vIjungta] = !!strval(Query);
		mysql_fetch_field_row(Query, "vDujuLikutis");  VehicleInfo[vehicleid][vDujuLikutis] = floatstr(Query);
		mysql_fetch_field_row(Query, "vDujuBakas");    VehicleInfo[vehicleid][vDujuBakas] = floatstr(Query);
		mysql_fetch_field_row(Query, "vTA");           VehicleInfo[vehicleid][vTA] = strval(Query);
		mysql_fetch_field_row(Query, "vVW");           SetVehicleVirtualWorld(vehicleid, strval(Query));
		mysql_fetch_field_row(Query, "IsInGarage");    VehicleInfo[vehicleid][IsInGarage] = !!strval(Query);
		mysql_fetch_field_row(Query, "Draudimas");           VehicleInfo[vehicleid][Draudimas] = strval(Query);

		mysql_fetch_field_row(Query, "NumberPlate");   format(VehicleInfo[vehicleid][vNumeriai], 15, "%s", Query);
		mysql_fetch_field_row(Query, "Data");   	   format(VehicleInfo[vehicleid][vKadaNupirktas], 32, "%s", Query);

		mysql_fetch_field_row(Query, "vTrunkItem_0"); 		VehicleTrunkInfo[vehicleid][0][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_0"); 	VehicleTrunkInfo[vehicleid][0][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_1"); 			VehicleTrunkInfo[vehicleid][1][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_1"); 	VehicleTrunkInfo[vehicleid][1][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_2"); 			VehicleTrunkInfo[vehicleid][2][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_2"); 	VehicleTrunkInfo[vehicleid][2][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_3"); 			VehicleTrunkInfo[vehicleid][3][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_3"); 	VehicleTrunkInfo[vehicleid][3][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_4"); 			VehicleTrunkInfo[vehicleid][4][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_4"); 	VehicleTrunkInfo[vehicleid][4][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_5"); 			VehicleTrunkInfo[vehicleid][5][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_5"); 	VehicleTrunkInfo[vehicleid][5][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_6"); 			VehicleTrunkInfo[vehicleid][6][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_6"); 	VehicleTrunkInfo[vehicleid][6][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_7"); 			VehicleTrunkInfo[vehicleid][7][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_7"); 	VehicleTrunkInfo[vehicleid][7][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_8"); 			VehicleTrunkInfo[vehicleid][8][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_8"); 	VehicleTrunkInfo[vehicleid][8][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_9"); 			VehicleTrunkInfo[vehicleid][9][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_9"); 	VehicleTrunkInfo[vehicleid][9][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_10"); 			VehicleTrunkInfo[vehicleid][10][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_10"); 	VehicleTrunkInfo[vehicleid][10][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_11"); 			VehicleTrunkInfo[vehicleid][11][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_11"); 	VehicleTrunkInfo[vehicleid][11][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_12"); 			VehicleTrunkInfo[vehicleid][12][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_12"); 	VehicleTrunkInfo[vehicleid][12][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_13"); 			VehicleTrunkInfo[vehicleid][13][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_13"); 	VehicleTrunkInfo[vehicleid][13][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_14"); 			VehicleTrunkInfo[vehicleid][14][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_14"); 	VehicleTrunkInfo[vehicleid][14][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_15"); 			VehicleTrunkInfo[vehicleid][15][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_15"); 	VehicleTrunkInfo[vehicleid][15][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_16"); 			VehicleTrunkInfo[vehicleid][16][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_16"); 	VehicleTrunkInfo[vehicleid][16][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_17"); 			VehicleTrunkInfo[vehicleid][17][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_17"); 	VehicleTrunkInfo[vehicleid][17][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_18"); 			VehicleTrunkInfo[vehicleid][18][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_18"); 	VehicleTrunkInfo[vehicleid][18][ItemAmmount] = strval(Query);

		mysql_fetch_field_row(Query, "vTrunkItem_19"); 			VehicleTrunkInfo[vehicleid][19][ItemID] = strval(Query);
		mysql_fetch_field_row(Query, "vTrunkAmmount_19"); 	VehicleTrunkInfo[vehicleid][19][ItemAmmount] = strval(Query);

		format(VehicleInfo[vehicleid][vSavininkas], 24, "%s", GetPlayerNameEx(playerid));

		SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][vNumeriai]);

		VehicleInfo[vehicleid][vColor][0] = Color[0];
		VehicleInfo[vehicleid][vColor][1] = Color[1];

		VehicleInfo[vehicleid][vNupirkta] = true;
		PI[playerid][Transportas3] = vehicleid;
		ArTaksi[vehicleid]	= false;

		if(VehicleInfo[vehicleid][IsInGarage] == true)
		{
			SetVehicleVirtualWorld 	(vehicleid, HouseInfo[PlayerHaveHouse(playerid)][htVW]);
			LinkVehicleToInterior 	(vehicleid, PlayerHaveHouse(playerid) + 1);
		}

		DestroyDynamicObject(TaksiZenklas[playerid]);
		ac_SetVehicleToRespawn(vehicleid);
	}

	mysql_free_result();

	return 1;
}

stock ShowVehicleInfo(vehicleid)
{
	new Float: V_Health, String[600];

	new Variklis[64], Dujos[64], TA[64], vDraudimas[64];

	switch(VehicleInfo[vehicleid][vKuroTipas])
	{
		case BENZINAS: 	Variklis = "Benzininis";
		case DYZELIS:	Variklis = "Dyzelinis";
	}

	if(VehicleInfo[vehicleid][vDujos])	Dujos = "Ámontuota";
	else 								Dujos = "Neámontuota";

	if(VehicleInfo[vehicleid][vTA] > gettime()) format(TA, sizeof(TA), "Galioja iki: %s", TimestampToDate(VehicleInfo[vehicleid][vTA]));
	else 										TA = "Negalioja";

	if(VehicleInfo[vehicleid][vTA] > gettime()) format(vDraudimas, sizeof(vDraudimas), "Galioja iki: %s", TimestampToDate(VehicleInfo[vehicleid][Draudimas]));
	else 										vDraudimas = "Negalioja";

	if(!VehicleInfo[vehicleid][vNupirkta])
	{
		format(String, 2, "-");
	}
	else
	{
		GetVehicleHealth(vehicleid, V_Health);

		format(String, sizeof(String),
		"{ffffff}Pavadinimas: \t\t{02FF5B}%s\n{ffffff}Rida: \t\t\t{02FF5B}%.2f KM\n{ffffff}Bûklë: \t\t\t{02FF5B}%3.0f%%\n{ffffff}Variklis: \t\t{02FF5B}%s\n{ffffff}Dujø áranga: \t\t{02FF5B}%s\
		\n{ffffff}Degalai: \t\t{02FF5B}%.2f L\n{ffffff}Sànaudos: \t\t{02FF5B}%.2f L/10 KM\n{ffffff}Bako tûris: \t\t{02FF5B}%.2f L\n{ffffff}Numeriai: \t\t{02FF5B}%s\n{ffffff}Tech. apþiûra: \t\t{02FF5B}%s\n{ffffff}Draudimas: \t\t{02FF5B}%s\n{ffffff}Nupirkta: \t\t{02FF5B}%s",
		VehicleNames[GetVehicleModel(vehicleid) - 400], VehicleInfo[vehicleid][vRida], floatdiv(V_Health, 10), Variklis, Dujos, VehicleInfo[vehicleid][vKuras],
		VehicleInfo[vehicleid][vSanaudos], VehicleInfo[vehicleid][vBakas], VehicleInfo[vehicleid][vNumeriai], TA, vDraudimas, VehicleInfo[vehicleid][vKadaNupirktas]);
	}

	return String;
}

stock GetVehicleTuneCategory(vehicleid)
{
	new VehicleModel = GetVehicleModel(vehicleid);

	switch(VehicleModel)
	{
	    case 403, 406..408, 413, 414, 416, 417, 423, 425, 427, 428, 430..435, 437, 440, 441, 443, 444,
	    446..450, 452..457, 459..465, 468..473, 476, 481..488, 490, 493..495, 497..499, 501..505, 508..515,
	    519..525, 528, 530..532, 537, 539, 543, 544, 548, 552..554, 556, 557, 563, 564, 568..574, 577, 578,
	    581..584, 586, 588, 590..599, 601, 604..611: return TUNE_NONE;

	    case 400..402, 404, 405, 409..411, 415, 418..422, 424, 426, 429, 436, 438, 439, 442, 445, 451, 458,
	    466, 467, 474, 475, 477..480, 489, 491, 492, 496, 500, 506, 507, 516..518, 526, 527, 529, 533, 540..542,
	    545..547, 549..551, 555, 575, 579, 580, 585, 587, 589, 600, 602, 603: return TRANSFENDER;

	    case 412, 534..536, 566, 567, 576: return LOCOLOW;

	    case 558..562, 565: return ARCHANGELS;

	    default: return TUNE_NONE;
	}

	return 0;
}

stock GetVehicleCategory(vehicleid)
{
	new VehicleModel = GetVehicleModel(vehicleid);

	switch(VehicleModel)
	{
	    case 402, 411, 415, 429, 451, 475, 477, 494, 496, 502, 503, 506, 541, 558, 559, 565, 587,
	    589, 602, 603:
		{
			return SPORT_VEHICLES;
		}

		case 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 417, 487, 488, 497, 563, 447,
		425, 469:
		{
			return AIRPLANE;
		}

		case 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471:
		{
			return BIKES;
		}

	 	case 480, 533, 439, 555, 536, 575, 534, 567, 535, 566, 576, 412, 568, 424, 445, 504, 401, 518,
		527, 542, 507, 562, 585, 419, 526, 604, 466, 492, 474, 546, 517, 410, 551, 516, 467, 426,
  		436, 547, 405, 580, 560, 550, 549, 540, 491, 529, 421,  418, 404, 479, 458, 561, 571, 545, 434,
  		483, 420, 596, 598, 597:
		{
			return NORMAL_VEHICLES;
		}

		case 499, 422, 482, 498, 609, 524, 578, 455, 403, 414, 582, 443, 514, 600, 413, 515, 440, 543, 605,
		459, 531, 408, 552, 478, 456, 554, 573, 579, 400, 500, 444, 556, 557, 470, 489, 505, 495, 416, 433,
  		431, 438, 437, 427, 490, 528, 407, 544, 599, 432, 601, 485, 538, 457, 508, 532, 486, 406, 530, 537,
		588, 572, 423, 442, 428, 409, 574, 583, 525, 539:
		{
			return HEAVY_VEHICLES;
		}

		case 472, 473, 493, 595, 484, 430, 453, 452, 446, 454:
		{
			return BOATS;
		}
	}
	return 0;
}

stock VehicleInZone(vehicleid, Float:min_X, Float:min_Y, Float:max_X, Float:max_Y)
{
	new Float:vPos[3]; GetVehiclePos(vehicleid, vPos[0], vPos[1], vPos[2]);
	if((vPos[0] <= max_X && vPos[0] >= min_X) && (vPos[1] <= max_Y && vPos[1] >= min_Y)) return true;
	return false;
}

stock CreateLtuNumberPlate() // by Johurt
{
	new msg[8], str1[2], str2[2], str3[2];
	format(str1, sizeof(str1), "%s", Letters[random(sizeof(Letters))]);
	format(str2, sizeof(str2), "%s", Letters[random(sizeof(Letters))]);
	format(str3, sizeof(str3), "%s", Letters[random(sizeof(Letters))]);
	format(msg, sizeof(msg), "%s%s%s:%d%d%d", str1, str2, str3, random(10), random(10), random(10));
	return msg;
}

stock TimestampToDate(timestamp)
{
	timestamp += (3 * 60 * 60);
	new year = 1970, day = 0, month = 0, hour = 0, mins = 0;
	new days_of_month[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
	new returnstring[21];
	while(timestamp > 31622400)
	{
		timestamp -= 31536000;
		if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) timestamp -= 86400;
		++ year;
	}
	if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) days_of_month[1] = 29;
	else days_of_month[1] = 28;
	while(timestamp > 86400)
	{
		timestamp -= 86400;
		++ day;
		if (day == days_of_month[month]) day = 0, ++ month;
	}
	while(timestamp > 60)
	{
		timestamp -= 60;
		++ mins;
		if (mins == 60) mins = 0, ++ hour;
	}
	format(returnstring, 21, "%02d-%02d-%02d %02d:%02d", year, month + 1, day + 1, hour, mins);
	return returnstring;
}

stock IsPointInRangeOfPoint(Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2, Float:range)
{
	x2 -= x;
	y2 -= y;
	z2 -= z;
	return ((x2 * x2) + (y2 * y2) + (z2 * z2)) < (range * range);
}

stock ConvertSeconds(sekundes) // by Johurt
{
	new str[37], msg[10], minutes, valandos, dienos;
	while(sekundes > 59) { sekundes -= 60; minutes ++; }
	while(minutes > 59) { minutes -= 60; valandos ++; }
	while(valandos > 23) { valandos -= 24; dienos ++; }
	if(dienos > 0) { format(msg, 7, "%d d. ", dienos); strcat(str, msg); }
	if(valandos > 0) { format(msg, 10, "%d val. ", valandos); strcat(str, msg); }
	if(minutes > 0) { format(msg, 10, "%d min. ", minutes); strcat(str, msg); }
	if(sekundes > 0)
	{
		if(minutes < 1 && valandos < 1 && dienos < 1)
		{
			format(msg, 9, "%d sek.", sekundes);
			strcat(str, msg);
		}
		else
		{
			format(msg, 9, "%d sek.", sekundes);
			strcat(str, msg);
		}
	}

	return str;
}

stock j_GetPlayerName(playerid) // by Johurt
{
	GetPlayerName(playerid, PI[playerid][PlayerName], 21);
	if(!strcmp("--", PI[playerid][PlayerName], true))
	{
		j_GetPlayerName(playerid);
	}
}

stock j_GetPlayerIp(playerid) // by Johurt
{
	GetPlayerIp(playerid, PI[playerid][PlayerIP], 16);
	if(!strcmp("--", PI[playerid][PlayerIP], true))
	{
		j_GetPlayerIp(playerid);
	}
}

stock GetDateEx()
{
	new date[30], Year, Month, Day, Hour, Minute, Second;
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	format(date, sizeof(date), "%d-%02d-%02d %02d:%02d", Year, Month, Day, Hour, Minute);
	return date;
}

f_public: settime()
{
	for(new p, size = GetPlayerPoolSize(); p <= size; p++)
	{
		new String[256], year, month, day, hours, minutes;

		getdate(year, month, day), gettime(hours, minutes);

		format(String, sizeof String, "%s%d-%s%d-%d", (year < 10) ? ("0") : (""), year, ((month < 10) ? ("0") : ("")), month, day);
		PlayerTextDrawSetString(p, TimeDateTD[p][0], String);

		format(String, sizeof String, "%s%d:%s%d", (hours < 10) ? ("0") : (""), hours, (minutes < 10) ? ("0") : (""), minutes);
		PlayerTextDrawSetString(p, TimeDateTD[p][1], String);

		if(!IsPlayerConnected(p) || IsPlayerNPC(p)) continue;

		if(PI[p][ikalintas])
		{
			if(PI[p][kalejimo_laikas] > 0)
			{
				if(PI[p][pHealthCheck] < gettime() && PI[p][pHealthCheck] != -5)
				{
					switch(GetPlayerInterior(p))
					{
						case 0:
						{
							if(!PlayerInZone(p, -361.0711, -361.1814, 1103.7557, 1184.0716))
							{
								MovePlayerToJail(p);
							}
							else
							{
								PI[p][kalejimo_laikas] --;
							}
						}

						case 45: PI[p][kalejimo_laikas] --;

						default:
						{
							MovePlayerToJail(p);
						}
					}
				}
			}

			if(PI[p][kalejimo_laikas] < 1)
			{
				UnjailPlayer(p);
			}
		}
	}

	return 1;
}

f_public: BadEngine()
{
	new vehicleid, Float: VehicleSpeed[3], Float: VehicleHealth;

	for(new i; i != MAX_PLAYERS; i ++)
	{
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			if(GetPlayerSpeed(i) >= MAX_SPEED_KICK)
			{
				if(PI[i][AdminLevel] < LEVEL_OWNER)
				{
					new String[200];

					format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}buvo iðmestas ið serverio!", GetPlayerNameEx(i));
					SendClientMessageToAll(-1, String);

					SendClientMessageToAll(-1, "{ffffff} Prieþastis: {FFAF00}Speed Hack.");

					IsmestiZaideja(i, 100);

					continue;
				}
			}
		}

		if(!BE_Play_Check[i]) continue;

		vehicleid = GetPlayerVehicleID(i);

		if(!vehicleid) continue;

		GetVehicleHealth(vehicleid, VehicleHealth);

		if(VehicleHealth > BE_MIN_HLS) continue;

		GetVehicleVelocity(vehicleid, VehicleSpeed[0], VehicleSpeed[1], VehicleSpeed[2]);

		if(floatabs(VehicleSpeed[0]) > floatabs(VehicleSpeed[1]))
		{
			if(floatabs(VehicleSpeed[0]) > BE_MAX_SPD)
			{
				VehicleHealth = BE_MAX_SPD / floatabs(VehicleSpeed[0]);

				SetVehicleVelocity(vehicleid, VehicleSpeed[0] * VehicleHealth, VehicleSpeed[1] * VehicleHealth, VehicleSpeed[2]);
			}
		}
		else
		{
			if(floatabs(VehicleSpeed[1]) > BE_MAX_SPD)
			{
				VehicleHealth = BE_MAX_SPD / floatabs(VehicleSpeed[1]);

				SetVehicleVelocity(vehicleid, VehicleSpeed[0] * VehicleHealth, VehicleSpeed[1] * VehicleHealth, VehicleSpeed[2]);
			}
		}
	}

	return 1;
}

stock ZinuteRacija(pranesimas[], darboid)
{
	foreach(Player, i)
	{
		switch(darboid)
		{
			case POLICIJA:
			{
				if(IsPlayerConnected(i))
				{
					if(PI[i][specialybe] == POLICIJA)
					{
						SendClientMessage(i, -1, pranesimas);
					}
				}
			}

			case MEDIKAI:
			{
				if(IsPlayerConnected(i))
				{
					if(PI[i][specialybe] == MEDIKAI)
					{
						SendClientMessage(i, -1, pranesimas);
					}
				}
			}
			case TAXI:
			{
				if(IsPlayerConnected(i))
				{
					if(PI[i][specialybe] == TAXI)
					{
						SendClientMessage(i, -1, pranesimas);
					}
				}
			}
			case KURJERIAI:
			{
				if(IsPlayerConnected(i))
				{
					if(PI[i][specialybe] == KURJERIAI)
					{
						SendClientMessage(i, -1, pranesimas);
					}
				}
			}

			case MECHANIKAI:
			{
				if(IsPlayerConnected(i))
				{
					if(PI[i][specialybe] == MECHANIKAI)
					{
						SendClientMessage(i, -1, pranesimas);
					}
				}
			}

			case DYLERIAI:
			{
				if(IsPlayerConnected(i))
				{
					if(PI[i][specialybe] == DYLERIAI)
					{
						SendClientMessage(i, -1, pranesimas);
					}
				}
			}

			case FURISTAI:
			{
				if(IsPlayerConnected(i))
				{
					if(PI[i][specialybe] == FURISTAI)
					{
						SendClientMessage(i, -1, pranesimas);
					}
				}
			}

			case PICAI:
			{
				if(IsPlayerConnected(i))
				{
					if(PI[i][specialybe] == PICAI)
					{
						SendClientMessage(i, -1, pranesimas);
					}
				}
			}

			case KELIAI:
			{
				if(IsPlayerConnected(i))
				{
					if(PI[i][specialybe] == KELIAI)
					{
						SendClientMessage(i, -1, pranesimas);
					}
				}
			}

			case AUTOBUSAI:
			{
				if(IsPlayerConnected(i))
				{
					if(PI[i][specialybe] == AUTOBUSAI)
					{
						SendClientMessage(i, -1, pranesimas);
					}
				}
			}

			// ToDo: bûtinai pridëti naujà kanalà atsiradus darbui.
		}
	}
}

stock GiveStars(playerid, stars)
{
	PI[playerid][Ieskomas] += stars;

	new str[128];

	format(str, sizeof(str), "~y~[]~w~ ITARIMO LYGIS:~R~ %d", PI[playerid][Ieskomas]);
	PlayerTextDrawSetString(playerid, hudas_p[playerid][1], str);
}

stock JailPlayer(playerid, time) // by Johurt
{
	PI[playerid][ikalintas] 		= true;
	PI[playerid][kalejimo_laikas] 	+= time * 60;
	PI[playerid][Ieskomas] 			= 0;
	PI[playerid][beglys] = false;

	new str[128];

	format(str, sizeof(str), "~y~[]~w~ ITARIMO LYGIS:~R~ %d", PI[playerid][Ieskomas]);
	PlayerTextDrawSetString(playerid, hudas_p[playerid][1], str);

	SetPlayerInterior			(playerid, 0);
	SetPlayerVirtualWorld		(playerid, 0);
	AC_SetPlayerPos 			(playerid, -346.1986,1138.3914,20.3684);
	SetPlayerFacingAngle		(playerid, 180.00);
	SetPlayerHealthEx			(playerid, 100.0);
	Surakinti 					(playerid, true);
	TextDrawHideForPlayer		(playerid, KalejimoLaikoTd[playerid]);
	TextDrawShowForPlayer		(playerid, KalejimoLaikoTd[playerid]);
	DisableAllPlayerCheckpoints	(playerid);
	ac_ResetPlayerWeapons				(playerid);

	if(PI[playerid][uniformd]) 	SetPlayerSkin(playerid, PI[playerid][uniforma]);
	else 						SetPlayerSkin(playerid, PI[playerid][drabuziai]);

	if(!PI[playerid][mButKalejme]) PI[playerid][mButKalejme] = true;

	return 1;
}

stock UnjailPlayer(playerid) // by Johurt
{
	PI[playerid][ikalintas] 		= false;
	PI[playerid][kalejimo_laikas] 	= 0;
	PI[playerid][beglys] = false;

	SetPlayerInterior			(playerid, 0);
	SetPlayerVirtualWorld		(playerid, 0);
	AC_SetPlayerPos 			(playerid, -1605.5730,721.2761,11.9729);
	SetPlayerFacingAngle		(playerid, 0.00);
	SetPlayerHealthEx 			(playerid, 99.0);
	Surakinti 					(playerid, true);
	TextDrawHideForPlayer		(playerid, KalejimoLaikoTd[playerid]);
	DisableAllPlayerCheckpoints	(playerid);

	if(PI[playerid][uniformd]) 	SetPlayerSkin(playerid, PI[playerid][uniforma]);
	else 						SetPlayerSkin(playerid, PI[playerid][drabuziai]);

	return 1;
}

stock MovePlayerToJail(playerid) // by Johurt
{
	PI[playerid][ikalintas] = true;
	PI[playerid][Ieskomas] 			= 0;
	PI[playerid][beglys] = false;

	new str[128];

	format(str, sizeof(str), "~y~[]~w~ ITARIMO LYGIS:~R~ %d", PI[playerid][Ieskomas]);
	PlayerTextDrawSetString(playerid, hudas_p[playerid][1], str);

	SetPlayerInterior			(playerid, 0);
	SetPlayerVirtualWorld		(playerid, 0);
	AC_SetPlayerPos 			(playerid, -346.1986,1138.3914,20.3684);
	SetPlayerFacingAngle		(playerid, 180.0);
	SetPlayerHealthEx			(playerid, 100.0);
	Surakinti 					(playerid, true);
	TextDrawHideForPlayer		(playerid, KalejimoLaikoTd[playerid]);
	TextDrawShowForPlayer		(playerid, KalejimoLaikoTd[playerid]);
	ac_ResetPlayerWeapons				(playerid);

	if(PI[playerid][uniformd]) 	SetPlayerSkin(playerid, PI[playerid][drabuziai]);
	else 						SetPlayerSkin(playerid, PI[playerid][uniforma]);

	return 1;
}

stock CheckMute(playerid) // by Johurt
{
	if(PI[playerid][Muted] > gettime())
	{
		new String[128];

		format(String, sizeof(String), "{ffffff} Jus negalite raðyti, kadangi esate uþtildytas (%s)!", ConvertSeconds(PI[playerid][Muted] - gettime()));
		SendClientMessage(playerid, -1, String);

		return 1;
	}

	return 0;
}

f_public: Sekundinis2() return SendClientMessageToAll(-1, " ");

f_public: Sekundinis3() return VykstaGrobimas = -1, GrobimoLaikas = 0;

stock CountGangMembersInterior(gangid, interiorid)
{
	new count;

	foreach(Player, p)
	{
		if(PI[p][gMember] == gangid)
		{
			if(GetPlayerInterior(p) == interiorid)
			{
				count ++;
			}
		}
	}

	return count;
}

stock RespawnPlayerInDazasvydis(p)
{
	if(Dazasvydis[p] != 0)
	{
		switch(Dazasvydis[p])
		{
			case GELTONAS:
			{
				SetPlayerSkin 	(p, GELTONU_SKIN);
				AC_SetPlayerPos (p, -2651.4290,2591.8848,-99.0178);
			}

			case ZALIAS:
			{
				SetPlayerSkin 	(p, ZALIU_SKIN);
				AC_SetPlayerPos (p, -2613.5020,2627.5459,-99.0178);
			}
		}

		PI[p][JustDie]            = 0;
		PI[p][HaveTimeUntilDeath] = 0;

		ac_ResetPlayerWeapons 		(p);
		ac_GivePlayerWeapon 		(p, 24, 2000);
		ac_GivePlayerWeapon 		(p, 29, 2000);
		UzsaldytiZaideja 	(p, 3000);
		SetPlayerHealthEx 	(p, 99.0);
		SetPlayerArmourEx 	(p, 0);
	}

	return 1;
}


stock RespawnAllDazasvydis()
{
	for(new p, size = GetPlayerPoolSize(); p <= size; p++)
	{
		if(IsPlayerConnected(p))
		{
			if(Dazasvydis[p] != 0)
			{
				gPointss = 0, zPoints = 0, rTime = gettime() + 303;

				switch(Dazasvydis[p])
				{
					case GELTONAS: 	AC_SetPlayerPos (p, -2651.4290,2591.8848,-99.0178);
					case ZALIAS: 	AC_SetPlayerPos (p, -2613.5020,2627.5459,-99.0178);
				}
				ac_ResetPlayerWeapons	 	(p);
				ac_GivePlayerWeapon 	 	(p, 24, 2000);
				ac_GivePlayerWeapon 	 	(p, 29, 2000);
				UzsaldytiZaideja 	(p, 3000);
				SetPlayerHealthEx 	(p, 99.0);
				SetPlayerArmourEx 	(p, 0);
			}
		}
	}

	return 1;
}

stock SendMessageToDazasvydis(Stringas[])
{
	for(new p, size = GetPlayerPoolSize(); p <= size; p++)
	{
		if(IsPlayerConnected(p))
		{
			if(Dazasvydis[p] != 0)
			{
				SendClientMessage(p, -1, Stringas);
			}
		}
	}

	return 1;
}

f_public: Sekundinis()
{
	new Float:pPos[3];
	new Float:pgyvkes, Float:parmke;

	//fix_SetActorPos(LeduPardavejas[0], -2286.6082,146.9473,35.3125,314.2600);
	fix_SetActorPos(LeduPardavejas[0], -1986.9349,205.5396,27.6875,178.4052);
	fix_SetActorPos(LeduPardavejas[1], -2384.7585,-584.4057,132.1172,266.4204);
	//fix_SetActorPos(HotDoguPardavejas[0], -1998.4816,172.3351,27.6875,300.7328);
	fix_SetActorPos(HotDoguPardavejas[1], -2516.6299,-16.2416,25.6172,301.6084);
	fix_SetActorPos(HotDoguPardavejas[2], -2692.1990,385.4088,4.3750,224.5258);
	fix_SetActorPos(HotDoguPardavejas[3], -2150.9888,-436.2601,35.3430,45.3817); // greitas maistas
	fix_SetActorPos(HotDoguPardavejas[4], -2145.6023,-425.2049,35.3359,64.1818);
	fix_SetActorPos(HotDoguPardavejas[5], -2093.7156,-397.3450,35.5313,38.7781);
	fix_SetActorPos(HotDoguPardavejas[6], -2036.3505,-397.7895,35.5313,7.7343);
	fix_SetActorPos(HotDoguPardavejas[7], -1993.5625,205.2363,27.6875,180.5986); // greitas maistas
	//fix_SetActorPos(HotDoguPardavejas[8], -1993.2911,210.7586,27.6866,88.8288);
	fix_SetActorPos(HotDoguPardavejas[9], -2674.7810,633.3792,14.4529,176.2495);
	fix_SetActorPos(Botas[0], 790.5335,-1049.9612,-5.9366,193.2879); // Aukojimo fondas
	fix_SetActorPos(Botas[1], -2032.5309,-409.8280,2.2260,239.6252); // El. parduotuvë
	fix_SetActorPos(Botas[2], -27.5818,-91.6318,1003.5469,0.3047); // Parduotuvë
	fix_SetActorPos(Botas[3], -27.5818,-91.6318,1003.5469,0.3047); // Parduotuvë
	fix_SetActorPos(Botas[4], 1094.9764,1277.9775,-11.4176,210.6642); // VM
	fix_SetActorPos(Botas[5], -1950.9066,257.1566,41.5694,357.8398); // Motociklo pirkimas
	fix_SetActorPos(Botas[6], -1946.7262,257.3602,41.5694,357.8398); // Ðalmo pirkimas
	fix_SetActorPos(Botas[7], -1953.7412,300.1701,34.8967,82.1040); // Automobiliø pirkimas
	fix_SetActorPos(Botas[8], 494.8954,-77.4619,998.7578,359.9153); // Baras
	fix_SetActorPos(Botas[9], -1834.2743,-600.9774,-28.6716,266.3425); // Bankas
	//fix_SetActorPos(Botas[10], -1571.8627,684.8633,7.1800,268.7306); // PD
	fix_SetActorPos(Botas[11], -223.3077,1405.0229,27.7734,87.1610); // Baras
	fix_SetActorPos(Botas[12], 312.3989,-167.7665,999.5938,359.9069); // Ginklø parduotuvë
	fix_SetActorPos(Botas[13], 359.7139,173.6387,1008.3893,267.1730); // Vyriausybë
	fix_SetActorPos(Botas[14], 501.8304,-18.7600,1000.6719,87.6957); // Naktinis klubas
	fix_SetActorPos(Botas[15], 209.5917,-98.7054,1005.2578,179.4811); // Drabuþiø parduotuvë
	fix_SetActorPos(Botas[16], 206.8987,-98.7053,1005.2578,178.8544); // Drabuþiø parduotuvë
	fix_SetActorPos(Botas[17], -145.3290,-206.3896,-14.00,206.1604); // Transporto registracija
	fix_SetActorPos(Botas[18], -149.4020,-209.6677,-16.1606,269.6469); // Transporto atstatymas
	fix_SetActorPos(Botas[19], 368.7816,-4.4919,1001.8516,177.9335); // Cluckin Bell
	fix_SetActorPos(Botas[20], 368.7816,-4.4919,1001.8516,177.9335); // Cluckin Bell
	fix_SetActorPos(Botas[21], 368.7816,-4.4919,1001.8516,177.9335); // Cluckin Bell
	fix_SetActorPos(Botas[22], 375.7986,-65.8483,1001.5078,178.9656); // Burger Shot
	fix_SetActorPos(Botas[23], 375.7986,-65.8483,1001.5078,178.9656); // Burger Shot
	fix_SetActorPos(Botas[24], 373.4510,-117.2777,1001.4995,183.2556); // Picerija
	fix_SetActorPos(Botas[25], 1077.8348,2295.3955,-54.1766,269.6234); // Ligoninë
	fix_SetActorPos(Botas[26], 373.4510,-117.2777,1001.4995,183.2556); // Picerija
	fix_SetActorPos(Botas[27], 368.7816,-4.4919,1001.8516,177.9335); // Cluckin Bell
	fix_SetActorPos(Botas[28], 375.7986,-65.8483,1001.5078,178.9656); // Burger Shot
	fix_SetActorPos(Botas[29], 373.4510,-117.2777,1001.4995,183.2556); // Picerija
	fix_SetActorPos(Botas[30], -2472.5420,252.6729,35.1719,359.4268); // Metalo supirkimas
	fix_SetActorPos(Botas[31], -2443.4080,252.4669,35.1719,356.8968); // Þuvies supirkimas
	fix_SetActorPos(Botas[32], -1796.6779,1407.2195,7.6474,107.9188); // Licenzijø centras
	fix_SetActorPos(Botas[33], -1854.9495,-973.0153,-4.9061,359.5314); // Degalinë
	fix_SetActorPos(Botas[34], -1854.9495,-973.0153,-4.9061,359.5314); // Degalinë
	fix_SetActorPos(Botas[35], -1854.9495,-973.0153,-4.9061,359.5314); // Degalinë
	fix_SetActorPos(Botas[39], 1077.8141,2289.7380,-54.1766,270.7087); // Ligoninë

	SetActorVirtualWorld(Botas[19], CLUCKIN1); SetActorVirtualWorld(Botas[20], CLUCKIN2); SetActorVirtualWorld(Botas[21], CLUCKIN3); SetActorVirtualWorld(Botas[21], CLUCKIN4);
	SetActorVirtualWorld(Botas[22], BURGER1); SetActorVirtualWorld(Botas[23], BURGER2); SetActorVirtualWorld(Botas[28], BURGER3);
	SetActorVirtualWorld(Botas[24], PICERIJA1); SetActorVirtualWorld(Botas[26], PICERIJA2); SetActorVirtualWorld(Botas[26], PICERIJA3);
	SetActorVirtualWorld(Botas[2], MAISTO_PARDUOTUVE1); SetActorVirtualWorld(Botas[3], MAISTO_PARDUOTUVE2);
	SetActorVirtualWorld(Botas[33], STOTIES_DEGALINE); SetActorVirtualWorld(Botas[34], VIDUTINE_DEGALINE); SetActorVirtualWorld(Botas[35], DIDELE_DEGALINE);

	for(new p, size = GetPlayerPoolSize(); p <= size; p++)
	{
		if(IsPlayerConnected(p))
		{
			if(Prisijunges[p])
			{
				if(PI[p][Muted] > gettime())
				{	
					new String[128];
					format(String, 128, "Uþtildytas {FFAF00}%s", ConvertSeconds(PI[p][Muted] - gettime()));
					SetPlayerChatBubble (p, String, 0xFFFFFFFF, 15.0, 999);
				}

				//___________________(_| Gaujø zonø sistema |_)___________________//
				for(new g = 0; g < HowMuchGangZonesIs; g ++)
				{
					new String[216];

					if(GangZonesSystem[g][gZoneFlashing] > 0)
		   			{
				   	    if(GangZonesSystem[g][gZoneTimeLeft] > gettime())
				   	    {
				   	    	switch(GangZonesSystem[g][gZoneFlashing])
					    	{
					    	    case GANG_ZONE_OWNER_ID_1: GangZoneFlashForAll(GangZonesSystem[g][gZoneID], GANG_ZONE_COLOR_ID_1);
						        case GANG_ZONE_OWNER_ID_2: GangZoneFlashForAll(GangZonesSystem[g][gZoneID], GANG_ZONE_COLOR_ID_2);
						        case GANG_ZONE_OWNER_ID_3: GangZoneFlashForAll(GangZonesSystem[g][gZoneID], GANG_ZONE_COLOR_ID_3);
							}

				   	        if(IsPlayerInGangZone(p, g))
				   	        {
				   	        	new gZoneGangID = 0;
								switch(GangZonesSystem[g][gZoneFlashing])
					    		{
					    		    case GANG_ZONE_OWNER_ID_1: gZoneGangID = GANG_ID_1;
						        	case GANG_ZONE_OWNER_ID_2: gZoneGangID = GANG_ID_2;
						        	case GANG_ZONE_OWNER_ID_3: gZoneGangID = GANG_ID_3;
								}

								if(GangMemberInGangZone(g, gZoneGangID))
								{
							        format(String, sizeof(String), "~w~Liko: ~g~%s", ConvertSeconds(GangZonesSystem[g][gZoneTimeLeft] - gettime()));
			    		           	GameTextForPlayer(p, String, 999, 4);
								}
							}
			 			}
			 			else
			 			{
			 				new gZoneGangID = 0;
			 				switch(GangZonesSystem[g][gZoneFlashing])
				    		{
				    		    case GANG_ZONE_OWNER_ID_1: gZoneGangID = GANG_ID_1;
					        	case GANG_ZONE_OWNER_ID_2: gZoneGangID = GANG_ID_2;
					        	case GANG_ZONE_OWNER_ID_3: gZoneGangID = GANG_ID_3;
							}

			 				if(GangMemberInGangZone(g, gZoneGangID))
			 				{
			 					GangZoneStopFlashForAll(GangZonesSystem[g][gZoneID]);

							    switch(GangZonesSystem[g][gZoneFlashing])
							    {
							        case GANG_ZONE_OWNER_ID_1:
							        {
							            GangZonesSystem[g][gZoneOwner] = GANG_ZONE_OWNER_ID_1;

							            GangZoneShowForAll(GangZonesSystem[g][gZoneID], GANG_ZONE_COLOR_ID_1);

							            format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Sveikiname, jûsø gauja uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_1][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_1, String);

										format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gauja {FFAF00}%s{ffffff} uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_2][gTitle], GangInfo[GANG_ZONE_OWNER_ID_1][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_2, String);

										format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gauja {FFAF00}%s{ffffff} uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_3][gTitle], GangInfo[GANG_ZONE_OWNER_ID_1][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_3, String);
							        }
							        case GANG_ZONE_OWNER_ID_2:
							        {
							            GangZonesSystem[g][gZoneOwner] = GANG_ZONE_OWNER_ID_2;

							            GangZoneShowForAll(GangZonesSystem[g][gZoneID], GANG_ZONE_COLOR_ID_2);

							            format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Sveikiname, jûsø gauja uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_2][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_2, String);

										format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gauja {FFAF00}%s{ffffff} uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_1][gTitle], GangInfo[GANG_ZONE_OWNER_ID_2][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_1, String);

										format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gauja {FFAF00}%s{ffffff} uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_3][gTitle], GangInfo[GANG_ZONE_OWNER_ID_2][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_3, String);
							        }
							        case GANG_ZONE_OWNER_ID_3:
							        {
							            GangZonesSystem[g][gZoneOwner] = GANG_ZONE_OWNER_ID_3;

							            GangZoneShowForAll(GangZonesSystem[g][gZoneID], GANG_ZONE_COLOR_ID_3);

							            format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Sveikiname, jûsø gauja uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_3][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_3, String);

										format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gauja {FFAF00}%s{ffffff} uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_2][gTitle], GangInfo[GANG_ZONE_OWNER_ID_3][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_2, String);

										format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gauja {FFAF00}%s{ffffff} uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_1][gTitle], GangInfo[GANG_ZONE_OWNER_ID_3][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_1, String);
							        }
							    }

							    GangZonesSystem[g][gZoneFlashing] = 0;

							    SaveAllGangZones();
							}
							else
						    {
						        GangZoneStopFlashForAll(GangZonesSystem[g][gZoneID]);

								switch(GangZonesSystem[g][gZoneOwner])
			 				    {
		 					        case GANG_ZONE_OWNER_ID_1: GangZoneShowForAll(GangZonesSystem[g][gZoneID], GANG_ZONE_COLOR_ID_1);
			 				        case GANG_ZONE_OWNER_ID_2: GangZoneShowForAll(GangZonesSystem[g][gZoneID], GANG_ZONE_COLOR_ID_2);
			 				        case GANG_ZONE_OWNER_ID_3: GangZoneShowForAll(GangZonesSystem[g][gZoneID], GANG_ZONE_COLOR_ID_3);
								}

								switch(GangZonesSystem[g][gZoneFlashing])
			 				    {
		 					        case GANG_ZONE_OWNER_ID_1:
			 				        {
			 				            format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Jums nepavyko uþimti naujos teritorijos!", GangInfo[GANG_ZONE_OWNER_ID_1][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_1, String);

										format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gaujai {FFAF00}%s{ffffff} nepavyko uþimti naujos teritorijos!", GangInfo[GANG_ZONE_OWNER_ID_2][gTitle], GangInfo[GANG_ZONE_OWNER_ID_1][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_2, String);

										format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gaujai {FFAF00}%s{ffffff} nepavyko uþimti naujos teritorijos!", GangInfo[GANG_ZONE_OWNER_ID_3][gTitle], GangInfo[GANG_ZONE_OWNER_ID_1][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_3, String);
			 				        }
			 				        case GANG_ZONE_OWNER_ID_2:
			 				        {
			 				            format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Jums nepavyko uþimti naujos teritorijos!", GangInfo[GANG_ZONE_OWNER_ID_2][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_2, String);

										format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gaujai {FFAF00}%s{ffffff} nepavyko uþimti naujos teritorijos!", GangInfo[GANG_ZONE_OWNER_ID_1][gTitle], GangInfo[GANG_ZONE_OWNER_ID_2][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_1, String);

										format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gaujai {FFAF00}%s{ffffff} nepavyko uþimti naujos teritorijos!", GangInfo[GANG_ZONE_OWNER_ID_3][gTitle], GangInfo[GANG_ZONE_OWNER_ID_2][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_3, String);
			 				        }
			 				        case GANG_ZONE_OWNER_ID_3:
			 				        {
			 				            format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Jums nepavyko uþimti naujos teritorijos!", GangInfo[GANG_ZONE_OWNER_ID_3][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_3, String);

										format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gaujai {FFAF00}%s{ffffff} nepavyko uþimti naujos teritorijos!", GangInfo[GANG_ZONE_OWNER_ID_2][gTitle], GangInfo[GANG_ZONE_OWNER_ID_3][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_2, String);

										format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gaujai {FFAF00}%s{ffffff} nepavyko uþimti naujos teritorijos!", GangInfo[GANG_ZONE_OWNER_ID_1][gTitle], GangInfo[GANG_ZONE_OWNER_ID_3][gTitle]);
										SendMessageToGangMembers(GANG_ZONE_OWNER_ID_1, String);
			 				        }
								}

						        GangZonesSystem[g][gZoneFlashing] = 0;
						        GangZonesSystem[g][gZoneTimeLeft] = 0;
						    }
			 			}
					}
				}

				switch(PI[p][specialybe])
				{
					case MEDIKAI:
					{
						if(PI[p][uniformd])
						{
							if(PI[p][Kraunasi] == false)
							{
								if(IsPlayerInAnyVehicle(p))
								{
									new vehicleid = GetPlayerVehicleID(p);

									if(MedikuMasina[0] <= vehicleid <= MedikuMasina[sizeof(MedikuMasina) - 1])
									{
										if(IsPlayerInRangeOfPoint(p, 7.0, PI[p][DarboCP][0], PI[p][DarboCP][1], PI[p][DarboCP][2]))
										{
											if(TuriIskvietima[p])
											{
												PI[p][Kraunasi] 	= true;
												PI[p][GydymoLaikas]	= gettime() + (20 + random(40));

												RemovePlayerMapIcon 	(p, 99);
												TogglePlayerControllable(p, false);
							   				}
										}
									}
								}
							}
							else
							{
								new str[128];

								if(PI[p][GydymoLaikas] > gettime()) // Krovinys dar kraunasi
								{
									if(TuriIskvietima[p])
									{
										format(str, 128, "~g~Atliekate medicinos pagalba!~n~~g~Liko: ~r~%s", ConvertSeconds(PI[p][GydymoLaikas] - gettime()));
										GameTextForPlayer(p, str, 1000, 4);
									}
								}
								else
								{
									if(TuriIskvietima[p])
									{

										TuriIskvietima[p] 	= false;
										PI[p][Kraunasi] 	= false;

										new RandomMoney = 50 + random(50);

										GivePlayerMoneyA(p, RandomMoney);

					 					SendClientMessage(p, -1, "{ffffff} Sëkmingai atlikote medicinos pagalbà!");

					 					format(str, 128, "{ffffff} Uþ atliktà darbà gavote {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(RandomMoney));
										SendClientMessage(p, -1, str);

										TogglePlayerControllable(p, true);
										SetPlayerSpecialAction  (p, SPECIAL_ACTION_NONE);
									}
								}
							}
						}
					}

					case PICAI:
					{
						if(PI[p][uniformd])
						{
							if(GetPlayerState(p) == PLAYER_STATE_ONFOOT)
							{
								if(NesaPica[p] == 1 && IsPlayerAttachedObjectSlotUsed(p, PIZZA_ATTACH_SLOT))
								{
									if(IsPlayerInRangeOfPoint(p, 2.0, PI[p][DarboCP][0], PI[p][DarboCP][1], PI[p][DarboCP][2]))
									{
										NesaPica[p] = 0;

										ClearAnimations 			(p);
										SetPlayerSpecialAction 		(p, SPECIAL_ACTION_NONE);
			        					RemovePlayerAttachedObject 	(p, PIZZA_ATTACH_SLOT);
			        					RemovePlayerMapIcon 		(p, 99);

			        					new Atlyginimas, Arbatpinigiai;

										Atlyginimas 	= 50 + random(10);
										Arbatpinigiai	= 5 + random(5);

			        					new String[128];

			        					format(String, sizeof(String), "{ffffff} Sëkmingai pristatëte picà. Uþ pristatytà picà gavote {FFAF00}$%d{ffffff}!", Atlyginimas);
			        					SendClientMessage(p, -1, String);

			        					format(String, sizeof(String), "{ffffff} Taip pat gavote {FFAF00}$%d{ffffff} arbatpinigiø!", Arbatpinigiai);
			        					SendClientMessage(p, -1, String);

			        					PicaCP[p] = false;

			        					GivePlayerMoneyA (p, Arbatpinigiai + Atlyginimas);
			        					GameTextForPlayer(p, "~g~Pica pristatyta", 1500, 3);
			        				}
								}
							}
						}
					}

					case 3, 11:
					{
						if(PI[p][Kraunasi] == true)
						{
							new String[160];

							if(PI[p][KrovimoLaikas] > gettime()) // Krovinys dar kraunasi
							{
								format(String, 128, "~g~Krovinys kraunasi!~n~~g~Liko: ~r~%s", ConvertSeconds(PI[p][KrovimoLaikas] - gettime()));
								GameTextForPlayer(p, String, 1000, 4);

								TogglePlayerControllable(p, false);
							}
							else // Krovinys pakrautas
							{
								new vehid = GetPlayerVehicleID(p);

								PI[p][Kraunasi] = false;

								TogglePlayerControllable(p, true);
								SetPlayerSpecialAction  (p, SPECIAL_ACTION_NONE);

								GameTextForPlayer(p, "~y~Krovinys pakrautas!", 2000, 4);
								GivePlayerMoneyA (p, -vKrovinioVerte[vehid]);

								if(PI[p][specialybe] == 3) format(String, sizeof(String), "{ffffff} Krovinys {FFAF00}%s {ffffff}sëkmingai pakrautas. Pristatykite kroviná á checkpointu paþymëtà vietà!", vKoksKrovinys(vehid));
								if(PI[p][specialybe] == 11) format(String, sizeof(String), "{ffffff} Krovinys {FFAF00}%s {ffffff}sëkmingai pakrautas. Pristatykite kroviná á checkpointu paþymëtà vietà!", vKoksKrovinys2(vehid));

								SendClientMessage(p, -1, String);

								GetVehiclePos(vehid, VehicleInfo[vehid][T_Poss][0], VehicleInfo[vehid][T_Poss][1], VehicleInfo[vehid][T_Poss][2]);

								switch(PI[p][specialybe])
								{
									case 3:
									{
										format(String, sizeof(String), "Krovinys: {ffff00}%s", vKoksKrovinys(vehid));
										VehicleInfo[vehid][t_text] = Create3DTextLabel(String, -1, VehicleInfo[vehid][T_Poss][0], VehicleInfo[vehid][T_Poss][1], VehicleInfo[vehid][T_Poss][2] + 5, 10.0, 0, 1);
										Attach3DTextLabelToVehicle(Text3D: VehicleInfo[vehid][t_text], vehid, 0, 0, 0);

										switch(vKrovinys[vehid])
										{
											case 1: // El. Prekës
											{
												SetPlayerCheckpointEx(p, 1, -1978.9082,480.6208,29.0147, 5), vK_Pos[vehid][0] = -1978.9082, vK_Pos[vehid][1] = 480.6208, vK_Pos[vehid][2] = 29.0147;
											}

											case 2: // Maisto prekës
											{
												switch(random(11))
												{
													case 0: SetPlayerCheckpointEx(p, 1, -1978.9082,480.6208,29.0147, 5), vK_Pos[vehid][0] = -1978.9082, vK_Pos[vehid][1] = 480.6208, vK_Pos[vehid][2] = 29.0147;
													case 1: SetPlayerCheckpointEx(p, 1, -2460.1628,793.5823,35.1719, 5), vK_Pos[vehid][0] = -2460.1628, vK_Pos[vehid][1] = 793.5823, vK_Pos[vehid][2] = 35.1719;
													case 2: SetPlayerCheckpointEx(p, 1, -2346.8477,990.8015,50.7029, 5), vK_Pos[vehid][0] = -2346.8477, vK_Pos[vehid][1] = 990.8015, vK_Pos[vehid][2] = 50.7029;
													case 3: SetPlayerCheckpointEx(p, 1, -2319.9229,-154.7353,35.5756, 5), vK_Pos[vehid][0] = -2319.9229, vK_Pos[vehid][1] = -154.7353, vK_Pos[vehid][2] = 35.5756;
													case 4: SetPlayerCheckpointEx(p, 1, -1909.2449,820.3981,35.1719, 5), vK_Pos[vehid][0] = -1909.2449, vK_Pos[vehid][1] = 820.3981, vK_Pos[vehid][2] = 35.1719;
													case 5: SetPlayerCheckpointEx(p, 1, -2664.2966,237.4569,4.3359, 5), vK_Pos[vehid][0] = -2664.2966, vK_Pos[vehid][1] = 237.4569, vK_Pos[vehid][2] = 4.3359;
													case 6: SetPlayerCheckpointEx(p, 1, -1810.9454,616.2861,35.1719, 5), vK_Pos[vehid][0] = -1810.9454, vK_Pos[vehid][1] = 616.2861, vK_Pos[vehid][2] = 35.1719;
													case 7: SetPlayerCheckpointEx(p, 1, -2260.6919,555.1562,35.0156, 5), vK_Pos[vehid][0] = -2260.6919, vK_Pos[vehid][1] = 555.1562, vK_Pos[vehid][2] = 35.0156;
													case 8: SetPlayerCheckpointEx(p, 1, -1720.2742,1364.4855,7.1875, 5), vK_Pos[vehid][0] = -1720.2742, vK_Pos[vehid][1] = 1364.4855, vK_Pos[vehid][2] = 7.1875;
													case 9: SetPlayerCheckpointEx(p, 1, -1908.0621,442.2690,35.1709, 5), vK_Pos[vehid][0] = -1908.0621, vK_Pos[vehid][1] = 442.2690, vK_Pos[vehid][2] = 35.1709;
													case 10: SetPlayerCheckpointEx(p, 1, -1804.1688,953.0773,24.8906, 5), vK_Pos[vehid][0] = -1804.1688, vK_Pos[vehid][1] = 953.0773, vK_Pos[vehid][2] = 24.8906;
												}
											}

											case 3: // Drabuþiai
											{
												SetPlayerCheckpointEx(p, 1, -1978.9082,480.6208,29.0147, 5), vK_Pos[vehid][0] = -1978.9082; vK_Pos[vehid][1] = 480.6208; vK_Pos[vehid][2] = 29.0147;
											}

											case 4: // Alkoholiniai gërimai
											{
												SetPlayerCheckpointEx(p, 1, -2618.5977,1421.0486,7.0938, 5), vK_Pos[vehid][0] = -2618.5977, vK_Pos[vehid][1] = 1421.0486, vK_Pos[vehid][2] = 7.0938;
											}

											case 5: // Automobiliø dalys
											{
												SetPlayerCheckpointEx(p, 1, -2690.8562,-32.4108,4.1594, 5), vK_Pos[vehid][0] = -2690.8562, vK_Pos[vehid][1] = -32.4108, vK_Pos[vehid][2] = 4.1594;
											}

											case 6: // Vaistai
											{
												SetPlayerCheckpointEx(p, 1, -2710.3147,591.4471,14.4531, 5), vK_Pos[vehid][0] = -2710.3147, vK_Pos[vehid][1] = 591.4471, vK_Pos[vehid][2] = 14.4531;
											}
										}
									}

									case 11:
									{
										format(String, sizeof(String), "Krovinys: {ffff00}%s", vKoksKrovinys2(vehid));
										VehicleInfo[vehid][t_text] = Create3DTextLabel(String, -1, VehicleInfo[vehid][T_Poss][0], VehicleInfo[vehid][T_Poss][1], VehicleInfo[vehid][T_Poss][2] + 5, 10.0, 0, 1);
										Attach3DTextLabelToVehicle(Text3D: VehicleInfo[vehid][t_text], IsTrailerAttachedToVehicle(vehid) ? GetVehicleTrailer(vehid) : vehid, 0, 0, 0);

										switch(vKrovinys[vehid])
										{
											case 2: // Policijos ginklai
											{
												SetPlayerCheckpointEx(p, 1, -1569.8213,707.2872,7.1875, 5), vK_Pos[vehid][0] = -1569.8213, vK_Pos[vehid][1] = 707.2872, vK_Pos[vehid][2] = 7.1875;
											}

											case 3: // Spec. bûrio ARAS ginklai
											{
												SetPlayerCheckpointEx(p, 1, -1265.6151,438.8593,7.1797, 5), vK_Pos[vehid][0] = -1265.6151, vK_Pos[vehid][1] = 438.8593, vK_Pos[vehid][2] = 7.1797;
											}

											case 4: // Ginklø parduotuvës ginklai
											{
												SetPlayerCheckpointEx(p, 1, -2613.2256,204.3152,4.8843, 5), vK_Pos[vehid][0] = -2613.2256; vK_Pos[vehid][1] = 204.3152; vK_Pos[vehid][2] = 4.8843;
											}

											case 5: // Automobiliø dalys
											{
												SetPlayerCheckpointEx(p, 1, -2185.8628,1084.8135,80.0078, 5), vK_Pos[vehid][0] = -2185.8628, vK_Pos[vehid][1] = 1084.8135, vK_Pos[vehid][2] = 80.0078;
											}

											case 6: // Alkoholiniai gërimai
											{
												switch(random(2))
												{
													case 0: SetPlayerCheckpointEx(p, 1, -2529.4343,1222.3375,37.4283, 5), vK_Pos[vehid][0] = -2529.4343, vK_Pos[vehid][1] = 1222.3375, vK_Pos[vehid][2] = 37.4283;
													case 1: SetPlayerCheckpointEx(p, 1, -2237.9639,-78.2105,35.3203, 5), vK_Pos[vehid][0] = -2237.9639, vK_Pos[vehid][1] = -78.2105, vK_Pos[vehid][2] = 35.3203;
												}
											}

											case 9: // Narkotikai
											{
												//SetPlayerCheckpointEx(p, 1, -1095.5690,-688.0779,32.0126, 5), vK_Pos[vehid][0] = -1095.5690, vK_Pos[vehid][1] = -688.0779, vK_Pos[vehid][2] = 32.0126;
												SetPlayerCheckpointEx(p, 1, -700.27, 953.03, 13.58, 5), vK_Pos[vehid][0] = -700.27, vK_Pos[vehid][1] = 953.03, vK_Pos[vehid][2] = 13.58;

												ZinuteRacija("{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Gavome informacijà, kad galimai link miesto vaþiuoja fûra su narkotikais!", POLICIJA);
												ZinuteRacija("{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Gavome informacijà, kad galimai link miesto vaþiuoja fûra su narkotikais!", 5);
											}

											case 10: // Ginklai
											{
												/*switch(random(2))
												{
													case 0: SetPlayerCheckpointEx(p, 1, -1041.3307,-654.9112,32.0078, 5), vK_Pos[vehid][0] = -1041.3307, vK_Pos[vehid][1] = -654.9112, vK_Pos[vehid][2] = 32.0078;
													case 1: SetPlayerCheckpointEx(p, 1, -1041.3307,-673.8675,32.0126, 5), vK_Pos[vehid][0] = -1041.3307, vK_Pos[vehid][1] = -673.8675, vK_Pos[vehid][2] = 32.0126;
												}*/
												SetPlayerCheckpointEx(p, 1, -700.27, 953.03, 13.58, 5), vK_Pos[vehid][0] = -700.27, vK_Pos[vehid][1] = 953.03, vK_Pos[vehid][2] = 13.58;
												 

												ZinuteRacija("{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Gavome informacijà, kad galimai link miesto vaþiuoja fûra su ginklais!", POLICIJA);
												ZinuteRacija("{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Gavome informacijà, kad galimai link miesto vaþiuoja fûra su ginklais!", 5);
											}
										}
									}
								}
							}
						}

						if(PI[p][Issikrauna] == true)
						{
							new String[150];

							if(PI[p][IssikrovimoLaikas] > gettime()) // Krovinys dar iðsikrauna
							{
								format(String, 128, "~g~Iskraunate krovini!~n~~g~Liko: ~r~%s", ConvertSeconds(PI[p][IssikrovimoLaikas] - gettime()));
								GameTextForPlayer(p, String, 1000, 4);

								TogglePlayerControllable(p, false);
							}
							else // Krovinys iðkrautas
							{
								new vehid = GetPlayerVehicleID(p);

								PI[p][Issikrauna] = false;

								switch(vKrovinys[vehid])
								{
									case 1:
									{
										if(PI[p][specialybe] == 3)
										{
											Laikrodziai += 15;
											Fotikai += 15;
											Navigacijos += 15;

											format(String, sizeof(String), "UPDATE `sinfo` SET `Laikrodziai` = '%d', `Fotikai` = '%d', `Navigacijos` = '%d'", Laikrodziai, Fotikai, Navigacijos);
											mysql_query(String);
										}
									}

									case 9:
									{
										if(PI[p][specialybe] == 11)
										{
											AddItemsToDocks(2);
										}
									}

									case 10:
									{
										if(PI[p][specialybe] == 11)
										{
											AddItemsToDocks(1);
										}
									}
								}

								TogglePlayerControllable(p, true);
								SetPlayerSpecialAction  (p, SPECIAL_ACTION_NONE);

								GameTextForPlayer(p, "~y~Krovinys iskrautas!", 2000, 4);
								GivePlayerMoneyA (p, vKrovinioAtlygis[vehid]);

								if(PI[p][specialybe] == 3)
								{
									format(String, sizeof(String), "{ffffff} Krovinys {FFAF00}%s {ffffff}sëkmingai iðkrautas. Gavote atlygá: {FFAF00}$%d{ffffff}!", vKoksKrovinys(vehid), vKrovinioAtlygis[vehid]);
                                    Pelnas[2] += vKrovinioAtlygis[vehid]/2;
								}
								if(PI[p][specialybe] == 11)
								{
									format(String, sizeof(String), "{ffffff} Krovinys {FFAF00}%s {ffffff}sëkmingai iðkrautas. Gavote atlygá: {FFAF00}$%d{ffffff}!", vKoksKrovinys2(vehid), vKrovinioAtlygis[vehid]);
                                    Pelnas[8] += vKrovinioAtlygis[vehid]/2;
								}
								SendClientMessage(p, -1, String);

								Delete3DTextLabel(VehicleInfo[vehid][t_text]);

								vKrovinys[vehid] = -1;
								vKrovinioVerte[vehid] = 0;
								vKrovinioAtlygis[vehid] = 0;
								vK_Pos[vehid][0] = 0.0;
								vK_Pos[vehid][1] = 0.0;
								vK_Pos[vehid][2] = 0.0;
								PI[p][KaPasikroves] 		= -1;
								PI[p][KrovinioVerte] 		= 0;
								PI[p][KrovinioAtlygis] 		= 0;
							}
						}
					}
				}

				/*if(PI[p][banded])
				{
					new KasAtrisa = ChoosedPlayer[p], String[128];

					switch(PI[KasAtrisa][BandoAtristi])
					{
						case -1: return 1;

						case 0:
						{
							format(String, 128, "{ffffff} Þaidëjas {FFAF00}%s {ffffff}jus atriðo!", GetPlayerNameEx(KasAtrisa));
							SendClientMessage(p, -1, String);

							format(String, 128, "{ffffff} Sëkmingai atriðote þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(p));
							SendClientMessage(KasAtrisa, -1, String);

			    			Suristi(p, true);

			    			PI[KasAtrisa][BandoAtristi]		= -1;
			    			PI[p][BandoAtristi]				= -1;
						}

						default:
						{
							PI[KasAtrisa][BandoAtristi] --;

							GameTextForPlayer(KasAtrisa, "~g~Bandote atristi zaideja!", 1000, 4);
						}
					}
				}

				if(PI[p][cuffed])
				{
					switch(PI[p][BandoAtsirakinti])
					{
						case -1: return 1;

						case 0:
						{
							switch(random(10))
							{
								case 0, 2, 4:
								{
									SendClientMessage(p, -1, "{ffffff} Atsirakinti nepavyko, nes sulauþëte vielà!");

									PI[p][Viela] --;
									PI[p][BandoAtsirakinti] = -1;
								}

								case 1, 3, 5:
								{
									SendClientMessage(p, -1, "{ffffff} Atsirakinti nepavyko, nes pametëte vielà!");

									PI[p][Viela] --;
									PI[p][BandoAtsirakinti] = -1;
								}

								default:
								{
			    					SendClientMessage 	(p, -1, "{ffffff} Jums pavyko atsirakinti!");
			    					Surakinti 			(p, true);
			    				}
							}
						}

						default:
						{
							PI[p][BandoAtsirakinti] --;

							GameTextForPlayer(p, "~g~Bandote atsirakinti!", 1000, 4);
						}
					}
				}*/

				switch(GetPlayerInterior(p))
				{
					case 0:
					{
						if(IsPlayerInZoneEx(p, SafetyZoneID[0]))
						{
							IsPlayerInZone[p] = true;
						}

						else if(IsPlayerInZoneEx(p, SafetyZoneID[1]))
						{
							IsPlayerInZone[p] = true;
						}

						else if(IsPlayerInZoneEx(p, SafetyZoneID[2]))
						{
							IsPlayerInZone[p] = true;
						}

						/*else if(IsPlayerInZoneEx(p, SafetyZoneID[3]))
						{
							IsPlayerInZone[p] = true;
						}

						else if(IsPlayerInZoneEx(p, SafetyZoneID[4]))
						{
							IsPlayerInZone[p] = true;
						}*/

						else
						{
							IsPlayerInZone[p] = false;
						}
					}

					case 30, 32, 35, 41, 9, 18, 42, 43, 40, 44, 17, 11, 46:
					{
						if(GetPlayerVirtualWorld(p) < 1)
						{
							IsPlayerInZone[p] = true;
						}
					}

					default: IsPlayerInZone[p] = false;
				}

				if(IsPlayerInZone[p])
				{
					for(new sz = 0; sz < 6; sz++) TextDrawShowForPlayer(p, saugi_zona_g[sz]);

					//if(GetPlayerInterior(p) != 40)
					switch(GetPlayerWeapon(p))
					{
						case 4, 8, 9, 16, 17, 18, 22..42:
						{
							if(PI[p][specialybe] != 1 && PI[p][specialybe] != 5)
							{
								SetPlayerArmedWeapon(p, 0);
							}
						}
					}
				}
				else
				{
					for(new sz = 0; sz < 6; sz++) TextDrawHideForPlayer(p, saugi_zona_g[sz]);
				}

				if(PI[p][laikrodis] == 1)
				{
					if(!LaikPasleptas[p])
					{
						for(new s = 0; s < 2; s++) PlayerTextDrawShow(p, TimeDateTD[p][s]);
					}
					else
					{
						for(new s = 0; s < 2; s++) PlayerTextDrawHide(p, TimeDateTD[p][s]);
					}
				}
				else
				{
					for(new s = 0; s < 2; s++) PlayerTextDrawHide(p, TimeDateTD[p][s]);
				}

				if(PI[p][pHealthCheck] < gettime() && PI[p][pHealthCheck] != -5)
				{
					GetPlayerHealth(p, pgyvkes);
					GetPlayerArmour(p, parmke);
					if(pgyvkes > PI[p][PlayerHealth])
					{
						SetPlayerHealth(p, PI[p][PlayerHealth]);
					}
					else
					{
						PI[p][PlayerHealth] = pgyvkes;
					}
					if(parmke > PI[p][PlayerArmour])
					{
						SetPlayerArmour(p, PI[p][PlayerArmour]);
					}
					else
					{
						PI[p][PlayerArmour] = parmke;
					}
				}

				if(PI[p][UsingDrugs] > 0)
				{
					PI[p][UsingDrugs] --;
				}

				if(PI[p][Ieskomas] > 0)
				{
					if(PI[p][AdminLevel] > LEVEL_VIP)
					{
						if(PI[p][AOD])
						{
							if(PI[p][AdminLevel] == LEVEL_OWNER)
							{
								SetPlayerColor(p, RED);
							}
							else
							{
								SetPlayerColor(p, 0x3AD73AAA);
							}
						}
						else
						{
							SetPlayerColor(p, 0xAD5BFF30);
						}
					}
					else
					{
						SetPlayerColor(p, 0xAD5BFF30);
					}
				}
				else
				{
					switch(PI[p][AdminLevel])
					{
						case LEVEL_VIP: SetPlayerColor(p, YELLOW);

						case LEVEL_FIRST..LEVEL_THIRD:
						{
							if(PI[p][AOD])
							{
								SetPlayerColor(p, 0x3AD73AAA);
							}
							else
							{
								SetPlayerColor(p, PLAYCOL_HIDDEN);
							}
						}

						case LEVEL_OWNER:
						{
							if(PI[p][AOD])
							{
								SetPlayerColor(p, RED);
							}
							else
							{
								SetPlayerColor(p, PLAYCOL_HIDDEN);
							}
						}

						default: SetPlayerColor(p, PLAYCOL_HIDDEN);
					}
				}

				/*default:
				{
					if(!PlayerInZone(p, -1701, 863, -1629, 906)) // jeigu ne DM zonoj
					{
						if(PI[p][gLicenzija] == false)
						{
							ac_ResetPlayerWeapons 		(p);
							SendClientMessage 	(p, -1, "{ffffff} Jus neturite ginklø licenzijos, todël ginklø turëti negalite!");
						}
					}
				}*/

				if(GetPlayerPing(p) >= MAX_PING_KICK)
				{
					if(Prisijunges[p])
					{
						if(PI[p][AdminLevel] < LEVEL_OWNER)
						{
							new String[216];

							format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}buvo iðmestas ið serverio!", GetPlayerNameEx(p));
							SendClientMessageToAll(-1, String);

							SendClientMessageToAll(-1, "{ffffff} Prieþastis: {FFAF00}Per didelis ping {ffffff}(Max: {FFAF00}"#MAX_PING_KICK"{ffffff}).");

							IsmestiZaideja(p, 100);
						}
					}
				}

				if(SekamasZaidejas[p] !=-1)
				{
					GetPlayerPos(SekamasZaidejas[p], pPos[0], pPos[1], pPos[2]);
					SetPlayerCheckpointEx(p,21,pPos[0], pPos[1], pPos[2],2);
				}

				if(IsPlayerInAnyVehicle(p) && GetPlayerState(p) == PLAYER_STATE_DRIVER)
				{
					new model = GetVehicleModel(GetPlayerVehicleID(p)), String[216];

					if(model == 574)
					{
						if(VehicleInfo[GetPlayerVehicleID(p)][Pasibaiges] == true && VehicleInfo[GetPlayerVehicleID(p)][Parase] == false)
						{
							new RandomMoney = 70 + random(10);

							SendClientMessage(p, -1, "{ffffff} Valomasis skystis pasibaigë. Já ásipilti galite valytojø bazëje!");

							format(String, sizeof(String), "{ffffff} Uþ keliø iðvalymà gavote {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(RandomMoney));
        					SendClientMessage(p, -1, String);

							GivePlayerMoneyA(p, RandomMoney);

							VehicleInfo[GetPlayerVehicleID(p)][Parase] = true;
						}
					}
				}

				if(Dazasvydis[p] != 0)
				{
					if(!PlayerInZone(p, -2654.8401,2587.6101, -2610.1338,2631.3611))
					{
						RespawnPlayerInDazasvydis(p);
					}
				}
			}
		}
	}
	if(GrobimoLaikas < gettime()) // Grobimas pasibagë
	{
		new str[128], String[216];

		if(VykstaGrobimas != -1)
		{
			switch(KaGrobia)
			{
				case GROBIA_PD: 		str = "policijos departamento";
				case GROBIA_SALONA:		str = "drabuþiø parduotuvës";
				case GROBIA_VYRIAUSYBE: str = "vyriausybës";
				case GROBIA_HOTEL: 		str = "vieðbuèio";
			}

			switch(KaGrobia)
			{
				case GROBIA_SALONA:
				{
					if(CountGangMembersInterior(VykstaGrobimas, 15) >= 1)
					{
						format(String, sizeof(String), "{ffffff}  Gauja {FFAF00}%s{ffffff}  atlaikë {ffffff} %s{ffffff}  grobimà ir gavo iðpirkà bei gaujos taðkus!", GangInfo[VykstaGrobimas][gTitle], str);
						SendClientMessageToAll(-1, String);

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Sveikiname, jûs atlaikëte pastato grobimà ir gavote 10 gaujos taðkø bei iðpirkà!", GangInfo[VykstaGrobimas][gTitle]);
						SendMessageToGangMembers(VykstaGrobimas, String);

						GangInfo[VykstaGrobimas][gChest] 	+= 15000;
						GangInfo[VykstaGrobimas][gPoints]	+= 10;

						UpdateGangLabel (VykstaGrobimas);
						SaveGang 		(VykstaGrobimas);
					}
					else if(CountGangMembersInterior(VykstaGrobimas, 15) == 0)
					{
						format(String, sizeof(String), "{ffffff}  Gauja {FFAF00}%s{ffffff}  neatlaikë {ffffff} %s{ffffff}  grobimo ir negavo nieko!", GangInfo[VykstaGrobimas][gTitle], str);
						SendClientMessageToAll(-1, String);

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Apgailëstaujame, taèiau jûs neatlaikëte ðio pastato grobimo!", GangInfo[VykstaGrobimas][gTitle]);
						SendMessageToGangMembers(VykstaGrobimas, String);
					}

					VykstaGrobimas 	= -1;
					KaGrobia 		= 0;
				}

				case GROBIA_PD:
				{
					if(CountGangMembersInterior(VykstaGrobimas, 47) >= 1)
					{
						format(String, sizeof(String), "{ffffff}  Gauja {FFAF00}%s{ffffff}  atlaikë {ffffff} %s{ffffff}  grobimà ir gavo iðpirkà bei gaujos taðkus!", GangInfo[VykstaGrobimas][gTitle], str);
						SendClientMessageToAll(-1, String);

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Sveikiname, jûs atlaikëte pastato grobimà ir gavote 10 gaujos taðkø bei iðpirkà!", GangInfo[VykstaGrobimas][gTitle]);
						SendMessageToGangMembers(VykstaGrobimas, String);

						GangInfo[VykstaGrobimas][gChest] 	+= 15000;
						GangInfo[VykstaGrobimas][gPoints]	+= 10;

						UpdateGangLabel (VykstaGrobimas);
						SaveGang 		(VykstaGrobimas);
					}
					else if(CountGangMembersInterior(VykstaGrobimas, 6) == 0)
					{
						format(String, sizeof(String), "{ffffff}  Gauja {FFAF00}%s{ffffff}  neatlaikë {ffffff} %s{ffffff}  grobimo ir negavo nieko!", GangInfo[VykstaGrobimas][gTitle], str);
						SendClientMessageToAll(-1, String);

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Apgailëstaujame, taèiau jûs neatlaikëte ðio pastato grobimo!", GangInfo[VykstaGrobimas][gTitle]);
						SendMessageToGangMembers(VykstaGrobimas, String);
					}

					VykstaGrobimas 	= -1;
					KaGrobia 		= 0;
				}

				case GROBIA_VYRIAUSYBE:
				{
					if(CountGangMembersInterior(VykstaGrobimas, 3) >= 1)
					{
						format(String, sizeof(String), "{ffffff}  Gauja {FFAF00}%s{ffffff}  atlaikë {ffffff} %s{ffffff}  grobimà ir gavo iðpirkà bei gaujos taðkus!", GangInfo[VykstaGrobimas][gTitle], str);
						SendClientMessageToAll(-1, String);

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Sveikiname, jûs atlaikëte pastato grobimà ir gavote 10 gaujos taðkø bei iðpirkà!", GangInfo[VykstaGrobimas][gTitle]);
						SendMessageToGangMembers(VykstaGrobimas, String);

						GangInfo[VykstaGrobimas][gChest] 	+= 15000;
						GangInfo[VykstaGrobimas][gPoints]	+= 10;

						UpdateGangLabel (VykstaGrobimas);
						SaveGang 		(VykstaGrobimas);
					}
					else if(CountGangMembersInterior(VykstaGrobimas, 3) == 0)
					{
						format(String, sizeof(String), "{ffffff}  Gauja {FFAF00}%s{ffffff}  neatlaikë {ffffff} %s{ffffff}  grobimo ir negavo nieko!", GangInfo[VykstaGrobimas][gTitle], str);
						SendClientMessageToAll(-1, String);

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Apgailëstaujame, taèiau jûs neatlaikëte ðio pastato grobimo!", GangInfo[VykstaGrobimas][gTitle]);
						SendMessageToGangMembers(VykstaGrobimas, String);
					}

					VykstaGrobimas 	= -1;
					KaGrobia 		= 0;
				}

				case GROBIA_HOTEL:
				{
					if(CountGangMembersInterior(VykstaGrobimas, 15) >= 1)
					{
						format(String, sizeof(String), "{ffffff}  Gauja {FFAF00}%s{ffffff}  atlaikë {ffffff} %s{ffffff}  grobimà ir gavo iðpirkà bei gaujos taðkus!", GangInfo[VykstaGrobimas][gTitle], str);
						SendClientMessageToAll(-1, String);

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Sveikiname, jûs atlaikëte pastato grobimà ir gavote 10 gaujos taðkø bei iðpirkà!", GangInfo[VykstaGrobimas][gTitle]);
						SendMessageToGangMembers(VykstaGrobimas, String);

						GangInfo[VykstaGrobimas][gChest] 	+= 15000;
						GangInfo[VykstaGrobimas][gPoints]	+= 10;

						UpdateGangLabel (VykstaGrobimas);
						SaveGang 		(VykstaGrobimas);
					}
					else if(CountGangMembersInterior(VykstaGrobimas, 15) == 0)
					{
						format(String, sizeof(String), "{ffffff}  Gauja {FFAF00}%s{ffffff}  neatlaikë {ffffff} %s{ffffff}  grobimo ir negavo nieko!", GangInfo[VykstaGrobimas][gTitle], str);
						SendClientMessageToAll(-1, String);

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Apgailëstaujame, taèiau jûs neatlaikëte ðio pastato grobimo!", GangInfo[VykstaGrobimas][gTitle]);
						SendMessageToGangMembers(VykstaGrobimas, String);
					}

					VykstaGrobimas 	= -1;
					KaGrobia 		= 0;

				}
			}
		}
	}
	else // Grobimas dar vyksta
	{
		new str[128], String[128];

		if(VykstaGrobimas != -1)
		{
			switch(KaGrobia)
			{
				case GROBIA_PD: 		str = "policijos departamento";
				case GROBIA_SALONA:		str = "drabuþiø parduotuvës";
				case GROBIA_VYRIAUSYBE: str = "vyriausybës";
				case GROBIA_HOTEL: 		str = "vieðbuèio";
			}

			switch(KaGrobia)
			{
				case GROBIA_SALONA:
				{
					if(CountGangMembersInterior(VykstaGrobimas, 15) == 0)
					{
						format(String, sizeof(String), "{ffffff}  Gauja {FFAF00}%s{ffffff}  neatlaikë {ffffff} %s{ffffff}  grobimo ir negavo nieko!", GangInfo[VykstaGrobimas][gTitle], str);
						SendClientMessageToAll(-1, String);

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Apgailëstaujame, taèiau jûs neatlaikëte ðio pastato grobimo!", GangInfo[VykstaGrobimas][gTitle]);
						SendMessageToGangMembers(VykstaGrobimas, String);

						VykstaGrobimas 	= -1;
						GrobimoLaikas 	= 0;
						KaGrobia 		= 0;
					}
				}

				case GROBIA_PD:
				{
					if(CountGangMembersInterior(VykstaGrobimas, 47) == 0)
					{
						format(String, sizeof(String), "{ffffff}  Gauja {FFAF00}%s{ffffff}  neatlaikë {ffffff} %s{ffffff}  grobimo ir negavo nieko!", GangInfo[VykstaGrobimas][gTitle], str);
						SendClientMessageToAll(-1, String);

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Apgailëstaujame, taèiau jûs neatlaikëte ðio pastato grobimo!", GangInfo[VykstaGrobimas][gTitle]);
						SendMessageToGangMembers(VykstaGrobimas, String);

						VykstaGrobimas 	= -1;
						GrobimoLaikas 	= 0;
						KaGrobia 		= 0;
					}
				}

				case GROBIA_VYRIAUSYBE:
				{
					if(CountGangMembersInterior(VykstaGrobimas, 3) == 0)
					{
						format(String, sizeof(String), "{ffffff}  Gauja {FFAF00}%s{ffffff}  neatlaikë {ffffff} %s{ffffff}  grobimo ir negavo nieko!", GangInfo[VykstaGrobimas][gTitle], str);
						SendClientMessageToAll(-1, String);

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Apgailëstaujame, taèiau jûs neatlaikëte ðio pastato grobimo!", GangInfo[VykstaGrobimas][gTitle]);
						SendMessageToGangMembers(VykstaGrobimas, String);

						VykstaGrobimas 	= -1;
						GrobimoLaikas 	= 0;
						KaGrobia 		= 0;
					}
				}

				case GROBIA_HOTEL:
				{
					if(CountGangMembersInterior(VykstaGrobimas, 15) == 0)
					{
						format(String, sizeof(String), "{ffffff}  Gauja {FFAF00}%s{ffffff}  neatlaikë {ffffff} %s{ffffff}  grobimo ir negavo nieko!", GangInfo[VykstaGrobimas][gTitle], str);
						SendClientMessageToAll(-1, String);

						format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Apgailëstaujame, taèiau jûs neatlaikëte ðio pastato grobimo!", GangInfo[VykstaGrobimas][gTitle]);
						SendMessageToGangMembers(VykstaGrobimas, String);

						VykstaGrobimas 	= -1;
						GrobimoLaikas 	= 0;
						KaGrobia 		= 0;
					}
				}
			}
		}
	}
	new LabelUpdate[128];

	if(rTime > gettime())
	{
		format(LabelUpdate, sizeof(LabelUpdate), "Laikas: %s", ConvertSeconds(rTime - gettime()));
		SetDynamicObjectMaterialText(Roundlaikis, 0, LabelUpdate, 80, "Ariel", 20, 1, 0xFFFFFFFB, 0x00000000, 1);
	}
	else
	{
		if(zPoints > gPointss) // laimëjo þali
		{
			SendMessageToDazasvydis("{24F34A} DAÞASVYDIS  {ffffff}Ðá roundà laimëjo þaliøjø komanda!");
		}

		if(gPointss > zPoints) // laimëjo geltoni
		{
			SendMessageToDazasvydis("{24F34A} DAÞASVYDIS  {ffffff}Ðá roundà laimëjo geltonøjø komanda!");
		}

		if(gPointss == zPoints) // niekas nelaimëjo
		{
			SendMessageToDazasvydis("{24F34A} DAÞASVYDIS  {ffffff}Ðis roundas pasibaigë lygiosomis!");
		}

		RespawnAllDazasvydis();

		format(LabelUpdate, sizeof(LabelUpdate), "Þaliøjø taðkai: %d", zPoints);
		SetDynamicObjectMaterialText(Zaltaskiai, 0, LabelUpdate, 80, "Ariel", 20, 1, 0xFFFFFFFB, 0x00000000, 1);

		format(LabelUpdate, sizeof(LabelUpdate), "Geltonøjø taðkai: %d", gPointss);
		SetDynamicObjectMaterialText(Geltontaskiai, 0, LabelUpdate, 80, "Ariel", 20, 1, 0xFFFFFFFB, 0x00000000, 1);

		format(LabelUpdate, sizeof(LabelUpdate), "Laikas: %s", ConvertSeconds(rTime - gettime()));
		SetDynamicObjectMaterialText(Roundlaikis, 0, LabelUpdate, 80, "Ariel", 20, 1, 0xFFFFFFFB, 0x00000000, 1);
	}
	for(new v = 1, size = GetVehiclePoolSize(); v <= size; v++)
	{
		ac_CheckVehicleHealth(v);
	}

	return 1;
}

f_public: Uzsikase(playerid)
{
	if(PI[playerid][kiekiskase] < 100)
	{
		GameTextForPlayer 		(playerid, "~W~Duobe uzsikase...", 5000, 4);
		ClearAnimations 		(playerid);
		TogglePlayerControllable(playerid, true);

		PI[playerid][kiekiskase] 	= 0;
		PI[playerid][kasa] 			= false;

		new Float: P_Pos[3]; GetPlayerPos(playerid, P_Pos[0], P_Pos[1], P_Pos[2]);

		PI[playerid][KasPosX] = P_Pos[0];
		PI[playerid][KasPosY] = P_Pos[1];
		PI[playerid][KasPosZ] = P_Pos[2];

		DestroyPlayerProgressBar(playerid, IskasenuBar[playerid]);
		IskasenuBar[playerid] = INVALID_PLAYER_BAR_ID;

		return 1;
	}

	new str[128];

	switch(random(7))
	{
		case 0:
		{
			new Float: RandomKasykla = 1.0 + randomfloat(1.0);

			format(str, sizeof(str), "{ffffff} Iðkasëte aliuminá, jis svërë {FFAF00}%.2f {ffffff}KG!", RandomKasykla);
			SendClientMessage(playerid, -1, str);

			PI[playerid][Aliuminis] += RandomKasykla;

			if(mVarzybos)
			{
				KiekIskases[playerid] += RandomKasykla;

				format(str, sizeof(str), "~g~Viso per varzybas iskasei ~y~%.2f ~g~KG metalo", KiekIskases[playerid]);
				ShowInfoText(playerid, str, 3000, false);
			}
		}

		case 1:
		{
			new Float: RandomKasykla = 1.0 + randomfloat(1.0);

			format(str, sizeof(str), "{ffffff} Iðkasëte vará, jis svërë {FFAF00}%.2f {ffffff}KG!", RandomKasykla);
			SendClientMessage(playerid, -1, str);

			PI[playerid][Varis] += RandomKasykla;

			if(mVarzybos)
			{
				KiekIskases[playerid] += RandomKasykla;

				format(str, sizeof(str), "~g~Viso per varzybas iskasei ~y~%.2f ~g~KG metalo", KiekIskases[playerid]);
				ShowInfoText(playerid, str, 3000, false);
			}
		}

		case 2:
		{
			new Float: RandomKasykla = 1.0 + randomfloat(1.0);

			format(str, sizeof(str), "{ffffff} Iðkasëte þalvará, jis svërë {FFAF00}%.2f {ffffff}KG!", RandomKasykla);
			SendClientMessage(playerid, -1, str);

			PI[playerid][Zalvaris] += RandomKasykla;

			if(mVarzybos)
			{
				KiekIskases[playerid] += RandomKasykla;

				format(str, sizeof(str), "~g~Viso per varzybas iskasei ~y~%.2f ~g~KG metalo", KiekIskases[playerid]);
				ShowInfoText(playerid, str, 3000, false);
			}
		}

		case 3:
		{
			new Float: RandomKasykla = 1.0 + randomfloat(1.0);

			format(str, sizeof(str), "{ffffff} Iðkasëte auksà, jis svërë {FFAF00}%.2f {ffffff}KG!", RandomKasykla);
			SendClientMessage(playerid, -1, str);

			PI[playerid][Auksas] += RandomKasykla;

			if(mVarzybos)
			{
				KiekIskases[playerid] += RandomKasykla;

				format(str, sizeof(str), "~g~Viso per varzybas iskasei ~y~%.2f ~g~KG metalo", KiekIskases[playerid]);
				ShowInfoText(playerid, str, 3000, false);
			}
		}

		case 4:
		{
			new Float: RandomKasykla = 1.0 + randomfloat(1.0);

			format(str, sizeof(str), "{ffffff} Iðkasëte titanà, jis svërë {FFAF00}%.2f {ffffff}KG!", RandomKasykla);
			SendClientMessage(playerid, -1, str);

			PI[playerid][Titanas] += RandomKasykla;

			if(mVarzybos)
			{
				KiekIskases[playerid] += RandomKasykla;

				format(str, sizeof(str), "~g~Viso per varzybas iskasei ~y~%.2f ~g~KG metalo", KiekIskases[playerid]);
				ShowInfoText(playerid, str, 3000, false);
			}
		}

		case 5:
		{
			new Float: RandomKasykla = 1.0 + randomfloat(1.0);

			format(str, sizeof(str), "{ffffff} Iðkasëte sidabrà, jis svërë {FFAF00}%.2f {ffffff}KG!", RandomKasykla);
			SendClientMessage(playerid, -1, str);

			PI[playerid][Sidabras] += RandomKasykla;

			if(mVarzybos)
			{
				KiekIskases[playerid] += RandomKasykla;

				format(str, sizeof(str), "~g~Viso per varzybas iskasei ~y~%.2f ~g~KG metalo", KiekIskases[playerid]);
				ShowInfoText(playerid, str, 3000, false);
			}
		}

		case 6: SendClientMessage(playerid, -1, "{ffffff} Dëja, taèiau jums nepavyko nieko iðkasti!");
	}

	ClearAnimations 		(playerid);
	TogglePlayerControllable(playerid, true);

	PI[playerid][kiekiskase] 	= 0;
	PI[playerid][kasa]  		= false;

	new Float: P_Pos[3]; GetPlayerPos(playerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	PI[playerid][KasPosX] = P_Pos[0];
	PI[playerid][KasPosY] = P_Pos[1];
	PI[playerid][KasPosZ] = P_Pos[2];

	DestroyPlayerProgressBar(playerid, IskasenuBar[playerid]);
	IskasenuBar[playerid] = INVALID_PLAYER_BAR_ID;

	return 1;
}

f_public: Float: randomfloat(Float: maxnumber)
{
	new RandomNumber[15];

	format(RandomNumber, sizeof(RandomNumber), "%d.%d", random(floatround(maxnumber)), random(10));

	return floatstr(RandomNumber);
}

//________________________(_| Gaujø zonø sistema |_)__________________________//

stock CreateGangZoneEx(Float: MinX, Float: MinY, Float: MaxX, Float: MaxY)
{
	HowMuchGangZonesIs ++; //- MAX_ZONES_IN_SERVER

	GangZonesSystem[HowMuchGangZonesIs - 1][gZoneID]    = GangZoneCreate(MinX, MinY, MaxX, MaxY);

	GangZoneShowForAll(GangZonesSystem[HowMuchGangZonesIs - 1][gZoneID], 0xFC3A3A96);

	GangZonesSystem[HowMuchGangZonesIs - 1][gZoneOwner] = 0;
	GangZonesSystem[HowMuchGangZonesIs - 1][gZoneYield] = 5;

	GangZonesSystem[HowMuchGangZonesIs - 1][gMin_X]     = MinX;
	GangZonesSystem[HowMuchGangZonesIs - 1][gMin_Y]     = MinY;
	GangZonesSystem[HowMuchGangZonesIs - 1][gMax_X]     = MaxX;
	GangZonesSystem[HowMuchGangZonesIs - 1][gMax_Y]     = MaxY;

	//SaveAllGangZonesEx();

	return HowMuchGangZonesIs - 1;
}

stock SaveAllGangZonesEx()
{
	new Query[300];
	for(new i = 0; i < HowMuchGangZonesIs; i ++)
 	{
 	    format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (`gZoneID`, `gZoneOwner`, `gZoneYield`, `MinX`, `MinY`, `MaxX`, `MaxY`) VALUES ('%d', '0', '%d', '%f', '%f', '%f', '%f')",
		i, GangZonesSystem[i][gZoneYield], GangZonesSystem[i][gMin_X], GangZonesSystem[i][gMin_Y], GangZonesSystem[i][gMax_X], GangZonesSystem[i][gMax_Y]);
		mysql_query(Query);
	}

	return 1;
}

stock LoadAllGangZones()
{
	mysql_query("SELECT * FROM `gaujuzonos`");

	mysql_store_result();

	if(mysql_num_rows())
 	{
 	    new Query[120], GangZoneStr[300], GangZoneID;

 	    while(mysql_fetch_row(Query))
 	    {
 	        mysql_fetch_field_row(GangZoneStr, "gZoneID");		GangZoneID 									= strval(GangZoneStr);
			mysql_fetch_field_row(GangZoneStr, "gZoneOwner"); 	GangZonesSystem[GangZoneID][gZoneOwner] 	= strval(GangZoneStr);
 	        mysql_fetch_field_row(GangZoneStr, "gZoneYield"); 	GangZonesSystem[GangZoneID][gZoneYield] 	= strval(GangZoneStr);
			mysql_fetch_field_row(GangZoneStr, "MinX");  		GangZonesSystem[GangZoneID][gMin_X] 		= floatstr(GangZoneStr);
			mysql_fetch_field_row(GangZoneStr, "MinY"); 		GangZonesSystem[GangZoneID][gMin_Y] 		= floatstr(GangZoneStr);
			mysql_fetch_field_row(GangZoneStr, "MaxX"); 		GangZonesSystem[GangZoneID][gMax_X] 		= floatstr(GangZoneStr);
			mysql_fetch_field_row(GangZoneStr, "MaxY"); 		GangZonesSystem[GangZoneID][gMax_Y] 		= floatstr(GangZoneStr);

			CreateGangZone(GangZoneID, GangZonesSystem[GangZoneID][gMin_X], GangZonesSystem[GangZoneID][gMin_Y], GangZonesSystem[GangZoneID][gMax_X], GangZonesSystem[GangZoneID][gMax_Y]);
 	    }
	}

	return 1;
}

stock CreateGangZone(zoneID, Float: MinX, Float: MinY, Float: MaxX, Float: MaxY)
{
	HowMuchGangZonesIs ++;

	GangZonesSystem[zoneID][gZoneID] = GangZoneCreate(MinX, MinY, MaxX, MaxY);

	return HowMuchGangZonesIs - 1, printf("%d\n", HowMuchGangZonesIs);
}

stock IsPlayerInGangZone(playerid, GZoneID)
{
	new Float: P_Pos[3]; GetPlayerPos(playerid, P_Pos[0], P_Pos[1], P_Pos[2]);

  	if(P_Pos[0] >= GangZonesSystem[GZoneID][gMin_X] && P_Pos[0] <= GangZonesSystem[GZoneID][gMax_X] && P_Pos[1] >= GangZonesSystem[GZoneID][gMin_Y] && P_Pos[1] <= GangZonesSystem[GZoneID][gMax_Y]) return 1;

  	return 0;
}

stock GangMemberInGangZone(Gang_ZoneID, JobGangID)
{
	new bool: IsMemberInZone = false;
    foreach(Player, i)
	{
		if(PI[i][gMember] == JobGangID)
		{
      		if(IsPlayerInGangZone(i, Gang_ZoneID))
		    {
		        IsMemberInZone = true;
		    }
		}
	}
	return IsMemberInZone ? 1 : 0;
}

stock SaveAllGangZones()
{
	new Query[120];
	for(new i = 0; i < HowMuchGangZonesIs; i ++)
 	{
 	    if(GangZonesSystem[i][gZoneOwner] > 0)
 	    {
			format(Query, sizeof(Query), "SELECT * FROM `gaujuzonos` WHERE `gZoneID` = '%d'", i);
			mysql_query(Query);

			mysql_store_result();

			if(mysql_num_rows())
			{
				format(Query, sizeof(Query), "UPDATE `gaujuzonos` SET `gZoneOwner` = '%d' WHERE `gZoneID` = '%d'", GangZonesSystem[i][gZoneOwner], i);
				mysql_query(Query);
			}
			else
			{
				format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (`gZoneID`, `gZoneOwner`, `gZoneYield`) VALUES ('%d', '%d', '%d')", i, GangZonesSystem[i][gZoneOwner], GangZonesSystem[i][gZoneYield]);
				mysql_query(Query);
			}
		}
	}
	return 1;
}

stock GetPelnasIDFromPavas(playerid)
{
	switch(PI[playerid][pavdrk])
	{
		case LEAD_FARAI: return 0;
		case LEAD_MEDIKAI: return 3;
		case LEAD_KURJ: return 2;
		case LEAD_Mechanikas: return 1;
		case LEAD_Gdyleriai: return 4;
		case LEAD_FUROS: return 8;
		case LEAD_TAXI: return 9;
		default: return -1;
	}
	return -1;
}

stock GetPelnasIDFromLeader(playerid)
{
	switch(PI[playerid][plead])
	{
		case LEAD_FARAI: return 0;
		case LEAD_MEDIKAI: return 3;
		case LEAD_KURJ: return 2;
		case LEAD_Mechanikas: return 1;
		case LEAD_Gdyleriai: return 4;
		case LEAD_FUROS: return 8;
		case LEAD_TAXI: return 9;
		default: return -1;
	}
	return -1;
}

stock GetJobFromFaction(faction)
{
	switch(faction)
	{
		case LEAD_FARAI: return 1;
		case LEAD_MEDIKAI: return 2;
		case LEAD_KURJ: return 3;
		case LEAD_Mechanikas: return 4;
		case LEAD_Gdyleriai: return 5;
		case LEAD_FUROS: return 11;
		case LEAD_TAXI: return 13;
	}

	return 0;
}

stock vKoksKrovinys(vehicleid)
{
	new String[64];

	switch(vKrovinys[vehicleid])
	{
		case -1: String = "nëra";

		case 1:  String = "El. prekës";
		case 2:  String = "Maisto prekës";
		case 3:  String = "Drabuþiai";
		case 4:  String = "Alkoholiniai gërimai";
		case 5:  String = "Automobiliø dalys";
		case 6:  String = "Vaistai";
	}

	return String;
}

stock vKoksKrovinys2(vehicleid)
{
	new String[64];

	switch(vKrovinys[vehicleid])
	{
		case -1: String = "nëra";

		case 1:  String = "Policijos ginklai";
		case 2:  String = "Spec. bûrio pajëgø ARAS ginklai";
		case 3:  String = "Ginklø parduotuvës ginklai";
		case 4:  String = "Automobiliø dalys";
		case 5:  String = "Alkoholiniai gërimai";

		case 9:  String = "Narkotikai";
		case 10:  String = "Ginklai";
	}

	return String;
}

stock pKoksKrovinys(playerid)
{
	new String[64];

	switch(PI[playerid][KaPasikroves])
	{
		case -1: String = "nëra";
		case 1:  String = "El. prekës";
		case 2:  String = "Maisto prekës";
		case 3:  String = "Drabuþiai";
		case 4:  String = "Alkoholiniai gërimai";
		case 5:  String = "Automobiliø dalys";
		case 6:  String = "Vaistai";
	}

	return String;
}

stock CountPlayerInFaction(faction) // by Johurt
{
	new k = 0;
	for(new p = 0; p < MAX_PLAYERS; p++)
	{
		if(IsPlayerNPC(p) || !IsPlayerConnected(p)) continue;
		if(PI[p][specialybe] == faction)
		{
			k ++;
		}
	}
	return k;
}

stock PakeltiRaga(playerid) // by Johurt
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	SetPlayerAttachedObject(playerid, 4, 330, 6);
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(PI[playerid][BanLaikas] > gettime()) return IsmestiZaideja(playerid, 100);

	if(clickedplayerid != INVALID_PLAYER_ID)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(!(VairavimoMokyklosMasina[0] <= GetPlayerVehicleID(playerid) <= VairavimoMokyklosMasina[sizeof(VairavimoMokyklosMasina) - 1]))
			{
				ShowPlayerStats(playerid, clickedplayerid);
			}
		}
		else
		{
			ShowPlayerStats(playerid, clickedplayerid);
		}
	}

	return 1;
}

f_public: IsjungiameServeri()
{
	SendRconCommand("exit");

	return 1;
}

forward IsjungiameServeriEx();
public IsjungiameServeriEx()
{
	SendRconCommand("gmx");
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	for(new p = 0; p < MAX_PLAYERS; p++)
	{
		if(!IsPlayerConnected(p) || IsPlayerNPC(p)) continue;
		if(!strcmp(ip, GetPlayerIpEx(p), true))
		{
			if(strcmp("", GetPlayerNameEx(p), false) && strcmp("", GetPlayerNameEx(p), false))
			{
				IsmestiZaideja(p, 100);

				return 1;
			}
		}
	}
	return 1;
}

f_public: DestroySpark(playerid)
{
	DestroyObject(Spark[playerid]);
	return 1;
}

f_public: TazedRemove(playerid)
{
	if(PI[playerid][cuffed] == false)
	{
		TogglePlayerControllable(playerid, 1);
		ClearAnimations(playerid);
		Tazed[playerid] = false;
	}

	return 1;
}


stock Log(way[], text[]) // by Johurt
{
	new File:lWay = fopen(way, io_append);
	if(lWay)
	{
		fwrite(lWay, text);
		fclose(lWay);
	}
	return 1;
}

stock CheckIP(ip[]) // By Johurt.
{
	new ip_count = 0;
	for(new p = 0, size = GetPlayerPoolSize(); p <= size; p++)
	{
		if(!IsPlayerConnected(p) || IsPlayerNPC(p)) continue;
		if(!strcmp(GetPlayerIpEx(p), ip)) ip_count++;
	}
	if(ip_count > 2) KickPlayersWithoutThisIP(ip);
	return 0;
}

stock KickPlayersWithoutThisIP(ip[]) // By Johurt.
{
	for(new p = 0, size = GetPlayerPoolSize(); p <= size; p++)
	{
		if(!IsPlayerConnected(p) || IsPlayerNPC(p)) continue;
		if(!strcmp(GetPlayerIpEx(p), ip)) Kick(p);
	}
	return 0;
}

stock CheckSpam(playerid) // By Johurt
{
	if(PI[playerid][FloodTime] < gettime())
	{
		PI[playerid][FloodTime] 	= gettime() + 3;
		PI[playerid][FloodWarns] 	= 0;
	}
	else
	{
		PI[playerid][FloodWarns] ++;

		if(PI[playerid][FloodWarns] > 6)
		{
			SendClientMessage 	(playerid, RED, "[KICK] Jûs iðmestas ið serverio dël komandø spaminimo.");
			IsmestiZaideja		(playerid, 100);

			return true;
		}
	}

	return false;
}


stock Surakinti(playerid, bool:reiksme = false)
{
	/*
		Surakinti(playerid, true); - Atrakina
		Surakinti(playerid, false); - Surakina
	*/
	if(!reiksme)
	{
		PI[playerid][cuffed] = true;
		TogglePlayerControllable(playerid, false);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
		SetPlayerAttachedObject(playerid, 0, 19418, 5, 0.016000, 0.032000, 0.025000, 17.500005, -10.099991, -48.099990, 1.000000, 1.000000, 1.000000);
	}
	else
	{
		PI[playerid][cuffed] = false;
		//PI[playerid][BandoAtsirakinti] = -1;
		TogglePlayerControllable(playerid, true);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		if(IsPlayerAttachedObjectSlotUsed(playerid, 0)) RemovePlayerAttachedObject(playerid, 0);
	}
	return 1;
}

stock Suristi(playerid, bool:reiksme = false)
{
	/*
	    Surakinti(playerid, true); - Atrakina
	    Surakinti(playerid, false); - Surakina
	*/
	if(!reiksme)
	{
		PI[playerid][banded] = true;
		TogglePlayerControllable(playerid, false);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
		SetPlayerAttachedObject(playerid, 0, 19418, 5, 0.016000, 0.032000, 0.025000, 17.500005, -10.099991, -48.099990, 1.000000, 1.000000, 1.000000);
	}
	else
	{
	    PI[playerid][banded] = false;
	    //PI[playerid][BandoAtristi] = -1;
		TogglePlayerControllable(playerid, true);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		if(IsPlayerAttachedObjectSlotUsed(playerid, 0)) RemovePlayerAttachedObject(playerid, 0);
	}
	return 1;
}

stock IsPlayersInVehicle(vehicleid) // by Johurt
{
	for(new p = 0, size = GetPlayerPoolSize(); p <= size; p++)
	{
		if(!IsPlayerConnected(p) || IsPlayerNPC(p)) continue;
		if(GetPlayerVehicleID(p) == vehicleid) return true;
	}
	return false;
}
stock IsAnyPlayerInVehicle(vehicleid)
{
for(new p, size = GetPlayerPoolSize(); p <= size; p++)
{
if(!IsPlayerConnected(p) || IsPlayerNPC(p)) continue;
if(IsPlayerInVehicle(p, vehicleid)) return true;
}
return false;
}

stock AllignMaxPlayers()
{
	if(MAX_PLAYERS < GetServerVarAsInt("maxplayers"))
	{
		printf("Pranesimas: Zmoniu skaicius yra didesnis uz %i , o tai neleistina", MAX_PLAYERS);
		print("Pranesimas: Serveris negali bûti toliau paleistas, todel jis isjungiamas.");
		SendRconCommand("exit");
	}
}

stock LoadSpawns()
{
	AddPlayerClass(20,-1982.1161,137.7512,27.6875,91.0455,0,0,0,0,0,0);
	AddPlayerClass(19,-1982.1161,137.7512,27.6875,91.0455,0,0,0,0,0,0);
	AddPlayerClass(21,-1982.1161,137.7512,27.6875,91.0455,0,0,0,0,0,0);
	AddPlayerClass(22,-1982.1161,137.7512,27.6875,91.0455,0,0,0,0,0,0);
}
stock Load3dtext()
{
	//http://forum.sa-mp.com/showthread.php?t=580905
    new string[128];
	Create3DTextLabel("{ff9966}Kurjeriø garaþas\n \n{ffffff}Ávaþiuoti á garaþà galite paspaudæ {ff9966}N {ffffff}mygtukà", -1, -1311.2468,-164.1337,-91.9670, 10, 0, 0);
	Create3DTextLabel("{ff9966}Kurjeriø garaþas\n \n{ffffff}Iðvaþiuoti ið garaþo galite paspaudæ {ff9966}N {ffffff}mygtukà", -1, -2683.5378,194.4817,4.3280, 10, 0, 0);

	Create3DTextLabel("{ff9966}Treniruoèiø zona\n \n{ffffff}Áeiti á zonà galite paspaudæ {ff9966}N {ffffff}mygtukà", -1, 343.5182,1799.6932,18.3275, 10, 0, 0);
	Create3DTextLabel("{ff9966}Treniruoèiø zona\n \n{ffffff}Iðeiti ið zonos galite paspaudæ {ff9966}N {ffffff}mygtukà", -1, 347.4177,1795.3444,18.2190, 10, 0, 0);

	Create3DTextLabel("{ffffff} Kalëjimas\n{ffffff}Norint pavalgyti, raðykite {FFAF00} /kvalgyti", -1, 21.2884,2033.7419,-2.5621, 10, 0, 0);

	Create3DTextLabel("{ffffff} Machanikas\n{ffffff}Norint ámontuoti dujø sistemà ið maðinà {FFAF00} /dujos", -1, -2662.5981,-35.6559,3.1317, 10, 0, 0);

	CreatePickup(1239, 1, 1768.6866,-2021.8337,14.1454);
	Create3DTextLabel("{ffffff} Kurjeriø pasikrovimo vieta\n \n{AEAEAE}Pasikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, 1768.6866,-2021.8337,14.1454, 10, 0, 0);

	CreatePickup(1239, 1, 1766.6501,-2031.9403,13.8563);
	Create3DTextLabel("{ffffff} Kurjeriø pasikrovimo vieta\n \n{AEAEAE}Pasikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, 1766.6501,-2031.9403,13.8563, 10, 0, 0);

	Create3DTextLabel("{ffffff} Kurjeriø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -1978.9082,480.6208,29.0147, 10, 0, 0);
	Create3DTextLabel("{ffffff} Kurjeriø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -2346.8477,990.8015,50.7029, 10, 0, 0);
	Create3DTextLabel("{ffffff} Kurjeriø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -2319.9229,-154.7353,35.5756, 10, 0, 0);
	Create3DTextLabel("{ffffff} Kurjeriø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -1909.2449,820.3981,35.1719, 10, 0, 0);
	//Create3DTextLabel("{ffffff} Kurjeriø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -1976.9347,97.3161,27.6950, 10, 0, 0);
	Create3DTextLabel("{ffffff} Kurjeriø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -2664.2966,237.4569,4.3359, 10, 0, 0);
	Create3DTextLabel("{ffffff} Kurjeriø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -1810.9454,616.2861,35.1719, 10, 0, 0);
	Create3DTextLabel("{ffffff} Kurjeriø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -2260.6919,555.1562,35.0156, 10, 0, 0);
	Create3DTextLabel("{ffffff} Kurjeriø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -1720.2742,1364.4855,7.1875, 10, 0, 0);
	Create3DTextLabel("{ffffff} Kurjeriø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -1908.0621,442.2690,35.1709, 10, 0, 0);
	Create3DTextLabel("{ffffff} Kurjeriø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -1804.1688,953.0773,24.8906, 10, 0, 0);
	Create3DTextLabel("{ffffff} Kurjeriø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -2460.1628,793.5823,35.1719, 10, 0, 0);
	Create3DTextLabel("{ffffff} Kurjeriø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -2618.5977,1421.0486,7.0938, 10, 0, 0);
	Create3DTextLabel("{ffffff} Kurjeriø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -2690.8562,-32.4108,4.1594, 10, 0, 0);
	Create3DTextLabel("{ffffff} Kurjeriø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -2710.3147,591.4471,14.4531, 10, 0, 0);

	CreatePickup(1239, 1, 1766.7333,-2048.9414,13.8588);
	Create3DTextLabel("{ffffff} Fûristø pasikrovimo vieta\n \n{AEAEAE}Pasikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, 1766.7333,-2048.9414,13.8588, 10, 0, 0);

	//CreatePickup(1239, 1, 1751.4351,-2056.4573,13.8212);
	//Create3DTextLabel("{ffffff} Fûristø pasikrovimo vieta\n \n{AEAEAE}Pasikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, 1751.4351,-2056.4573,13.8212, 10, 0, 0);

	Create3DTextLabel("{ffffff} Fûristø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -1569.8213,707.2872,7.1875, 10, 0, 0);
	Create3DTextLabel("{ffffff} Fûristø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -1265.6151,438.8593,7.1797, 10, 0, 0);
	Create3DTextLabel("{ffffff} Fûristø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -2613.2256,204.3152,4.8843, 10, 0, 0);
	Create3DTextLabel("{ffffff} Fûristø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -2185.8628,1084.8135,80.0078, 10, 0, 0);
	Create3DTextLabel("{ffffff} Fûristø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -2529.4343,1222.3375,37.4283, 10, 0, 0);
	Create3DTextLabel("{ffffff} Fûristø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -2237.9639,-78.2105,35.3203, 10, 0, 0);
	Create3DTextLabel("{ffffff} Fûristø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -700.27, 953.03, 13.58, 10, 0, 0);
	//Create3DTextLabel("{ffffff} Fûristø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -1041.3307,-673.8675,32.0126, 10, 0, 0);
	//Create3DTextLabel("{ffffff} Fûristø iðsikrovimo vieta\n \n{AEAEAE}Iðsikrauti kroviná galite paspaudæ {E0D864}N {AEAEAE}mygtukà", -1, -1095.5690,-688.0779,32.0126, 10, 0, 0);

	Create3DTextLabel("{ffffff} Transporto taisymas\n{ffffff}Raðyk: {FFAF00} /taisyti\n{ffffff}Kaina: {FFAF00}$500", -1, -2671.7439,-35.9309,3.8013, 10, 0, 0);

	Create3DTextLabel("{ffffff} Þvejybos instrukcija\n{ffffff}Raðyk: {FFAF00} /meskere{ffffff} ir spausk {FFAF00} PELËS KLAVIÐÀ", -1, -2425.8713,1451.6621,7.8591, 10, 0, 0);
	Create3DTextLabel("{ffffff} Þvejybos instrukcija\n{ffffff}Raðyk: {FFAF00} /meskere{ffffff} ir spausk {FFAF00} PELËS KLAVIÐÀ", -1, -2441.0974,1451.7734,7.8591, 10, 0, 0);
	Create3DTextLabel("{ffffff} Þvejybos instrukcija\n{ffffff}Raðyk: {FFAF00} /meskere{ffffff} ir spausk {FFAF00} PELËS KLAVIÐÀ", -1, -2458.7581,1451.7654,7.8561, 10, 0, 0);

	//PickupsInfo[DarbuInfo] = CreatePickup(18631, 2, -2181.4114,1061.3320,80.0530);
	//Create3DTextLabel("{ffffff} Autoservisas ECO\n{ffffff}Informacija apie darbà", -1, -2181.4114,1061.3320,80.0530, 10, 0, 0);

	PickupsInfo[MetroCityStebuklai] = CreatePickup(1239, 2, -2078.0012,1419.1678,7.1007);
	Create3DTextLabel("{ffffff} 7 uliunø Stebuklai\n{ffffff}Visa informacija apie juos\nPagrindinio prizo atsiëmimas", -1, -2078.0012,1419.1678,7.1007, 10, 0, 0);

	PickupsInfo[KasyklosInfo] = CreatePickup(1239, 2, -373.1243,-1469.8369,-36.1880);
	Create3DTextLabel("{ffffff} Metalo kasykla\n{ffffff}Visa informacija apie jà", -1, -373.1243,-1469.8369,-36.1880, 10, 0, 0);

	PickupsInfo[Apmokymai] = CreatePickup(1239, 2, -1963.4099,159.0117,26.3148);
	Create3DTextLabel("{ffffff} www.MetroCity.lt\n{ffffff}Apmokymai", -1, -1963.4099,159.0117,26.3148, 10, 0, 0);

	PickupsInfo[NewbieHeal] = CreatePickup(1240, 2, -1963.2625,139.2402,26.3048);
	Create3DTextLabel("{ffffff} www.MetroCity.lt\n{ffffff}Pasigydymas naujokams", -1, -1963.2625,139.2402,26.3048, 10, 0, 0);

	PickupsInfo[PradetiDazasvydi] = CreatePickup(1239, 2, 301.8035,-76.5409,1001.5156);
	Create3DTextLabel("{ffffff} Daþasvydis\n{ffffff}Daþasvydþio pradþa", -1, 301.8035,-76.5409,1001.5156, 10, 0, 0);

	PickupsInfo[IseitiIsDazasvydzio][0] = CreatePickup(1239, 2, -1128.6940,1066.2400,1345.7438);
	Create3DTextLabel("{ffffff} Daþasvydis\n{ffffff}Iðeiti ið daþasvydþio", -1, -1128.6940,1066.2400,1345.7438, 10, 0, 0);

	PickupsInfo[IseitiIsDazasvydzio][1] = CreatePickup(1239, 2, -977.8560,1053.0413,1344.9913);
	Create3DTextLabel("{ffffff} Daþasvydis\n{ffffff}Iðeiti ið daþasvydþio", -1, -977.8560,1053.0413,1344.9913, 10, 0, 0);

	Create3DTextLabel("{ffffff} Daþasvydis\n{ffffff}Norëdami iðeiti ið daþasvydþio raðykite {FFAF00} /diseiti", -1, -2622.0774,2620.7847,-98.8325, 10, 0, 0);
	Create3DTextLabel("{ffffff} Daþasvydis\n{ffffff}Norëdami iðeiti ið daþasvydþio raðykite {FFAF00} /diseiti", -1, -2643.3682,2601.2646,-98.8318, 10, 0, 0);

//

	CreateObject(3593, 686.60382, 1716.78455, 6.33300,   0.00000, 0.00000, 0.00000); // PIRMAS STEBUKLAS
	Create3DTextLabel("{ffffff} 7 uliunø Stebuklai\n{ffffff}Pirmasis stebuklas: apleista maðina\nRaðyk: {FFAF00} /stebuklas", -1, 686.6038,1716.7845,7.0127, 10, 0, 0);

	CreateObject(19527, 2351.19775, -652.47552, 127.04978,   0.00000, 0.00000, 0.00000); // ANTRAS STEBUKLAS
	Create3DTextLabel("{ffffff} 7 uliunø Stebuklai\n{ffffff}Pirmasis stebuklas: apleista maðina\nRaðyk: {FFAF00} /stebuklas", -1, 2351.1135,-652.4021,127.0725, 10, 0, 0);

	CreateObject(19637, -1726.02148, -1650.28015, 20.72160,   0.00000, 0.00000, 0.00000); // TRECIAS STEBUKLAS
	Create3DTextLabel("{ffffff} 7 uliunø Stebuklai\n{ffffff}Pirmasis stebuklas: apleista maðina\nRaðyk: {FFAF00} /stebuklas", -1, -1725.9496,-1650.2821,21.8857, 10, 0, 0);

	CreateObject(19632, -216.61450, -1695.65845, 4.68850,   0.00000, 0.00000, 0.00000); // KETVIRTAS STEBUKLAS
	Create3DTextLabel("{ffffff} 7 uliunø Stebuklai\n{ffffff}Pirmasis stebuklas: apleista maðina\nRaðyk: {FFAF00} /stebuklas", -1, -216.6145,-1695.6584,4.6885, 10, 0, 0);

	CreateObject(19317, 2487.12476, -1646.16504, 13.11310,   270.00000, 0.00000, 0.00000); // PENKTAS STEBUKLAS
	Create3DTextLabel("{ffffff} 7 uliunø Stebuklai\n{ffffff}Pirmasis stebuklas: apleista maðina\nRaðyk: {FFAF00} /stebuklas", -1, 2487.1389,-1646.1624,14.0703, 10, 0, 0);

	CreateObject(1951, 2323.65039, 1283.22876, 95.60060,   0.00000, 0.00000, 0.00000); // ÐEÐTAS STEBUKLAS
	Create3DTextLabel("{ffffff} 7 uliunø Stebuklai\n{ffffff}Pirmasis stebuklas: apleista maðina\nRaðyk: {FFAF00} /stebuklas", -1, 2323.6504,1283.2288,97.5950, 10, 0, 0);

	CreateObject(19528, 701.45874, 1992.69299, 4.53690,   0.00000, 270.00000, 0.00000); //SEPTINTAS STEBUKLAS
	Create3DTextLabel("{ffffff} 7 uliunø Stebuklai\n{ffffff}Pirmasis stebuklas: apleista maðina\nRaðyk: {FFAF00} /stebuklas", -1, 701.4233,1992.6064,4.5369, 10, 0, 0);

//

	//SafetyZoneID[0] = CreateZone(-2915.666, 1160.108, -2972.000, 1244.070, true);
	SafetyZoneID[0] = CreateZone(-2054.3064, 79.4714, -1917.7390, 218.5012, true); 	// Stotis
	SafetyZoneID[1] = CreateZone(-2711.1877, 578.7722, -2602.0669, 644.1699, true); // ligoninë
	SafetyZoneID[2] = CreateZone(-2096.6392, -104.8045, -2015.3768, -77.7190, true); // vm
	PardavimoZona = CreateZone(-2519.7058,385.8797, -2462.8803,438.4466, true); // car pardavimas

	Create3DTextLabel("{FFAF00}Á treniruoèiø zonà\npateksite paspaudæ {ffffff}Y{FFAF00} mygtukà.", -1, 132.3315, 1941.8750, 19.3201, 20, 0, 0);
	Create3DTextLabel("{FFAF00}Ið treniruoèiø zonos\niðeisite paspaudæ {ffffff}Y{FFAF00} mygtukà.", -1, 138.6328, 1941.1720, 19.3158, 20, 0, 0);

	Create3DTextLabel("{ffffff} Skelbimø centras\n{ffffff}Norint skelbti skelbimà, raðykite {FFAF00} /skelbti\n{ffffff}Kaina: {FFAF00}$200", -1, 2324.5171,-1141.9031,1050.9835, 10, 0, 0);


	/*

		Narkotikø/ginklø sistema

	*/

	new strf[80];



	//Shotgun
	PickupsInfo[GunsPickup][0] = CreatePickup(1271, 2, -681.1617,948.3032,13.5789);
	format(strf, sizeof(strf), "Shotgun sandëlis\nYra kulkø: {FFAF00}%d/10000", ShotgunBulletCount);
	GunsLabel[0] = Create3DTextLabel(strf, -1, -681.1617,948.3032,13.5789, 15, 0, 0);

	//Ak-47
	PickupsInfo[GunsPickup][1] = CreatePickup(1271, 2, -678.7145,945.9055,13.5789);
	format(strf, sizeof(strf), "AK-47 sandëlis\nYra kulkø: {FFAF00}%d/10000", Ak47BulletCount);
	GunsLabel[1] = Create3DTextLabel(strf, -1, -678.7145,945.9055,13.5789, 15, 0, 0);

	//Deagle
	PickupsInfo[GunsPickup][2] = CreatePickup(1271, 2, -675.4036,945.8331,13.5789);
	format(strf, sizeof(strf), "Deagle sandëlis\nYra kulkø: {FFAF00}%d/10000", DeagleBulletCount);
	GunsLabel[2] = Create3DTextLabel(strf, -1, -675.4036,945.8331,13.5789, 15, 0, 0);

	//Heroinas
	PickupsInfo[DrugsPickup][0] = CreatePickup(1279, 2, -687.9164,957.1696,13.5789);
	format(strf, sizeof(strf), "Heroino sandëlis\nYra: {FFAF00}%d/1000 {ffffff}ml", HeroineDoseCount);
	DrugsLabel[0] = Create3DTextLabel(strf, -1, -687.9164,957.1696,13.5789, 15, 0, 0);

	//Kokainas
	PickupsInfo[DrugsPickup][1] = CreatePickup(1279, 2,-685.2524,957.1141,13.5789);
	format(strf, sizeof(strf), "Kokaino sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", CocaineDoseCount);
	DrugsLabel[1] = Create3DTextLabel(strf, -1,-685.2524,957.1141,13.5789, 15, 0, 0);

	//Þolë
	PickupsInfo[DrugsPickup][2] = CreatePickup(1279, 2, -673.8439,955.8734,13.5789);
	format(strf, sizeof(strf), "Þolës sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", WeedDoseCount);
	DrugsLabel[2] = Create3DTextLabel(strf, -1, -673.8439,955.8734,13.5789, 15, 0, 0);

	//Ekstazi
	PickupsInfo[DrugsPickup][3] = CreatePickup(1279, 2, -673.8116,960.6589,13.5789);
	format(strf, sizeof(strf), "Ekstazi sandëlis\nYra: {FFAF00}%d/1000 {ffffff}mg", EkstaziDoseCount);
	DrugsLabel[3] = Create3DTextLabel(strf, -1, -673.8116,960.6589,13.5789, 15, 0, 0);

	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -2027.4653,157.6335,29.0177, 10, 0, 0); // stotis
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -2027.4579,155.6845,29.0177, 10, 0, 0); // stotis
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -1685.9688, 409.6406, 7.5797, 10, 0, 0); // didele degaline
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -1679.3594, 403.0547, 7.5797, 10, 0, 0); // didele degaline
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -1681.8281, 413.7813, 7.5797, 10, 0, 0); // didele degaline
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -1675.2188, 407.1953, 7.5797, 10, 0, 0); // didele degaline
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -1676.5156, 419.1172, 7.5797, 10, 0, 0); // didele degaline
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -1669.9063, 412.5313, 7.5797, 10, 0, 0); // didele degaline
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -1672.1328, 423.5000, 7.5797, 10, 0, 0); // didele degaline
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -1665.5234, 416.9141, 7.5797, 10, 0, 0); // didele degaline
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -2410.8047, 970.8516, 45.6844, 10, 0, 0); // vidutine degaline
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -2410.8047, 976.1875, 45.6844, 10, 0, 0); // vidutine degaline
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -2410.8047, 981.5234, 45.6844, 10, 0, 0); // vidutine degaline
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -92.1016, -1161.7891, 2.9609, 10, 0, 0); // degaline pakeliui i LS
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -97.0703, -1173.7500, 3.0313, 10, 0, 0); // degaline pakeliui i LS
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -85.2422, -1165.0313, 2.6328, 10, 0, 0); // degaline pakeliui i LS
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti kurà, raðykite:\n{FFAF00} /pilti", -1, -90.1406, -1176.6250, 2.6328, 10, 0, 0); // degaline pakeliui i LS

	//Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti dujas, raðykite:\n{FFAF00} /piltidujas", -1, -2150.8208,-37.2297,35.5360, 10, 0, 0); // vm
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti dujas, raðykite:\n{FFAF00} /piltidujas", -1, -2051.6445,143.2746,28.8146, 10, 0, 0); // stotis
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti dujas, raðykite:\n{FFAF00} /piltidujas", -1, -1717.1532,389.2776,7.1373, 10, 0, 0); // didele degaline
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti dujas, raðykite:\n{FFAF00} /piltidujas", -1, -1720.7896,393.7354,7.1373, 10, 0, 0); // didele degaline
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Norint pilti dujas, raðykite:\n{FFAF00} /piltidujas", -1, -1700.6025,407.9304,7.1373, 10, 0, 0); // didele degaline

    //format(string, sizeof(string), "{ffffff} Naujokas\n \n{ffffff}Sveikas atvykæs á www.MetroCity.lt serverá\nVisos naudingos komandos tau {FFAF00} /komandos, /gps, /darbai");
	//CreateDynamic3DTextLabel(string, -1, -1963.1669,149.0626,26.3148, 10.0);
	
	CreateDynamic3DTextLabel("{ffffff} Naujokas\n \n{ffffff}Sveikas atvykæs á www.MetroCity.lt serverá\nVisos naudingos komandos tau {FFAF00} /komandos, /gps, /darbai",-1,-1963.1669,149.0626,26.3148,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0);

	Create3DTextLabel("{ffffff} Laivø degalinë\n{ffffff}Norint pilti dyzelá, raðykite:\n{FFAF00} /piltidyzeli", -1, -1767.7035,-188.1039,1.9604, 10, 0, 0); // Laivø degalinë

	Create3DTextLabel("{ffffff} Transporto iðkrovimas\n{ffffff}Norint iðkrauti transp. priemonæ, raðykite:\n{FFAF00} /iskrautitr", -1, -2500.0793,320.5070,30.0442, 10, 0, 0);
	Create3DTextLabel("{ffffff} Transporto pakrovimas\n{ffffff}Norint pakrauti transp. priemonæ, raðykite:\n{FFAF00} /pakrautitr", -1, 1751.4351,-2056.4573,13.8212, 10, 0, 0);

	Create3DTextLabel("{ffffff} Sûreliai\n{ffffff}Kaina: {FFAF00}$"#SURELIO_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -14.8774,-78.0956,1003.5469, 10, MAISTO_PARDUOTUVE1, 0);
	Create3DTextLabel("{ffffff} Deðros\n{ffffff}Kaina: {FFAF00}$"#DESROS_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -14.8823,-82.0770,1003.5469, 10, MAISTO_PARDUOTUVE1, 0);
	Create3DTextLabel("{ffffff} Pica\n{ffffff}Kaina: {FFAF00}$"#PICOS_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -21.2226,-83.1633,1003.5469, 10, MAISTO_PARDUOTUVE1, 0);
	Create3DTextLabel("{ffffff} Pica\n{ffffff}Kaina: {FFAF00}$"#PICOS_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -31.9058,-87.2799,1003.5469, 10, MAISTO_PARDUOTUVE1, 0);
	Create3DTextLabel("{ffffff} Ledai\n{ffffff}Kaina: {FFAF00}$"#LEDU_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -29.2305,-77.7784,1003.5469, 10, MAISTO_PARDUOTUVE1, 0);
	Create3DTextLabel("{ffffff} Ðokoladas\n{ffffff}Kaina: {FFAF00}$"#SOKOLADO_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -23.8784,-77.8102,1003.5469, 10, MAISTO_PARDUOTUVE1, 0);
	Create3DTextLabel("{ffffff} Sultys\n{ffffff}Kaina: {FFAF00}$"#SULCIU_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -20.0124,-74.3236,1003.5542, 10, MAISTO_PARDUOTUVE1, 0);
	Create3DTextLabel("{ffffff} Sultys\n{ffffff}Kaina: {FFAF00}$"#SULCIU_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -33.9836,-74.3116,1003.5469, 10, MAISTO_PARDUOTUVE1, 0);
	Create3DTextLabel("{ffffff} Duona\n{ffffff}Kaina: {FFAF00}$"#DUONOS_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -37.2160,-88.3731,1003.5469, 10, MAISTO_PARDUOTUVE1, 0);

	Create3DTextLabel("{ffffff} Sûreliai\n{ffffff}Kaina: {FFAF00}$"#SURELIO_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -14.8774,-78.0956,1003.5469, 10, MAISTO_PARDUOTUVE2, 0);
	Create3DTextLabel("{ffffff} Deðros\n{ffffff}Kaina: {FFAF00}$"#DESROS_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -14.8823,-82.0770,1003.5469, 10, MAISTO_PARDUOTUVE2, 0);
	Create3DTextLabel("{ffffff} Pica\n{ffffff}Kaina: {FFAF00}$"#PICOS_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -21.2226,-83.1633,1003.5469, 10, MAISTO_PARDUOTUVE2, 0);
	Create3DTextLabel("{ffffff} Pica\n{ffffff}Kaina: {FFAF00}$"#PICOS_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -31.9058,-87.2799,1003.5469, 10, MAISTO_PARDUOTUVE2, 0);
	Create3DTextLabel("{ffffff} Ledai\n{ffffff}Kaina: {FFAF00}$"#LEDU_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -29.2305,-77.7784,1003.5469, 10, MAISTO_PARDUOTUVE2, 0);
	Create3DTextLabel("{ffffff} Ðokoladas\n{ffffff}Kaina: {FFAF00}$"#SOKOLADO_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -23.8784,-77.8102,1003.5469, 10, MAISTO_PARDUOTUVE2, 0);
	Create3DTextLabel("{ffffff} Sultys\n{ffffff}Kaina: {FFAF00}$"#SULCIU_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -20.0124,-74.3236,1003.5542, 10, MAISTO_PARDUOTUVE2, 0);
	Create3DTextLabel("{ffffff} Sultys\n{ffffff}Kaina: {FFAF00}$"#SULCIU_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -33.9836,-74.3116,1003.5469, 10, MAISTO_PARDUOTUVE2, 0);
	Create3DTextLabel("{ffffff} Duona\n{ffffff}Kaina: {FFAF00}$"#DUONOS_KAINA"\n{ffffff}Spausk {FFAF00}N{ffffff} mygtukà", -1, -37.2160,-88.3731,1003.5469, 10, MAISTO_PARDUOTUVE2, 0);

	Create3DTextLabel("{ffffff} Norint uþgrobti pastatà, raðykite:\n{FFAF00} /grobti\n{ffffff} Tai galioja tik gaujoms!\n{ffffff} Prizai: {FFAF00}10 {ffffff} gaujos taðkø bei {FFAF00}$15,000", -1, 2228.4309,-1150.6011,1025.7969, 10, 0, 0);
	Create3DTextLabel("{ffffff} Norint uþgrobti pastatà, raðykite:\n{FFAF00} /grobti\n{ffffff} Tai galioja tik gaujoms!\n{ffffff} Prizai: {FFAF00}10 {ffffff} gaujos taðkø bei {FFAF00}$15,000", -1, -92.4043,2211.9736,-78.9980, 10, 0, 0);
	//Create3DTextLabel("{ffffff} Norint uþgrobti pastatà, raðykite:\n{FFAF00} /grobti\n{ffffff} Tai galioja tik gaujoms!\n{ffffff} Prizai: {FFAF00}10 {ffffff} gaujos taðkø bei {FFAF00}$15,000", -1, 208.2638,-96.9579,1005.2578, 10, 0, 0);
	Create3DTextLabel("{ffffff} Norint uþgrobti pastatà, raðykite:\n{FFAF00} /grobti\n{ffffff} Tai galioja tik gaujoms!\n{ffffff} Prizai: {FFAF00}10 {ffffff} gaujos taðkø bei {FFAF00}$15,000", -1, 366.5718,158.7439,1008.3828, 10, 0, 0);

	LigoninesID 	= CreateEntrance("Ligoninë", -2663.8132,598.2012,15.0553, 30, 0, -905.4230,890.6810,575.2287); // perkelta
	CreateEntrance("Medikø stogas", -2616.0149,622.4554,14.4621, 0, 0, -2649.8760,644.3231,66.0938); // perkelta
	CreateEntrance("Policijos stogas", -1642.5104,703.4376,38.2391, 0, 0, -1593.8381,716.1429,-5.2422); // perkelta
	//LigoninesStogas = CreateEntrance("Ligoninës stogas", -50.7271,158.3051,999.0569, 30, 0, -2209.0608,260.2803,48.2100);
	//PolicijosStogas = CreateEntrance("Policijos departamento uþkandinë", -1592.0225,678.7860,7.2250, 0, 0, -1595.2528,687.6036,17.1759);
	//PolicijosGalas	= CreateEntrance("Policijos departamento galinës durys", -1611.7046,729.5202,-5.2100, 33, 0, 1370.5120,-942.0556,2.6669);

	Create3DTextLabel("{ffffff} AFK zona\n{ffffff}Stovëdami èia AFK gausite {FFAF00}$6/min {ffffff}ir {FFAF00}1 EXP/min\n{ffffff}Per laimingas valandas viskà gausite 2x daugiau", -1, 260.9314,1743.7734,-9.3725, 30, 0, 0);

	CreateEntrance("AFK zona", -2579.8198,310.0459,5.1797, 32, 0, 262.8690,1761.9402,-10.2141); // perkelta
	CreateEntrance("Spec. bûrio pajëgø ARAS bûstinë", -1502.9362,460.4027,7.1875, 3, 0, 238.5900,138.9235,1003.0234); // perkelta
	CreateEntrance("Spec. bûrio pajëgø ARAS stogas", -1509.4137,460.2384,7.1875, 0, 0, -1504.8882,361.1993,42.3125); // perkelta
	CreateEntrance("Bankas", -2766.2805,375.5397,6.3347, 34, 0, 991.1345,2070.1909,-36.3611);  // perkelta
	CreateEntrance("Elektronikos parduotuvë", -1967.5056,453.3782,35.1709, 35, 0, 1330.1965,1447.8599,-2.7256); // perkelta
	//CreateEntrance("Baras", -2033.9121,396.5582,35.2099, 0, 0, -2044.1691,379.7007,40.4209);
	CreateEntrance("Vyriausybë", -2712.7358,-338.4510,7.2649, 3, 0, 390.4159, 173.6984, 1008.3828); // perkelta
	CreateEntrance("Ginklø parduotuvë", -2625.9045,208.2361,4.8125, 6, 0, 316.3654, -169.8353, 999.6010); // perkelta
	CreateEntrance("Skelbimø centras", -2521.1899, -624.9377, 132.783, 12, 0, 2324.5198, -1148.9292, 1050.7101); // perkelta
	CreateEntrance("Drabuþiø parduotuvë", -1967.3547,438.3632,35.1709, 15, 0, 207.6186, -111.2661, 1005.1328); // perkelta
	CreateEntrance("Vieðbutis", -2426.0652,337.9403,36.9922, 15, 0, 2214.6079,-1150.5000,1025.7969); // perkelta
	CreateEntrance("Bokso salë Cobra", -2270.1648,-155.9468,35.3203, 5, 0, 772.2656, -5.0625, 1000.7286); // perkelta
	CreateEntrance("Naktinis klubas", -2624.6199, 1412.4114, 7.0938, 17, 0, 493.3350, -24.6613, 1000.6797); // perkelta
	CreateEntrance("Loterija", -1919.5098,576.5657,35.2413, 3, 0, 834.3198, 7.5041, 1004.1870); // perkelta
	CreateEntrance("Metalo kasykla", -2908.5657,672.6467,5.7292, 40, 0, -370.6121,-1467.0370,-36.1571); // perkelta

	CreateEntrance("MetroCity.lt Garaþas", -2323.9590,-88.6216,35.3315, 41, 0, -142.8402,-219.7568,-15.6281); // perkelta
	//CreateEntrance("Uþkandinë Cluckin Bell", -1972.2321,95.4998,27.6950, 9, CLUCKIN1, 364.8660, -11.2934, 1001.8516); // perkelta
	CreateEntrance("Uþkandinë Cluckin Bell", -2671.5986,258.4459,4.6328, 9, CLUCKIN2, 364.8660, -11.2934, 1001.8516); // perkelta
	CreateEntrance("Uþkandinë Cluckin Bell", -1816.5332,618.3926,35.1719, 9, CLUCKIN3, 364.8660, -11.2934, 1001.8516); // perkelta
	CreateEntrance("Uþkandinë Cluckin Bell", -2255.0740,542.0226,35.3708, 9, CLUCKIN4, 364.8660, -11.2934, 1001.8516); // perkelta
	CreateEntrance("Uþkandinë Burger Shot", -2355.9619,1008.1473,50.8984, 10, BURGER1, 363.1451,-74.9661,1001.5078); // perkelta
	CreateEntrance("Uþkandinë Burger Shot", -2336.8367,-166.7432,35.5756, 10, BURGER2, 363.1451,-74.9661,1001.5078); // perkelta
	CreateEntrance("Uþkandinë Burger Shot", -1912.2773,827.9753,35.2181, 10, BURGER3, 363.1451,-74.9661,1001.5078); // perkelta
	CreateEntrance("Picerija The Well Stacked Pizza", -1721.1998,1359.7131,7.1853, 5, PICERIJA1, 372.3496, -133.1732, 1001.4922); // perkelta
	CreateEntrance("Picerija The Well Stacked Pizza", -1905.2576,443.7498,35.1709, 5, PICERIJA2, 372.3496, -133.1732, 1001.4922); // perkelta
	CreateEntrance("Picerija The Well Stacked Pizza", -1808.5455,945.7303,24.8906, 5, PICERIJA3, 372.3496, -133.1732, 1001.4922); // perkelta
	CreateEntrance("Maisto parduotuvë", -2442.6538,755.3444,35.1719, 18, MAISTO_PARDUOTUVE1, -31.0020,-91.8057,1003.5469); // perkelta
	CreateEntrance("Maisto parduotuvë", -1967.3960,421.9390,35.1709, 18, MAISTO_PARDUOTUVE2, -31.0020,-91.8057,1003.5469); // perkelta
	CreateEntrance("Aukojimo fondas", -2056.8772,454.7200,35.1709, 42, 0, 800.6196,-1056.6431,-6.4641); // perkelta
	CreateEntrance("Vairavimo mokykla", -2035.1848,-101.0359,35.3848, 43, 0, -2071.4258,-118.1836,-22.7364); // perkelta
	CreateEntrance("Pagr. gatvës degalinë", -2032.9564,161.5550,29.0248, 44, STOTIES_DEGALINE, -1856.0182,-956.9263,-4.9081); // perkelta
	CreateEntrance("Degalinë Xoomer 2", -2420.0518,969.9656,45.2969, 44, VIDUTINE_DEGALINE, -1856.0182,-956.9263,-4.9081); // perkelta
	CreateEntrance("Degalinë Xoomer", -1675.9139,432.0653,7.1373, 44, DIDELE_DEGALINE, -1856.0182,-956.9263,-4.9081); // perkelta
	CreateEntrance("Laivø degalinë", -1762.0352,-173.7098,3.6089, 44, DIDELE_DEGALINE1, -1856.0182,-956.9263,-4.9081); // perkelta
	CreateEntrance("Degalinë", -78.3835,-1169.9236,2.1354, 44, DIDELE_DEGALINE2, -1856.0182,-956.9263,-4.9081); // perkelta
	CreateEntrance("Baras Gant Bridge", -2524.2893,1216.1974,37.5964, 18, 0, -229.0144,1401.2665,27.7656); // perkelta
	CreateEntrance("Baras Misty's", -2242.4773,-88.1821,35.3203, 11, 0, 501.8926,-67.6933,998.7578); // perkelta
	CreateEntrance("Spurginë Tuff Nut Donuts", -2767.8723,788.8392,52.7813, 17, 0, 377.0320,-192.9762,1000.6401); // perkelta
	CreateEntrance("Kalëjimo vidus", -339.7219,1139.5177,20.3595, 45, 0, -371.6609,1174.9181,3000.1355); // perkelta
	CreateEntrance("X Faktorius", -2109.6646,-445.7106,38.7344, 46, 0, 873.6953,-1841.7518,-45.0140); // perkelta
	CreateEntrance("Policijos departamentas", -1605.5898,712.3806,13.8641, 47, 0, -98.8853,2214.7981,-78.9980); // perkelta
	CreateEntrance("Daþasvydis", -2456.1487,503.9107,30.0781, 4, 0, 285.7930,-86.7104,1001.5229); // perkelta
	CreateEntrance("Kurjeriai", -2680.6787,174.5081,4.3290, 48, 0, -1299.6385,-137.1627,-92.0831); // perkelta
	CreateEntrance("Kazino Caligula's", -1754.2122,963.8302,24.8906, 1, 0, 2233.8916,1714.3160,1012.3828); // perkelta
	CreateEntrance("Taksi ofisas", -1643.6504,1291.9688,7.2821, 1, 0, 2213.0535,1504.0442,2001.0859); // perkelta

	format(string, sizeof(string), "{ffffff} Taksi budëjimo vieta\n{ffffff}Budëdami èia dirbant taksistu\ngausite {FFAF00}$20/min");
	format(string, sizeof(string), "{ffffff} Taksi budëjimo vieta\n{ffffff}Budëdami èia dirbant taksistu\ngausite {FFAF00}$20/min");
	CreateDynamic3DTextLabel(string, -1, -1994.9846,161.7788,27.7268, 10.0);
	CreateDynamic3DTextLabel(string, -1, -1995.0682, 166.8560, 27.7268, 10.0);
	
	Create3DTextLabel("{ffffff} Taksi budëjimo vieta\n{ffffff}Budëdami èia dirbant taksistu\ngausite {FFAF00}$20/min", -1, -2659.3960,592.5152,14.4531, 10, 0, 0);//ligo
	Create3DTextLabel("{ffffff} Taksi budëjimo vieta\n{ffffff}Budëdami èia dirbant taksistu\ngausite {FFAF00}$20/min", -1, -2666.1301,592.6978,14.4531, 10, 0, 0);//ligo

	PickupsInfo[BankoValdymas] = CreatePickup(1239, 2, 976.5085,2067.7622,-36.3611);
	Create3DTextLabel("{ffffff} Bankas\n{ffffff}Swedbank", -1, 976.5085,2067.7622,-36.3611, 10, 0, 0);

	PickupsInfo[TADujos][0] = CreatePickup(1239, 2, -2348.5862,-96.2056,35.3882, -1);
	Create3DTextLabel("{ffffff} MetroCity.lt Garaþas\n{ffffff}Dujø árangos montavimas", -1, -2348.5862,-96.2056,35.3882, 10, 0, 0);

	PickupsInfo[TADujos][1] = CreatePickup(1239, 2, -2348.3486,-99.5198,35.3882, -1);
	Create3DTextLabel("{ffffff} MetroCity.lt Garaþas\n{ffffff}Techninës apþiûros atlikimas", -1, -2348.3486,-99.5198,35.3882, 10, 0, 0);

	PickupsInfo[GreitasIsejimas] = CreatePickup(11738, 2, -886.7026,891.5613,575.2287, -1);
	Create3DTextLabel("{ffffff} Greitas iðëjimas ið ligoninës\n{ffffff}Kaina: {FFAF00}$500", -1, -886.7026,891.5613,575.2287, 10, 0, 0);

	PickupsInfo[TransportoSalonas] = CreatePickup(1274, 2, -1956.2773,300.2258,35.4687, -1);
	Create3DTextLabel("{ffffff} Transp. priemoniø salonas\n{ffffff}Transporto pirkimas", -1, -1956.2773,300.2258,35.4687, 10, 0, 0);

	PickupsInfo[MotocikluSalonas] = CreatePickup(1274, 2, -1950.9963,259.0511,41.0534, -1);
	Create3DTextLabel("{ffffff} Transp. priemoniø salonas\n{ffffff}Motociklø pirkimas", -1, -1950.9963,259.0511,41.0534, 10, 0, 0);

	PickupsInfo[LaivuSalonas] = CreatePickup(1274, 2, -2903.5002,441.3209,5.0919, -1);
	Create3DTextLabel("{ffffff} Laivø parduotuvë\n{ffffff}Laivø pirkimas", -1, -2903.5002,441.3209,5.0919, 10, 0, 0);

	PickupsInfo[Registracija] = CreatePickup(1274, 2, -145.1716,-208.3932,-15.6261, -1);
	Create3DTextLabel("{ffffff} MetroCity.lt Garaþas\n{ffffff}Transporto registracija, draudimas", -1, -145.1716,-208.3932,-15.6261, 10, 0, 0);

	PickupsInfo[MasinosAtsiemimas] = CreatePickup(1239, 2, -1891.4647,-1673.6802,21.7500, -1);
	Create3DTextLabel("{ffffff} KMA\n{ffffff}Transp. priemonës atsiëmimas", -1, -1891.4647,-1673.6802,21.7500, 10, 0, 0);

	Create3DTextLabel("{ffffff} Valomasis skystis\n{ffffff}Norint ásipilti: {FFAF00} /vskystis", -1, -2052.1765,11.9380,35.3374, 10, 0, 0);

	PickupsInfo[MobilePhoneShop] = CreatePickup(1274, 2, 1337.9209,1450.9844,-2.7256, -1);
	Create3DTextLabel("{ffffff} El. parduotuvë\n{ffffff}Telefonai", -1, 1337.9209,1450.9844,-2.7256, 7, 0, 0);

	PickupsInfo[TreniruociuZona] = CreatePickup(2358, 2, 146.3058,1911.8701,18.8069);
	Create3DTextLabel("{ffffff} Treniruoèiø zona\n{ffffff}Ginklai", -1, 146.3058,1911.8701,18.8069, 15, 0, 0);

	PickupsInfo[AkiniuPirkimas] = CreatePickup(1274, 2, 210.2717,-100.3447,1005.2578);
	Create3DTextLabel("{ffffff} Drabuþiø parduotuvë\n{ffffff}Akiniø pasirinkimas", -1, 210.2717,-100.3447,1005.2578, 15, 0, 0);

	PickupsInfo[DrabuziuPirkimas] = CreatePickup(1274, 2, 207.7132,-100.3345,1005.2578);
	Create3DTextLabel("{ffffff} Drabuþiø parduotuvë\n{ffffff}Drabuþiø pasirinkimas", -1, 207.7132,-100.3345,1005.2578, 15, 0, 0);

	PickupsInfo[GaujosDrabuziuPirkimas] = CreatePickup(1274, 2, -2082.1794,86.3050,35.3479);
	Create3DTextLabel("{ffffff} Gaujos drabuþiø parduotuvë\n{ffffff}Gaujos drabuþiø pasirinkimas", -1, -2082.1794,86.3050,35.3479, 15, 0, 0);

	PickupsInfo[MechanikuIsidarbinimas] = CreatePickup(1314, 2, -2637.2673,-20.3348,4.1694);
	Create3DTextLabel("{ffffff} Darbas: {FFFFFF}Autoservisas ECO", -1, -2637.2673,-20.3348,4.1694, 20, 0, 0);

	PickupsInfo[PolicijosIsidarbinimas] = CreatePickup(1314, 2, -76.1923,2223.2219,-78.9980);
	Create3DTextLabel("{ffffff} Darbas: {FFFFFF}Policija", -1, -76.1923,2223.2219,-78.9980, 20, 0, 0);

	PickupsInfo[KurjeriuIsidarbinimas] = CreatePickup(1314, 2, -1312.5563,-140.6811,-92.0831);
	Create3DTextLabel("{ffffff} Darbas: {FFFFFF}Kurjeriai", -1, -1312.5563,-140.6811,-92.0831, 20, 0, 0);

	PickupsInfo[MedikuIsidarbinimas] = CreatePickup(1314, 2, -850.4474,893.4598,575.2287);
	Create3DTextLabel("{ffffff} Darbas: {FFFFFF}Medikai", -1, -850.4474,893.4598,575.2287, 20, 0, 0);
	
	PickupsInfo[TaxiIsidarbinimas] = CreatePickup(1314, 2, 2220.7505,1499.5051,2001.0909);
	Create3DTextLabel("{ffffff} Darbas: {FFFFFF}Taksistai", -1, 2220.7505,1499.5051,2001.0909, 20, 0, 0);

	PickupsInfo[FuristuIsidarbinimas] = CreatePickup(1314, 2, -2171.6692,-209.1815,35.1218);
	Create3DTextLabel("{ffffff} Darbas: {FFFFFF}Fûristai", -1, -2171.6692,-209.1815,35.1218, 20, 0, 0);

	PickupsInfo[DyleriuIsidarbinimas] = CreatePickup(1314, 2, 233.4657,158.6633,1003.0234);
	Create3DTextLabel("{ffffff} Darbas: {FFFFFF}Spec. bûrio pajëgos ARAS", -1, 233.4657,158.6633,1003.0234, 20, 0, 0);

	PickupsInfo[ValytojuIsidarbinimas] = CreatePickup(1314, 2, -2054.5505,-14.3301,35.3534);
	Create3DTextLabel("{ffffff} Darbas: {ffffff}Keliø valytojai", -1, -2054.5505,-14.3301,35.3534, 20, 0, 0);

	PickupsInfo[GaisrininkuIsidarbinimas] = CreatePickup(1314, 2, -1834.0001,144.7530,15.1172);
	Create3DTextLabel("{ffffff} Darbas: {ffffff}Gaisrininkai", -1, -1834.0001,144.7530,15.1172, 20, 0, 0);

	PickupsInfo[AutobusininkuIsidarbinimas] = CreatePickup(1314, 2, -2193.9255,355.3281,35.3497);
	Create3DTextLabel("{ffffff} Darbas: {ffffff}Autobusø vairuotojai", -1, -2193.9255,355.3281,35.3497, 20, 0, 0);

	PickupsInfo[PicuIsidarbinimas] = CreatePickup(1314, 2, 379.6763,-119.3518,1001.4922, PICERIJA2);
	Create3DTextLabel("{ffffff} Darbas: {ffffff}Picø iðveþiotojai", -1, 379.6763,-119.3518,1001.4922, 10.0, PICERIJA2, 0);

	PickupsInfo[AlgosAtsiemimas] = CreatePickup(1239, 2, 362.3399, 173.7508, 1008.3828);
	Create3DTextLabel("{ffffff} Algos atsiëmimas", -1, 362.3399, 173.7508, 1008.3828, 15, 0, 0);

	PickupsInfo[LietuvosSpauda][0] = CreatePickup(1274, 2, -1524.1583,524.1660,7.1797);
	Create3DTextLabel("{ffffff} Kioskas\n{ffffff}Lietuvos spauda", -1, -1524.1583,524.1660,7.1797, 15, 0, 0);

	PickupsInfo[LietuvosSpauda][1] = CreatePickup(1274, 2, -1983.9202,881.9078,45.2031);
	Create3DTextLabel("{ffffff} Kioskas\n{ffffff}Lietuvos spauda", -1, -1983.9202,881.9078,45.2031, 15, 0, 0);

	PickupsInfo[LietuvosSpauda][2] = CreatePickup(1274, 2,-2097.8174,59.1010,35.3203);
	Create3DTextLabel("{ffffff} Kioskas\n{ffffff}Lietuvos spauda", -1, -2097.8174,59.1010,35.3203, 15, 0, 0);

	PickupsInfo[LietuvosSpauda][3] = CreatePickup(1274, 2, -1988.3687,215.9820,27.7089);//spawn
	Create3DTextLabel("{ffffff} Kioskas\n{ffffff}Lietuvos spauda", -1, -1988.3687,215.9820,27.7089, 15, 0, 0);

	//sita
	PickupsInfo[LietuvosSpauda][4] = CreatePickup(1274, 2, -1188.4222,699.1501,-25.2278);//spawn
	//Create3DTextLabel("{ffffff} Kioskas\n{ffffff}Lietuvos spauda", -1, -1992.2701,86.8481,27.6875, 15, 0, 0);

	PickupsInfo[Atstatymas] = CreatePickup(1274, 2, -147.6645,-209.7162,-15.6261);
	Create3DTextLabel("{ffffff} MetroCity.lt Garaþas\n{ffffff}Transporto atstatymas", -1, -147.6645,-209.7162,-15.6261, 10, 0, 0);

	PickupsInfo[lAtstatymas] = CreatePickup(1274, 2, -2985.6343,469.6664,6.4299);
	Create3DTextLabel("{ffffff} Laivø parduotuvë\n{ffffff}Laivø atstatymas", -1, -2985.6343,469.6664,6.4299, 10, 0, 0);

	PickupsInfo[Theory] = CreatePickup(1239, 2, -2091.3833,-111.8962,-22.7364);
	Create3DTextLabel("{ffffff} Vairavimo mokykla\n{ffffff}Teorijos egzaminas", -1, -2091.3833,-111.8962,-22.7364, 10, 0, 0);

	PickupsInfo[SveikatosPazymejimas] = CreatePickup(11736, 2, -891.0087,891.8139,575.2287);
	Create3DTextLabel("{ffffff} Sveikatos paþymëjimas\n{ffffff}Kaina: {FFAF00}$2,000", -1, -891.0087,891.8139,575.2287, 10, 0, 0);

	PickupsInfo[HPHeal] = CreatePickup(1240, 2, -895.0801,891.7494,575.2287);
	Create3DTextLabel("{ffffff} Pasigydymas\n{ffffff}Kaina: {FFAF00}$1,000", -1, -895.0801,891.7494,575.2287, 10, 0, 0);

	PickupsInfo[SalmoPirkimas] = CreatePickup(1274, 2, -1946.2301,259.1150,41.0470);
	Create3DTextLabel("{ffffff} Transp. priemoniø salonas\n{ffffff}Ðalmo pirkimas\nKaina: {FFAF00}$300", -1, -1946.2301,259.1150,41.0470, 10, 0, 0);

	PickupsInfo[NascarPickup] = CreatePickup(1239, 2, 3026.0554,-2102.3457,2.8427);
	Create3DTextLabel("{ffffff} Teleportacija á San Fierro miestà", -1, 3026.0554,-2102.3457,2.8427, 20, 0, 0);

	PickupsInfo[PolicijosGinklai] = CreatePickup(2358, 2, -62.0045,2223.4717,-78.9980);
	Create3DTextLabel("{ffffff} Policijos departamentas\n{ffffff}Ginklai, pasigydymas", -1, -62.0045,2223.4717,-78.9980, 10, 0, 0);

	PickupsInfo[ArasGinklai] = CreatePickup(2358, 2, -1285.8130,474.5006,7.8978);
	Create3DTextLabel("{ffffff} Spec. bûrio pajëgos ARAS\n{ffffff}Ginklai, pasigydymas", -1, -1285.8130,474.5006,7.8978, 15, 0, 0);

	PickupsInfo[KalejimoPickup][0] = CreatePickup(1247, 14 || 2, -1606.3092,675.2003,-5.2557);
	Create3DTextLabel("{ffffff} Policijos departamentas\n{ffffff}Kelias á kalëjimà", -1, -1606.3092,675.2003,-5.2557, 10, 0, 0);

	PickupsInfo[KalejimoPickup][1] = CreatePickup(1247, 14 || 2, -1308.8994,473.6122,7.1875);
	Create3DTextLabel("{ffffff} Spec. bûrio pajëgos ARAS\n{ffffff}Kelias á kalëjimà", -1, -1308.8994,473.6122,7.1875, 15, 0, 0);

	PickupsInfo[BaudosSusimokejimas] = CreatePickup(1274, 2, -98.7815,2212.0635,-78.9980); // PD
	Create3DTextLabel("{ffffff} Policijos departamentas\n{ffffff}Iðsiteisinti galima tik turint maþiau nei 60 ieðkomumo lygiø", -1, -98.7815,2212.0635,-78.9980, 10, 0, 0); // PD

	PickupsInfo[IspirkosMokejimas] = CreatePickup(1274, 2, -96.2020,2212.0640,-78.9980); // PD
	Create3DTextLabel("{ffffff} Policijos departamentas\n{ffffff}Uþstato mokëjimas uþ kaliná", -1, -96.2020,2212.0640,-78.9980, 10, 0, 0); // PD

	//PickupsInfo[FuristuPasikrovimas] = CreatePickup(1239, 2, -2133.5410,-161.7944,35.3203);
	//Create3DTextLabel("{ffffff} Fûristø pasikrovimas", -1, -2133.5410,-161.7944,35.3203, 15, 0, 0);

	//sita
	PickupsInfo[CashMachine][0] = CreatePickup(1212, 2, -1188.4222,699.1501,-25.2278);
	//Create3DTextLabel("{ffffff} Bankomatas\n{ffffff}Pinigø iðgrynimas, balanso tikrinimas", -1, -1981.2990,121.0603,27.6789, 10, 0, 0);

	PickupsInfo[CashMachine][1] = CreatePickup(1212, 2, -2430.2610,117.0172,35.1641);
	Create3DTextLabel("{ffffff} Bankomatas\n{ffffff}Pinigø iðgrynimas, balanso tikrinimas", -1, -2430.2610,117.0172,35.1641, 10, 0, 0);

	PickupsInfo[CashMachine][2] = CreatePickup(1212, 2, -2772.5652,-323.7436,7.1875);
	Create3DTextLabel("{ffffff} Bankomatas\n{ffffff}Pinigø iðgrynimas, balanso tikrinimas", -1, -2772.5652,-323.7436,7.1875, 10, 0, 0);

	PickupsInfo[CashMachine][3] = CreatePickup(1212, 2, 2156.3560,1600.8280,1006.1797);
	Create3DTextLabel("{ffffff} Kazino Caligula's\n{ffffff}Pinigø iðgrynimas, balanso tikrinimas", -1, 2156.3560,1600.8280,1006.1797, 10, 0, 0);

	PickupsInfo[CashMachine][4] = CreatePickup(1212, 2, 2156.4209,1598.1024,1006.1863);
	Create3DTextLabel("{ffffff} Kazino Caligula's\n{ffffff}Pinigø iðgrynimas, balanso tikrinimas", -1, 2156.4209,1598.1024,1006.1863, 10, 0, 0);

	//PickupsInfo[LeduPickup][0] 		= CreatePickup(1274, 2, -2285.4839,148.1465,35.3125);
	PickupsInfo[LeduPickup][0]		= CreatePickup(1274, 2, -1991.1597,153.7619,27.7268);
	PickupsInfo[LeduPickup][1]		= CreatePickup(1274, 2, -2383.1167,-584.3574,132.1117);
	//PickupsInfo[HotdogPickup][0] 	= CreatePickup(1274, 2, -1995.3536,210.5998,27.6866);
	PickupsInfo[HotdogPickup][0] 	= CreatePickup(1274, 2, -2691.0662,383.5699,4.3750);
	PickupsInfo[HotdogPickup][1] 	= CreatePickup(1274, 2, -2147.4797,-424.3550,35.3359);
	PickupsInfo[HotdogPickup][2] 	= CreatePickup(1274, 2, -2094.9812,-395.7142,35.5313);
	PickupsInfo[HotdogPickup][3] 	= CreatePickup(1274, 2, -2036.5645,-395.7327,35.5313);
	PickupsInfo[HotdogPickup][4] 	= CreatePickup(1274, 2, -2674.8667,631.3091,14.4529);
	PickupsInfo[FastFoodPickup][0] 	= CreatePickup(1274, 2, -2152.5781,-434.6916,35.3359);
	PickupsInfo[FastFoodPickup][1] 	= CreatePickup(1274, 2, -1997.4847,144.8824,27.7268);
	PickupsInfo[FastFoodPickup][2] 	= CreatePickup(1274, 2, -2514.7883, -15.1426, 25.6172);

	PickupsInfo[ElektronikosPard][0] = CreatePickup(1274, 2, 1333.6775,1454.0858,-2.7256);
	Create3DTextLabel("{ffffff} El. parduotuvë\n{ffffff}Kita", -1, 1333.6775,1454.0858,-2.7256, 7, 0, 0);

	PickupsInfo[ElektronikosPard][1] = CreatePickup(1274, 2, 1333.6775,1454.0858,-2.7256);
	Create3DTextLabel("{ffffff} El. parduotuvë\n{ffffff}Kita", -1, 1333.6775,1454.0858,-2.7256, 7, 0, 0);

	PickupsInfo[MaistoParduotuve][0] = CreatePickup(1274, 2, -27.7082,-89.9456,1003.5469, MAISTO_PARDUOTUVE1);
	Create3DTextLabel("{ffffff} Maisto parduotuvë\n{ffffff}Atsiskaitymas uþ prekes", -1, -27.7082,-89.9456,1003.5469, 10, MAISTO_PARDUOTUVE1, 0);

	PickupsInfo[MaistoParduotuve][1] = CreatePickup(1274, 2, -27.7082,-89.9456,1003.5469, MAISTO_PARDUOTUVE2);
	Create3DTextLabel("{ffffff} Maisto parduotuvë\n{ffffff}Atsiskaitymas uþ prekes", -1, -27.7082,-89.9456,1003.5469, 10, MAISTO_PARDUOTUVE2, 0);

	PickupsInfo[GinkluParduotuve] = CreatePickup(1274, 2, 312.7335, -166.1410, 999.6010);
	Create3DTextLabel("{ffffff} Ginklø parduotuvë\n{ffffff}Ginklø pasirinkimas, licenzija", -1, 312.7335, -166.1410, 999.6010, 10, 0, 0);

	PickupsInfo[Paremimas] = CreatePickup(1274, 2, 791.2653,-1051.8165,-6.4641);
	Create3DTextLabel("{ffffff} Aukojimo fondas\n{ffffff}Darbø rëmimas", -1, 791.2653,-1051.8165,-6.4641, 10, 0, 0);

	PickupsInfo[ZvejuTurgus] = CreatePickup(1274, 2, -2412.9097,1447.5670,8.3738);
	Create3DTextLabel("{ffffff} Þvejybvietë\n{ffffff}Þvejybos reikmenys, informacija", -1, -2412.9097,1447.5670,8.3738, 10, 0, 0);

	PickupsInfo[MetroCityTurgusMetalas] = CreatePickup(1274, 2, -2472.5220,254.9415,35.1719);
	Create3DTextLabel("{ffffff} MetroCity.lt Turgus\n{ffffff}Metalo pardavimas", -1, -2472.5220,254.9415,35.1719, 10, 0, 0);

	PickupsInfo[MetroCityTurgusZuvis] = CreatePickup(1274, 2, -2443.4590,254.8259,35.1719);
	Create3DTextLabel("{ffffff} MetroCity.lt Turgus\n{ffffff}Þuvies pardavimas", -1, -2443.4590,254.8259,35.1719, 10, 0, 0);

	PickupsInfo[teleauto] = CreatePickup(2485, 2, -2333.7793,-88.9374,35.3315);
	Create3DTextLabel("{ffffff} Tr.Atsikeldinimas\n{ffffff}Nuosavos maðinos atsikeldinimas uþ $1000", -1, -2333.7793,-88.9374,35.3315, 10, 0, 0);

	PickupsInfo[GarazoPirkimas] = CreatePickup(1239, 2, -2592.1082,662.6223,28.0033);
	Create3DTextLabel("{ffffff} Garaþai\n{ffffff}Garaþø nuoma, nuomos nutraukimas", -1, -2592.1082,662.6223,28.0033, 10, 0, 0);

	PickupsInfo[Loterija] = CreatePickup(1274, 2, 830.7087, 0.2313, 1004.1797);

	PickupsInfo[CluckinBell][0] = CreatePickup(1274, 2, 368.7433,-6.0773,1001.8516, CLUCKIN1);
	PickupsInfo[CluckinBell][1] = CreatePickup(1274, 2, 368.7433,-6.0773,1001.8516, CLUCKIN2);
	PickupsInfo[CluckinBell][2] = CreatePickup(1274, 2, 368.7433,-6.0773,1001.8516, CLUCKIN3);
	PickupsInfo[CluckinBell][3] = CreatePickup(1274, 2, 368.7433,-6.0773,1001.8516, CLUCKIN4);
	Create3DTextLabel("{ffffff} Uþkandinë Cluckin Bell\n{ffffff}Meniu", -1, 368.7433,-6.0773,1001.8516, 10, CLUCKIN1, 0);
	Create3DTextLabel("{ffffff} Uþkandinë Cluckin Bell\n{ffffff}Meniu", -1, 368.7433,-6.0773,1001.8516, 10, CLUCKIN2, 0);
	Create3DTextLabel("{ffffff} Uþkandinë Cluckin Bell\n{ffffff}Meniu", -1, 368.7433,-6.0773,1001.8516, 10, CLUCKIN3, 0);
	Create3DTextLabel("{ffffff} Uþkandinë Cluckin Bell\n{ffffff}Meniu", -1, 368.7433,-6.0773,1001.8516, 10, CLUCKIN4, 0);

	PickupsInfo[BurgerShot][0] = CreatePickup(1274, 2, 375.9236,-67.4349,1001.5078, BURGER1);
	PickupsInfo[BurgerShot][1] = CreatePickup(1274, 2, 375.9236,-67.4349,1001.5078, BURGER2);
	PickupsInfo[BurgerShot][2] = CreatePickup(1274, 2, 375.9236,-67.4349,1001.5078, BURGER3);
	Create3DTextLabel("{ffffff} Uþkandinë Burger Shot\n{ffffff}Meniu", -1, 375.9236,-67.4349,1001.5078, 10, BURGER1, 0);
	Create3DTextLabel("{ffffff} Uþkandinë Burger Shot\n{ffffff}Meniu", -1, 375.9236,-67.4349,1001.5078, 10, BURGER2, 0);
	Create3DTextLabel("{ffffff} Uþkandinë Burger Shot\n{ffffff}Meniu", -1, 375.9236,-67.4349,1001.5078, 10, BURGER3, 0);

	PickupsInfo[Picerija][0] = CreatePickup(1274, 2, 373.3427,-118.8027,1001.4922, PICERIJA1);
	Create3DTextLabel("{ffffff} Picerija The Well Stacked Pizza\n{ffffff}Meniu", -1, 373.3427,-118.8027,1001.4922, 10, PICERIJA1, 0);

	PickupsInfo[Picerija][1] = CreatePickup(1274, 2, 373.3427,-118.8027,1001.4922, PICERIJA2);
	Create3DTextLabel("{ffffff} Picerija The Well Stacked Pizza\n{ffffff}Meniu", -1, 373.3427,-118.8027,1001.4922, 10, PICERIJA2, 0);

	PickupsInfo[Picerija][2] = CreatePickup(1274, 2, 373.3427,-118.8027,1001.4922, PICERIJA3);
	Create3DTextLabel("{ffffff} Picerija The Well Stacked Pizza\n{ffffff}Meniu", -1, 373.3427,-118.8027,1001.4922, 10, PICERIJA3, 0);

	PickupsInfo[PizzaDelivery] = CreatePickup(1582, 1, 378.6540,-113.9615,1001.4922, PICERIJA2);
	Create3DTextLabel("{ffffff} Picerija The Well Stacked Pizza\n{ffffff}Picos pasiemimas", -1, 378.6540,-113.9615,1001.4922, 10.0, PICERIJA2, 0);

	PickupsInfo[sKuras][0] = CreatePickup(1274, 2, -1854.8657,-970.6583,-4.9061, STOTIES_DEGALINE);
	Create3DTextLabel("{ffffff} Pagr. gatvës degalinë\n{ffffff}Atsiskaitymas uþ kurà", -1, -1854.8657,-970.6583,-4.9061, 10, STOTIES_DEGALINE, 0);

	PickupsInfo[sKuras][1] = CreatePickup(1274, 2, -1854.8657,-970.6583,-4.9061, VIDUTINE_DEGALINE);
	Create3DTextLabel("{ffffff} Degalinë Xoomer 2\n{ffffff}Atsiskaitymas uþ kurà", -1, -1854.8657,-970.6583,-4.9061, 10, VIDUTINE_DEGALINE, 0);

	PickupsInfo[sKuras][2] = CreatePickup(1274, 2, -1854.8657,-970.6583,-4.9061, DIDELE_DEGALINE);
	Create3DTextLabel("{ffffff} Degalinë Xoomer\n{ffffff}Atsiskaitymas uþ kurà", -1, -1854.8657,-970.6583,-4.9061, 10, DIDELE_DEGALINE, 0);

	PickupsInfo[sKuras][3] = CreatePickup(1274, 2, -1854.8657,-970.6583,-4.9061, DIDELE_DEGALINE1);
	Create3DTextLabel("{ffffff} Laivø degalinë\n{ffffff}Atsiskaitymas uþ kurà", -1, -1854.8657,-970.6583,-4.9061, 10, DIDELE_DEGALINE1, 0);

	PickupsInfo[sKuras][4] = CreatePickup(1274, 2, -1854.8657,-970.6583,-4.9061, DIDELE_DEGALINE2);
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Atsiskaitymas uþ kurà", -1, -1854.8657,-970.6583,-4.9061, 10, DIDELE_DEGALINE2, 0);

	PickupsInfo[sKuras1][0] = CreatePickup(1274, 2, -1857.0302,-970.7095,-4.9061, STOTIES_DEGALINE);
	Create3DTextLabel("{ffffff} Pagr. gatvës degalinë\n{ffffff}Kuro bakelio pirkimas\nKaina: {FFAF00}$80", -1, -1857.0302,-970.7095,-4.9061, 10, STOTIES_DEGALINE, 0);

	PickupsInfo[sKuras1][1] = CreatePickup(1274, 2, -1857.0302,-970.7095,-4.9061, VIDUTINE_DEGALINE);
	Create3DTextLabel("{ffffff} Degalinë Xoomer 2\n{ffffff}Kuro bakelio pirkimas\nKaina: {FFAF00}$80", -1, -1857.0302,-970.7095,-4.9061, 10, VIDUTINE_DEGALINE, 0);

	PickupsInfo[sKuras1][2] = CreatePickup(1274, 2, -1857.0302,-970.7095,-4.9061, DIDELE_DEGALINE);
	Create3DTextLabel("{ffffff} Degalinë Xoomer\n{ffffff}Kuro bakelio pirkimas\nKaina: {FFAF00}$80", -1, -1857.0302,-970.7095,-4.9061, 10, DIDELE_DEGALINE, 0);

	PickupsInfo[sKuras1][3] = CreatePickup(1274, 2, -1857.0302,-970.7095,-4.9061, DIDELE_DEGALINE1);
	Create3DTextLabel("{ffffff} Laivø degalinë\n{ffffff}Kuro bakelio pirkimas\nKaina: {FFAF00}$80", -1, -1857.0302,-970.7095,-4.9061, 10, DIDELE_DEGALINE1, 0);

	PickupsInfo[sKuras1][4] = CreatePickup(1274, 2, -1857.0302,-970.7095,-4.9061, DIDELE_DEGALINE2);
	Create3DTextLabel("{ffffff} Degalinë\n{ffffff}Kuro bakelio pirkimas\nKaina: {FFAF00}$80", -1, -1857.0302,-970.7095,-4.9061, 10, DIDELE_DEGALINE2, 0);

	//PickupsInfo[FoodPickup][4] = CreatePickup(1274, 2, -2152.5781,-434.6916,35.3359); // Lauke

	PickupsInfo[BarPickup][0] = CreatePickup(1274, 2, -224.7806,1404.8602,27.7734);
	Create3DTextLabel("{ffffff} Baras Gant Bridge\n{ffffff}Gërimai", -1, -224.7806,1404.8602,27.7734, 10, 0, 0);

	PickupsInfo[BarPickup][1] = CreatePickup(1274, 2, 499.9693, -18.7579, 1000.6719);
	Create3DTextLabel("{ffffff} Naktinis klubas\n{ffffff}Gërimai", -1, 499.9693, -18.7579, 1000.6719, 10, 0, 0);

	PickupsInfo[BarPickup][2] = CreatePickup(1274, 2, 494.9222,-76.0324,998.7578);
	Create3DTextLabel("{ffffff} Baras Misty's\n{ffffff}Gërimai", -1, 494.9222,-76.0324,998.7578, 10, 0, 0);

	PickupsInfo[BarPickup][3] = CreatePickup(1274, 2, 2197.8213,1607.6528,1005.0625);
	Create3DTextLabel("{ffffff} Kazino Caligula's\n{ffffff}Gërimai", -1, 2197.8213,1607.6528,1005.0625, 10, 0, 0);

	PickupsInfo[BarPickup][4] = CreatePickup(1274, 2, 2191.2825,1598.8921,1005.0625);
	Create3DTextLabel("{ffffff} Kazino Caligula's\n{ffffff}Gërimai", -1, 2191.2825,1598.8921,1005.0625, 10, 0, 0);

	MedikuVartai = CreateDynamicObject(3037, -2195.61816, 222.25729, 29.64330, 0.00000, 0.00000, 0.00000);
	Create3DTextLabel("{AEAEAE}Vartus atidaryti/uþdaryti galite paspaudus {E0D864}N {AEAEAE}mygtukà", -1, -2195.61816, 222.25729, 29.64330, 10, 0, 0);

	FuristuVartai = CreateDynamicObject(2990, -2127.17334, -80.55104, 38.13493,   0.00000, 0.00000, 0.00000);
	format(strf, sizeof(strf), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà");
	gatesText[6] = Create3DTextLabel(strf, -1, -2127.17334, -80.55104, 37.13493, 15, 0, 0);

	pdvartai = CreateDynamicObject(980,-1571.90002441,661.50000000,6.90000010,0.00000000,0.00000000,270.00000000); //object(airportgate) (10)
	format(strf, sizeof(strf), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà");
	gatesText[3] = Create3DTextLabel(strf, -1, -1571.785278, 661.355407, 6.846899, 15, 0, 0);

	pdvartai2 = CreateDynamicObject(980,-1641.50000000,682.29998779,8.10000038,0.00000000,0.00000000,90.00000000); //object(airportgate) (6) //object(sfcopdr) (1)
	format(strf, sizeof(strf), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà");
	gatesText[4] = Create3DTextLabel(strf, -1, -1641.652587, 681.394714, 6.846899, 15, 0, 0);

	pdvartai3 = CreateDynamicObject(10184,-1631.59997559,688.20001221,8.89999962,0.00000000,0.00000000,90.00000000); //object(sfcopdr) (1)
	format(strf, sizeof(strf), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà");
	gatesText[5] = Create3DTextLabel(strf, -1, -1631.193725, 688.143554, 8.181819, 15, 0, 0);

	GarazoVartai[0] = CreateObject(17951, -2579.43335, 651.75250, 28.62750,   0.00000, 0.00000, 90.00000);
	GarazoVartai[1] = CreateObject(17951, -2572.22412, 651.75781, 28.62980,   0.00000, 0.00000, 90.00000);
	GarazoVartai[2] = CreateObject(17951, -2565.01392, 651.77802, 28.58520,   0.00000, 0.00000, 90.00000);
	GarazoVartai[3] = CreateObject(17951, -2557.79932, 651.79791, 28.62100,   0.00000, 0.00000, 90.00000);
	GarazoVartai[4] = CreateObject(17951, -2550.61792, 651.80829, 28.62139,   0.00000, 0.00000, 90.00000);
	GarazoVartai[5] = CreateObject(17951, -2543.43530, 651.76538, 28.60173,   0.00000, 0.00000, 90.00000);
	GarazoVartai[6] = CreateObject(17951, -2586.61230, 629.89459, 28.63820,   0.00000, 0.00000, 90.00000);
	GarazoVartai[7] = CreateObject(17951, -2579.43628, 629.93188, 28.65430,   0.00000, 0.00000, 90.00000);
	GarazoVartai[8] = CreateObject(17951, -2572.22290, 629.88849, 28.64610,   0.00000, 0.00000, 90.00000);
	GarazoVartai[9] = CreateObject(17951, -2565.01563, 629.89130, 28.64060,   0.00000, 0.00000, 90.00000);
	GarazoVartai[10] = CreateObject(17951, -2557.79590, 629.89478, 28.63460,  0.00000, 0.00000, 90.00000);
	GarazoVartai[11] = CreateObject(17951, -2550.60962, 629.90668, 28.63400,  0.00000, 0.00000, 90.00000);
	GarazoVartai[12] = CreateObject(17951, -2543.41357, 629.89337, 28.65920,  0.00000, 0.00000, 90.00000);

	NamuGarazoVartai[0] = CreateObject(17951, -2833.34985, -63.70320, 9.76500,   0.00000, 0.00000, 90.00000);
	NamuGarazoVartai[1] = CreateObject(17951, -2026.59045, -874.29871, 33.00880,   0.00000, 0.00000, 0.00000);

	SlagbaumMirki = CreateObject(968, -2638.87720, 859.23462, 63.87920,   0.00000, 90.00000, 90.00000);

	ArasVartai[0] = CreateDynamicObject(19912, -1518.10999, 462.76999, 8.880,   0.00000, 0.00000, -90.00000);
	format(strf, sizeof(strf), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}SERVERIS");
	gatesText[0] = Create3DTextLabel(strf, -1, -1517.8530,468.6875,9.1204, 15, 0, 0);

	ArasVartai[1] = CreateDynamicObject(988, -1318.57532, 481.80057, 7.220,   0.00000, 0.00000, 0.00000);
	format(strf, sizeof(strf), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}SERVERIS");
	gatesText[1] = Create3DTextLabel(strf, -1, -1318.61743, 481.78271, 8.35800, 15, 0, 0);

	KurjeriuSlagbaumas = CreateObject(968, -2696.40674, 204.49130, 4.10320,   0.00000, 270.00000, 90.00000);
    format(strf, sizeof(strf), "{ffffff}Vartus atidaryti/uþdaryti galite paspaudus {ff9966}N {ffffff}mygtukà\nPaskutinis naudojas vartus {ff9966}SERVERIS");
	gatesText[2] = Create3DTextLabel(strf, -1, -2696.5315,200.7775,4.3280, 15, 0, 0);

	PasikrovimoSlagbaumas = CreateObject(968, 1812.93103, -2075.05127, 13.36041,   0.00000, 90.00000, 90.00000);
	Create3DTextLabel("{AEAEAE}Ðlagbaumà atidaryti/uþdaryti galite paspaudus {E0D864}N {AEAEAE}mygtukà", -1, 1812.93103, -2075.05127, 13.36041, 10, 0, 0);

	MedikuSlagbaumas = CreateObject(968, -2598.79224, 689.19299, 27.57580,   0.00000, 90.00000, 270.00000);
	Create3DTextLabel("{AEAEAE}Ðlagbaumà atidaryti/uþdaryti galite paspaudus {E0D864}N {AEAEAE}mygtukà", -1, -2598.79224, 689.19299, 27.57580, 10, 0, 0);

//	KMAVartai = CreateDynamicObject(980, -1665.00854, 1296.86877, 8.84070,   0.00000, 0.00000, -45.00000);
//	Create3DTextLabel("{AEAEAE}Vartus atidaryti/uþdaryti galite paspaudus {E0D864}N {AEAEAE}mygtukà", -1, -1665.00854, 1296.86877, 8.84070, 10, 0, 0);

}
stock LoadVehicles()
{
	//Gaujos maðinos, ID: 1 [ZeroGangID]
	ZeroGangID[0] = AC_CreateVehicle(566,-2489.7842,762.4815,34.9553,356.8655, 93, 93,600);
	ZeroGangID[1] = AC_CreateVehicle(550,-2498.4390,764.5327,34.9896,269.1324, 93, 93,600);

	//Gaujos maðinos, ID: 2 [ZeroGangID]
	FirstGangID[0] = AC_CreateVehicle(529,-2703.5896,1419.7278,6.7319,179.8318, 233, 233,600);
	FirstGangID[1] = AC_CreateVehicle(405,-2690.6616,1392.9460,6.9765,170.9381, 233, 233,600);

	//Gaujos maðinos, ID: 3
	SecondGangID[0] = AC_CreateVehicle(536,-2503.1021,-715.2281,139.0576,359.3360, 6, 6,600);
	SecondGangID[1] = AC_CreateVehicle(445,-2512.4041,-691.5929,139.1953,270.4087, 6, 6,600);

	//Gaisrinës
	AC_CreateVehicle(407, -1831.6639, 122.8370, 15.0972, 270.0000, 3, 1,600);
	AC_CreateVehicle(407, -1831.6639, 127.0370, 15.0972, 270.0000, 3, 1,600);
	AC_CreateVehicle(407, -1831.6639, 132.4370, 15.0972, 270.0000, 3, 1,600);
	AC_CreateVehicle(407, -1831.6639, 136.6370, 15.0972, 270.0000, 3, 1,600);
	AC_CreateVehicle(407, -1831.6639, 153.2370, 15.0972, 270.0000, 3, 1,600);
	AC_CreateVehicle(407, -1831.6639, 157.4370, 15.0972, 270.0000, 3, 1,600);
	AC_CreateVehicle(407, -1831.6639, 163.2370, 15.0972, 270.0000, 3, 1,600);
	AC_CreateVehicle(407, -1831.6639, 167.4370, 15.0972, 270.0000, 3, 1,600);

	//AC_CreateVehicle(407, -2248.8806,227.3425,35.1641,15.0091, -1, -1, 10);

	//VM maðinos
	VairavimoMokyklosMasina[0] = AC_CreateVehicle(403, -2092.9058, -127.9510, 35.8726, 180.0000, 79, 79, 100);
	VairavimoMokyklosMasina[1] = AC_CreateVehicle(403, -2087.8682, -127.9510, 35.8726, 180.0000, 79, 79, 100);

	VairavimoMokyklosMasina[2] = AC_CreateVehicle(521, -2058.6736, -127.6529, 34.8631, 180.0000, 79, 79, 100);
    VairavimoMokyklosMasina[3] = AC_CreateVehicle(521, -2060.9324, -127.6529, 34.8631, 180.0000, 79, 79, 100);
    VairavimoMokyklosMasina[4] = AC_CreateVehicle(521, -2063.2534, -127.6529, 34.8631, 180.0000, 79, 79, 100);

    VairavimoMokyklosMasina[5] = AC_CreateVehicle(445, -2083.4951, -128.0214, 35.1457, 180.0000, 79, 79, 100);
    VairavimoMokyklosMasina[6] = AC_CreateVehicle(445, -2066.1123, -128.0214, 35.1457, 180.0000, 79, 79, 100);
    VairavimoMokyklosMasina[7] = AC_CreateVehicle(445, -2069.6492, -128.0214, 35.1457, 180.0000, 79, 79, 100);
    VairavimoMokyklosMasina[8] = AC_CreateVehicle(445, -2079.8926, -128.0214, 35.1457, 180.0000, 79, 79, 100);
    VairavimoMokyklosMasina[9] = AC_CreateVehicle(445, -2076.4531, -128.0214, 35.1457, 180.0000, 79, 79, 100);
    VairavimoMokyklosMasina[10] = AC_CreateVehicle(445, -2073.0923, -128.0214, 35.1457, 180.0000, 79, 79, 100);

	//Valytojai
	AC_CreateVehicle(574, -2062.5581, 14.4426, 35.0324, 135.0000, 1, 1, 100);
    AC_CreateVehicle(574, -2066.4763, 10.5136, 35.0324, 135.0000, 1, 1, 100);
    AC_CreateVehicle(574, -2070.5789, 6.4820, 35.0324, 135.0000, 1, 1, 100);
    AC_CreateVehicle(574, -2070.5579, -33.4402, 35.0324, 45.0000, 1, 1, 100);
    AC_CreateVehicle(574, -2063.3030, -40.9877, 35.0324, 45.0000, 1, 1, 100);
    AC_CreateVehicle(574, -2066.9514, -37.1483, 35.0324, 45.0000, 1, 1, 100);
    AC_CreateVehicle(574, -2053.7974, -22.7539, 35.0324, 90.0000, 1, 1, 100);
    AC_CreateVehicle(574, -2053.7971, -26.1331, 35.0324, 90.0000, 1, 1, 100);
    AC_CreateVehicle(574, -2053.7976, -29.4951, 35.0324, 90.0000, 1, 1, 100);
    AC_CreateVehicle(574, -2053.7971, -32.8752, 35.0324, 90.0000, 1, 1, 100);
    AC_CreateVehicle(574, -2053.7971, -6.4144, 35.0324, 90.0000, 1, 1, 100);
    AC_CreateVehicle(574, -2053.7971, -3.5721, 35.0324, 90.0000, 1, 1, 100);

	//Mechanikø transportas
	MechanikuMasina[0] = AC_CreateVehicle(458, -2649.4221, 21.7580, 3.9462, 180.0000, 4, 1, 100);
    MechanikuMasina[1] = AC_CreateVehicle(525, -2689.6877, 21.7580, 3.9362, 180.0000, 4, 1, 100);
    MechanikuMasina[2] = AC_CreateVehicle(525, -2684.6165, 21.7580, 3.9362, 180.0600, 4, 1, 100);
    MechanikuMasina[3] = AC_CreateVehicle(525, -2679.6692, 21.7780, 3.9362, 180.0600, 4, 1, 100);
    MechanikuMasina[4] = AC_CreateVehicle(525, -2674.5923, 21.7580, 3.9362, 180.0600, 4, 1, 100);
    MechanikuMasina[5] = AC_CreateVehicle(525, -2669.4011, 21.7580, 3.9362, 180.0600, 4, 1, 100);
    MechanikuMasina[6] = AC_CreateVehicle(525, -2664.5762, 21.7580, 3.9362, 180.0600, 4, 1, 100);
    MechanikuMasina[7] = AC_CreateVehicle(525, -2659.4590, 21.7580, 3.9362, 180.0600, 4, 1, 100);
    MechanikuMasina[8] = AC_CreateVehicle(525, -2654.4556, 21.7580, 3.9362, 180.0600, 4, 1, 100);
    MechanikuMasina[9] = AC_CreateVehicle(458, -2644.2595, 21.7580, 3.9462, 180.0000, 4, 1, 100);
    MechanikuMasina[10] = AC_CreateVehicle(458, -2639.4175, 21.7580, 3.9462, 180.0000, 4, 1, 100);
    MechanikuMasina[11] = AC_CreateVehicle(458, -2634.2952, 21.7592, 3.9462, 180.0000, 4, 1, 100);
    MechanikuMasina[12] = AC_CreateVehicle(458, -2629.2593, 21.7733, 3.9462, 180.0000, 4, 1, 100);
    MechanikuMasina[13] = AC_CreateVehicle(458, -2624.2913, 21.7580, 3.9462, 180.0000, 4, 1, 100);
    MechanikuMasina[14] = AC_CreateVehicle(458, -2619.1904, 21.7580, 3.9462, 180.0000, 4, 1, 100);

	//Picerija
	Pizzaboy[0] = AC_CreateVehicle(448, -1891.0934, 434.0133, 34.7949, 180.0000, -1, -1, 600);
	Pizzaboy[1] = AC_CreateVehicle(448, -1893.6907, 434.0133, 34.7949, 180.0000, -1, -1, 600);
	Pizzaboy[2] = AC_CreateVehicle(448, -1896.0698, 434.0133, 34.7949, 180.0000, -1, -1, 600);
	Pizzaboy[3] = AC_CreateVehicle(448, -1898.6152, 434.0133, 34.7949, 180.0000, -1, -1, 600);
	Pizzaboy[4] = AC_CreateVehicle(448, -1910.8901, 434.0133, 34.7949, 180.0000, -1, -1, 600);
	Pizzaboy[5] = AC_CreateVehicle(448, -1913.9807, 434.0133, 34.7949, 180.0000, -1, -1, 600);
	Pizzaboy[6] = AC_CreateVehicle(448, -1916.7007, 434.0133, 34.7949, 180.0000, -1, -1, 600);
	
	Pizzaboy[7] = AC_CreateVehicle(448,-2242.8335,530.4964,34.7746,178.7679, -1, -1, 600); // motoroleris
	Pizzaboy[8] = AC_CreateVehicle(448,-2240.3008,530.4420,34.7746,178.7679, -1, -1, 600); // motoroleris
	Pizzaboy[9] = AC_CreateVehicle(448,-2238.1243,530.3951,34.7746,178.7679, -1, -1, 600); // motoroleris
	Pizzaboy[10] = AC_CreateVehicle(448,-2247.6211,520.0167,34.7763,272.0219, -1, -1, 600); // motoroleris
	Pizzaboy[11] = AC_CreateVehicle(448,-2247.7056,522.4147,34.7763,272.0219, -1, -1, 600); // motoroleris
	Pizzaboy[12] = AC_CreateVehicle(448,-2247.6709,524.8232,34.7753,272.0219, -1, -1, 600); // motoroleris
	Pizzaboy[13] = AC_CreateVehicle(448,-2247.5530,527.4898,34.7733,272.0219, -1, -1, 600); // motoroleris

	//Maðinø turgus
	CreateShopVehicle(401, -2492.5271, 366.9928, 34.7285, 56.8288, 12000 + random(3000)); // Bravura
	CreateShopVehicle(404, -2494.2485, 363.7426, 34.7285, 58.7903, 3000 + random(2000)); // Perenniel
	CreateShopVehicle(410, -2495.8416, 360.4315, 34.7285, 59.0307, 10000 + random(3000)); // Manana
	CreateShopVehicle(412, -2497.3730, 358.1607, 34.7285, 59.0307, 18000 + random(5000)); // Voodoo
	CreateShopVehicle(419, -2499.1150, 353.9080, 34.7285, 60.7157, 7000 + random(1000)); // Esperanto
	CreateShopVehicle(436, -2500.6421, 350.4523, 34.7285, 60.7157, 5000 + random(5000)); // Previon
	CreateShopVehicle(439, -2502.2312, 346.9995, 34.7285, 62.6772, 13000 + random(3000)); // Stallion
	CreateShopVehicle(445, -2503.7910, 343.4243, 34.7285, 62.6772, 13000 + random(3000)); // Admiral
	CreateShopVehicle(458, -2505.2275, 339.8203, 34.7285, 63.9454, 10000 + random(5000)); // Solair
	CreateShopVehicle(466, -2506.7542, 336.3604, 34.7285, 63.9454, 3000 + random(2000)); // Glendale
	CreateShopVehicle(467, -2508.2615, 332.5903, 34.7285, 65.7885, 3000 + random(2000)); // Oceanic
	CreateShopVehicle(479, -2509.4280, 328.6150, 34.7285, 65.7885, 10000 + random(2000)); // Regina
	CreateShopVehicle(480, -2497.9443, 389.6364, 34.7285, 233.6008, 15000 + random(10000)); // Comet
	CreateShopVehicle(491, -2500.2368, 385.9438, 34.7285, 236.6829, 8000 + random(4000)); // Virgo
	CreateShopVehicle(492, -2502.5190, 382.3317, 34.7285, 236.9458, 8000 + random(4000)); // Greenwood
	CreateShopVehicle(507, -2504.4666, 378.8436, 34.7285, 238.7640, 8000 + random(5000)); // Elegant
	CreateShopVehicle(516, -2506.3923, 375.2586, 34.7285, 238.8848, 8000 + random(4000)); // Nebula
	CreateShopVehicle(517, -2508.3362, 371.6181, 34.7285, 241.4565, 8000 + random(4000)); // Majestic
	CreateShopVehicle(518, -2510.2500, 367.6972, 34.7285, 241.4565, 5000 + random(5000)); // Buccaneer
	CreateShopVehicle(526, -2512.0842, 363.8216, 34.7285, 241.4565, 5000 + random(5000)); // Fortune
	CreateShopVehicle(580, -2513.9695, 359.9561, 34.7285, 243.2995, 1500 + random(2000)); // Stafford
	CreateShopVehicle(529, -2515.7708, 355.9158, 34.7285, 243.2995, 5000 + random(5000)); // Willard
	CreateShopVehicle(533, -2517.6108, 351.7408, 34.7285, 244.6805, 8000 + random(4000)); // Feltzer
	CreateShopVehicle(534, -2519.5854, 347.2932, 34.7285, 245.3807, 8000 + random(4000)); // Remington
	CreateShopVehicle(536, -2521.4302, 342.9247, 34.7285, 247.2522, 13000 + random(3000)); // Blade
	CreateShopVehicle(542, -2523.0200, 338.6082, 34.7285, 247.2522, 3000 + random(2000)); // Clover
	CreateShopVehicle(575, -2524.5571, 334.3539, 34.7285, 249.5761, 1500 + random(2000)); // Broadway
	CreateShopVehicle(576, -2526.0603, 330.1746, 34.7285, 249.5761, 4000 + random(2000)); // Tornado

	//Nuoma
	CreateRentVehicle(445, -1994.4669,101.3156,27.4600,90.2768);
	CreateRentVehicle(492, -1994.2007,106.3617,27.4231,90.2411);
	CreateRentVehicle(527, -1993.9292,111.4486,27.5146,89.3791);
	CreateRentVehicle(542, -1994.0829,116.4030,27.4601,89.6331);

	// 								Policijos maðinos						  	//

	PolicijosMasina[0] = AC_CreateVehicle(497, -1651.2555, 710.7713, 38.3164, 90.0000, 86, 1, 100);
    PolicijosMasina[1] = AC_CreateVehicle(497, -1651.3986, 695.9300, 38.3164, 90.0000, 86, 1, 100);
    PolicijosMasina[2] = AC_CreateVehicle(597, -1575.8529, 651.7463, 6.8411, 0.0000, 86, 1, 100);
    PolicijosMasina[3] = AC_CreateVehicle(599, -1616.6654, 651.7463, 7.2491, 0.0000, 86, 1, 100);
    PolicijosMasina[4] = AC_CreateVehicle(523, -1588.4475, 673.4009, 6.6731, 180.0000, 86, 1, 100);
    PolicijosMasina[5] = AC_CreateVehicle(597, -1581.7990, 651.7463, 6.8411, 0.0000, 86, 1, 100);
    PolicijosMasina[6] = AC_CreateVehicle(597, -1587.8750, 651.7463, 6.8411, 0.0000, 86, 1, 100);
    PolicijosMasina[7] = AC_CreateVehicle(597, -1593.6454, 651.7463, 6.8411, 0.0000, 86, 1, 100);
    PolicijosMasina[8] = AC_CreateVehicle(597, -1599.5925, 651.7463, 6.8411, 0.0000, 86, 1, 100);
    PolicijosMasina[9] = AC_CreateVehicle(597, -1605.0613, 651.7463, 6.8411, 0.0000, 86, 1, 100);
    PolicijosMasina[10] = AC_CreateVehicle(597, -1610.8804, 651.7517, 6.8411, 0.0000, 86, 1, 100);
    PolicijosMasina[11] = AC_CreateVehicle(599, -1622.6268, 651.7463, 7.2491, 0.0000, 86, 1, 100);
    PolicijosMasina[12] = AC_CreateVehicle(599, -1628.4391, 651.7463, 7.2491, 0.0000, 86, 1, 100);
    PolicijosMasina[13] = AC_CreateVehicle(599, -1634.3246, 651.7463, 7.2491, 0.0000, 86, 1, 100);
    PolicijosMasina[14] = AC_CreateVehicle(523, -1582.2900, 673.4009, 6.6731, 180.0000, 86, 1, 100);
    PolicijosMasina[15] = AC_CreateVehicle(523, -1576.6639, 673.4009, 6.6731, 180.0000, 86, 1, 100);
    PolicijosMasina[16] = AC_CreateVehicle(523, -1594.2358, 673.4009, 6.6731, 180.0000, 86, 1, 100);
    PolicijosMasina[17] = AC_CreateVehicle(523, -1600.1655, 673.4009, 6.6731, 180.0000, 86, 1, 100);
    PolicijosMasina[18] = AC_CreateVehicle(523, -1606.0500, 673.4009, 6.6731, 180.0000, 86, 1, 100);
    PolicijosMasina[19] = AC_CreateVehicle(523, -1611.8982, 673.4009, 6.6731, 180.0000, 86, 1, 100);

	//PD laivai
	PolicijosMasina[20] = AC_CreateVehicle(430, -1468.4265, 695.8323, 0.6578, 270.0000, -1, -1, 600);
	PolicijosMasina[21] = AC_CreateVehicle(430, -1468.3433, 690.9727, 0.6578, 270.0000, -1, -1, 600);
	PolicijosMasina[22] = AC_CreateVehicle(430, -1468.2175, 685.6280, 0.6578, 270.0000, -1, -1, 600);

	// ---------------------------------------------------------------------- //

	//Kurjeriai
	KurjeriuMasina[0] = AC_CreateVehicle(498, -1344.4153, -174.0215, -91.9358, 0.0000, 6, 6, 600);
	KurjeriuMasina[1] = AC_CreateVehicle(498, -1340.0171, -174.0215, -91.9358, 0.0000, 6, 6, 600);
	KurjeriuMasina[2] = AC_CreateVehicle(498, -1335.6774, -174.0215, -91.9358, 0.0000, 6, 6, 600);
	KurjeriuMasina[3] = AC_CreateVehicle(498, -1331.2194, -174.0221, -91.9358, 0.0000, 6, 6, 600);
	KurjeriuMasina[4] = AC_CreateVehicle(498, -1326.9376, -174.0215, -91.9358, 0.0000, 6, 6, 600);
	KurjeriuMasina[5] = AC_CreateVehicle(498, -1322.6428, -174.0215, -91.9358, 0.0000, 6, 6, 600);
	KurjeriuMasina[6] = AC_CreateVehicle(498, -1318.5160, -174.0215, -91.9358, 0.0000, 6, 6, 600);
	KurjeriuMasina[7] = AC_CreateVehicle(498, -1314.3890, -174.0215, -91.9358, 0.0000, 6, 6, 600);
	KurjeriuMasina[8] = AC_CreateVehicle(498, -1309.9712, -174.0215, -91.9358, 0.0000, 6, 6, 600);
	
	KurjTekstas[0] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas[0], 0, "\n\n\n\nSanFierro\nDPD", 100, "Ariel", 50, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas[0], KurjeriuMasina[0], -1.259999, -2.034999, 1.209999, 0.000000, 0.000000, -90.000000);

    KurjTekstas[1] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas[1], 0, "\n\n\n\nSanFierro\nDPD", 100, "Ariel", 50, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas[1], KurjeriuMasina[1], -1.259999, -2.034999, 1.209999, 0.000000, 0.000000, -90.000000);

    KurjTekstas[2] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas[2], 0, "\n\n\n\nSanFierro\nDPD", 100, "Ariel", 50, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas[2], KurjeriuMasina[2], -1.259999, -2.034999, 1.209999, 0.000000, 0.000000, -90.000000);

    KurjTekstas[3] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas[3], 0, "\n\n\n\nSanFierro\nDPD", 100, "Ariel", 50, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas[3], KurjeriuMasina[3], -1.259999, -2.034999, 1.209999, 0.000000, 0.000000, -90.000000);

    KurjTekstas[4] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas[4], 0, "\n\n\n\nSanFierro\nDPD", 100, "Ariel", 50, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas[4], KurjeriuMasina[4], -1.259999, -2.034999, 1.209999, 0.000000, 0.000000, -90.000000);

    KurjTekstas[5] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas[5], 0, "\n\n\n\nSanFierro\nDPD", 100, "Ariel", 50, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas[5], KurjeriuMasina[5], -1.259999, -2.034999, 1.209999, 0.000000, 0.000000, -90.000000);
    
    KurjTekstas[6] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas[6], 0, "\n\n\n\nSanFierro\nDPD", 100, "Ariel", 50, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas[6], KurjeriuMasina[6], -1.259999, -2.034999, 1.209999, 0.000000, 0.000000, -90.000000);

    KurjTekstas[7] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas[7], 0, "\n\n\n\nSanFierro\nDPD", 100, "Ariel", 50, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas[7], KurjeriuMasina[7], -1.259999, -2.034999, 1.209999, 0.000000, 0.000000, -90.000000);

    KurjTekstas[8] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas[8], 0, "\n\n\n\nSanFierro\nDPD", 100, "Ariel", 30, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas[8], KurjeriuMasina[8], -1.259999, -2.034999, 1.209999, 0.000000, 0.000000, -90.000000);
    
    KurjTekstas1[0] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas1[0], 0, "?", 90, "Webdings", 150, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas1[0], KurjeriuMasina[0], -1.259999, -0.969999, 1.209999, 0.000000, 0.000000, -90.000000);

    KurjTekstas1[1] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas1[1], 0, "?", 90, "Webdings", 150, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas1[1], KurjeriuMasina[1], -1.259999, -0.969999, 1.209999, 0.000000, 0.000000, -90.000000);

    KurjTekstas1[2] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas1[2], 0, "?", 90, "Webdings", 150, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas1[2], KurjeriuMasina[2], -1.259999, -0.969999, 1.209999, 0.000000, 0.000000, -90.000000);

    KurjTekstas1[3] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas1[3], 0, "?", 90, "Webdings", 150, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas1[3], KurjeriuMasina[3], -1.259999, -0.969999, 1.209999, 0.000000, 0.000000, -90.000000);

    KurjTekstas1[4] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas1[4], 0, "?", 90, "Webdings", 150, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas1[4], KurjeriuMasina[4], -1.259999, -0.969999, 1.209999, 0.000000, 0.000000, -90.000000);

    KurjTekstas1[5] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas1[5], 0, "?", 90, "Webdings", 150, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas1[5], KurjeriuMasina[5], -1.259999, -0.969999, 1.209999, 0.000000, 0.000000, -90.000000);

    KurjTekstas1[6] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas1[6], 0, "?", 90, "Webdings", 150, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas1[6], KurjeriuMasina[6], -1.259999, -0.969999, 1.209999, 0.000000, 0.000000, -90.000000);

    KurjTekstas1[7] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas1[7], 0, "?", 90, "Webdings", 150, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas1[7], KurjeriuMasina[7], -1.259999, -0.969999, 1.209999, 0.000000, 0.000000, -90.000000);

    KurjTekstas1[8] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(KurjTekstas1[8], 0, "?", 90, "Webdings", 150, 0, 0xFF050505, 0x00000000, 0);
    AttachDynamicObjectToVehicle(KurjTekstas1[8], KurjeriuMasina[8], -1.259999, -0.969999, 1.209999, 0.000000, 0.000000, -90.000000);

	//Event Maðinos

	//Iðlikimas
	EventMasinos[0] = AC_CreateVehicle(504, -5190.0684, 530.0408, 2.7065, 180.0000, -1, -1, 100);
	EventMasinos[1] = AC_CreateVehicle(504, -5184.2441, 530.0408, 2.7065, 180.0000, -1, -1, 100);
	EventMasinos[2] = AC_CreateVehicle(504, -5177.3350, 530.0408, 2.7065, 180.0000, -1, -1, 100);
	EventMasinos[3] = AC_CreateVehicle(504, -5170.2163, 530.0505, 2.7065, 180.0000, -1, -1, 100);
	EventMasinos[4] = AC_CreateVehicle(504, -5189.4536, 486.6528, 2.7065, 0.0000, -1, -1, 100);
	EventMasinos[5] = AC_CreateVehicle(504, -5183.0537, 486.6528, 2.7065, 0.0000, -1, -1, 100);
	EventMasinos[6] = AC_CreateVehicle(504, -5176.3340, 486.6528, 2.7065, 0.0000, -1, -1, 100);
	EventMasinos[7] = AC_CreateVehicle(504, -5169.4385, 486.6528, 2.7065, 0.0000, -1, -1, 100);

	//Driftas
	EventMasinos[8] = AC_CreateVehicle(562, -323.7794, 1533.9535, 75.6345, -90.0000, -1, -1, 100);
	EventMasinos[9] = AC_CreateVehicle(562, -316.8169, 1533.8389, 75.5693, -90.0000, -1, -1, 100);
	EventMasinos[10] = AC_CreateVehicle(562, -309.7063, 1533.9698, 75.3674, -90.0000, -1, -1, 100);

	//Kartingai
	EventMasinos[11] = AC_CreateVehicle(571, 1100.8638, 1325.5513, 10.3500, -90.0000, -1, -1, 100);
	EventMasinos[12] = AC_CreateVehicle(571, 1100.9277, 1327.9977, 10.3500, -90.0000, -1, -1, 100);
	EventMasinos[13] = AC_CreateVehicle(571, 1100.9464, 1330.2074, 10.3500, -90.0000, -1, -1, 100);
	EventMasinos[14] = AC_CreateVehicle(571, 1101.0460, 1332.5657, 10.3500, -90.0000, -1, -1, 100);
	EventMasinos[15] = AC_CreateVehicle(571, 1101.1364, 1334.9135, 10.3500, -90.0000, -1, -1, 100);
	EventMasinos[16] = AC_CreateVehicle(571, 1101.1127, 1337.1982, 10.3500, -90.0000, -1, -1, 100);
	EventMasinos[17] = AC_CreateVehicle(571, 1101.0988, 1339.2393, 10.3500, -90.0000, -1, -1, 100);
	EventMasinos[18] = AC_CreateVehicle(571, 1101.1005, 1341.6711, 10.3500, -90.0000, -1, -1, 100);
	EventMasinos[19] = AC_CreateVehicle(571, 1101.1521, 1344.0072, 10.3500, -90.0000, -1, -1, 100);
	EventMasinos[20] = AC_CreateVehicle(571, 1101.2609, 1346.4777, 10.3500, -90.0000, -1, -1, 100);
	EventMasinos[21] = AC_CreateVehicle(571, 1101.2919, 1348.9279, 10.3500, -90.0000, -1, -1, 100);
	EventMasinos[22] = AC_CreateVehicle(571, 1101.2858, 1351.0323, 10.3500, -90.0000, -1, -1, 100);
	EventMasinos[23] = AC_CreateVehicle(571, 1101.2720, 1353.4924, 10.3500, -90.0000, -1, -1, 100);
	EventMasinos[24] = AC_CreateVehicle(571, 1101.2933, 1356.1798, 10.3500, -90.0000, -1, -1, 100);
	EventMasinos[25] = AC_CreateVehicle(571, 1101.2145, 1358.5052, 10.3500, -90.0000, -1, -1, 100);

	//Dragai
	EventMasinos[26] = AC_CreateVehicle(411, -1647.2861, -181.2183, 13.7994, 45.0000, -1, -1, 100);
	EventMasinos[27] = AC_CreateVehicle(411, -1650.1146, -184.1008, 13.7994, 45.0000, -1, -1, 100);

	//Motokrosai
	EventMasinos[28] = AC_CreateVehicle(468, 870.1226, -11.4973, 63.1700, 91.8600, -1, -1, 100);
	EventMasinos[29] = AC_CreateVehicle(468, 870.2704, -13.0501, 63.1700, 91.8600, -1, -1, 100);
	EventMasinos[30] = AC_CreateVehicle(468, 870.3581, -14.7564, 63.1700, 91.8600, -1, -1, 100);
	EventMasinos[31] = AC_CreateVehicle(468, 866.7214, -13.2787, 63.1700, 91.8600, -1, -1, 100);
	EventMasinos[32] = AC_CreateVehicle(468, 866.2983, -11.9077, 63.1700, 91.8600, -1, -1, 100);
	EventMasinos[33] = AC_CreateVehicle(468, 867.0603, -14.8200, 63.1700, 91.8600, -1, -1, 100);
	EventMasinos[34] = AC_CreateVehicle(468, 867.1726, -16.7190, 63.1700, 91.8600, -1, -1, 100);
	EventMasinos[35] = AC_CreateVehicle(468, 867.2969, -18.7177, 63.1700, 91.8600, -1, -1, 100);
	EventMasinos[36] = AC_CreateVehicle(468, 862.7915, -18.9480, 63.1700, 91.8600, -1, -1, 100);
	EventMasinos[37] = AC_CreateVehicle(468, 862.9024, -17.0604, 63.1700, 91.8600, -1, -1, 100);
	EventMasinos[38] = AC_CreateVehicle(468, 863.0009, -15.0738, 63.1700, 91.8600, -1, -1, 100);
	EventMasinos[39] = AC_CreateVehicle(468, 862.9985, -13.4438, 63.1700, 91.8600, -1, -1, 100);
	EventMasinos[40] = AC_CreateVehicle(468, 863.0802, -12.0454, 63.1700, 91.8600, -1, -1, 100);

	//ARAS
	//Ant 402 ðvyturëlius uþdët
	ArasMasina[0] = AC_CreateVehicle(560, -1404.5133, 477.0962, 6.8350, 180.0000, 0, 0, 100);
	ArasMasina[1] = AC_CreateVehicle(560, -1399.4714, 477.0962, 6.8350, 180.0000, 0, 0, 100);
 	ArasMasina[2] = AC_CreateVehicle(560, -1424.5364, 477.1155, 6.8350, 180.0000, 0, 0, 100);
    ArasMasina[3] = AC_CreateVehicle(560, -1419.5636, 477.0962, 6.8350, 180.0000, 0, 0, 100);
    ArasMasina[4] = AC_CreateVehicle(560, -1414.6105, 477.0962, 6.8350, 180.0000, 0, 0, 100);
    ArasMasina[5] = AC_CreateVehicle(560, -1409.4630, 477.0962, 6.8350, 180.0000, 0, 0, 100);
	ArasMasina[6] = AC_CreateVehicle(528, -1464.7522, 477.0962, 7.1744, 180.0000, -1, -1, 100);
    ArasMasina[7] = AC_CreateVehicle(430, -1325.3757, 497.3004, 0.4613, 347.6111, 0, 0, 100);
    ArasMasina[8] = AC_CreateVehicle(497, -1505.8307, 439.0576, 42.4035, 0.0000, 0, 0, 100);
    ArasMasina[9] = AC_CreateVehicle(497, -1505.8594, 414.1664, 42.4035, 0.0000, 0, 0, 100);
    ArasMasina[10] = AC_CreateVehicle(497, -1505.8923, 386.8938, 42.4035, 0.0000, 0, 0, 100);
    ArasMasina[11] = AC_CreateVehicle(430, -1292.5894, 496.8978, 0.4613, -347.6111, 0, 0, 100);
    ArasMasina[12] = AC_CreateVehicle(430, -1336.9039, 495.1530, 0.4613, 0.9636, 0, 0, 100);
    ArasMasina[13] = AC_CreateVehicle(430, -1280.6560, 495.4837, 0.4613, -0.9636, 0, 0, 100);
    ArasMasina[14] = AC_CreateVehicle(528, -1459.8110, 477.0962, 7.1744, 180.0000, -1, -1, 100);
    ArasMasina[15] = AC_CreateVehicle(528, -1449.8031, 477.0962, 7.1744, 180.0000, -1, -1, 100);
    ArasMasina[16] = AC_CreateVehicle(528, -1439.7264, 477.1320, 7.1744, 180.0000, -1, -1, 100);
    ArasMasina[17] = AC_CreateVehicle(528, -1454.8888, 477.0962, 7.1744, 180.0000, -1, -1, 100);
    ArasMasina[18] = AC_CreateVehicle(528, -1444.7159, 477.0962, 7.1744, 180.0000, -1, -1, 100);
    ArasMasina[19] = AC_CreateVehicle(528, -1434.8524, 477.0662, 7.1744, 180.0000, -1, -1, 100);
    ArasMasina[20] = AC_CreateVehicle(528, -1429.6003, 477.0962, 7.1744, 180.0000, -1, -1, 100);

	//Maðinø salonas
	/*ParodosMasina[0] = AC_CreateVehicle(429, -1971.9989, 435.2047, 2.3270, 270.0000, -1, -1, 100);
	ParodosMasina[1] = AC_CreateVehicle(541, -1947.3997, 412.9316, 2.3231, 40.0000, -1, -1, 100);
	ParodosMasina[2] = AC_CreateVehicle(468, 2917.7268, 3311.6692, 588.5900, 133.1199, -1, -1, 100);
	ParodosMasina[3] = AC_CreateVehicle(586, 2921.0598, 3301.9783, 588.4279, 50.5875, -1, -1, 100);
	ParodosMasina[4] = AC_CreateVehicle(522, 2920.9004, 3286.2002, 588.4758, 49.1733, -1, -1, 100);
	ParodosMasina[5] = AC_CreateVehicle(471, 2905.2566, 3285.1362, 588.3893, 315.3614, -1, -1, 100);
	ParodosMasina[6] = AC_CreateVehicle(463, 2894.5032, 3294.3052, 588.4510, 309.0436, -1, -1, 100);
	ParodosMasina[7] = AC_CreateVehicle(521, 2904.2595, 3301.1106, 588.4777, 310.6050, -1, -1, 100);*/

	ParodosMasina[0] = AC_CreateVehicle(522, -1946.2974, 275.1898, 40.5763, 90.0000, -1, -1, 100);
	ParodosMasina[1] = AC_CreateVehicle(461, -1946.2205, 270.4985, 40.5971, 90.0000, -1, -1, 100);
	ParodosMasina[4] = AC_CreateVehicle(521, -1946.1865, 266.0375, 40.5899, 90.0000, -1, -1, 100);
	ParodosMasina[5] = AC_CreateVehicle(560, -1945.6490, 271.0439, 35.5445, 120.2910, -1, -1, 100);
	ParodosMasina[2] = AC_CreateVehicle(411, -1945.9813, 263.1573, 35.6332, 88.9798, -1, -1, 100);
	ParodosMasina[3] = AC_CreateVehicle(451, -1946.3832, 257.8687, 35.5174, 70.6983, -1, -1, 100);
	//ParodosMasina[6] = AC_CreateVehicle(446, -2954.5491, 494.2160, 0.5657, 0.0000, -1, -1, 100);
	//ParodosMasina[7] = AC_CreateVehicle(452, -2970.5522, 495.2376, 0.4854, 0.0000, -1, -1, 100);
	ParodosMasina[6] = AC_CreateVehicle(453, -2983.6296, 494.5702, 0.1902, 0.0000, -1, -1, 100);
	ParodosMasina[7] = AC_CreateVehicle(454, -2939.7866, 493.2520, 0.1902, 0.0000, -1, -1, 100);

	FuristuMasina[0] = AC_CreateVehicle(482, -2108.4482, -156.3295, 35.4236, 89.9999, -1, -1, 100);
    FuristuMasina[1] = AC_CreateVehicle(482, -2108.4426, -162.5118, 35.4971, 90.0000, -1, -1, 100);
    FuristuMasina[2] = AC_CreateVehicle(482, -2108.0981, -168.4272, 35.1029, 92.2625, -1, -1, 100);
    FuristuMasina[3] = AC_CreateVehicle(515, -2108.3936, -174.6732, 36.2429, 90.0, -1, -1, 100);
    FuristuMasina[4] = AC_CreateVehicle(515, -2108.3936, -180.8410, 36.2429, 90.0, -1, -1, 100);
    FuristuMasina[5] = AC_CreateVehicle(515, -2108.3936, -187.1395, 36.2429, 90.0, -1, -1, 100);
    FuristuMasina[6] = AC_CreateVehicle(515, -2108.3936, -193.7768, 36.2429, 90.0, -1, -1, 100);
    FuristuMasina[7] = AC_CreateVehicle(515, -2108.3936, -200.7212, 36.2429, 90.0, -1, -1, 100);
    FuristuMasina[8] = AC_CreateVehicle(515, -2108.3936, -207.9172, 36.2429, 90.0, -1, -1, 100);
    FuristuMasina[9] = AC_CreateVehicle(515, -2108.3936, -214.6409, 36.2429, 90.0, -1, -1, 100);

    FuristuPriekaba[0] = AC_CreateVehicle(591, -2107.0808, -144.9513, 35.7429, 90.0, -1, -1, 100);
    FuristuPriekaba[1] = AC_CreateVehicle(591, -2107.0801, -139.1655, 35.7429, 90.0, -1, -1, 100);
    FuristuPriekaba[2] = AC_CreateVehicle(591, -2107.0801, -132.9428, 35.7429, 90.0, -1, -1, 100);
    FuristuPriekaba[3] = AC_CreateVehicle(591, -2107.0801, -127.0319, 35.7429, 90.0, -1, -1, 100);
    FuristuPriekaba[4] = AC_CreateVehicle(591, -2107.0801, -120.9840, 35.7429, 90.0, -1, -1, 100);
    FuristuPriekaba[5] = AC_CreateVehicle(591, -2107.0801, -114.8041, 35.7429, 90.0, -1, -1, 100);
    FuristuPriekaba[6] = AC_CreateVehicle(591, -2107.0801, -108.4637, 35.7429, 90.0, -1, -1, 100);
    FuristuPriekaba[7] = AC_CreateVehicle(591, -2107.0801, -88.8410, 35.7429, 90.0, -1, -1, 100);
    FuristuPriekaba[8] = AC_CreateVehicle(591, -2107.0801, -95.2410, 35.7429, 90.0, -1, -1, 100);
    FuristuPriekaba[9] = AC_CreateVehicle(591, -2107.0801, -101.7603, 35.7429, 90.0, -1, -1, 100);

    TaksiMasina[0] = AC_CreateVehicle(438, -1641.5646, 1276.2388, 7.0496, 135.0000, 6, 6, 100);
	TaksiMasina[1] = AC_CreateVehicle(420, -1673.5309, 1308.1531, 6.8816, 135.0000, 6, 6, 100);
	TaksiMasina[2] = AC_CreateVehicle(420, -1670.0583, 1304.5916, 6.8816, 135.0000, 6, 6, 100);
	TaksiMasina[3] = AC_CreateVehicle(420, -1666.5316, 1300.9972, 6.8816, 135.0000, 6, 6, 100);
	TaksiMasina[4] = AC_CreateVehicle(420, -1662.9392, 1297.4578, 6.8816, 135.0000, 6, 6, 100);
	TaksiMasina[5] = AC_CreateVehicle(420, -1659.4252, 1293.8395, 6.8816, 135.0000, 6, 6, 100);
	TaksiMasina[6] = AC_CreateVehicle(438, -1638.1541, 1272.7101, 7.0496, 135.0000, 6, 6, 100);
	TaksiMasina[7] = AC_CreateVehicle(438, -1634.4917, 1269.1597, 7.0496, 135.0000, 6, 6, 100);
	TaksiMasina[8] = AC_CreateVehicle(438, -1631.0269, 1265.6299, 7.0496, 135.0000, 6, 6, 100);
	TaksiMasina[9] = AC_CreateVehicle(438, -1627.4373, 1262.0311, 7.0496, 135.0000, 6, 6, 100);

//Ambulance
	MedikuMasina[0] = AC_CreateVehicle(416, -2543.8989, 610.8459, 14.5002, 90.0, 3, 1, 100);
    MedikuMasina[1] = AC_CreateVehicle(416, -2543.9304, 604.7239, 14.5002, 90.0, 3, 1, 100);
    MedikuMasina[2] = AC_CreateVehicle(416, -2543.8892, 598.9951, 14.5002, 90.0, 3, 1, 100);
    MedikuMasina[3] = AC_CreateVehicle(416, -2543.9790, 592.8351, 14.5002, 90.0, 3, 1, 100);
    MedikuMasina[4] = AC_CreateVehicle(416, -2543.9797, 587.0806, 14.5002, 90.0, 3, 1, 100);
    MedikuMasina[5] = AC_CreateVehicle(400, -2592.1851, 610.9734, 14.5002, 270.0, 1, 1, 100);
    MedikuMasina[6] = AC_CreateVehicle(400, -2592.0315, 606.7590, 14.5002, 270.0, 1, 1, 100);
    MedikuMasina[7] = AC_CreateVehicle(400, -2591.9028, 602.3781, 14.5002, 270.0, 1, 1, 100);
    MedikuMasina[8] = AC_CreateVehicle(400, -2591.9102, 583.1257, 14.5002, 270.0, 1, 1, 100);
    MedikuMasina[9] = AC_CreateVehicle(417,-2663.8933,626.3137,66.2702,275.3676, 3, 1, 100); // medikopteris
	MedikuMasina[10] = AC_CreateVehicle(417,-2662.2261,608.5645,66.3629,275.3676, 3, 1, 100); // medikopteris
	MedikuMasina[11] = AC_CreateVehicle(417,-2660.7712,593.0811,66.4437,275.3676, 3, 1, 100); // medikopteris

	ArasZenklas[0] = CreateObject(19420,0,0,-1000,0,0,0,100);
	AttachObjectToVehicle(ArasZenklas[0], ArasMasina[0], 0.000000,-0.300000,0.809999,0.000000,0.000000,0.000000);

	ArasZenklas[1] = CreateObject(19420,0,0,-1000,0,0,0,100);
	AttachObjectToVehicle(ArasZenklas[1], ArasMasina[1], 0.000000,-0.300000,0.809999,0.000000,0.000000,0.000000);

	ArasZenklas[2] = CreateObject(19420,0,0,-1000,0,0,0,100);
	AttachObjectToVehicle(ArasZenklas[2], ArasMasina[2], 0.000000,-0.300000,0.809999,0.000000,0.000000,0.000000);

	ArasZenklas[3] = CreateObject(19420,0,0,-1000,0,0,0,100);
	AttachObjectToVehicle(ArasZenklas[3], ArasMasina[3], 0.000000,-0.300000,0.809999,0.000000,0.000000,0.000000);

	ArasZenklas[4] = CreateObject(19420,0,0,-1000,0,0,0,100);
	AttachObjectToVehicle(ArasZenklas[4], ArasMasina[4], 0.000000,-0.300000,0.809999,0.000000,0.000000,0.000000);

	ArasZenklas[5] = CreateObject(19420,0,0,-1000,0,0,0,100);
	AttachObjectToVehicle(ArasZenklas[5], ArasMasina[5], 0.000000,-0.300000,0.809999,0.000000,0.000000,0.000000);
	
	ArasTekstas[0] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(ArasTekstas[0], 0, "\n\nSpec. Burys\nAras", 100, "Ariel", 30, 0, -1, 0, 0);
    AttachDynamicObjectToVehicle(ArasTekstas[0], ArasMasina[0], -1.094999, 0.140000, -0.209999, 0.000000, 0.000000, -90.000000);
    
    ArasTekstas[1] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(ArasTekstas[1], 0, "\n\nSpec. Burys\nAras", 100, "Ariel", 30, 0, -1, 0, 0);
    AttachDynamicObjectToVehicle(ArasTekstas[1], ArasMasina[1], -1.094999, 0.140000, -0.209999, 0.000000, 0.000000, -90.000000);
    
    ArasTekstas[2] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(ArasTekstas[2], 0, "\n\nSpec. Burys\nAras", 100, "Ariel", 30, 0, -1, 0, 0);
    AttachDynamicObjectToVehicle(ArasTekstas[2], ArasMasina[2], -1.094999, 0.140000, -0.209999, 0.000000, 0.000000, -90.000000);
    
    ArasTekstas[3] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(ArasTekstas[3], 0, "\n\nSpec. Burys\nAras", 100, "Ariel", 30, 0, -1, 0, 0);
    AttachDynamicObjectToVehicle(ArasTekstas[3], ArasMasina[3], -1.094999, 0.140000, -0.209999, 0.000000, 0.000000, -90.000000);
    
    ArasTekstas[4] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(ArasTekstas[4], 0, "\n\nSpec. Burys\nAras", 100, "Ariel", 30, 0, -1, 0, 0);
    AttachDynamicObjectToVehicle(ArasTekstas[4], ArasMasina[4], -1.094999, 0.140000, -0.209999, 0.000000, 0.000000, -90.000000);
    
    ArasTekstas[5] = CreateDynamicObject(2733,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(ArasTekstas[5], 0, "\n\nSpec. Burys\nAras", 100, "Ariel", 30, 0, -1, 0, 0);
    AttachDynamicObjectToVehicle(ArasTekstas[5], ArasMasina[5], -1.094999, 0.140000, -0.209999, 0.000000, 0.000000, -90.000000);

	MedikuZenklas[0] = CreateObject(11702, 0,0,0,0,0,0,100);
	MedikuZenklas[1] = CreateObject(11702, 0,0,0,0,0,0,100);
	MedikuZenklas[2] = CreateObject(11702, 0,0,0,0,0,0,100);
	MedikuZenklas[3] = CreateObject(11702, 0,0,0,0,0,0,100);

	AttachObjectToVehicle(MedikuZenklas[0], MedikuMasina[5], 0.000000, 0.000000, 0.804999, 0.000000, 0.000000, 0.000000);
	AttachObjectToVehicle(MedikuZenklas[1], MedikuMasina[6], 0.000000, 0.000000, 0.804999, 0.000000, 0.000000, 0.000000);
	AttachObjectToVehicle(MedikuZenklas[2], MedikuMasina[7], 0.000000, 0.000000, 0.804999, 0.000000, 0.000000, 0.000000);
	AttachObjectToVehicle(MedikuZenklas[3], MedikuMasina[8], 0.000000, 0.000000, 0.804999, 0.000000, 0.000000, 0.000000);
	
	//Dviraèiai
	AC_CreateVehicle(510,-2644.7903,597.1863,14.0709,202.0318, -1, -1, 300); // ligonines velikas
	AC_CreateVehicle(510,-2643.8521,596.9991,14.0660,202.0318, -1, -1, 300); // ligonines velikas
	AC_CreateVehicle(510,-2642.9250,596.7485,14.0606,202.0318, -1, -1, 300); // ligonines velikas
	AC_CreateVehicle(510,-2641.3313,596.7887,14.0554,202.0318, -1, -1, 300); // ligonines velikas
	AC_CreateVehicle(510,-2640.4478,596.7347,14.0518,202.0318, -1, -1, 300); // ligonines velikas
	AC_CreateVehicle(510,-2639.2283,596.9702,14.0496,202.0318, -1, -1, 300); // ligonines velikas
	//AC_CreateVehicle(510, -1982.2365, 109.4614, 27.2748, 90.0000, -1, -1, 300);
	//AC_CreateVehicle(510, -1982.2365, 110.7220, 27.2748, 90.0000, -1, -1, 300);
	//AC_CreateVehicle(510, -1982.2365, 111.9089, 27.2748, 90.0000, -1, -1, 300);
	//AC_CreateVehicle(510, -1982.2365, 113.4128, 27.2748, 90.0000, -1, -1, 300);
	//AC_CreateVehicle(510, -1982.2365, 115.1745, 27.2748, 90.0000, -1, -1, 300);
	//AC_CreateVehicle(510, -1982.2365, 116.4572, 27.2748, 90.0000, -1, -1, 300);
	/*AC_CreateVehicle(510, -1585.2000, 698.2392, 6.7821, 180.0000, -1, -1, 300);
	AC_CreateVehicle(510, -1583.8513, 698.2354, 6.7821, 180.0000, -1, -1, 300);
	AC_CreateVehicle(510, -1582.5800, 698.2489, 6.7821, 180.0000, -1, -1, 300);
	AC_CreateVehicle(510, -1581.2386, 698.2762, 6.7821, 180.0000, -1, -1, 300);
	AC_CreateVehicle(510, -1579.6794, 698.2687, 6.7821, 180.0000, -1, -1, 300);*/

	// Autobusø vairuotojø transporto priemonës
	BusDriversVehicle[0] = AC_CreateVehicle(431, -2225.9189, 345.6135, 35.3375, 180.0, -1, -1, 100);
    BusDriversVehicle[1] = AC_CreateVehicle(431, -2218.3555, 345.6135, 35.3095, 180.0, -1, -1, 100);
    BusDriversVehicle[2] = AC_CreateVehicle(431, -2210.3450, 345.6135, 35.3095, 180.0, -1, -1, 100);
    BusDriversVehicle[3] = AC_CreateVehicle(431, -2202.3479, 345.6135, 35.3095, 180.0, -1, -1, 100);
    BusDriversVehicle[4] = AC_CreateVehicle(431, -2194.0344, 345.6135, 35.3095, 180.0, -1, -1, 100);
    BusDriversVehicle[5] = AC_CreateVehicle(431, -2185.8176, 345.6135, 35.3095, 180.0, -1, -1, 100);

	BusDriversText[0] = Create3DTextLabel("{ccff66} MARÐRUTAS {ffffff}\nSan Fierro - Blueberry", 0xFF0000AA, 0.0, 0.0, 0.0, 20.0, 0, 1 );
	Attach3DTextLabelToVehicle(BusDriversText[0], BusDriversVehicle[0], 0.0, 5.0, 2.0);

	BusDriversText[1] = Create3DTextLabel("{ccff66} MARÐRUTAS {ffffff}\nSan Fierro - Fort Carson", 0xFF0000AA, 0.0, 0.0, 0.0, 20.0, 0, 1 );
	Attach3DTextLabelToVehicle(BusDriversText[1], BusDriversVehicle[1], 0.0, 5.0, 2.0);

	BusDriversText[2] = Create3DTextLabel("{ccff66} MARÐRUTAS {ffffff}\nSan Fierro - El Quebrados", 0xFF0000AA, 0.0, 0.0, 0.0, 20.0, 0, 1 );
	Attach3DTextLabelToVehicle(BusDriversText[2], BusDriversVehicle[2], 0.0, 5.0, 2.0);

	BusDriversText[3] = Create3DTextLabel("{ccff66} MARÐRUTAS {ffffff}\nSan Fierro - Dillimore", 0xFF0000AA, 0.0, 0.0, 0.0, 20.0, 0, 1 );
	Attach3DTextLabelToVehicle(BusDriversText[3], BusDriversVehicle[3], 0.0, 5.0, 2.0);

	BusDriversText[4] = Create3DTextLabel("{ccff66} MARÐRUTAS {ffffff}\nSan Fierro - Montgomery", 0xFF0000AA, 0.0, 0.0, 0.0, 20.0, 0, 1 );
	Attach3DTextLabelToVehicle(BusDriversText[4], BusDriversVehicle[4], 0.0, 5.0, 2.0);

	BusDriversText[5] = Create3DTextLabel("{ccff66} MARÐRUTAS {ffffff}\nSan Fierro - Las Payadasas", 0xFF0000AA, 0.0, 0.0, 0.0, 20.0, 0, 1 );
	Attach3DTextLabelToVehicle(BusDriversText[5], BusDriversVehicle[5], 0.0, 5.0, 2.0);

	new Float: tmpx, Float: tmpy, Float: tmpz;

	for(new i = 0; i < MAX_VEHICLES + 1; i ++)
	{
		if(i >= VairavimoMokyklosMasina[0] && i <= VairavimoMokyklosMasina[10])
		{
			new Text3D: label = Create3DTextLabel("Vairavimo mokyklos\ntransp. priemonë", -1, tmpx, tmpy, tmpz, 5, 0, 1);
			Attach3DTextLabelToVehicle(Text3D: label, i, 0, 0, 0);
		}
	}
}

stock SendMessageToAdmins(text[])
{
	for(new p = 0, size = GetPlayerPoolSize(); p <= size; p++)
	{
		if(!IsPlayerConnected(p) || IsPlayerNPC(p)) continue;

		if(PI[p][AdminLevel] < LEVEL_FIRST) continue;

		if(PI[p][AOD]) SendClientMessage(p, -1, text);
	}

	return 1;
}

stock SendMessageToVips(color, text[])
{
	for(new p = 0, size = GetPlayerPoolSize(); p <= size; p++)
	{
		if(IsPlayerConnected(p))
		{
			if(PI[p][AdminLevel] == LEVEL_VIP)
			{
				SendClientMessage(p, color, text);
			}
		}
	}
	return 1;
}

stock KlaidosZinute(playerid,tekstas[])
{
	new String[216];
	format(String,128,"%s",tekstas);
	SendClientMessage(playerid,0xFF000030,String);
	return 1;
}
stock ServerioZinute(playerid,tekstas[])
{
	new string[170];
	format(string,150,"%s",tekstas);
	SendClientMessage(playerid,0xFF80C0FF,string);
	return 1;
}

stock tohash(buf[])
{
	new length=strlen(buf);
	new s1 = 1;
	new s2 = 0;
	new n;
	for (n=0; n<length; n++)
	{
		s1 = (s1 + buf[n]) % 65521;
		s2 = (s2 + s1)     % 65521;
	}
	return (s2 << 16) + s1;
}

stock IsNumeric(const string[], bool: Floating = false) // By Zigulys400
{
	new DotCount     = 0;
	new StringLength = strlen(string);

	if(StringLength >= 9) return 0;


	for(new i = 0; i < StringLength; i ++)
	{
		if(!Floating)
		{
			if(string[i] < '0' || string[i] > '9' || string[i] == '-' || string[i] == '+') return 0;
		}
		else
		{
			if(string[i] != '.')
			{
				if(string[i] < '0' || string[i] > '9' || string[i] == '-' || string[i] == '+') return 0;
			}
			else
			{
				if(DotCount < 1)
				{
					DotCount ++;
				}
				else { return 0; }
			}
		}
	}

	return 1;
}

stock Stop(playerid)
{
	TogglePlayerControllable(playerid, true);
	new Float:coo[3];
	GetPlayerPos(playerid,coo[0],coo[1],coo[2]);
	AC_SetPlayerPos(playerid,coo[0],coo[1],coo[2]);
	return 1;
}

stock StopPlayer(playerid)
{
	new Float:zPos[4];
	GetPlayerPos(playerid, zPos[0], zPos[1], zPos[2]);
	GetPlayerFacingAngle(playerid, zPos[3]);
	AC_SetPlayerPos(playerid, zPos[0], zPos[1], zPos[2]);
	SetPlayerFacingAngle(playerid, zPos[3]);
	return 1;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance) // Created by Y_Less
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);
	if(GetPlayerVehicleID(playerid))
	{
		GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

stock PreloadAnimLib(playerid, animlib[]) ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0);


stock GetPlayeridMid(name[]) //Boylett
{
	//printf("%s", name);
	for(new i = 0, size = GetPlayerPoolSize(); i <= size; i++)
	{
		if(IsPlayerConnected(i))
		{
			new gPlayerName[MAX_PLAYER_NAME];
			GetPlayerName(i, gPlayerName, MAX_PLAYER_NAME);
			if(strfind(gPlayerName, name, true) != -1)
			{
				return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

stock PlaySound(playerid, sound)
{
	new Float:Xr, Float:Yr, Float:Zr;
	GetPlayerPos(playerid, Xr, Yr, Zr);
	PlayerPlaySound(playerid, sound, Xr, Yr, Zr);
	return sound;
}

stock CreatePickupA(model,type,Float:x,Float:y,Float:z)
{
	new tmp;
	if(type < 1) type=2;
	tmp = CreatePickup(model,type,Float:x,Float:y,Float:z);
	PickupIDs[tmp][0]=x; PickupIDs[tmp][1]=y; PickupIDs[tmp][2]=z;
	PModels[tmp]=type;
	return tmp;
}

stock GetDriver(vehicleid)
{
	for(new playerid = 0, size = GetPlayerPoolSize(); playerid <= size; playerid++)
	{
		if(IsPlayerConnected(playerid))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(IsPlayerInVehicle(playerid,vehicleid)) return playerid;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

stock FixTimeForPlayer(playerid)
{
    new Hours, Minutes; gettime(Hours, Minutes);

	SetPlayerTime(playerid, Hours, Minutes);

	/* ----  Þiemos laikas!  ---- */
    /*if(Hours > 8 && Hours < 22)
    {
		SetPlayerTime(playerid, Hours + 4, Minutes);
	}
	else if(Hours >= 22 || Hours < 4)
	{
	    SetPlayerTime(playerid, 0, Minutes);
	}
	else if(Hours > 4 && Hours < 8)
	{
	    SetPlayerTime(playerid, Hours - 4, Minutes);
	}*/


	/* ----  Vasaros laikas!  ---- */
	if(Hours > 7 && Hours < 18)
    {
		SetPlayerTime(playerid, Hours, Minutes);
	}
	else if(Hours >= 18 || Hours < 4)
	{
	    SetPlayerTime(playerid, Hours, Minutes);
	}
	else if(Hours > 4 && Hours < 7)
	{
	    SetPlayerTime(playerid, Hours - 4, Minutes);
	}

	/*for(new i = 0; i < 24; i ++) //- TotalWeathers
	{
	    if(AllWeathers[i][1] == Hours)
	    {
	    	SetPlayerWeather(playerid, AllWeathers[i][0]);
	    }
	}*/

	SetPlayerWeather(playerid, 1);

	return 1;
}

stock ClearChat(playerid, Eilutes)
{
	for(new i = 0; i != Eilutes; i ++) SendClientMessage(playerid, -1, " ");
}

stock MakeToMeMinxMinyMaxxMaxy(Float:x1, Float:x2, Float:x3, Float:x4, Float:y1, Float:y2, Float:y3, Float:y4)
{
	new a, Float:C[4], Float:X[4], Float:Y[4];
	X[0] = x1; Y[0] = y1;
	X[1] = x2; Y[1] = y2;
	X[2] = x3; Y[2] = y3;
	X[3] = x4; Y[3] = y4;
	for(a = 0; a < 4; a++)
	{
		if(a == 0)
		{
			C[0] = X[a]; C[2] = Y[a];
			C[1] = X[a]; C[3] = Y[a];
			continue;
		}
		if(C[0] > X[a]) C[0] = X[a];
		if(C[1] < X[a]) C[1] = X[a];
		if(C[2] > Y[a]) C[2] = Y[a];
		if(C[3] < Y[a]) C[3] = Y[a];
	}
	printf("%.4f, %.4f, %.4f, %.4f", C[0], C[2], C[1], C[3]);
	return 1;
}

public OnFadeComplete( playerid, mode, color, steps )
{
	if( mode == FADE_IN )
	{
		FadeScreenForPlayer( playerid, FADE_OUT, color );
	}
	return 1;
}

stock GetWeekDay()
{
	new GWD_val = ((gettime() + 334800) / 86400 - (gettime() + 334800) / 86400 /7 *7);
	return (++GWD_val > 7) ? -1 : GWD_val - 1;
}

stock SukuriameMatuoklius(Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	CreateDynamicObject (18880, x, y, z, rx, ry, rz);
	Create3DTextLabel 	("{ffffff} Greièio matuoklis\n{ffffff}Nevirðykite leistino {FFAF00}90 {ffffff}KM/H greièio!\nNaudokite komandà {FFAF00} /autopilotas", -1, x, y, z + 5, 30, 0, 0);
}

stock HowMuchHaveCredits(Nickas[])
{
	if(strlen(Nickas) > 20) return -1;
	new str[65], krd = -1;
	format(str, 65, "SELECT * FROM `players` WHERE `Vardas` = '%s'", Nickas);
	mysql_query(str);
	mysql_store_result();
	mysql_retrieve_row();
	if(mysql_num_rows()) { mysql_fetch_field_row(str, "Kreditai"); krd = strval(str); }
	mysql_free_result();
	// -1 = arba blogas nick'as, arba nera su tokiu nick'u zaidejo
	return krd;
}

stock BanPlayer(playerid, giveplayerid, reason[])
{
	new Query[300];

	if(playerid == -1)
	{
		format(Query, sizeof(Query), "INSERT INTO `bannedplayers` (`Admin`, `User`, `IP`, `BanReason`, `Time`) VALUES ('ANTI CHEAT', '%s', '%s', '%s', '%s')", GetPlayerNameEx(giveplayerid), GetPlayerIpEx(giveplayerid), reason, GautiData());
	}
	else
	{
		format(Query, sizeof(Query), "INSERT INTO `bannedplayers` (`Admin`, `User`, `IP`, `BanReason`, `Time`) VALUES ('%s', '%s', '%s', '%s', '%s')", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), GetPlayerIpEx(giveplayerid), reason, GautiData());
	}

	mysql_query(Query);

	return IsmestiZaideja(giveplayerid, 100);
}

stock GautiData()
{
	/* gauname data ir laika tokiu formatu METAI.MENUO.DIENA, VALANDA:MINUTE */
	new string[31],data[6];
    getdate(data[0],data[1],data[2]);
	gettime(data[3],data[4],data[5]);
	format(string,31,"%d.%02d.%02d, %02d:%02d",data[0],data[1],data[2],data[3],data[4]);
	return string;
}

stock GautiDiena( )
{
	/* gauname data ir laika tokiu formatu METAI.MENUO.DIENA, VALANDA:MINUTE */
	new
		string[ 31 ],
		data[ 3 ];
    getdate( data[ 0 ], data[ 1 ], data[ 2 ] );
	format( string, 31, "%d.%02d.%02d", data[ 0 ], data[ 1 ] ,data[ 2 ] );
	return string;
}

stock IsPlayerBanned(playerid)
{
    new Query[120], String[300], Stringas[300];

	format(Query, sizeof(Query), "SELECT * FROM `bannedplayers` WHERE `User` = '%s' OR `IP` = '%s'", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid));
	mysql_query(Query);

	mysql_store_result();

	if(mysql_fetch_row(Query))
	{
		ClearChat(playerid, 20);

		strcat(Stringas, "{ffffff}Jûsø vartotojas ar IP adresas yra uþblokuoti visam laikui.\n \n");
		strcat(Stringas, "{ffffff}Atsiblokavimo kaina: {FFAF00}2.00 EUR\n");
		format(String, sizeof(String), "{ffffff}Siøsk sms þinutæ su raktaþodþiu: {FFAF00}ssunban %s\n", GetPlayerNameEx(playerid));
		strcat(Stringas, String);
		strcat(Stringas, "{ffffff}Numeriu: {FFAF00}1398");
		ShowPlayerDialogEx(playerid, UnbanDialog, DIALOG_STYLE_MSGBOX, "Uþblokuotas", Stringas, " ", " ");
		IsmestiZaideja(playerid, 100);

		return 1;
    }

	mysql_free_result();

	return 0;
}

stock AlgosZinutes(playerid)
{
	switch(PI[playerid][specialybe])
	{
		case 1: // Policininkai
		{
			switch(PI[playerid][DarboRangas])
			{
				case 0: PI[playerid][AlgosKiekis] = 26;
				case 1: PI[playerid][AlgosKiekis] = 28;
				case 2: PI[playerid][AlgosKiekis] = 30;
				case 3: PI[playerid][AlgosKiekis] = 32;
			}
		}

		case 2:	// Medikai
		{
			switch(PI[playerid][DarboRangas])
			{
				case 0: PI[playerid][AlgosKiekis] = 26;
				case 1: PI[playerid][AlgosKiekis] = 28;
				case 2: PI[playerid][AlgosKiekis] = 30;
				case 3: PI[playerid][AlgosKiekis] = 32;
			}
		}

		case 3:	// Kurjeriai
		{
			PI[playerid][AlgosKiekis] = 24;
			/*switch(PI[playerid][DarboRangas])
			{
				case 0: PI[playerid][AlgosKiekis] = 24;
				case 1: PI[playerid][AlgosKiekis] = 26;
				case 2: PI[playerid][AlgosKiekis] = 28;
				case 3: PI[playerid][AlgosKiekis] = 300;
			}*/
		}

		case 4:	// Mechanikai
		{
			switch(PI[playerid][DarboRangas])
			{
				case 0: PI[playerid][AlgosKiekis] = 32;
				case 1: PI[playerid][AlgosKiekis] = 34;
				case 2: PI[playerid][AlgosKiekis] = 36;
				case 3: PI[playerid][AlgosKiekis] = 38;
			}
		}

		case 5:	// Dyleriai
		{
			switch(PI[playerid][DarboRangas])
			{
				case 0: PI[playerid][AlgosKiekis] = 26;
				case 1: PI[playerid][AlgosKiekis] = 28;
				case 2: PI[playerid][AlgosKiekis] = 30;
				case 3: PI[playerid][AlgosKiekis] = 32;
			}
		}

		case 11: // Fûristai
		{
			switch(PI[playerid][DarboRangas])
			{
				case 0: PI[playerid][AlgosKiekis] = 23;
				case 1: PI[playerid][AlgosKiekis] = 25;
				case 2: PI[playerid][AlgosKiekis] = 27;
				case 3: PI[playerid][AlgosKiekis] = 29;
			}
		}
		case 13: // Fûristai
		{
			switch(PI[playerid][DarboRangas])
			{
				case 0: PI[playerid][AlgosKiekis] = 23;
				case 1: PI[playerid][AlgosKiekis] = 25;
				case 2: PI[playerid][AlgosKiekis] = 27;
				case 3: PI[playerid][AlgosKiekis] = 29;
			}
		}

		case 20:	PI[playerid][AlgosKiekis] = 12; // Picø iðveþiotojai
		case 22:	PI[playerid][AlgosKiekis] = 11; // Keliø valytojai
		case 24:	PI[playerid][AlgosKiekis] = 10; // Autobusø vairuotojai
		case 26:	PI[playerid][AlgosKiekis] = 13; // Autobusø vairuotojai

		default:	PI[playerid][AlgosKiekis] = 0; 	// Joks darbas
	}

	if(ViskasDuX)
	{
		switch(PI[playerid][AdminLevel])
		{
			case LEVEL_NONE: 	PI[playerid][AlgosKiekis] *= 2;
			default:			PI[playerid][AlgosKiekis] *= 3;
		}
	}
	else
	{
		if(PI[playerid][AdminLevel] > LEVEL_NONE)
		{
			PI[playerid][AlgosKiekis] *= 2;
		}
	}

	new String[128];

	format(String, sizeof(String), "{ffffff} Uþ vaþinëjimà ðia transp. priemone gausite {FFAF00}$%d/min{ffffff}!", PI[playerid][AlgosKiekis]);
	SendClientMessage(playerid, -1, String);
}

stock BaigesiAdmin(playerid)
{
	switch(PI[playerid][AdminLevel])
	{
		case 1..4:
		{
			if(gettime() >= PI[playerid][AdminLaikas])
			{
				SendClientMessage(playerid, RED, "* Praradai ADMIN narystæ nes tavo ADMIN galiojimo laikas pasibaigæs!");
				PI[playerid][AdminLevel] 	= LEVEL_NONE;
				PI[playerid][AdminLaikas]	= 0;
			}
		}
	}

	return 1;
}

stock GetStampIP(playerid)
{
	new S_IP[16];
	Join_Stamp=GetTickCount();
	GetPlayerIp(playerid,S_IP,16);
	format(ban_s, 16, "%s", S_IP);
}

stock randomEx(minnum = cellmin, maxnum = cellmax)
{
	return random(maxnum - minnum + 1) + minnum;
}

f_public: AtstatomFlooda(playerid)
{
	Floodas[playerid] = 0;
}

stock KraunamServerioInfo()
{
	new uzkl[12], vdx;

	mysql_query("SELECT * FROM `sinfo`");

	mysql_store_result();

	if(mysql_retrieve_row())
	{
		if(mysql_num_rows())
		{
			mysql_fetch_field_row(uzkl, "AdminFondas");            afondas = strval(uzkl);
			mysql_fetch_field_row(uzkl, "PolicijosPelnas");        Pelnas[0] = strval(uzkl);
			mysql_fetch_field_row(uzkl, "MechanikuPelnas");        Pelnas[1] = strval(uzkl);
			mysql_fetch_field_row(uzkl, "KurjeriuPelnas");         Pelnas[2] = strval(uzkl);
			mysql_fetch_field_row(uzkl, "MedikuPelnas");           Pelnas[3] = strval(uzkl);
			mysql_fetch_field_row(uzkl, "FuristuPelnas");          Pelnas[8] = strval(uzkl);
			mysql_fetch_field_row(uzkl, "DyleriuPelnas");          Pelnas[4] = strval(uzkl);
			mysql_fetch_field_row(uzkl, "TaxiPelnas");             Pelnas[9] = strval(uzkl);
			mysql_fetch_field_row(uzkl, "Laikrodziai");            Laikrodziai = strval(uzkl);
			mysql_fetch_field_row(uzkl, "Fotikai");            	   Fotikai = strval(uzkl);
			mysql_fetch_field_row(uzkl, "Navigacijos");            Navigacijos = strval(uzkl);
			mysql_fetch_field_row(uzkl, "ViskasDuX");            	vdx = strval(uzkl);
			//mysql_fetch_field_row(uzkl, "KiekIvygde");             KiekIvygde = strval(uzkl);
		}
	}

	mysql_free_result();

	if(vdx == 1) 	ViskasDuX = true;
	else 			ViskasDuX = false;

	return 1;
}

stock KraunamRekordoInfo()
{
	new Query[128];

	mysql_query("SELECT * FROM `rekordoinfo`");

	mysql_store_result();
	mysql_retrieve_row();

	mysql_fetch_field_row(Query, "Rekordas");               PlayersOnlineRecord = strval(Query);


	mysql_free_result();

	return 1;
}

f_public: Nuoma_Timeris ( playerid )
{
	if(GetPlayerMoneyA(playerid) < 5) return StopPlayer(playerid), KillTimer(nuomaTimer[playerid]);
	else
	{
		GivePlayerMoneyA(playerid, -5);
	}
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(IsPlayerInAnyVehicle(playerid)) SetPlayerArmedWeapon(playerid,0);

	
	if(hittype != BULLET_HIT_TYPE_NONE)
	{
		if(!(-1000.0 <= fX <= 1000.0) || !(-1000.0 <= fY <= 1000.0) || !(-1000.0 <= fZ <= 1000.0))
		{
			IsmestiZaideja(playerid, 100);

			return 0;
		}
	}

	return 1;
}

f_public: HideInfoText(playerid)
{
	if(PI[playerid][InfoText] != INVALID_PLAYER_TEXT_DRAW)
	{
		PlayerTextDrawHide   (playerid, PI[playerid][InfoText]);
		PlayerTextDrawDestroy(playerid, PI[playerid][InfoText]);

		PI[playerid][InfoText] = INVALID_PLAYER_TEXT_DRAW;
	}
	return 1;
}

/*CMD:input(playerid)
{
	new Query[1000];

	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (0, '0', '5', '%f', '%f', '%f', '%f')", 2885.7421875, 2437.5, -2027.34375, 2572.265625); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (1, '0', '5', '%f', '%f', '%f', '%f')", 2882.8125, 2173.828125, -2680.6640625, 2434.5703125); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (2, '0', '5', '%f', '%f', '%f', '%f')", 2680.6640625, 2170.8984375, -2504.8828125, 2431.640625); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (3, '0', '5', '%f', '%f', '%f', '%f')", 2496.09375, 2159.1796875, -2320.3125, 2431.640625); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (4, '0', '5', '%f', '%f', '%f', '%f')", 2320.3125, 2332.03125, -2030.2734375, 2428.7109375); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (5, '0', '5', '%f', '%f', '%f', '%f')", 2314.453125, 2150.390625, -2033.203125, 2326.171875); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (6, '0', '5', '%f', '%f', '%f', '%f')", 1749.0234375, 2677.734375, -1209.9609375, 2809.5703125); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (7, '0', '5', '%f', '%f', '%f', '%f')", 1546.875, 2604.4921875, -1494.140625, 2671.875); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (8, '0', '5', '%f', '%f', '%f', '%f')", 1485.3515625, 2610.3515625, -1423.828125, 2671.875); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (9, '0', '5', '%f', '%f', '%f', '%f')", 1623.046875, 2610.3515625, -1552.734375, 2666.015625); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (10, '0', '5', '%f', '%f', '%f', '%f')", 1546.875, 2554.6875, -1488.28125, 2607.421875); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (11, '0', '5', '%f', '%f', '%f', '%f')", 1494.140625, 2537.109375, -1403.3203125, 2607.421875); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (12, '0', '5', '%f', '%f', '%f', '%f')", 1658.203125, 2478.515625, -1406.25, 2548.828125); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (13, '0', '5', '%f', '%f', '%f', '%f')", 1412.109375, 2566.40625, -1209.9609375, 2668.9453125); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (14, '0', '5', '%f', '%f', '%f', '%f')", 1798.828125, 2554.6875, -1623.046875, 2663.0859375); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (15, '0', '5', '%f', '%f', '%f', '%f')", 2208.984375, 2639.6484375, -1804.6875, 2794.921875); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (16, '0', '5', '%f', '%f', '%f', '%f')", 1807.6171875, 2671.875, -1751.953125, 2844.7265625); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (17, '0', '5', '%f', '%f', '%f', '%f')", 2208.984375, 2560.546875, -1798.828125, 2633.7890625); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (18, '0', '5', '%f', '%f', '%f', '%f')", 2024.4140625, 2121.09375, -1778.3203125, 2554.6875); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (19, '0', '5', '%f', '%f', '%f', '%f')", 1769.53125, 2132.8125, -1640.625, 2548.828125); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (20, '0', '5', '%f', '%f', '%f', '%f')", 1198.2421875, 2589.84375, -793.9453125, 2762.6953125); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (21, '0', '5', '%f', '%f', '%f', '%f')", 837.890625, 2724.609375, -697.265625, 2794.921875); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (22, '0', '5', '%f', '%f', '%f', '%f')", 1324.21875, 2229.4921875, -1040.0390625, 2563.4765625); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (23, '0', '5', '%f', '%f', '%f', '%f')", 1037.109375, 2250, -972.65625, 2434.5703125); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (24, '0', '5', '%f', '%f', '%f', '%f')", 1321.2890625, 2118.1640625, -1040.0390625, 2220.703125); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (25, '0', '5', '%f', '%f', '%f', '%f')", 1435.546875, 1980.46875, -1239.2578125, 2121.09375); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (26, '0', '5', '%f', '%f', '%f', '%f')", 1230.46875, 1954.1015625, -972.65625, 2103.515625); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (27, '0', '5', '%f', '%f', '%f', '%f')", 1221.6796875, 1778.3203125, -884.765625, 1945.3125); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (28, '0', '5', '%f', '%f', '%f', '%f')", 963.671875, 1942.3828125, -840.8203125, 2144.53125); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (29, '0', '5', '%f', '%f', '%f', '%f')", 832.03125, 1907.2265625, -424.8046875, 2144.53125); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (30, '0', '5', '%f', '%f', '%f', '%f')", 1620.1171875, 1760.7421875, -1230.46875, 1992.1875); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (31, '0', '5', '%f', '%f', '%f', '%f')", 878.90625, 1754.8828125, -788.0859375, 1933.59375); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (32, '0', '5', '%f', '%f', '%f', '%f')", 1230.46875, 1751.953125, -881.8359375, 1778.3203125); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (33, '0', '5', '%f', '%f', '%f', '%f')", 1160.15625, 1532.2265625, -738.28125, 1584.9609375); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (34, '0', '5', '%f', '%f', '%f', '%f')", 908.203125, 1473.6328125, -747.0703125, 1526.3671875); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (35, '0', '5', '%f', '%f', '%f', '%f')", 908.203125, 1415.0390625, -750, 1467.7734375); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (36, '0', '5', '%f', '%f', '%f', '%f')", 1151.3671875, 1415.0390625, -914.0625, 1520.5078125); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (37, '0', '5', '%f', '%f', '%f', '%f')", 1145.5078125, 1312.5, -750, 1406.25); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (38, '0', '5', '%f', '%f', '%f', '%f')", 1145.5078125, 1209.9609375, -750, 1297.8515625); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (39, '0', '5', '%f', '%f', '%f', '%f')", 738.28125, 1160.15625, -600.5859375, 1347.65625); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (40, '0', '5', '%f', '%f', '%f', '%f')", 1142.578125, 1297.8515625, -735.3515625, 1312.5); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (41, '0', '5', '%f', '%f', '%f', '%f')", 752.9296875, 1157.2265625, -735.3515625, 1291.9921875); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (42, '0', '5', '%f', '%f', '%f', '%f')", 1145.5078125, 1157.2265625, -752.9296875, 1207.03125); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (43, '0', '5', '%f', '%f', '%f', '%f')", 1139.6484375, 1092.7734375, -550.78125, 1154.296875); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (44, '0', '5', '%f', '%f', '%f', '%f')", 999.0234375, 1042.96875, -556.640625, 1078.125); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (45, '0', '5', '%f', '%f', '%f', '%f')", 990.234375, 1001.953125, -580.078125, 1037.109375); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (46, '0', '5', '%f', '%f', '%f', '%f')", 1004.8828125, 1078.125, -550.78125, 1089.84375); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (47, '0', '5', '%f', '%f', '%f', '%f')", 987.3046875, 960.9375, -583.0078125, 999.0234375); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (48, '0', '5', '%f', '%f', '%f', '%f')", 720.703125, 878.90625, -624.0234375, 960.9375); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (49, '0', '5', '%f', '%f', '%f', '%f')", 978.515625, 884.765625, -720.703125, 928.7109375); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (50, '0', '5', '%f', '%f', '%f', '%f')", 987.3046875, 931.640625, -717.7734375, 963.8671875); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (51, '0', '5', '%f', '%f', '%f', '%f')", 975.5859375, 843.75, -647.4609375, 884.765625); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (52, '0', '5', '%f', '%f', '%f', '%f')", 770.5078125, 624.0234375, -670.8984375, 837.890625); mysql_query(Query);
	format(Query, sizeof(Query), "INSERT INTO `gaujuzonos` (gZoneID, gZoneOwner, gZoneYield, MinX, MinY, MaxX, MaxY) VALUES (53, '0', '5', '%f', '%f', '%f', '%f')", 952.1484375, 624.0234375, -773.4375, 840.8203125); mysql_query(Query);

	return 1;
}*/

CMD:sound(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	new soundid;

	if(sscanf(params, "d", soundid)) return 1;

	PlayerPlaySound(playerid,soundid,0,0,0);

	return 1;
}

CMD:veh(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	new vehicleid;
	new Float: pPos[4];

	GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	GetPlayerFacingAngle(playerid, pPos[3]);

	if(sscanf(params, "d", vehicleid)) return 1;

	new veh = AC_CreateVehicle	(vehicleid, pPos[0], pPos[1], pPos[2], pPos[3], -1, -1, 200);
	AC_SetPlayerPos 	(playerid, pPos[0], pPos[1], pPos[2] + 2);
	ac_SetVehicleToRespawn (veh);
	SetVehicleVirtualWorld(veh, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(veh, GetPlayerInterior(playerid));

	return 1;
}

CMD:wtime(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;
	new www;
	if(sscanf(params, "d", www)) return 1;
	SetWorldTime(www);
	return 1;
}

CMD:pos(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;
	new Float: pPos[3];
	if(sscanf(params, "fff", pPos[0], pPos[1], pPos[2])) return 1;
	AC_SetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	return 1;
}

CMD:pos2(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;
	new Float: pPos[3], inti;
	if(sscanf(params, "dfff", inti, pPos[0], pPos[1], pPos[2])) return 1;
	AC_SetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	SetPlayerInterior(playerid, inti);
	return 1;
}

CMD:duotirep(playerid, params[])
{
	new giveplayerid, String[216];

	if(sscanf(params, "r", giveplayerid)) return SendClientMessage(playerid, -1, ""COL_USAGE"[NADOJIMAS]: {FFAF00} /duotirep <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Sau reputacijos taðkø uþsidëti negali!");

	if(PI[playerid][DaveRepTaska] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Reputacijos taðkus galima dëti tik kas minutæ!");

	PI[playerid][DaveRepTaska] = gettime() + 60;

	PI[giveplayerid][KiekTuriRepTasku] ++;

	format(String, sizeof(String), "{ffffff} Sëkmingai uþdëjote +rep þaidëjui {FFAF00}%s{FFFFFF}! Dabar jis turi: {FFAF00}%i{FFFFFF}.", GetPlayerNameEx(giveplayerid), PI[giveplayerid][KiekTuriRepTasku]);
	SendClientMessage(playerid, -1, String);

	format(String, sizeof(String), "{ffffff} Gavote +rep ið þaidëjo {FFAF00}%s{FFFFFF}! Dabar turite: {FFAF00}%i{FFFFFF} +rep.", GetPlayerNameEx(playerid), PI[giveplayerid][KiekTuriRepTasku]);
	SendClientMessage(giveplayerid, -1, String);

	return 1;
}

CMD:autobusas(playerid, params[])
{
	new JobFunction[10];

	new vehicleid = GetPlayerVehicleID(playerid);

	if(PI[playerid][specialybe] != 24) return 0;

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Ðià komandà galima naudoti tik apsirengus darbo uniformà!");

	if(sscanf(params,"s[10]", JobFunction)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /autobusas <pradeti, baigti>");

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Ðià komandà galima naudoti tik transp. priemonëje!");

	if(PI[playerid][VezeKrovini] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turi praeiti 5 minutës nuo paskutinio reiso!");

	if(vehicleid != BusDriversVehicle[0] && vehicleid != BusDriversVehicle[1] && vehicleid != BusDriversVehicle[2] && vehicleid != BusDriversVehicle[3] &&
	   vehicleid != BusDriversVehicle[4] && vehicleid != BusDriversVehicle[5] && vehicleid != BusDriversVehicle[6]) return SendClientMessage(playerid, -1, "{ffffff} Ðià komandà galima naudoti tik autobuse!");

	if(!strcmp(JobFunction, "pradeti", true))
	{
		PI[playerid][VezeKrovini] = gettime() + 300;

		SendClientMessage(playerid, -1, "{ffffff} Pradëjai dirbti, vaþiuok á paþymëtà taðkà!");

		if(vehicleid == BusDriversVehicle[0])
		{
			BusDriversCityBlueberry[playerid]     = true;
			BusDriversCityFortCarson[playerid]    = false;
			BusDriversCityElQuebrados[playerid]   = false;
			BusDriversCityDillimore[playerid]     = false;
			BusDriversCityMontgomery[playerid]    = false;
			BusDriversCityLasPayasdas[playerid]   = false;
			BusDriversCityPalominoCreek[playerid] = false;

			SetPlayerCheckpointEx(playerid, 31, 183.7946, -79.0569, 1.5703, 5); // Blueberry
		}

		else if(vehicleid == BusDriversVehicle[1])
		{
			BusDriversCityBlueberry[playerid]     = false;
			BusDriversCityFortCarson[playerid]    = true;
			BusDriversCityElQuebrados[playerid]   = false;
			BusDriversCityDillimore[playerid]     = false;
			BusDriversCityMontgomery[playerid]    = false;
			BusDriversCityLasPayasdas[playerid]   = false;
			BusDriversCityPalominoCreek[playerid] = false;

			SetPlayerCheckpointEx(playerid, 32, -75.1079, 1205.4731, 19.7422, 5); // Fort Carson
		}

		else if(vehicleid == BusDriversVehicle[2])
		{
			BusDriversCityBlueberry[playerid]     = false;
			BusDriversCityFortCarson[playerid]    = false;
			BusDriversCityElQuebrados[playerid]   = true;
			BusDriversCityDillimore[playerid]     = false;
			BusDriversCityMontgomery[playerid]    = false;
			BusDriversCityLasPayasdas[playerid]   = false;
			BusDriversCityPalominoCreek[playerid] = false;

			SetPlayerCheckpointEx(playerid, 33, -1475.7335, 2664.7163, 55.8359, 5); // El Quebrados
		}

		else if(vehicleid == BusDriversVehicle[3])
		{
			BusDriversCityBlueberry[playerid]     = false;
			BusDriversCityFortCarson[playerid]    = false;
			BusDriversCityElQuebrados[playerid]   = false;
			BusDriversCityDillimore[playerid]     = true;
			BusDriversCityMontgomery[playerid]    = false;
			BusDriversCityLasPayasdas[playerid]   = false;
			BusDriversCityPalominoCreek[playerid] = false;

			SetPlayerCheckpointEx(playerid, 34, 703.8413, -464.6188, 16.3359, 5); // Dillimore
		}

		else if(vehicleid == BusDriversVehicle[4])
		{
			BusDriversCityBlueberry[playerid]     = false;
			BusDriversCityFortCarson[playerid]    = false;
			BusDriversCityElQuebrados[playerid]   = false;
			BusDriversCityDillimore[playerid]     = false;
			BusDriversCityMontgomery[playerid]    = true;
			BusDriversCityLasPayasdas[playerid]   = false;
			BusDriversCityPalominoCreek[playerid] = false;

			SetPlayerCheckpointEx(playerid, 35, 1283.5227, 343.6131, 19.5547, 5); // Montgomery
		}

		else if(vehicleid == BusDriversVehicle[5])
		{
			BusDriversCityBlueberry[playerid]     = false;
			BusDriversCityFortCarson[playerid]    = false;
			BusDriversCityElQuebrados[playerid]   = false;
			BusDriversCityDillimore[playerid]     = false;
			BusDriversCityMontgomery[playerid]    = false;
			BusDriversCityLasPayasdas[playerid]   = true;
			BusDriversCityPalominoCreek[playerid] = false;

			SetPlayerCheckpointEx(playerid, 36, -280.1835, 2707.1584, 62.6875, 5); // Las Payadasas
		}

		else if(vehicleid == BusDriversVehicle[6])
		{
			BusDriversCityBlueberry[playerid]     = false;
			BusDriversCityFortCarson[playerid]    = false;
			BusDriversCityElQuebrados[playerid]   = false;
			BusDriversCityDillimore[playerid]     = false;
			BusDriversCityMontgomery[playerid]    = false;
			BusDriversCityLasPayasdas[playerid]   = false;
			BusDriversCityPalominoCreek[playerid] = true;

			SetPlayerCheckpointEx(playerid, 37, 2279.8577, -76.6321, 26.5328, 5); // Palomino Creek
		}
	}

	else if(!strcmp(JobFunction, "baigti", true))
	{
		SendClientMessage(playerid, -1, "{ffffff} Sëkmingai baigëte darbà!");

		DisableAllPlayerCheckpoints(playerid);

		ClearBusDriversVariables(playerid);
	}

	else SendClientMessage(playerid, -1, "{ffffff} Tokios funkcijos ði komanda neturi!");

	return 1;
}

CMD:komandos(playerid, params[])
{
	new String[3500];

	strcat(String, "Komanda\tInformacija\n");
	strcat(String, "{FFAF00} /info\t{ffffff}Iðvysite jûsø þaidëjo informacijà\n");
	strcat(String, "{FFAF00} /kviesti\t{ffffff}Iðkviesite policijà, taksá, autoserviso {FFAF00}ECO{ffffff} darbuotojus arba medikus\n");
	strcat(String, "{FFAF00} /paslaugos\t{ffffff}Iðvysite mûsø teikiamas paslaugas uþ kreditus\n");
	strcat(String, "{FFAF00} /persirengti\t{ffffff}Persirengsite ið paprastø drabuþiø á darbinius ir atvirkðèiai\n");
	strcat(String, "{FFAF00} /alga\t{ffffff}Iðvysite jûsø uþdirbtà algà kurià atsiimti galima savivaldybëje\n");
	strcat(String, "{FFAF00} /mapp\t{ffffff}Suþinosite tam tikro þaidëjo buvimo vietà\n");
	strcat(String, "{FFAF00} /admin\t{ffffff}Iðvysite prisijungusià serverio administracijà\n");
	strcat(String, "{FFAF00} /direktoriai\t{ffffff}Iðvysite prisijungusius serverio darbø direktorius\n");
	strcat(String, "{FFAF00} /piltikura\t{ffffff}Ápilsite kurà á transportà ið turimo bakelio\n");
	strcat(String, "{FFAF00} /direktoriams\t{ffffff}Paraðysite norimà þinutæ serverio darbø direktoriams\n");
	strcat(String, "{FFAF00} /pavaduotojams\t{ffffff}Paraðysite norimà þinutæ serverio darbø pavaduotojams\n");
	strcat(String, "{FFAF00} /navigacija | /gps\t{ffffff}Surasite svarbiausias serverio vietoves bei darbus\n");
	strcat(String, "{FFAF00} /veiksmai\t{ffffff}Iðvysite visas serverio veiksmø komandas\n");
	strcat(String, "{FFAF00} /telefonas\t{ffffff}Iðvysite visà telefonø valdymo lentelæ\n");
	strcat(String, "{FFAF00} /stiliai\t{ffffff}Galësite pasirinkti norimà muðimosi stiliø\n");
	strcat(String, "{FFAF00} /darbai\t{ffffff}Iðvysite visus serverio darbus bei jø informacijà\n");
	strcat(String, "{FFAF00} /taisykles\t{ffffff}Iðvysite visas serverio taisykles kuriø privaloma laikytis\n");
	strcat(String, "{FFAF00} /akomandos\t{ffffff}Iðvysite visas VIP nariø bei administratoriø komandas\n");
	strcat(String, "{FFAF00} /ispejimai\t{ffffff}Iðvysite visus savo turimus áspëjimus\n");
	strcat(String, "{FFAF00} /paliktidarba\t{ffffff}Paliksite ðiuo metu dirbamà darbà\n");
	strcat(String, "{FFAF00} /kauliukas\t{ffffff}Þaisti kauliukà ið pinigø\n");
	strcat(String, "{FFAF00} /salmas\t{ffffff}Uþsidësite/nusiimsite ðalmà jeigu já turite\n");
	strcat(String, "{FFAF00} /nustatymai\t{ffffff}Iðjungsite/ájungsite serverio tekstûras (Textdrawus)\n");
	strcat(String, "{FFAF00} /gkomandos\t{ffffff}Iðvysite visas neoficialiø gaujø komandas\n");
	strcat(String, "{FFAF00} /misija\t{ffffff}Galësite vykdyti serverio misijas uþ kurias gausite prizus\n");
	strcat(String, "{FFAF00} /cpass\t{ffffff}Pakeisite savo prisijungimo á þaidimà slaptaþodá\n");
	strcat(String, "{FFAF00} /duotirep\t{ffffff}Duosite +1 reputacijos taðkà pasirinktam þaidëjui\n");
	strcat(String, "{FFAF00} /parduotig\t{ffffff}Pasiûlysite pasirinktam þaidëjui nusipirkti ginklus\n");
	strcat(String, "{FFAF00} /vartotih\t{ffffff}Pradësite vartoti heroinà\n");
	strcat(String, "{FFAF00} /vartotic\t{ffffff}Pradësite vartoti kokainà\n");
	strcat(String, "{FFAF00} /vartotie\t{ffffff}Pradësite vartoti ekstazá\n");
	strcat(String, "{FFAF00} /vartotiz\t{ffffff}Pradësite vartoti þolæ\n");
	strcat(String, "{FFAF00} /parduotih\t{ffffff}Pasiûlysite pasirinktam þaidëjui nusipirkti heroino\n");
	strcat(String, "{FFAF00} /parduotic\t{ffffff}Pasiûlysite pasirinktam þaidëjui nusipirkti kokaino\n");
	strcat(String, "{FFAF00} /parduotie\t{ffffff}Pasiûlysite pasirinktam þaidëjui nusipirkti ekstazio\n");
	strcat(String, "{FFAF00} /parduotiz\t{ffffff}Pasiûlysite pasirinktam þaidëjui nusipirkti þolës\n");
	strcat(String, "{FFAF00} /nametag\t{ffffff}Iðjungsite/ájungsite þaidëjo vardø rodymà\n");
	strcat(String, "{FFAF00} /maistas\t{ffffff}Pavalgysite pasirinktà maistà (jeigu jo turite)\n");
	strcat(String, "{FFAF00} /priziuretojai\t{ffffff}Iðvysite visus serverio priþiûrëtojus\n");
	strcat(String, "{FFAF00} /nkauliukas\t{ffffff}Mesti kauliukà\n");
	strcat(String, "{FFAF00} /atristi\t{ffffff}Bandysite atriðti gaujos suriðtà þaidëjà\n");
	strcat(String, "{FFAF00} /dirbtitaksi\t{ffffff}Pradësite taksisto darbà (jeigu turite licenzijà\n");
	strcat(String, "{FFAF00} /uzduotys\t{ffffff}Informacija apie serverio uþduotis\n");
	strcat(String, "{FFAF00} /ismesti\t{ffffff}Iðmesite þaidëjà ið jûsø vairuojamos tr. priemonës\n");

	ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Serverio komandos", String, "Uþdaryti", "");

	return 1;
}

CMD:taisykles(playerid)
{
	new strf[1460], str[110];
	str = "{FFAF00}Iðmesti þaidëjà ið serverio galite uþ :\n"; strcat(strf, str);
	str = "\t{ffffff}  Neaktyvus þaidime, kai trugdo kitiems - KICK\n"; strcat(strf, str);
	str = "\t Netinkamas Vardo_Pavardës forma - KICK\n"; strcat(strf, str);
	str = "\t Blogas komandos ( /kviesti ) naudojimas - KICK\n"; strcat(strf, str);
	str = "{FFAF00}Uþblokuoti þaidëjà galite uþ :\n"; strcat(strf, str);
	str = "\t{ffffff}  Neleistinø programø naudojimas - BAN\n"; strcat(strf, str);
	str = "\t Kitø serveriø ar projektø reklamavimas - BAN\n"; strcat(strf, str);
	str = "\t Serverio klaidø naudojimas savo naudai - BAN\n"; strcat(strf, str);
	str = "\t Ávairus buginimas - BAN\n"; strcat(strf, str);
	str = "\t Vartotojø vagimas ir apgaudinëjimas - BAN\n"; strcat(strf, str);
	str = "\t Paskyrø ar kitø turimø dalykø pardavimas - BAN\n"; strcat(strf, str);
	str = "{FFAF00}Uþtildyti þaidëjà galite uþ :\n"; strcat(strf, str);
	str = "\t{ffffff}  Spaminimas arba Floodinimas tekste - MUTE 3600s.\n"; strcat(strf, str);
	str = "\t Áþeidinëjimai, bei keiksmai vieðai arba asmeniðkai - MUTE 3600s.\n"; strcat(strf, str);
	str = "\t Pokalbiø (/d;/s;/v) èato naudojimas ne pagal paskirtá - MUTE 3600s.\n\n"; strcat(strf, str);
	str = "{FFAF00}Ákalinti þaidëjà galite uþ :\n"; strcat(strf, str);
	str = "\t{ffffff}  Atrankø ir eventø trugdymà - JAIL 30 minuèiø\n"; strcat(strf, str);
	str = "\t Muðimasis ir þaidëjø dauþymas mieste, bei jø ðaudymas - JAIL 30 minuèiø\n"; strcat(strf, str);
	str = "\t Vaþinëjimas ne pagal KET ( non-rp ) nuolatinis - JAIL 15 minuèiø\n"; strcat(strf, str);
	str = "\t Trugdymas laikyti teises ( VM ) - JAIL 30 minuèiø\n"; strcat(strf, str);
	str = "\t Ðaudymas pro langà ( Drive-By ) mieste - JAIL 30 minuèiø\n"; strcat(strf, str);
	str = "\t RELOG padarymas ( kai esi surakintas teisësaugos ) - JAIL 45 minutes"; strcat(strf, str);
	ShowPlayerDialogEx(playerid, 426, DIALOG_STYLE_MSGBOX, "{ffffff}Administratoriø komandos ir taisyklës:", strf, "Supratau", "");
	return 1;
}

CMD:autopilotas(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti uþ vairo!");

	if(Ribotuvas[playerid] == false)
	{
		Ribotuvas[playerid] = true;

		SetPlayerSpeedCap(playerid, GREICIO_RIBA);

		PI[playerid][suautopilotu] = true;

		SendClientMessage(playerid, -1, "{ffffff} Autopilotas ájungtas. Vaþinëjant su juo gausite {FFAF00}$20/min{ffffff} prie algos!");
	}
	else
	{
		Ribotuvas[playerid] = false;

		DisablePlayerSpeedCap(playerid);

		PI[playerid][suautopilotu] = false;

		SendClientMessage(playerid, -1, "{ffffff} Autopilotas iðjungtas!");
	}
	return 1;
}

CMD:maistas(playerid)
{
	new str[500];

	format(str, 500, "Maistas\tTurimas kiekis (vnt)\n1. Ledai\t{FFAF00}%d\n2. Ðokoladas\t{FFAF00}%d\n3. Duona\t{FFAF00}%d\n4. Deðra\t{FFAF00}%d\n5. Sûrelis\t{FFAF00}%d\n6. Pica\t{FFAF00}%d\n7. Sultys\t{FFAF00}%d",
	PI[playerid][Ledai], PI[playerid][Sokoladas], PI[playerid][Duona], PI[playerid][Desra], PI[playerid][Surelis], PI[playerid][Pizza], PI[playerid][Sultys]);
	ShowPlayerDialogEx(playerid, ValgytiMaista, DIALOG_STYLE_TABLIST_HEADERS, "Maistas", str, "Valgyti", "Uþdaryti");

	return 1;
}

CMD:radijas(playerid)
{
	if(GetPlayerVehicleSeat(playerid) != 0 && GetPlayerVehicleSeat(playerid) != 1) return SendClientMessage(playerid, -1, "{ffffff} Turite sedëti transp. priemonës priekyje!");

	if(IsABike(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, -1, "{ffffff} Dviraèiuose klausytis radijos negali!");

	if(IsAMoto(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, -1, "{ffffff} Motocikluose klausytis radijos negali!");

	new vehicleid = GetPlayerVehicleID(playerid), String[216];

	format(String, sizeof(String), "1. Paleisti radijà\n2. Iðjungti radijà\n \n3. Dabar groja: {FFAF00}%s", (isnull(RadijosURL[vehicleid])) ? ("Niekas") : (RadijosPavadinimas[vehicleid]));
	ShowPlayerDialogEx(playerid, 1340, DIALOG_STYLE_LIST, "Radijas", String, "Pasirinkti", "Uþdaryti");

	return 1;
}

CMD:ispejimai(playerid)
{
	new masyvas[400];
	format(masyvas, sizeof(masyvas), "\t{FF9900}Jûsø turimi áspejimai!\n\n{C0C0C0}Jûsø darbo direktoriaus gauti áspëjimai: {FF9900}%d{C0C0C0}\nDirektoriaus áspëjimø: {FF9900}%d{C0C0C0}\nAdministratoriø/VIP áspëjimai: {FF9900}%d{C0C0C0}\n{C0C0C0}Jûsø vartotojo áspëjimai: {FF9900}%d/10",PI[playerid][ispejimai],PI[playerid][dispejimai],PI[playerid][AdminWarns],PI[playerid][ZaidejoIspejimai]);
	ShowPlayerDialogEx(playerid, 8000, DIALOG_STYLE_MSGBOX, "Áspëjimai",masyvas, "Uþdaryti", "");
	return 1;
}

CMD:paliktidarba(playerid)
{
	if(PI[playerid][specialybe] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus niekur nedirbate!");

	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Palikti darbà transp. priemonëje negalite!");

	ShowPlayerDialogEx(playerid, 987, DIALOG_STYLE_MSGBOX, "Darbo palikimas", "{ffffff}Ar tikrai norite palikti savo darbà?\nPaspaudus taip iðkarto bûsite paðalintas ið darbo.", "Taip", "Ne");

	return 1;
}

CMD:persirengti(playerid)
{
	if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, -1, "{ffffff} Lauke persirengti negalite!");

	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Persirenti galima tik stovint ant kojø!");

	if(PI[playerid][JustDie] > 0) return SendClientMessage(playerid, -1, "{ffffff} Jus dar negalite persirengti, nes esate gydomas!");

	if(PI[playerid][uniformd])
	{
		SetPlayerSkin(playerid, PI[playerid][drabuziai]);

		PI[playerid][uniformd] = false;

		SendClientMessage(playerid, -1, "{ffffff} Persirengëte á paprastus drabuþius!");

		ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
	}
	else
	{
		if(PI[playerid][uniforma] == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite kitø drabuþiø!");

		SetPlayerSkin(playerid, PI[playerid][uniforma]);

		PI[playerid][uniformd] = true;

		SendClientMessage(playerid, -1, "{ffffff} Persirengëte á darbinius drabuþius!");

		ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);

		return 1;
	}

	return 1;
}

CMD:baigti(playerid)
{
	if(SelectedSkin[playerid] > -1)
	{
		PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);

		if(!PI[playerid][uniformd])
		{
			SetPlayerSkin(playerid, PI[playerid][drabuziai]);

			ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
		}
		else
		{
			SetPlayerSkin(playerid, PI[playerid][uniforma]);

			ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
		}

		SetCameraBehindPlayer   (playerid);
		SetPlayerVirtualWorld   (playerid, 0);
		TogglePlayerControllable(playerid, true);

		SelectedSkin[playerid] = -1;
	}

	if(SelectedGangSkin[playerid] > -1)
	{
		PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);

		if(!PI[playerid][uniformd])
		{
			SetPlayerSkin(playerid, PI[playerid][drabuziai]);

			ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
		}
		else
		{
			SetPlayerSkin(playerid, PI[playerid][uniforma]);

			ApplyAnimation(playerid, "PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0);
		}

		SetCameraBehindPlayer   (playerid);
		SetPlayerVirtualWorld   (playerid, 0);
		TogglePlayerControllable(playerid, true);

		SelectedGangSkin[playerid] = -1;
	}

	if(PI[playerid][PasirinktaMasina] > -1)
	{
		ExitFromCarShop(playerid);
	}

	return 1;
}

CMD:akiniai(playerid)
{
	if(PI[playerid][HaveGlassesOn] > 19000)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, SUNGLASSES_ATTACH_SLOT))
		{
			RemovePlayerAttachedObject(playerid, SUNGLASSES_ATTACH_SLOT);

			SendClientMessage(playerid, -1, "{ffffff} Nusiëmete akinius!");
		}
		else
		{
			SetPlayerAttachedObject(playerid, SUNGLASSES_ATTACH_SLOT, PI[playerid][HaveGlassesOn], 2, GlassesSkinOffSet[GetPlayerSkin(playerid)][0], GlassesSkinOffSet[GetPlayerSkin(playerid)][1], GlassesSkinOffSet[GetPlayerSkin(playerid)][2], GlassesSkinOffSet[GetPlayerSkin(playerid)][3], GlassesSkinOffSet[GetPlayerSkin(playerid)][4], GlassesSkinOffSet[GetPlayerSkin(playerid)][5]);

			SendClientMessage(playerid, -1, "{ffffff} Uþsidëjote akinius!");
		}
	}
	else
	{
		SendClientMessage(playerid, -1, "{ffffff} Jus neturite akiniø!");
	}

	return 1;
}

CMD:salmas(playerid)
{
	if(PI[playerid][Salmas] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite ðalmo!");

	if(PI[playerid][cuffed]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas!");

	if(!IsPlayerAttachedObjectSlotUsed(playerid, POLICEHAT_ATTACH_SLOT))
	{
		switch(GetPlayerSkin(playerid))
		{
			case 0, 65, 74, 149, 208, 273:  SPAO{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: SPAO{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}
			case 7, 10: SPAO{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
			case 9: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
			case 11..13: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
			case 15: SPAO{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
			case 17..21: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: SPAO{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 40: SPAO{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 50, 100..103, 148, 150..189, 222: SPAO{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 51..54: SPAO{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 59..62: SPAO{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 77: SPAO{0.059999, 0.019999, 0.000000, 87.000000, 82.000000, 0.000000}
			case 85, 88, 89: SPAO{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 90..97: SPAO{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 132: SPAO{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 144..146: SPAO{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
			case 220: SPAO{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 223, 246: SPAO{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
			case 224..245: SPAO{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 294: SPAO{0.070000, 0.019999, 0.000000, 91.000000, 84.000000, 0.000000}
			case 295: SPAO{0.050000, 0.019998, 0.000000, 86.000000, 82.000000, 0.000000}
			case 296..298: SPAO{0.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 299: SPAO{0.064998, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		}

		SendClientMessage(playerid, -1, "{ffffff} Uþsidëjote ðalmà!");
	}
	else
	{
		RemovePlayerAttachedObject(playerid, POLICEHAT_ATTACH_SLOT);

		SendClientMessage(playerid, -1, "{ffffff} Nusiëmete ðalmà!");
	}

	return 1;
}

CMD:cpass(playerid, params[])
{
	ShowPlayerDialogEx(playerid, DIALOG_SLAPTAZODZIO_KEITIMAS, DIALOG_STYLE_INPUT, "Slaptaþodis", "Slaptaþodþio keitimas\n\nNorëdami pasikeisti slaptaþodá, áveskite apaèioje!", "Pakeisti", "Iðeiti");
	return true;
}

CMD:dirzas(playerid)
{    
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti maðinoje!");

	if(IsABike(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, -1, "{ffffff} Dviraèiuose saugos dirþo uþsisegti negali!");

	if(IsAMoto(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, -1, "{ffffff} Motocikluose saugos dirþo uþsisegti negali!");

	if(PI[playerid][cuffed]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas!");

	if(PI[playerid][Dirzas] == true)
	{
		SendClientMessage(playerid, -1, "{ffffff} Nusisegëte saugos dirþà!");

		PI[playerid][Dirzas] = false;

		return 1;
	}

	PI[playerid][Dirzas] = true;

	SendClientMessage(playerid, -1, "{ffffff} Uþsisegëte saugos dirþà!");

	return 1;
}

CMD:alga(playerid)
{
	new msg[250];

	format(msg, 250, "{ffffff}Ið viso jus esate uþdirbæs {FFAF00}$%s{ffffff}.\n \nAlgà atsiimti galite kiekvienà dienà nuo 19:00 iki 22:00 savivaldybëje - {FFAF00} /gps{ffffff}.", konvertuoti_pinigus(PI[playerid][alga]));
	ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Alga", msg, "Uþdaryti", "");

	return 1;
}

CMD:darbai(playerid)
{
	new String[1300], Stringas[1300],
	Darbuotojai0 = 0, Darbuotojai1 = 0, Darbuotojai2 = 0, Darbuotojai3 = 0, Darbuotojai4 = 0, Darbuotojai5 = 0, Darbuotojai6 = 0, Darbuotojai7 = 0, Darbuotojai8 = 0, Darbuotojai9 = 0, Darbuotojai10 = 0;

	for(new i, size = GetPlayerPoolSize(); i <= size; i++)
	{
		if(IsPlayerConnected(i))
		{
			switch(PI[i][specialybe])
			{
				case PICAI: 		Darbuotojai0 ++;
				case KELIAI: 		Darbuotojai1 ++;
				case AUTOBUSAI: 	Darbuotojai2 ++;
				case GAISRAI: 		Darbuotojai3 ++;

				case 1: 			Darbuotojai4 ++;
				case 2: 			Darbuotojai5 ++;
				case 3: 			Darbuotojai6 ++;
				case 4: 			Darbuotojai7 ++;
				case 5: 			Darbuotojai8 ++;
				case 11: 			Darbuotojai9 ++;
				case 13: 			Darbuotojai10 ++;
			}
		}
	}

	strcat(String, "{ffffff} Darbai {FFAF00}nereikalaujantys{ffffff} direktoriaus pakvietimo:\n \n");

	format(Stringas, sizeof(Stringas), "\t{ffffff}1. Picø iðveþiotojai {FFAF00}"#PICU_ISIDARBINIMO_XP" {ffffff}EXP ( prisijungæ darbuotojai: {FFAF00}%d{ffffff} )\n", Darbuotojai0);
	strcat(String, Stringas);

	format(Stringas, sizeof(Stringas), "\t{ffffff}2. Keliø valytojai {FFAF00}"#VALYTOJU_ISIDARBINIMO_XP" {ffffff}EXP ( prisijungæ darbuotojai: {FFAF00}%d{ffffff} )\n", Darbuotojai1);
	strcat(String, Stringas);

	format(Stringas, sizeof(Stringas), "\t{ffffff}3. Autobusø vairuotojai {FFAF00}"#AUTOBUSU_ISIDARBINIMO_XP" {ffffff}EXP (prisijungæ darbuotojai: {FFAF00}%d{ffffff} )\n", Darbuotojai2);
	strcat(String, Stringas);

	format(Stringas, sizeof(Stringas), "\t{ffffff}4. Gaisrininkai {FFAF00}"#GAISRININKU_ISIDARBINIMO_XP" {ffffff}EXP ( prisijungæ darbuotojai: {FFAF00}%d{ffffff} )\n \n \n", Darbuotojai3);
	strcat(String, Stringas);

	strcat(String, "{ffffff} Darbai {FFAF00}reikalaujantys{ffffff} direktoriaus pakvietimo:\n \n");

	format(Stringas, sizeof(Stringas), "\t{ffffff}1. Policininkai {FFAF00}%s {ffffff}EXP ( prisijungæ darbuotojai: {FFAF00}%d{ffffff} )\n", konvertuoti_pinigus(Policininkas[NuoKiekEXP]), Darbuotojai4);
	strcat(String, Stringas);

	format(Stringas, sizeof(Stringas), "\t{ffffff}2. Medikai {FFAF00}%s {ffffff}EXP ( prisijungæ darbuotojai: {FFAF00}%d{ffffff} )\n", konvertuoti_pinigus(Medikas[NuoKiekEXP]), Darbuotojai5);
	strcat(String, Stringas);

	format(Stringas, sizeof(Stringas), "\t{ffffff}3. Kurjeriai {FFAF00}%s {ffffff}EXP ( prisijungæ darbuotojai: {FFAF00}%d{ffffff} )\n", konvertuoti_pinigus(Kurjeris[NuoKiekEXP]), Darbuotojai6);
	strcat(String, Stringas);

	format(Stringas, sizeof(Stringas), "\t{ffffff}4. Autoservisas ECO {FFAF00}%s {ffffff}EXP ( prisijungæ darbuotojai: {FFAF00}%d{ffffff} )\n", konvertuoti_pinigus(Mechanikas[NuoKiekEXP]), Darbuotojai7);
	strcat(String, Stringas);

	format(Stringas, sizeof(Stringas), "\t{ffffff}5. Spec. bûrio pajëgos ARAS {FFAF00}%s {ffffff}EXP ( prisijungæ darbuotojai: {FFAF00}%d{ffffff} )\n", konvertuoti_pinigus(Dyleris[NuoKiekEXP]), Darbuotojai8);
	strcat(String, Stringas);

	format(Stringas, sizeof(Stringas), "\t{ffffff}6. Fûristai {FFAF00}%s {ffffff}EXP ( prisijungæ darbuotojai: {FFAF00}%d{ffffff} )\n", konvertuoti_pinigus(Furistas[NuoKiekEXP]), Darbuotojai9);
	strcat(String, Stringas);
	
	format(Stringas, sizeof(Stringas), "\t{ffffff}7. Taksistai {FFAF00}%s {ffffff}EXP ( prisijungæ darbuotojai: {FFAF00}%d{ffffff} )\n \n \n", konvertuoti_pinigus(Taxi[NuoKiekEXP]), Darbuotojai10);
	strcat(String, Stringas);

	ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Visi serverio darbai", String, "Gerai", "");

	return 1;
}

CMD:gps(playerid)
{
	new String[400], TuriVersla[64], TuriNama[64];

	if(PlayerHaveProperty(playerid) != -1)	TuriVersla = "4. Iðgauti verslo pozicijà";
	else 									TuriVersla = "4. -";

	if(PlayerHaveHouse(playerid) != -1)		TuriNama = "5. Iðgauti namo pozicijà";
	else 									TuriNama = "5. -";

	if(!PI[playerid][gps])
	{
		if(PI[playerid][VisoPrazaide] < NAUJOKO_LAIKAS)
		{
			SendClientMessage(playerid, -1, "{ffffff} Jus neturite GPS navigacijos, bet kadangi esate naujokas galite ja naudotis!");

			format(String, sizeof(String), "1. Mini darbø vietovës\n2. Normaliø darbø vietovës\n3. Uþkandinës, restoranai ir kita\n4. Kitos vietovës\n%s\n%s", TuriVersla, TuriNama);
			ShowPlayerDialogEx(playerid, 4500, DIALOG_STYLE_LIST, "GPS navigacija", String, "Pasirinkti", "Uþdaryti");
		}
		else
		{
			return SendClientMessage(playerid, -1, "{ffffff} Jus neturite GPS navigacijos!");
		}
	}
	else
	{
		format(String, sizeof(String), "1. Mini darbø vietovës\n2. Normaliø darbø vietovës\n3. Uþkandinës, restoranai ir kita\n4. Kitos vietovës\n%s\n%s", TuriVersla, TuriNama);
		ShowPlayerDialogEx(playerid, 4500, DIALOG_STYLE_LIST, "GPS navigacija", String, "Pasirinkti", "Uþdaryti");
	}

	return 1;
}

CMD:navigacija(playerid) return pc_cmd_gps(playerid);

CMD:stiliai(playerid)
{
	ShowPlayerDialogEx(playerid, 5120, DIALOG_STYLE_LIST, "Kovø stiliai", "Elbow\nBoxo\nGrabKick\nKneeHead\nKungFu\nPaprastas", "Pasirinkti", "Atsaukti");

	return 1;
}

CMD:gsunaikinti(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti transp. priemonëje!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	new vehicleid = GetPlayerVehicleID(playerid);

	VehicleInfo[vehicleid][vRida] = 0.0;

	switch(PI[playerid][gMember])
	{
		case 0: return 0;
		case 1: if(ZeroGangID[0] <= vehicleid <= ZeroGangID[sizeof(ZeroGangID) - 1]) ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		case 2: if(FirstGangID[0] <= vehicleid <= FirstGangID[sizeof(FirstGangID) - 1]) ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		case 3: if(SecondGangID[0] <= vehicleid <= SecondGangID[sizeof(SecondGangID) - 1]) ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	}

	return 1;
}

CMD:sunaikinti(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti transp. priemonëje!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	new vehicleid = GetPlayerVehicleID(playerid);
	new model     = GetVehicleModel(vehicleid);

	VehicleInfo[vehicleid][vRida] = 0.0;

	switch(PI[playerid][specialybe])
	{
		case 0: return 0;
		case 1: if(PolicijosMasina[0] <= vehicleid <= PolicijosMasina[sizeof(PolicijosMasina) - 1]) ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		case 2: if(MedikuMasina[0] <= vehicleid <= MedikuMasina[sizeof(MedikuMasina) - 1]) ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		case 3: if(KurjeriuMasina[0] <= vehicleid <= KurjeriuMasina[sizeof(KurjeriuMasina) - 1]) ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		case 4: if(MechanikuMasina[0] <= vehicleid <= MechanikuMasina[sizeof(MechanikuMasina) - 1]) ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		case 5: if(ArasMasina[0] <= vehicleid <= ArasMasina[sizeof(ArasMasina) - 1]) ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		case 11: if(FuristuMasina[0] <= vehicleid <= FuristuMasina[sizeof(FuristuMasina) - 1]) ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		case 13: if(TaksiMasina[0] <= vehicleid <= TaksiMasina[sizeof(TaksiMasina) - 1]) ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));

		//be pakvietimø
		case 20: if(Pizzaboy[0] <= vehicleid <= Pizzaboy[sizeof(Pizzaboy) - 1]) ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		case 22: if(model == 574) ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		case 24: if(vehicleid >= BusDriversVehicle[0] && vehicleid <= BusDriversVehicle[6]) ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	}

	return 1;
}

CMD:top(playerid)
{
	new String[600];

	strcat(String, "1. Top 10 pagal patirties taðkus\n2. Top 10 pagal pinigus\n");
	strcat(String, "3. Top 10 pagal kreditus\n4. Top 10 pagal pradirbtà laikà\n");
	strcat(String, "5. Top 10 pagal uþdirbtà algà\n6. Top 10 pagal ieðkomumo lygá\n");
	strcat(String, "7. Top 10 pagal ðiandien praþaistà laikà\n8. Top 10 pagal reputacijos taðkus\n");
	strcat(String, "9. Top 10 gaujø pagal taðkus\n");
	strcat(String, "10. Top 10 ðiandien pagalbà suteikusiø administratoriø\n11. Top 10 ið viso pagalbà suteikusiø administratoriø\n");

	ShowPlayerDialogEx(playerid, 1475, DIALOG_STYLE_LIST, "TOP 10", String, "Pasirinkti", "Uþdaryti");

	return 1;
}

CMD:variklis(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{ffffff} Kad uþvestum maðinà turi sëdëti uþ jos vairo!");
	if(VehicleInfo[vehicleid][vDujos])
	{
		if(VehicleInfo[vehicleid][vIjungta])
		{
			if(VehicleInfo[vehicleid][vDujuLikutis] <= 0.0) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonëje nëra dujø!");
		}
		else
		{
			if(VehicleInfo[vehicleid][vKuras] <= 0.0) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonëje nëra kuro!");
		}
	}
	else
	{
		if(VehicleInfo[vehicleid][vKuras] <= 0.0) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonëje nëra kuro!");
	}
	new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;
	GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);
	if(!IsABike(vehicleid))
	{
		if(!Engine) { SetVehicleParamsEx(vehicleid, true, Lights, Alarm, Doors, Bonnet, Boot, Objective), GameTextForPlayer(playerid,"~g~UZVEDEI VARIKLI",2000,4); } else { SetVehicleParamsEx(vehicleid, false, Lights, Alarm, Doors, Bonnet, Boot, Objective), GameTextForPlayer(playerid,"~R~UZGESINAI VARIKLI",2000,4); }
	}
	return 1;
}

CMD:sviesos(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{ffffff} Kad ájungtum ðviesas turi sëdëti uþ tr. priemonës vairo!");

	if(PI[playerid][cuffed]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas!");

	new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

	GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);

	if(!IsABike(vehicleid))
	{
		if(!Lights)
		{
			SetVehicleParamsEx(vehicleid, Engine, true, Alarm, Doors, Bonnet, Boot, Objective), GameTextForPlayer(playerid,"~g~SVIESOS IJUNGTOS",2000,4);
		}
		else
		{
			SetVehicleParamsEx(vehicleid, Engine, false, Alarm, Doors, Bonnet, Boot, Objective), GameTextForPlayer(playerid,"~R~SVIESOS ISJUNGTOS",2000,4);
		}
	}

	return 1;
}

/*CMD:zvejoti(playerid)
{
	//if(PlayerInZone(playerid, -2464.2332,1450.8206, -2399.1199,1453.5428))
	//if(PlayerInZone(playerid, -2403.5088,1429.0901, -2400.8433,1453.7195))

	if(IsPlayerSwimming(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Plaukiojant þvejoti negalite!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(!PlayerInZone(playerid, -2464.2332,1450.8206, -2399.1199,1453.5428))
	{
		new vehicleid = GetClosestVehicle(playerid);
		new Float: V_Pos[3]; GetVehiclePos(vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);

		if(vehicleid != INVALID_VEHICLE_ID && IsPlayerInRangeOfPoint(playerid, 6.0, V_Pos[0], V_Pos[1], V_Pos[2]))
		{
			//if(VehicleInfo[vehicleid][vNupirkta])
			{
				if(GetVehicleCategory(vehicleid) == BOATS)
				{
					if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Þvejoti ið transp. priemonës negalite!");

					new unguriai = PI[playerid][ungurys];
					new karosai = PI[playerid][karosas];
					new karpiai = PI[playerid][karpis];
					new karsiai = PI[playerid][karsis];
					new lydekos = PI[playerid][lydeka];

					if(!zVarzybos)
					{
						if(unguriai + karosai + karpiai + karsiai + lydekos > 40)
						{
							SendClientMessage(playerid, -1, "{ffffff} Jus jau turite per daug þuvies, daugiau nepaneðite. Parduoti jas galite MetroCity turguje!");
							SendClientMessage(playerid, -1, "{ffffff} Já rasite: {FFAF00} /gps > Kitos vietovës > MetroCity Turgus{ffffff}.");

							return 1;
						}
					}

					if(!PI[playerid][meskere]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite meðkerës!");

					if(!PI[playerid][valas]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite valo!");

					if(PI[playerid][masalas] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite masalo!");

					if(PI[playerid][zvejoja]) return SendClientMessage(playerid, -1, "{ffffff} Jus jau þvejojate, palaukite kol uþkibs");

					TogglePlayerControllable(playerid, false);

					PI[playerid][zvejoja] = true;
					PI[playerid][masalas] --;

					SendClientMessage 		(playerid, -1, "{ffffff} Uþmetëte meðkëræ! Laukite kol uþkibs...");
					SetPlayerAttachedObject (playerid, 2, 18632, 6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);
					ApplyAnimation 			(playerid, "SWORD", "sword_block", 4.1, 0, 1, 1, 1, 1, 1);

					ZvejojaEx[playerid] = SetTimerEx("Zvejoja", (7 + random(13)) * 1000, false, "d", playerid);

					return 1;
				}
			}
		}
		else
		{
			return SendClientMessage(playerid, -1, "{ffffff} Jus ne þvejybos vietoje!");
		}
	}

	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Þvejoti ið transp. priemonës negalite!");

	new unguriai = PI[playerid][ungurys];
	new karosai = PI[playerid][karosas];
	new karpiai = PI[playerid][karpis];
	new karsiai = PI[playerid][karsis];
	new lydekos = PI[playerid][lydeka];

	if(!zVarzybos)
	{
		if(unguriai + karosai + karpiai + karsiai + lydekos > 40)
		{
			SendClientMessage(playerid, -1, "{ffffff} Jus jau turite per daug þuvies, daugiau nepaneðite. Parduoti jas galite MetroCity turguje!");
			SendClientMessage(playerid, -1, "{ffffff} Já rasite: {FFAF00} /gps > Kitos vietovës > MetroCity Turgus{ffffff}.");

			return 1;
		}
	}

	if(!PI[playerid][meskere]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite meðkerës!");

	if(!PI[playerid][valas]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite valo!");

	if(PI[playerid][masalas] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite masalo!");

	if(PI[playerid][zvejoja]) return SendClientMessage(playerid, -1, "{ffffff} Jus jau þvejojate, palaukite kol uþkibs");

	TogglePlayerControllable(playerid,false);

	PI[playerid][zvejoja] = true;
	PI[playerid][masalas] --;

	SendClientMessage 		(playerid, -1, "{ffffff} Uþmetëte meðkëræ! Laukite kol uþkibs...");
	SetPlayerAttachedObject (playerid, 2, 18632,6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);
	ApplyAnimation 			(playerid, "SWORD", "sword_block", 4.1, 0, 1, 1, 1, 1, 1);

	ZvejojaEx[playerid] = SetTimerEx("Zvejoja", (7 + random(13)) * 1000, false, "d", playerid);

	return 1;
}*/

/*CMD:pasiekimai(playerid)
{
	new strf[2000], str[225];
	new mNusipirktiCarx[30], mNusipirktiNamax[30], mNusipirktiVerslax[30];
	new misTeisesx[30], mMTeisesx[30], mFTeisesx[30], mGLicenzijax[30];
	new mUzsidirbt100kx[30], mUzsidirbt500kx[30], mUzsidirbt1mx[30];
	new mTureti300kx[30], mTureti900kx[30], mTureti5mx[30];
	new mButKalejmex[30], mButDarbex[30], mButGaujojex[30];
	new mTuret1000xpx[30], mTuret10000xpx[30], mTuret50000xpx[30];
	new mdSuimtZmogux[30], mdDuotBaudax[30], mdAtimtTeisesx[30], mdPatikrintiZmogux[30];
	new mdFixCarx[30], mdPiltDegalusx[30];
	new mdPaveztZmogux[30], mdNuveztKrovinix[30];
	new mdParduotiSveikPazx[30], mdPagydytiZmogux[30];

	if(PI[playerid][mNusipirktiCar]) { mNusipirktiCarx = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mNusipirktiCar]) { mNusipirktiCarx = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mNusipirktiNama]) { mNusipirktiNamax = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mNusipirktiNama]) { mNusipirktiNamax = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mNusipirktiVersla]) { mNusipirktiVerslax = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mNusipirktiVersla]) { mNusipirktiVerslax = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][misTeises]) { misTeisesx = "{00CC00}Ávykdyta"; } else if(!PI[playerid][misTeises]) { misTeisesx = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mMTeises]) { mMTeisesx = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mMTeises]) { mMTeisesx = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mFTeises]) { mFTeisesx = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mFTeises]) { mFTeisesx = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mGLicenzija]) { mGLicenzijax = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mGLicenzija]) { mGLicenzijax = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mUzsidirbt100k]) { mUzsidirbt100kx = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mUzsidirbt100k]) { mUzsidirbt100kx = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mUzsidirbt500k]) { mUzsidirbt500kx = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mUzsidirbt500k]) { mUzsidirbt500kx = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mUzsidirbt1m]) { mUzsidirbt1mx = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mUzsidirbt1m]) { mUzsidirbt1mx = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mTureti300k]) { mTureti300kx = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mTureti300k]) { mTureti300kx = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mTureti900k]) { mTureti900kx = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mTureti900k]) { mTureti900kx = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mTureti5m]) { mTureti5mx = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mTureti5m]) { mTureti5mx = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mButKalejme]) { mButKalejmex = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mButKalejme]) { mButKalejmex = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mButDarbe]) { mButDarbex = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mButDarbe]) { mButDarbex = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mButGaujoje]) { mButGaujojex = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mButGaujoje]) { mButGaujojex = "{FFAF00}Neávykdyta"; }

	if(GetPlayerScore(playerid) >= 1000) { mTuret1000xpx = "{00CC00}Ávykdyta"; } else if(GetPlayerScore(playerid) < 1000) { mTuret1000xpx = "{FFAF00}Neávykdyta"; }
	if(GetPlayerScore(playerid) >= 10000) { mTuret10000xpx = "{00CC00}Ávykdyta"; } else if(GetPlayerScore(playerid) > 10000) { mTuret10000xpx = "{FFAF00}Neávykdyta"; }
	if(GetPlayerScore(playerid) >= 50000) { mTuret50000xpx = "{00CC00}Ávykdyta"; } else if(GetPlayerScore(playerid) > 50000) { mTuret50000xpx = "{FFAF00}Neávykdyta"; }

	if(PI[playerid][mdSuimtZmogu]) { mdSuimtZmogux = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mdSuimtZmogu]) { mdSuimtZmogux = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mdDuotBauda]) { mdDuotBaudax = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mdDuotBauda]) { mdDuotBaudax = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mdAtimtTeises]) { mdAtimtTeisesx = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mdAtimtTeises]) { mdAtimtTeisesx = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mdPatikrintiZmogu]) { mdPatikrintiZmogux = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mdPatikrintiZmogu]) { mdPatikrintiZmogux = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mdFixCar]) { mdFixCarx = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mdFixCar]) { mdFixCarx = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mdPiltDegalus]) { mdPiltDegalusx = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mdPiltDegalus]) { mdPiltDegalusx = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mdPaveztZmogu]) { mdPaveztZmogux = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mdPaveztZmogu]) { mdPaveztZmogux = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mdNuveztKrovini]) { mdNuveztKrovinix = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mdNuveztKrovini]) { mdNuveztKrovinix = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mdParduotiSveikPaz]) { mdParduotiSveikPazx = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mdParduotiSveikPaz]) { mdParduotiSveikPazx = "{FFAF00}Neávykdyta"; }
	if(PI[playerid][mdPagydytiZmogu]) { mdPagydytiZmogux = "{00CC00}Ávykdyta"; } else if(!PI[playerid][mdPagydytiZmogu]) { mdPagydytiZmogux = "{FFAF00}Neávykdyta"; }
	str = "{13FABC}Þaidëjo pasiekimai\n\n", strcat(strf, str);

	format(str, 225, "{FFFFFF}Nusipirkti maðinà ið salono: %s\n{FFFFFF}Nusipirkti namà: %s\n{FFFFFF}Nusipirkti verslà: %s\n", mNusipirktiCarx, mNusipirktiNamax, mNusipirktiVerslax); strcat(strf, str);
	format(str, 225, "{FFFFFF}Iðsilaikyti maðinos teises: %s\n{FFFFFF}Iðsilaikyti motociklo teises: %s\n{FFFFFF}Iðsilaikyti fûros teises: %s\n{FFFFFF}Nusipirkti ginklø licenzijà: %s\n", misTeisesx, mMTeisesx, mFTeisesx, mGLicenzijax); strcat(strf, str);
	format(str, 225, "{FFFFFF}Atsiimti ið uþdarbio $100.000: %s\n{FFFFFF}Atsiimti ið uþdarbio $500.000: %s\n{FFFFFF}Atsiimti ið uþdarbio $1.000.000: %s\n", mUzsidirbt100kx, mUzsidirbt500kx, mUzsidirbt1mx); strcat(strf, str);
	format(str, 225, "{FFFFFF}Turëti $300.000: %s\n{FFFFFF}Turëti $900.000: %s\n{FFFFFF}Turëti $5.000.000: %s\n", mTureti300kx, mTureti900kx, mTureti5mx); strcat(strf, str);
	format(str, 225, "{FFFFFF}Turëti 1.000 XP: %s\n{FFFFFF}Turëti 10.000 XP: %s\n{FFFFFF}Turëti 50.000 XP: %s\n", mTuret1000xpx, mTuret10000xpx, mTuret50000xpx); strcat(strf, str);
	format(str, 225, "{FFFFFF}Pabûvoti kalëjime: %s\n{FFFFFF}Ásidarbinti á bet koká darbà su pakvietimu: %s\n{FFFFFF}Ástotá á bet kokià mafijà: %s\n", mButKalejmex, mButDarbex, mButGaujojex); strcat(strf, str);

	str = "{13FABC}Þaidëjo darbø pasiekimai\n\n", strcat(strf, str);
	//----------------------------TEISËSAUGOS-------------------------
	str = "{E89003}Teisësaugos pasiekimai:\n", strcat(strf, str);
	format(str, 225, "{FFFFFF}Suimti pirmàjá þmogø: %s\n{FFFFFF}Iðraðyti pirmàjà baudà: %s\n{FFFFFF}Atimti pirmàsias teises: %s\n{FFFFFF}Patikrinti pirmàjá þmogø: %s\n", mdSuimtZmogux, mdDuotBaudax, mdAtimtTeisesx, mdPatikrintiZmogux); strcat(strf, str);//Uþduotis teisësaugai
	//----------------------------MECHANIKØ-------------------------
	str = "{E89003}Mechanikø pasiekimai:\n", strcat(strf, str);
	format(str, 225, "{FFFFFF}Sutvarkyti pirmàjà maðinà: %s\n{FFFFFF}Uþpilti degalø pirmàjai maðinai: %s\n", mdFixCarx, mdPiltDegalusx); strcat(strf, str);//Uþduotys mechanikams
	//----------------------------taxistø-------------------------
	str = "{E89003}Taxi pasiekimai:\n", strcat(strf, str);
	format(str, 225, "{FFFFFF}Paveþti pirmàjá þmogø: %s\n", mdPaveztZmogux); strcat(strf, str);//Uþduotys taxistams
	//----------------------------FÛRISTØ-------------------------
	str = "{E89003}Fûristø pasiekimai\n", strcat(strf, str);
	format(str, 225, "{FFFFFF}Nuveþti pirmàjá kroviná: %s\n", mdNuveztKrovinix); strcat(strf, str);//Uþduotys fûristams
	//----------------------------Medikø-------------------------
	str = "{E89003}Medikø pasiekimai\n", strcat(strf, str);
	format(str, 225, "{FFFFFF}Parduoti pirmàjà sveikatos paþymà: %s\n{FFFFFF}Pagydyti þmogø: %s", mdParduotiSveikPazx, mdPagydytiZmogux); strcat(strf, str);//Uþduotys medikams

	ShowPlayerDialogEx(playerid, 21420, DIALOG_STYLE_LIST, "{ffffff}Pasiekimai", strf, "Uþdaryti", "");
	return 1;
}*/

CMD:kreditai(playerid) return pc_cmd_paslaugos(playerid);

CMD:paslaugos(playerid)
{
	ShowPlayerDialogEx(playerid, 5589, DIALOG_STYLE_LIST, "Paslaugos", "1. Uþsakyti kreditus\n2. Uþsakyti paslaugas", "Pasirinkti", "Uþdaryti");

	return 1;
}

CMD:likosedeti(playerid)
{
	new	valandos, minutes, sekundes, msg[100], Hour, Minute, Second;
	gettime(Hour, Minute, Second);
	if(PI[playerid][kalejimo_laikas] > 0)
	{
		sekundes = PI[playerid][kalejimo_laikas];
		while(sekundes >= 60)
		{
			sekundes -= 60;
			minutes++;
		}
		while(minutes >= 60)
		{
			minutes -= 60;
			valandos++;
		}
		format(msg, sizeof(msg), "~g~|~w~%i:%i:%i~g~|~n~|~w~%02i:%02i:%02i~g~|", Hour, Minute, Second, valandos, minutes, sekundes);
	}
	else
	{
		format(msg, sizeof(msg), "~g~|~r~%i:%i:%i~g~|", Hour, Minute, Second);
	}
	GameTextForPlayer(playerid, msg, 3000, 1);
	return 1;
}

CMD:nustatymai(playerid, params[])
{
	ShowPlayerDialogEx(playerid, DIALOG_NUSTATYMAI, DIALOG_STYLE_LIST, "Nustatymai",
	"1. Paslëpti logotipà (www.MetroCity.lt)\n2. Parodyti logotipà (www.MetroCity.lt)\n3. Paslëpti laikrodá (jeigu turite)\n4. Parodyti laikrodá (jeigu turite)\n5. Paslëpti alká, átarimus, pinigus\n5. Parodyti alká, átarimus, pinigus", "Pasirinkti", "Uþdaryti");

	return 1;
}

CMD:mapp(playerid, params[])
{
	new giveplayerid, Float: P_Pos[3], String[216];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /mapp <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(GetPlayerInterior(giveplayerid) != 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjo pozicijos nustatyti neámanoma!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjo pozicijos nustatyti neámanoma!");

	if(PI[playerid][RaseMapp] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Ðià komandà naudoti galima tik kas 5 sekundes!");

	PI[playerid][RaseMapp] = gettime() + 5;

	GetPlayerPos 			(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);
	SetPlayerCheckpointEx 	(playerid, 0, P_Pos[0], P_Pos[1], P_Pos[2], 2);

	format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}paþymëtas jûsø þemëlapyje!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:vaziuoju(playerid, params[])
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 2 && PI[playerid][specialybe] != 4 && PI[playerid][specialybe] != 13) return 0;
	
	new spc = PI[playerid][specialybe], pID, msg[200], Float:coo[3];
	
	if(sscanf(params, "u", pID)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /vaziuoju <vardas_pavardë/id>");
	
	if(pID == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(pID == playerid) return SendClientMessage(playerid, -1, "{ffffff} Savo iðkvietimø priimti negalite!");
	
	switch(spc)
	{
		case 1:
		{
			if(PI[pID][IskvietesPolicija])
			{
				format(msg, sizeof(msg), "{ffffff} Policininkas {FFAF00}%s {ffffff}priëmë iðkvietimà ir jau vaþiuoja pas jus!", GetPlayerNameEx(playerid));
				SendClientMessage(pID, -1, msg);

				format(msg, sizeof(msg), "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Priëmiau þaidëjo %s iðkvietimà!", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(pID));
				ZinuteRacija(msg, POLICIJA);

				PI[pID][IskvietesPolicija] = false;

				PI[playerid][SiandienPriimta][0] 	++;
				PI[playerid][SiaSavaitePriimta][0] 	++;
				PI[playerid][IsVisoPriimta][0] 		++;

				format(msg, sizeof(msg), "UPDATE `players` SET `SiandienPriimta` = '%d', `SiaSavaitePriimta` = '%d', `IsVisoPriimta` = '%d' WHERE `Vardas` = '%s'",
				PI[playerid][SiandienPriimta][0], PI[playerid][SiaSavaitePriimta][0], PI[playerid][IsVisoPriimta][0], GetPlayerNameEx(playerid));
				mysql_query(msg);

				GetPlayerPos(pID, coo[0], coo[1], coo[2]);
				SetPlayerCheckpointEx(playerid, 0, coo[0], coo[1], coo[2], 2);
			}
			else
			{
				SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nëra iðsikvietæs jokios tarnybos!");
			}
		}

		case 2:
		{
			if(PI[pID][IskvietesMedikus])
			{
				format(msg, sizeof(msg), "{ffffff} Medikas {FFAF00}%s {ffffff}priëmë iðkvietimà ir jau vaþiuoja pas jus!", GetPlayerNameEx(playerid));
				SendClientMessage(pID, GREEN, msg);

				format(msg, sizeof(msg), "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Priëmiau þaidëjo %s iðkvietimà!", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(pID));
				ZinuteRacija(msg, MEDIKAI);

				PI[pID][IskvietesMedikus] = false;

				PI[playerid][SiandienPriimta][1] 	++;
				PI[playerid][SiaSavaitePriimta][1] 	++;
				PI[playerid][IsVisoPriimta][1] 		++;

				format(msg, sizeof(msg), "UPDATE `players` SET `SiandienPriimta` = '%d', `SiaSavaitePriimta` = '%d', `IsVisoPriimta` = '%d' WHERE `Vardas` = '%s'",
				PI[playerid][SiandienPriimta][1], PI[playerid][SiaSavaitePriimta][1], PI[playerid][IsVisoPriimta][1], GetPlayerNameEx(playerid));
				mysql_query(msg);

				GetPlayerPos(pID, coo[0], coo[1], coo[2]);
				SetPlayerCheckpointEx(playerid, 0, coo[0], coo[1], coo[2], 2);
			}
			else
			{
				SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nëra iðsikvietæs jokios tarnybos!");
			}
		}

		case 4:
		{
			if(PI[pID][Iskvietesmechanikus])
			{
				format(msg, sizeof(msg), "{ffffff} Autoserviso ECO darbuotojas {FFAF00}%s {ffffff}priëmë iðkvietimà ir jau vaþiuoja pas jus!", GetPlayerNameEx(playerid));
				SendClientMessage(pID, GREEN, msg);

				format(msg, sizeof(msg), "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Priëmiau þaidëjo %s iðkvietimà!", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(pID));
				ZinuteRacija(msg, MECHANIKAI);

				PI[pID][Iskvietesmechanikus] = false;

				PI[playerid][SiandienPriimta][2] 	++;
				PI[playerid][SiaSavaitePriimta][2] 	++;
				PI[playerid][IsVisoPriimta][2] 		++;

				format(msg, sizeof(msg), "UPDATE `players` SET `SiandienPriimta` = '%d', `SiaSavaitePriimta` = '%d', `IsVisoPriimta` = '%d' WHERE `Vardas` = '%s'",
				PI[playerid][SiandienPriimta][2], PI[playerid][SiaSavaitePriimta][2], PI[playerid][IsVisoPriimta][2], GetPlayerNameEx(playerid));
				mysql_query(msg);

				GetPlayerPos(pID, coo[0], coo[1], coo[2]);
				SetPlayerCheckpointEx(playerid, 0, coo[0], coo[1], coo[2], 2);
			}
		}
		case 13:
		{
			if(PI[pID][IskvietesTaxi])
			{
				format(msg, sizeof(msg), "{ffffff} Taksi darbuotojas {FFAF00}%s {ffffff}priëmë iðkvietimà ir jau vaþiuoja pas jus!", GetPlayerNameEx(playerid));
				SendClientMessage(pID, GREEN, msg);

				format(msg, sizeof(msg), "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}Priëmiau þaidëjo %s iðkvietimà!", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(pID));
				ZinuteRacija(msg, TAXI);

				PI[pID][IskvietesTaxi] = false;

				PI[playerid][SiandienPriimta][3] 	++;
				PI[playerid][SiaSavaitePriimta][3] 	++;
				PI[playerid][IsVisoPriimta][3] 		++;

				format(msg, sizeof(msg), "UPDATE `players` SET `SiandienPriimta` = '%d', `SiaSavaitePriimta` = '%d', `IsVisoPriimta` = '%d' WHERE `Vardas` = '%s'",
				PI[playerid][SiandienPriimta][3], PI[playerid][SiaSavaitePriimta][3], PI[playerid][IsVisoPriimta][3], GetPlayerNameEx(playerid));
				mysql_query(msg);

				GetPlayerPos(pID, coo[0], coo[1], coo[2]);
				SetPlayerCheckpointEx(playerid, 0, coo[0], coo[1], coo[2], 2);
			}
			else
			{
				SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nëra iðsikvietæs jokios tarnybos!");
			}
		}
	}

	return 1;
}

CMD:misija(playerid)
{
	new String[400];

	switch(PI[playerid][KelintaMisija])
	{
		case 0:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}1{ffffff}:\n \n");
			strcat(String, "{ffffff}Surinkti serveryje {FFAF00}300 {ffffff}EXP arba daugiau.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}$500{ffffff}.");
		}
		case 1:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}2{ffffff}:\n \n");
			strcat(String, "{ffffff}Dirbti betkuriame darbe.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}50{ffffff} EXP.");
		}
		case 2:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}3{ffffff}:\n \n");
			strcat(String, "{ffffff}Turëti algoje {FFAF00}$1,000{ffffff} arba daugiau.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}$800{ffffff}.");
		}
		case 3:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}4{ffffff}:\n \n");
			strcat(String, "{ffffff}Turëti visø trijø kategorijø vairavimo teises.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}100{ffffff} EXP.");
		}
		case 4:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}5{ffffff}:\n \n");
			strcat(String, "{ffffff}Praleisti serveryje {FFAF00}90 {ffffff}minuèiø per vienà parà (iki {FFAF00}00:00{ffffff}).\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}10{ffffff} kreditø.");
		}
		case 5:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}6{ffffff}:\n \n");
			strcat(String, "{ffffff}Turëti {FFAF00}10 {ffffff}+REP arba daugiau.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}$1,000{ffffff}.");
		}
		case 6:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}7{ffffff}:\n \n");
			strcat(String, "{ffffff}Laikyti rankoje {FFAF00}$10,000{ffffff} arba daugiau.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}150{ffffff} EXP.");
		}
		case 7:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}8{ffffff}:\n \n");
			strcat(String, "{ffffff}Turëti nuosavà transp. priemonæ.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}20{ffffff} kreditø.");
		}
		case 8:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}9{ffffff}:\n \n");
			strcat(String, "{ffffff}Surinkti serveryje {FFAF00}3,000 {ffffff}EXP arba daugiau.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}$2,000{ffffff}.");
		}
		case 9:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}10{ffffff}:\n \n");
			strcat(String, "{ffffff}Turëti algoje {FFAF00}$5,000{ffffff} arba daugiau.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}200{ffffff} EXP.");
		}
		case 10:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}11{ffffff}:\n \n");
			strcat(String, "{ffffff}Turëti {FFAF00}30 {ffffff}+REP arba daugiau.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}30{ffffff} kreditø.");
		}
		case 11:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}12{ffffff}:\n \n");
			strcat(String, "{ffffff}Turëti nuosavà namà.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}$5,000{ffffff}.");
		}
		case 12:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}13{ffffff}:\n \n");
			strcat(String, "{ffffff}Turëti nuosavà verslà.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}$10,000{ffffff}.");
		}
		case 13:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}14{ffffff}:\n \n");
			strcat(String, "{ffffff}Tapti kokio nors darbo pavaduotojumi.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}40{ffffff} kreditø.");
		}
		case 14:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}15{ffffff}:\n \n");
			strcat(String, "{ffffff}Tapti kokio nors darbo direktoriumi.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}50{ffffff} kreditø.");
		}
		case 15:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}16{ffffff}:\n \n");
			strcat(String, "{ffffff}Turëti 3 nuosavas transp. priemonës vienu metu.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}250{ffffff} EXP.");
		}
		case 16:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}17{ffffff}:\n \n");
			strcat(String, "{ffffff}Laikyti rankoje {FFAF00}$100,000{ffffff} arba daugiau.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}20 {ffffff} +REP.");
		}
		case 17:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}18{ffffff}:\n \n");
			strcat(String, "{ffffff}Surinkti serveryje {FFAF00}8,000 {ffffff}EXP arba daugiau.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}$12,000{ffffff}.");
		}
		case 18:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}19{ffffff}:\n \n");
			strcat(String, "{ffffff}Dirbti teisësaugoje.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}300{ffffff} EXP.");
		}
		case 19:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}20{ffffff}:\n \n");
			strcat(String, "{ffffff}Turëti {FFAF00}100{ffffff} +REP arba daugiau.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}60{ffffff} kreditø.");
		}
		case 20:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}21{ffffff}:\n \n");
			strcat(String, "{ffffff}Turëti algoje {FFAF00}$70,000{ffffff} arba daugiau.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}30 {ffffff} +REP.");
		}
		case 21:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}22{ffffff}:\n \n");
			strcat(String, "{ffffff}Bûti gaujoje.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}350{ffffff} EXP.");
		}
		case 22:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}23{ffffff}:\n \n");
			strcat(String, "{ffffff}Praleisti serveryje {FFAF00}300 {ffffff}minuèiø per vienà parà (iki {FFAF00}00:00{ffffff}).\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}70{ffffff} kreditø.");
		}
		case 23:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}24{ffffff}:\n \n");
			strcat(String, "{ffffff}Surinkti serveryje {FFAF00}20,000 {ffffff}EXP arba daugiau.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}$14,000{ffffff}.");
		}
		case 24:
		{
			strcat(String, "{ffffff}Misija nr. {FFAF00}17{ffffff}:\n \n");
			strcat(String, "{ffffff}Laikyti rankoje {FFAF00}$1,000,000{ffffff} arba daugiau.\n \n");
			strcat(String, "{ffffff}Prizas: {FFAF00}1,000{ffffff} EXP.");
		}
		case 25:
		{
			strcat(String, "{ffffff}Tu atlikai visas misijas, taèiau kas kaþkiek laiko jos gali bûti pildomos!");
		}
	}

	ShowPlayerDialogEx(playerid, 457, DIALOG_STYLE_MSGBOX, "{ffffff}Misijos", String, "Vykdyti", "Uþdaryti");

	return 1;
}

CMD:vip(playerid, params[])
{
	new String[1024], Stringas[1024], VipCount;

	if(CheckMute(playerid)) return 1;

	if(sscanf(params, "s[500]", String))
	{
		for(new i, size = GetPlayerPoolSize(); i <= size; i++)
		{
			if(IsPlayerConnected(i) && PI[i][AdminLevel] == LEVEL_VIP)
			{
				VipCount ++;

				if(VipCount == 0) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu prisijungusiø VIP nëra!");

				format(Stringas, sizeof(Stringas), "{ffffff}%d. {FFAF00}%s{ffffff}\n", VipCount, GetPlayerNameEx(i));
				strcat(String, Stringas);

				ShowPlayerDialogEx(playerid, 6958, DIALOG_STYLE_MSGBOX, "Prisijungæ serverio VIP nariai", String, "Þinutë", "Uþdaryti");
			}
		}
		return 1;
	}
	else
	{
		if(PI[playerid][ParaseVipams] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} VIP nariams galima raðyti tik kas 30 sekundþiø!");

		//if(strval(String) < 1 || strval(String) > 128) return SendClientMessage(playerid, -1, "{ffffff} Praneðimas per ilgas arba per trumpas!");

		//format(String, sizeof(String), "{ffffff} VIP þinutë {FFAF00}%s(%i): {ffffff}%s", GetPlayerNameEx(playerid), playerid, String);

		for(new i, size = GetPlayerPoolSize(); i <= size; i++)
		{
			if(IsPlayerConnected(i) && PI[i][AdminLevel] == LEVEL_VIP)
			{
				format(String, sizeof(String), "{FFAF00}%s(%d) VIP'ams: {ffffff}%s", GetPlayerNameEx(playerid), playerid, String);
				SendClientMessage(i, -1, String);
			}
		}

		format(String, sizeof(String), "{FFAF00}Paraðëte VIP'ams: {ffffff}%s", String);
		SendClientMessage(playerid, -1, String);

		PI[playerid][ParaseVipams] = gettime() + 30;
	}
	return 1;
}

CMD:direktoriams(playerid, params[])
{
	new String[216], Pranesimas[75];

	if(CheckMute(playerid)) return 1;

	if(sscanf(params, "s[75]", Pranesimas)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /direktoriams <tekstas>");

	if(PI[playerid][ParaseDyrikams] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Direktoriams galima raðyti tik kas 30 sekundþiø!");

	format(String, sizeof(String), "{ffffff} [DIREKTORIAMS] {FFAF00}%s(%i): {ffffff}%s", GetPlayerNameEx(playerid), playerid, Pranesimas);

	for(new i, size = GetPlayerPoolSize(); i <= size; i++)
	{
		if(IsPlayerConnected(i) && PI[i][plead])
		{
			SendClientMessage(i, -1, String);
		}
	}

	SendClientMessage(playerid, -1, String);

	PI[playerid][ParaseDyrikams] = gettime() + 30;

	return 1;
}

CMD:pavaduotojams(playerid, params[])
{
	new String[216], Pranesimas[75];

	if(CheckMute(playerid)) return 1;

	if(sscanf(params, "s[75]", Pranesimas)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /pavaduotojams <tekstas>");

	if(PI[playerid][ParasePavaduotojam] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Pavaduotojams galima raðyti tik kas 30 sekundþiø!");

	format(String, sizeof(String), "{ffffff} [PAVADUOTOJAMS] {FFAF00}%s(%i): {ffffff}%s", GetPlayerNameEx(playerid), playerid, Pranesimas);

	for(new i, size = GetPlayerPoolSize(); i <= size; i++)
	{
		if(IsPlayerConnected(i) && PI[i][pavdrk])
		{
			SendClientMessage(i, -1, String);
		}
	}

	SendClientMessage(playerid, -1, String);

	PI[playerid][ParasePavaduotojam] = gettime() + 30;

	return 1;
}

CMD:parduotiz(playerid, params[])
{
	new giveplayerid, WeedCount, WeedPrice, Float: P_Pos[3], String[216];

	if(PI[playerid][Weed] < 1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite þolës!");

	if(sscanf(params, "udd", giveplayerid, WeedCount, WeedPrice)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /parduotiz <vardas_pavardë/id> <kiekis miligramais> <miligramo kaina>");

	if(WeedCount > PI[playerid][Weed]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek þolës!");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	if(PI[playerid][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Ðià komandà naudoti galësite tik praþaidus {FFAF00}"#NAUJOKO_LAIKAS"{ffffff} min!");

		return 1;
	}

	if(PI[giveplayerid][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra naujokas!");

		return 1;
	}

	if(WeedCount < 1 || WeedPrice < 1) return SendClientMessage(playerid, -1, ""COL_USAGE"»»» {FFAF00}/parduotiz <vardas_pavardë/id> <kiekis miligramais> <miligramo kaina>");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	PI[giveplayerid][rkiekis][0] = WeedCount;
	PI[giveplayerid][rkaina][0]  = WeedCount * WeedPrice;
	ChoosedPlayer[giveplayerid]        		= playerid;

	format(String, sizeof(String), "{ffffff}Þaidëjas {FFAF00}%s {ffffff}siûlo jums {FFAF00}%s mg {ffffff}þolës uþ {FFAF00}$%s {ffffff}({FFAF00}1 mg/$%s{ffffff}).\n \n{ffffff}Ar pirksite?", GetPlayerNameEx(playerid), konvertuoti_pinigus(WeedCount), konvertuoti_pinigus(WeedCount * WeedPrice), konvertuoti_pinigus(WeedPrice));
	ShowPlayerDialogEx(giveplayerid, 7342, DIALOG_STYLE_MSGBOX, "Þolës pirkimas", String, "Taip", "Ne");

	format(String, sizeof(String), "{ffffff} Pasiûlëte þaidëjui {FFAF00}%s {FFAF00}%s mg {ffffff}þolës uþ {FFAF00}$%s{ffffff}!", GetPlayerNameEx(giveplayerid), konvertuoti_pinigus(WeedCount), konvertuoti_pinigus(WeedCount * WeedPrice));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:parduotic(playerid, params[])
{
	new giveplayerid, CocaineCount, CocainePrice, Float: P_Pos[3], String[216];

	if(PI[playerid][Kokainas] < 1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite þolës!");

	if(sscanf(params, "udd", giveplayerid, CocaineCount, CocainePrice)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /parduotic <vardas_pavardë/id> <kiekis miligramais> <miligramo kaina>");

	if(CocaineCount > PI[playerid][Kokainas]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek kokaino!");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	if(PI[playerid][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Ðià komandà naudoti galësite tik praþaidus {FFAF00}"#NAUJOKO_LAIKAS"{ffffff} min!");

		return 1;
	}

	if(PI[giveplayerid][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra naujokas!");

		return 1;
	}

	if(CocaineCount < 1 || CocainePrice < 1) return SendClientMessage(playerid, -1, ""COL_USAGE"»»» {FFAF00}/parduotic <vardas_pavardë/id> <kiekis miligramais> <miligramo kaina>");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	PI[giveplayerid][rkiekis][0] = CocaineCount;
	PI[giveplayerid][rkaina][0]  = CocaineCount * CocainePrice;
	ChoosedPlayer[giveplayerid]        = playerid;

	format(String, sizeof(String), "{ffffff}Þaidëjas {FFAF00}%s {ffffff}siûlo jums {FFAF00}%s mg {ffffff}kokaino uþ {FFAF00}$%s {ffffff}({FFAF00}1 mg/$%s{ffffff}).\n \n{ffffff}Ar pirksite?", GetPlayerNameEx(playerid), konvertuoti_pinigus(CocaineCount), konvertuoti_pinigus(CocaineCount * CocainePrice), konvertuoti_pinigus(CocainePrice));
	ShowPlayerDialogEx(giveplayerid, 7343, DIALOG_STYLE_MSGBOX, "Kokaino pirkimas", String, "Taip", "Ne");

	format(String, sizeof(String), "{ffffff} Pasiûlëte þaidëjui {FFAF00}%s {FFAF00}%s mg {ffffff}kokaino uþ {FFAF00}$%s{ffffff}!", GetPlayerNameEx(giveplayerid), konvertuoti_pinigus(CocaineCount), konvertuoti_pinigus(CocaineCount * CocainePrice));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:parduotih(playerid, params[])
{
	new giveplayerid, HeroineCount, HeroinePrice, Float: P_Pos[3], String[216];

	if(PI[playerid][Heroinas] < 1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite heroino!");

	if(sscanf(params, "udd", giveplayerid, HeroineCount, HeroinePrice)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /parduotih <vardas_pavardë/id> <kiekis mililitrais> <mililitro kaina>");

	if(HeroineCount > PI[playerid][Heroinas]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek heroino!");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	if(PI[playerid][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Ðià komandà naudoti galësite tik praþaidus {FFAF00}"#NAUJOKO_LAIKAS"{ffffff} min!");

		return 1;
	}

	if(PI[giveplayerid][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra naujokas!");

		return 1;
	}

	if(HeroineCount < 1 || HeroinePrice < 1) return SendClientMessage(playerid, -1, ""COL_USAGE"»»» {FFAF00}/parduotih <vardas_pavardë/id> <kiekis mililitrais> <mililitro kaina>");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	PI[giveplayerid][rkiekis][0] = HeroineCount;
	PI[giveplayerid][rkaina][0]  = HeroineCount * HeroinePrice;
	ChoosedPlayer[giveplayerid]        = playerid;

	format(String, sizeof(String), "{ffffff}Þaidëjas {FFAF00}%s {ffffff}siûlo jums {FFAF00}%s ml {ffffff}heroino uþ {FFAF00}$%s {ffffff}({FFAF00}1 ml/$%s{ffffff}).\n \n{ffffff}Ar pirksite?", GetPlayerNameEx(playerid), konvertuoti_pinigus(HeroineCount), konvertuoti_pinigus(HeroineCount * HeroinePrice), konvertuoti_pinigus(HeroinePrice));
	ShowPlayerDialogEx(giveplayerid, 7344, DIALOG_STYLE_MSGBOX, "Heroino pirkimas", String, "Taip", "Ne");

	format(String, sizeof(String), "{ffffff} Pasiûlëte þaidëjui {FFAF00}%s {FFAF00}%s ml {ffffff}heroino uþ {FFAF00}$%s{ffffff}!", GetPlayerNameEx(giveplayerid), konvertuoti_pinigus(HeroineCount), konvertuoti_pinigus(HeroineCount * HeroinePrice));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:parduotie(playerid, params[])
{
	new giveplayerid, ExtaziCount, ExtaziPrice, Float: P_Pos[3], String[216];

	if(PI[playerid][Ekstazi] < 1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite ekstazi!");

	if(sscanf(params, "udd", giveplayerid, ExtaziCount, ExtaziPrice)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /parduotie <vardas_pavardë/id> <kiekis miligramais> <miligramo kaina>");

	if(ExtaziCount > PI[playerid][Ekstazi]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek ekstazi!");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	if(PI[playerid][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Ðià komandà naudoti galësite tik praþaidus {FFAF00}"#NAUJOKO_LAIKAS"{ffffff} min!");

		return 1;
	}

	if(PI[giveplayerid][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra naujokas!");

		return 1;
	}

	if(ExtaziCount < 1 || ExtaziPrice < 1) return SendClientMessage(playerid, -1, ""COL_USAGE"»»» {FFAF00}/parduotie <vardas_pavardë/id> <kiekis miligramais> <miligramo kaina>");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	PI[giveplayerid][rkiekis][0] = ExtaziCount;
	PI[giveplayerid][rkaina][0]  = ExtaziCount * ExtaziPrice;
	ChoosedPlayer[giveplayerid]        = playerid;

	format(String, sizeof(String), "{ffffff}Þaidëjas {FFAF00}%s {ffffff}siûlo jums {FFAF00}%s mg {ffffff}ekstazá uþ {FFAF00}$%s {ffffff}({FFAF00}1 mg/$%s{ffffff}).\n \n{ffffff}Ar pirksite?", GetPlayerNameEx(playerid), konvertuoti_pinigus(ExtaziCount), konvertuoti_pinigus(ExtaziCount * ExtaziPrice), konvertuoti_pinigus(ExtaziPrice));
	ShowPlayerDialogEx(giveplayerid, 7345, DIALOG_STYLE_MSGBOX, "Heroino pirkimas", String, "Taip", "Ne");

	format(String, sizeof(String), "{ffffff} Pasiûlëte þaidëjui {FFAF00}%s {FFAF00}%s mg {ffffff}ekstazá uþ {FFAF00}$%s{ffffff}!", GetPlayerNameEx(giveplayerid), konvertuoti_pinigus(ExtaziCount), konvertuoti_pinigus(ExtaziCount * ExtaziPrice));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:vartotic(playerid, params[])
{
	new DrugsDose;

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[playerid][Kokainas] < 1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite kokaino!");

	if(sscanf(params, "d", DrugsDose)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /vartotic <kiekis miligramais>");

	if(PI[playerid][Kokainas] < DrugsDose) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek kokaino!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	PI[playerid][Kokainas] -= DrugsDose;

	if(PI[playerid][UsingDrugs] >= 5)
	{
		DrugsDose = 5 + 1;
	}

	if(DrugsDose < 5)
	{
		PI[playerid][UsingDrugs] += 2;

		SetPlayerDrunkLevel(playerid, (GetPlayerDrunkLevel(playerid) + 2000) * DrugsDose);
		ApplyAnimation     (playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1);

		new Float: S_PlayerHealth; GetPlayerHealth(playerid, S_PlayerHealth); S_PlayerHealth += (10.0 + randomfloat(15.0)) * DrugsDose;
		SetHealthByDrugs(playerid, S_PlayerHealth);

		SendClientMessage(playerid, -1, "{ffffff} Traukiate kokainà per nosá...");
	}
	else
	{
		SetPlayerHealthEx(playerid, 0.0);

		SendClientMessage(playerid, -1, "{ffffff} Perdozavote narkotiniø medþiagø!");
	}

	return 1;
}

CMD:vartotiz(playerid, params[])
{
	new DrugsDose;

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[playerid][Weed] < 1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite þolës!");

	if(sscanf(params, "d", DrugsDose)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /vartotiz <kiekis miligramais>");

	if(PI[playerid][Weed] < DrugsDose) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek þolës!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	PI[playerid][Weed] -= DrugsDose;

	if(PI[playerid][UsingDrugs] >= 5)
	{
		DrugsDose = 5 + 1;
	}

	if(DrugsDose < 5)
	{
		PI[playerid][UsingDrugs] += 2;

		SetPlayerDrunkLevel   (playerid, (GetPlayerDrunkLevel(playerid) + 2000) * DrugsDose);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);

		new Float: S_PlayerHealth; GetPlayerHealth(playerid, S_PlayerHealth); S_PlayerHealth += (10.0 + randomfloat(30.0)) * DrugsDose;
		SetHealthByDrugs(playerid, S_PlayerHealth);

		SendClientMessage(playerid, -1, "{ffffff} Prisidegate ir rûkote þolæ...");
	}
	else
	{
		SetPlayerHealthEx(playerid, 0.0);

		SendClientMessage(playerid, -1, "{ffffff} Perdozavote narkotiniø medþiagø!");
	}

	return 1;
}

CMD:vartotih(playerid, params[])
{
	new DrugsDose;

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[playerid][Heroinas] < 1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite heroino!");

	if(sscanf(params, "d", DrugsDose)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /vartotih <kiekis mililitrais>");

	if(PI[playerid][Heroinas] < DrugsDose) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek heroino!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	PI[playerid][Heroinas] -= DrugsDose;

	if(PI[playerid][UsingDrugs] >= 5)
	{
		DrugsDose = 100 + 1;
	}

	if(DrugsDose < 100)
	{
		PI[playerid][UsingDrugs] += 2;

		SetPlayerDrunkLevel(playerid, (GetPlayerDrunkLevel(playerid) + 2000) * DrugsDose);
		ApplyAnimation     (playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1);

		new Float: S_PlayerHealth; GetPlayerHealth(playerid, S_PlayerHealth); S_PlayerHealth += (10.0 + randomfloat(7.0)) * DrugsDose;
		SetHealthByDrugs(playerid, S_PlayerHealth);

		SendClientMessage(playerid, -1, "{ffffff} Leidþiates heroinà á venà...");
	}
	else
	{
		SetPlayerHealthEx(playerid, 0.0);

		SendClientMessage(playerid, -1, "{ffffff} Perdozavote narkotiniø medþiagø!");
	}

	return 1;
}

CMD:vartotie(playerid, params[])
{
	new DrugsDose;

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[playerid][Ekstazi] < 1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite ekstazi!");

	if(sscanf(params, "d", DrugsDose)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /vartotie <kiekis miligramais>");

	if(PI[playerid][Ekstazi] < DrugsDose) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek ekstazi!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	PI[playerid][Ekstazi] -= DrugsDose;

	if(PI[playerid][UsingDrugs] >= 5)
	{
		DrugsDose = 100 + 1;
	}

	if(DrugsDose < 100)
	{
		PI[playerid][UsingDrugs] += 2;

		SetPlayerDrunkLevel(playerid, (GetPlayerDrunkLevel(playerid) + 2000) * DrugsDose);
		ApplyAnimation     (playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1);

		new Float: S_PlayerHealth; GetPlayerHealth(playerid, S_PlayerHealth); S_PlayerHealth += (10.0 + randomfloat(10.0)) * DrugsDose;
		SetHealthByDrugs(playerid, S_PlayerHealth);

		SendClientMessage(playerid, -1, "{ffffff} Vartojate ekstazá...");
	}
	else
	{
		SetPlayerHealthEx(playerid, 0.0);

		SendClientMessage(playerid, -1, "{ffffff} Perdozavote narkotiniø medþiagø!");
	}

	return 1;
}

CMD:zvejyba(playerid)
{
	new String[400];

	switch(FS[playerid][FishingLevel])
	{
		case 1:
		{
			format(String, sizeof(String), "{ffffff}Jûsø þvejybos lygis: {FFAF00}%d\n{ffffff}Jûsø þvejybos patirtis: {FFAF00}%d\n \n{ffffff}Iki sekanèio lygio jums trûksta {FFAF00}%d {ffffff}patirties",
			FS[playerid][FishingLevel], FS[playerid][FishingExperience], FirstFishingLevel - FS[playerid][FishingExperience]);
		}

		case 2:
		{
			format(String, sizeof(String), "{ffffff}Jûsø þvejybos lygis: {FFAF00}%d\n{ffffff}Jûsø þvejybos patirtis: {FFAF00}%d\n \n{ffffff}Iki sekanèio lygio jums trûksta {FFAF00}%d {ffffff}patirties",
			FS[playerid][FishingLevel], FS[playerid][FishingExperience], SecondFishingLevel - FS[playerid][FishingExperience]);
		}

		case 3:
		{
			format(String, sizeof(String), "{ffffff}Jûsø þvejybos lygis: {FFAF00}%d\n{ffffff}Jûsø þvejybos patirtis: {FFAF00}%d\n \n{ffffff}Iki sekanèio lygio jums trûksta {FFAF00}%d {ffffff}patirties",
			FS[playerid][FishingLevel], FS[playerid][FishingExperience], ThirdFishingLevel - FS[playerid][FishingExperience]);
		}

		case 4:
		{
			format(String, sizeof(String), "{ffffff}Jûsø þvejybos lygis: {FFAF00}%d\n{ffffff}Jûsø þvejybos patirtis: {FFAF00}%d\n \n{ffffff}Iki sekanèio lygio jums trûksta {FFAF00}%d {ffffff}patirties",
			FS[playerid][FishingLevel], FS[playerid][FishingExperience], FourthFishingLevel - FS[playerid][FishingExperience]);
		}

		case 5:
		{
			format(String, sizeof(String), "{ffffff}Jûsø þvejybos lygis: {FFAF00}%d\n{ffffff}Jûsø þvejybos patirtis: {FFAF00}%d\n \n{FFffff}Jus pasiekëte maksimalø þvejybos lygá.",
			FS[playerid][FishingLevel], FS[playerid][FishingExperience]);
		}
	}

	ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Þvejybos informacija", String, "Uþdaryti", "");

	return 1;
}

CMD:narkotikai(playerid)
{
	new String[400];

	format(String, sizeof(String), "{ffffff}Jûsø turimi narkotikai:\n\n\tÞolë: {FFAF00}%d {ffffff}mg\n\tKokainas: {FFAF00}%d {ffffff}mg\n\tEkstazi: {FFAF00}%d {ffffff}mg\n\tHeroinas: {FFAF00}%d {ffffff}ml",
	PI[playerid][Weed], PI[playerid][Kokainas], PI[playerid][Ekstazi], PI[playerid][Heroinas]);

	ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Narkotikai", String, "Uþdaryti", "");

	return 1;
}

CMD:info(playerid)
{
	SendClientMessage(playerid, -1, "{ffffff} Norint suþinoti savo darbo EXP, raðykite {FFAF00} /darboxp{ffffff}!");

	ShowPlayerStats(playerid, playerid);

	return 1;
}

CMD:darboxp(playerid)
{
	new String[216], Stringas[800];

	new bendrasxp = PI[playerid][stazasteisesaugos] + PI[playerid][stazasmediku] + PI[playerid][stazaskurj] + PI[playerid][stazasfuristu] + PI[playerid][stazasmechaniku] + PI[playerid][stazaspaprastodarbo];

	format(String, sizeof(String), "{ffffff}Teisësaugininko patirtis: {FFAF00}\t%s\n\n", konvertuoti_pinigus(PI[playerid][stazasteisesaugos]));	strcat(Stringas, String);

	format(String, sizeof(String), "{ffffff}Mediko patirtis: {FFAF00}\t\t%s\n\n", konvertuoti_pinigus(PI[playerid][stazasmediku]));				strcat(Stringas, String);

	format(String, sizeof(String), "{ffffff}Kurjerio patirtis: {FFAF00}\t\t%s\n\n", konvertuoti_pinigus(PI[playerid][stazaskurj]));				strcat(Stringas, String);

	format(String, sizeof(String), "{ffffff}Fûristo patirtis: {FFAF00}\t\t%s\n\n", konvertuoti_pinigus(PI[playerid][stazasfuristu]));			strcat(Stringas, String);
	
	format(String, sizeof(String), "{ffffff}Taksisto patirtis: {FFAF00}\t\t%s\n\n", konvertuoti_pinigus(PI[playerid][stazastaxi]));				strcat(Stringas, String);

	format(String, sizeof(String), "{ffffff}Autoserviso ECO darbuotojo patirtis: {FFAF00}\t\t%s\n\n", konvertuoti_pinigus(PI[playerid][stazasmechaniku]));		strcat(Stringas, String);

	format(String, sizeof(String), "{ffffff}Paprastø darbø patirtis: {FFAF00}\t%s\n\n", konvertuoti_pinigus(PI[playerid][stazaspaprastodarbo]));	strcat(Stringas, String);

	format(String, sizeof(String), "{ffffff}Bendra darbø patirtis: {FFAF00}\t%s", konvertuoti_pinigus(bendrasxp));										strcat(Stringas, String);

	ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Darbø patirtis", Stringas, "Uþdaryti", "");

	return 1;
}

CMD:veiksmai(playerid)
{
	new String[500];

	strcat(String, "{FFAF00} /sokti /sedet /rukyti /pakelt /gulet /yohyoh /wank\n");
	strcat(String, "{FFAF00} /sexy /verkt /ateik /spresti /gogogo /kungfu /pee\n");
	strcat(String, "{FFAF00} /taip /ne /trenkt /mot /parkour /persirengti\n \n");
	strcat(String, "{FFAF00} /baik - {ffffff}baigti veiksmus");
	ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Veiksmai", String, "Uþdaryti", "");

	return 1;
}

CMD:pica(playerid, params[])
{
	if(PI[playerid][specialybe] != 20) return 0;

	new giveplayerid, Float: P_Pos[3], String[216], MoneyCount;

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "ud", giveplayerid, MoneyCount)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /pica <vardas_pavardë/id> <kaina>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 4.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerMoneyA(giveplayerid) < MoneyCount) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjui neuþtenka pinigø!");

	if(MoneyCount < 1 || MoneyCount > 300) return SendClientMessage(playerid, -1, "{ffffff} Picos kaina turi bûti nuo {FFAF00}$1 {ffffff}iki {FFAF00}$300{ffffff}!");

	if(PI[playerid][VezeKrovini] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Picas galima siûlyti tik kas 10 sekundþiø!");

	PI[playerid][VezeKrovini] 		= gettime() + 10;
	ChoosedPlayer[giveplayerid]   	= playerid;
	PI[giveplayerid][sPicosKaina] 	= MoneyCount;

	format(String, sizeof(String), "{FFAF00}%s {ffffff}siûlo jums pavalgyti picà uþ {FFAF00}$%d{ffffff}.\n\n\tAr imsite?", GetPlayerNameEx(playerid), MoneyCount);
	ShowPlayerDialogEx(giveplayerid, 9005, DIALOG_STYLE_MSGBOX, "Gyvybiø pirkimas", String, "Taip", "Ne");

	format(String, sizeof(String), "{ffffff} Pasiûlëte þaidëjui {FFAF00}%s {ffffff}picos!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:ap(playerid, params[])
{
	new String[200], giveplayerid, HelpText[128];

	if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	if(sscanf(params, "us[128]", giveplayerid, HelpText)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /ap <vardas_pavardë/id> <tekstas>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	if(AHS[giveplayerid][AskedForHelp] == false) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nepraðë pagalbos arba jam jau padëjo kitas administratorius!");

	format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s{ffffff} atsakë á þaidëjo {FFAF00}%s{ffffff} pateiktà klausimà:", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	SendMessageToAdmins(String);
	format(String, sizeof(String), "{ffffff}  {FFF064}%s", HelpText);
	SendMessageToAdmins(String);

	format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s{ffffff} atsakë á jûsø pateiktà klausimà:", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);
	format(String, sizeof(String), "{ffffff}  {FFF064}%s", HelpText);
	SendClientMessage(giveplayerid, -1, String);

	AHS[giveplayerid][AskedForHelp] = false;

	AHS[playerid][HelpsForToday] 	++;
	AHS[playerid][HelpsForWeek] 	++;
	AHS[playerid][HelpsInAll] 		++;

	format(String, sizeof(String), "UPDATE `players` SET `HelpsForToday` = '%d', `HelpsForWeek` = '%d', `HelpsInAll` = '%d' WHERE `Vardas` = '%s'",
	AHS[playerid][HelpsForToday], AHS[playerid][HelpsForWeek], AHS[playerid][HelpsInAll], GetPlayerNameEx(playerid));
	mysql_query(String);

	return 1;
}

/*CMD:help(playerid, params[])
{
	new String[200];

	if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /help <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	if(AHS[giveplayerid][AskedForHelpTime] < gettime()) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nepraðë pagalbos arba jam jau padëda kitas administratorius!");

	if(AHS[playerid][HelpingPlayer] != -1) return SendClientMessage(playerid, -1, "{ffffff} Jus dabar padëdate kitam þaidëjui!");

	if(PI[playerid][TelphoneInUse] != -1) return SendClientMessage(playerid, -1, "{ffffff} Kalbantis telefonu negalima teikti pagalbà!");

	if(PI[giveplayerid][TelphoneInUse] != -1) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas kalbasi telefonu, todël pagalbos suteikti negalite!");

	AHS[playerid][HelpingPlayer] 		= giveplayerid;
	AHS[giveplayerid][HelpingPlayer]	= playerid;
	AHS[giveplayerid][AskedForHelpTime]	= 0;

	format(String, sizeof(String), "{ffffff} Jus sujungtas su þaidëju {FFAF00}%s. {ffffff}Atsakykite á jo pateiktus klausimus!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);
	SendClientMessage(playerid, -1, "{ffffff} Atsakius á þaidëjo pateiktus klausimus, naudokite komandà {FFAF00} /stophelp{ffffff}!");

	format(String, sizeof(String), "{ffffff} Jus sujungtas su administratoriumi {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);

	return 1;
}

CMD:stophelp(playerid, params[])
{
	new String[200], giveplayerid = AHS[playerid][HelpingPlayer];

	if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	if(AHS[playerid][HelpingPlayer] == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus dabar niekam nepadëdate!");

	AHS[playerid][HelpingPlayer] 		= -1;
	AHS[giveplayerid][HelpingPlayer]	= -1;

	format(String, sizeof(String), "{ffffff} Sustabdëte pagalbos teikimà þaidëjui {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);
	SendClientMessage(playerid, -1, "{ffffff} Jeigu þaidëjas nuspræs, kad pagalba buvo naudinga jums prisidës administratoriaus padëkos taðkai!");

	format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s{ffffff} sustabdë pagalbos teikimà!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);
	format(String, sizeof(String), "{ffffff} Jeigu manote, kad pagalba buvo naudinga, raðykite {FFAF00} /naudinga %d{ffffff}!", playerid);
	SendClientMessage(giveplayerid, -1, String);

	return 1;
}*/

CMD:admin(playerid, params[])
{
	new String[2500], Stringas[200], AdminCount, KoksLygis[40], Status[30];

	if(CheckMute(playerid)) return 1;

	if(sscanf(params, "s[128]", params))
	{
		for(new i, size = GetPlayerPoolSize(); i <= size; i++)
		{
			if(IsPlayerConnected(i) && PI[i][AdminLevel] > LEVEL_VIP)
			{
				AdminCount ++;

				if(AdminCount == 0) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu prisijungusiø administratoriø nëra!");

				if(PI[i][AOD]) 	Status = "{3AD73A}Dirba";
				else 			Status = "{FFAF00}Nedirba";

				switch(PI[i][AdminLevel])
				{
					case LEVEL_FIRST: 	KoksLygis = "{3AD73A}I lygio administratorius";
					case LEVEL_SECOND: 	KoksLygis = "{3AD73A}II lygio administratorius";
					case LEVEL_THIRD: 	KoksLygis = "{3AD73A}III lygio administratorius";
					case LEVEL_OWNER: 	KoksLygis = "{FFAF00}Savininkas";
				}

				format(Stringas, sizeof(Stringas), "{ffffff}%d. {FFAF00}%s{ffffff}, pareigos: %s{ffffff}, statusas: %s\n", AdminCount, GetPlayerNameEx(i), KoksLygis, Status);
				strcat(String, Stringas);

				ShowPlayerDialogEx(playerid, 6956, DIALOG_STYLE_MSGBOX, "Prisijungusi serverio valdþia", String, "Þinutë", "Uþdaryti");
			}
		}

		return 1;
	}
	else
	{
		if(PI[playerid][ParaseAdminams] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Administratoriams galima raðyti tik kas 30 sekundþiø!");

		if(strlen(params) > 128) return SendClientMessage(playerid, -1, "{ffffff} Tekstas per ilgas!");

		for(new i, size = GetPlayerPoolSize(); i <= size; i++)
		{
			if(IsPlayerConnected(i) && PI[i][AdminLevel] > LEVEL_VIP)
			{
				format(String, sizeof(String), "{2DB2D0}%s(%d) administratoriams: {ffffff}%s (/ap %i)", GetPlayerNameEx(playerid), playerid, params, playerid);
				if(PI[i][AOD]) SendClientMessage(i, -1, String);
			}
		}

		if(PI[playerid][AdminLevel] < LEVEL_FIRST)
		{
			format(String, sizeof(String), "{2DB2D0}Paraðëte administratoriams: {ffffff}%s", params);
			SendClientMessage(playerid, -1, String);
		}

		PI[playerid][ParaseAdminams] = gettime() + 30;
		AHS[playerid][AskedForHelp] = true;
	}

	return 1;
}

// Admin komandos

CMD:unjailall(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	for(new i, size = GetPlayerPoolSize(); i <= size; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PI[i][kalejimo_laikas] > 0)
			{
				new String[216];

				UnjailPlayer(i);

				format(String, sizeof(String), "{ffffff} Savininko {FFAF00}%s {ffffff}nurodymu visi buvo paleisti ið kalëjimo!", GetPlayerNameEx(playerid));
				SendClientMessage(i, -1, String);
			}
		}
	}

	return 1;
}

CMD:elprekes(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new String[150];

	Laikrodziai += 15;
	Fotikai += 15;
	Navigacijos += 15;

	mysql_query("SELECT * FROM `sinfo`");
	mysql_store_result();

	format(String, sizeof(String), "UPDATE `sinfo` SET `Laikrodziai` = '%d', `Fotikai` = '%d', `Navigacijos` = '%d'", Laikrodziai, Fotikai, Navigacijos);
	mysql_query(String);

	mysql_free_result();

	return 1;
}

CMD:carfix(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_VIP) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti transp. priemonëje!");

	if(GetPlayerMoneyA(playerid) < 200) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_VIP:
		{
			if(PI[playerid][KadaGydes] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonæ taisyti galima tik kas 2 minutes!");

			if(VehicleInfo[GetPlayerVehicleID(playerid)][vTaisyta] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonæ taisyti galima tik praëjus 30 sekundþiø nuo paskutinio karto, kai ji buvo suþalota!");

			PI[playerid][KadaGydes] = gettime() + 120;

			SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë iðtaisyta! Uþ taisymà sumokëjote {FFAF00}$200{ffffff}.");
		}

		case LEVEL_FIRST:
		{
			if(PI[playerid][KadaGydes] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonæ taisyti galima tik kas 1 minutæ!");

			if(VehicleInfo[GetPlayerVehicleID(playerid)][vTaisyta] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonæ taisyti galima tik praëjus 30 sekundþiø nuo paskutinio karto, kai ji buvo suþalota!");

			PI[playerid][KadaGydes] = gettime() + 60;

			SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë iðtaisyta! Uþ taisymà sumokëjote {FFAF00}$200{ffffff}.");
		}

		case LEVEL_SECOND:
		{
			if(PI[playerid][KadaGydes] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonæ taisyti galima tik kas 30 sekundþiø!");

			if(VehicleInfo[GetPlayerVehicleID(playerid)][vTaisyta] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonæ taisyti galima tik praëjus 30 sekundþiø nuo paskutinio karto, kai ji buvo suþalota!");

			PI[playerid][KadaGydes] = gettime() + 30;

			SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë iðtaisyta! Uþ taisymà sumokëjote {FFAF00}$200{ffffff}.");
		}

		case LEVEL_THIRD:
		{
			if(PI[playerid][KadaGydes] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonæ taisyti galima tik kas 15 sekundþiø!");

			if(VehicleInfo[GetPlayerVehicleID(playerid)][vTaisyta] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonæ taisyti galima tik praëjus 30 sekundþiø nuo paskutinio karto, kai ji buvo suþalota!");

			PI[playerid][KadaGydes] = gettime() + 15;

			SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë iðtaisyta! Uþ taisymà sumokëjote {FFAF00}$200{ffffff}.");
		}

		case LEVEL_OWNER:
		{
			SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë iðtaisyta! Uþ taisymà sumokëjote {FFAF00}$200{ffffff}.");
		}
	}

	Pelnas[1] += 250;

	SetPlayerChatBubble (playerid, "Panaudojau komandà:\n{FFAF00} /carfix", 0xFFFFFFFF, 15.0, 5000);
	GivePlayerMoneyA 	(playerid, -200);
	ac_RepairVehicle 		(GetPlayerVehicleID(playerid));

	return 1;
}

CMD:nuimtipriz(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new String[216], giveplayerid;

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /nuimtipriz <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	PI[giveplayerid][Priziuretojas] = PRIZ_NIEKO;

	format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}nuëme jums priþiûrëtojo statusà!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "{ffffff} Sëkmingai nuëmëte þaidëjui {FFAF00}%s {ffffff}priþiûrëtojo statusà!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:skirtipriz(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new Function[15], String[216], giveplayerid;

	if(sscanf(params, "us[15]", giveplayerid, Function)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /skirtipriz <vardas_pavardë/id> <gauja, drk, adminvip, ban>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(!strcmp(Function, "gauja", true))
	{
		PI[giveplayerid][Priziuretojas] = PRIZ_GAUJOS;

		format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}uþdëjo jums Gaujø priþiûrëtojo statusà!", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, -1, String);

		format(String, sizeof(String), "{ffffff} Sëkmingai uþdëjote þaidëjui {FFAF00}%s {ffffff}Gaujø priþiûrëtojo statusà!", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, -1, String);
	}

	else if(!strcmp(Function, "drk", true))
	{
		PI[giveplayerid][Priziuretojas] = PRIZ_DIRK;

		format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}uþdëjo jums Direktoriø priþiûrëtojo statusà!", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, -1, String);

		format(String, sizeof(String), "{ffffff} Sëkmingai uþdëjote þaidëjui {FFAF00}%s {ffffff}Direktoriø priþiûrëtojo statusà!", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, -1, String);
	}

	else if(!strcmp(Function, "adminvip", true))
	{
		PI[giveplayerid][Priziuretojas] = PRIZ_ADMIN;

		format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}uþdëjo jums ADMIN/VIP priþiûrëtojo statusà!", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, -1, String);

		format(String, sizeof(String), "{ffffff} Sëkmingai uþdëjote þaidëjui {FFAF00}%s {ffffff}ADMIN/VIP priþiûrëtojo statusà!", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, -1, String);
	}

	else if(!strcmp(Function, "", true))
	{
		PI[giveplayerid][Priziuretojas] = PRIZ_VIP;

		format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}uþdëjo jums VIP priþiûrëtojo statusà!", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, -1, String);

		format(String, sizeof(String), "{ffffff} Sëkmingai uþdëjote þaidëjui {FFAF00}%s {ffffff}VIP priþiûrëtojo statusà!", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, -1, String);
	}

	else if(!strcmp(Function, "ban", true))
	{
		PI[giveplayerid][Priziuretojas] = PRIZ_BAN;

		format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}uþdëjo jums BAN priþiûrëtojo statusà!", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, -1, String);

		format(String, sizeof(String), "{ffffff} Sëkmingai uþdëjote þaidëjui {FFAF00}%s {ffffff}BAN priþiûrëtojo statusà!", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, -1, String);
	}

	else SendClientMessage(playerid, -1, "{ffffff} Tokios funkcijos ði komanda neturi!");

	return 1;
}

CMD:randomteises(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new String[216];

	new giveplayerid = random(MAX_PLAYERS);

	while(!IsPlayerConnected(giveplayerid) || IsPlayerNPC(giveplayerid))
	{
		giveplayerid = random(MAX_PLAYERS);
	}

	PI[giveplayerid][Mteises] 	= true;
	PI[giveplayerid][teises] 	= true;
	PI[giveplayerid][FTeises] 	= true;

	format(String, sizeof(String), "{ffffff} RANDOM: {FFFFFF}Þaidëjas {FFAF00}%s {FFFFFF}iðrinktas RANDOM bûdu, todël jis gavo visø kat. vairavimo teises!", GetPlayerNameEx(giveplayerid));
	SendClientMessageToAll(-1, String);

	GameTextForPlayer(giveplayerid, "~g~Sveikiname, jus buvote isrinktas kaip random zaidejas!~n~~w~Gavote ~g~visu kat. vairavimo teises.", 3000, 3);

	return 1;
}

CMD:randomgun(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new String[216];

	new giveplayerid = random(MAX_PLAYERS);

	while(!IsPlayerConnected(giveplayerid) || IsPlayerNPC(giveplayerid))
	{
		giveplayerid = random(MAX_PLAYERS);
	}

	PI[giveplayerid][gLicenzija] = true;

	format(String, sizeof(String), "{ffffff} RANDOM: {FFFFFF}Þaidëjas {FFAF00}%s {FFFFFF}iðrinktas RANDOM bûdu, todël jis gavo ginklø licenzijà!", GetPlayerNameEx(giveplayerid));
	SendClientMessageToAll(-1, String);

	GameTextForPlayer(giveplayerid, "~g~Sveikiname, jus buvote isrinktas kaip random zaidejas!~n~~w~Gavote ~g~ginklu licenzija.", 3000, 3);

	return 1;
}

CMD:randomlt(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new MoneyCount, String[216];

	if(sscanf(params, "d", MoneyCount)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /randomlt <pinigø kiekis>");

	if(MoneyCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Blogai ávestas pinigø skaièius!");

	new giveplayerid = random(MAX_PLAYERS);

	while(!IsPlayerConnected(giveplayerid) || IsPlayerNPC(giveplayerid))
	{
		giveplayerid = random(MAX_PLAYERS);
	}

	GivePlayerMoneyA(giveplayerid, MoneyCount);

	format(String, sizeof(String), "{ffffff} RANDOM: {FFFFFF}Þaidëjas {FFAF00}%s {FFFFFF}iðrinktas RANDOM bûdu, todël jis gavo {FFAF00}$%s{FFFFFF}!", GetPlayerNameEx(giveplayerid), konvertuoti_pinigus(MoneyCount));
	SendClientMessageToAll(-1, String);

	format(String, sizeof(String), "~g~Sveikiname, jus buvote isrinktas kaip random zaidejas!~n~~w~Gavote ~g~$%s", konvertuoti_pinigus(MoneyCount));
	GameTextForPlayer(giveplayerid, String, 3000, 3);

	return 1;
}

CMD:randomxp(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new ExperienceCount, String[216];

	if(sscanf(params, "d", ExperienceCount)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /randomxp <patirties kiekis>");

	if(ExperienceCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Blogai ávestas patirties taðkø skaièius!");

	new giveplayerid = random(MAX_PLAYERS);

	while(!IsPlayerConnected(giveplayerid) || IsPlayerNPC(giveplayerid))
	{
		giveplayerid = random(MAX_PLAYERS);
	}

	GivePlayerExperience(giveplayerid, Experience);

	format(String, sizeof(String), "{ffffff} RANDOM: {FFFFFF}Þaidëjas {FFAF00}%s {FFFFFF}iðrinktas RANDOM bûdu, todël jis gavo {FFAF00}%s {FFFFFF}EXP!", GetPlayerNameEx(giveplayerid), konvertuoti_pinigus(ExperienceCount));
	SendClientMessageToAll(-1, String);

	format(String, sizeof(String), "~g~Sveikiname, jus buvote isrinktas kaip random zaidejas!~n~~w~Gavote ~g~%s XP", konvertuoti_pinigus(ExperienceCount));
	GameTextForPlayer(giveplayerid, String, 3000, 3);

	return 1;
}

CMD:afondas(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_THIRD) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new String[216];

	format(String, sizeof(String), "Administratoriø fonde yra: {FFAF00}$%s\n1. Padëti pinigø á fondà\n2. Pasiimti pinigø ið fondo", konvertuoti_pinigus(afondas));
	ShowPlayerDialogEx(playerid, 8696, DIALOG_STYLE_LIST, "Administratoriø fondas", String, "Pasirinkti", "Uþdaryti");

	return 1;
}

CMD:gun(playerid, params[])
{
	new WeaponID, WeaponName[64], String[216];

	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(sscanf(params, "d", WeaponID)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /gun <ginklo id>");

	if(WeaponID < 1 || WeaponID > 46) return SendClientMessage(playerid, -1, "{ffffff} Blogai ávestas ginklo ID!");

	ac_GivePlayerWeapon(playerid, WeaponID, 1000);

	GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));

	format(String, sizeof(String), "{ffffff} Pasiëmëte ginklà {FFAF00}%s{ffffff}!", WeaponName);
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:unbanall(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	mysql_query("UPDATE `players` SET `BanLaikas` = '0', `Uzbanintas` = '0'");

	SendClientMessage(playerid, -1, "{ffffff} Visi þaidëjai buvo sëkmingai atblokuoti!");

	return 1;
}

CMD:ownvehrr(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new v, String[216];

	for(v = 0; v < MAX_VEHICLES; v++)
	{
		if(GetVehicleModel(v) < 400) continue;

		if(!VehicleInfo[v][vNupirkta]) continue;

		if(IsPlayersInVehicle(v)) continue;

		AC_SetVehiclePos(v, VehicleInfo[v][vLastPos][0], VehicleInfo[v][vLastPos][1], VehicleInfo[v][vLastPos][2]);

		SetVehicleZAngle(v, VehicleInfo[v][vLastPos][3]);
	}

	format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s{ffffff} atstatë visas nuosavas transp. priemones!", GetPlayerNameEx(playerid));
	SendClientMessageToAll(-1, String);

	return 1;
}

CMD:reloadserver(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	SendRconCommand("password gvatemalosgaidys23");
	SendRconCommand("hostname Serveris yra perkraunamas, veiksime keliø minuèiø bëgyje!");

	SaveGang(1);
	SaveGang(2);
	SaveGang(3);
	SavePelnai();

	SendClientMessageToAll(-1, "{ffffff} Atsipraðome, taèiau serveris dabar yra perkraunamas, jis bus atrakintas keliø minuèiø bëgyje!");
	for(new p = 0, size = GetPlayerPoolSize(); p <= size; p ++)
	{
		IsmestiZaideja(p, 100);
	}
	SetTimer("IsjungiameServeri", 60000, 0);
	return 1;
}

CMD:premija(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new ExperienceCount, MoneyCount, String[216];

	if(sscanf(params, "dd", ExperienceCount, MoneyCount)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /premija <patirties kiekis> <pinigø kiekis>");

	if(ExperienceCount < 1 || MoneyCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Blogai ávestas pinigø arba patirties taðkø skaièius!");

	format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}visiems iðdalino premijas!", GetPlayerNameEx(playerid));
	SendClientMessageToAll(-1, String);

	format(String, sizeof(String), "{ffffff} Visi gavo po {FFAF00}%s {ffffff}EXP ir {FFAF00}$%s{ffffff}!", konvertuoti_pinigus(ExperienceCount), konvertuoti_pinigus(MoneyCount));
	SendClientMessageToAll(-1, String);

	for(new p, size = GetPlayerPoolSize(); p <= size; p++)
	{
		if(!IsPlayerConnected(p) || IsPlayerNPC(p)) continue;

		if(Prisijunges[p] == false) continue;

		GivePlayerMoneyA 	(p, MoneyCount);
		GivePlayerExperience(p, ExperienceCount);
	}

	return 1;
}

CMD:prespawn(playerid, params[])
{
    if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}
	
	new giveplayerid, String[216];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /prespawn <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	new rand = random(sizeof(RandomSpawn));
	AC_SetPlayerPos(giveplayerid, RandomSpawn[rand][0], RandomSpawn[rand][1],RandomSpawn[rand][2]);
	
	SetPlayerVirtualWorld(giveplayerid, 0);
	SetPlayerInterior(giveplayerid, 0);

	format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}padëjo jums!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "{ffffff} Padëjote þaidëjui {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);
	return 1;
}

CMD:random(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid = random(MAX_PLAYERS);

	new String[216];

	while(!IsPlayerConnected(giveplayerid) || IsPlayerNPC(giveplayerid))
	{
		giveplayerid = random(MAX_PLAYERS);
	}

	format(String, sizeof(String), "{ffffff} RANDOM: {FFFFFF}Þaidëjas {FFAF00}%s {FFFFFF}buvo iðrinktas kaip RANDOM þaidëjas!", GetPlayerNameEx(giveplayerid));
	SendClientMessageToAll(-1, String);

	GameTextForPlayer(giveplayerid, "~g~Sveikiname, jus buvote isrinktas kaip random zaidejas!", 3000, 3);

	return 1;
}

CMD:unjail(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_SECOND) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new String[216], Reason[128], giveplayerid;

	if(sscanf(params, "rs[128]", giveplayerid, Reason)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /unjail <vardas_pavardë/id> <prieþastis>");

	if(giveplayerid == INVALID_PLAYER_ID || IsPlayerNPC(giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(!PI[giveplayerid][ikalintas]) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nëra kalëjime!");

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_SECOND, LEVEL_THIRD:
		{
			if(PI[giveplayerid][AdminLevel] > LEVEL_FIRST) return SendClientMessage(playerid, -1, "{ffffff} Administratoriø paleisti ið kalëjimo negali!");

			format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}paleido þaidëjà {FFAF00}%s {ffffff}ið kalëjimo!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		}

		case LEVEL_OWNER: format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}paleido þaidëjà {FFAF00}%s {ffffff}ið kalëjimo!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	}

	SendClientMessageToAll(-1, String);

	format(String, sizeof(String), "{ffffff} Prieþastis: {FFAF00}%s", Reason);
	SendClientMessageToAll(-1, String);

	UnjailPlayer(giveplayerid);

	return 1;
}

CMD:duotipazyma(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, String[216];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /duotipazyma <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(PI[giveplayerid][medicinospazyma] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjo sveikatos paþymëjimas dar galiojantis!");

	PI[giveplayerid][medicinospazyma] = gettime() + 259200;

	format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}davë jums sveikatos paþymëjimà!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "{ffffff} Davëte sveikatos paþymëjimà þaidëjui {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:duotiteises(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, String[216];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /duotiteises <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	PI[giveplayerid][teises]  = true;
	PI[giveplayerid][Mteises] = true;
	PI[giveplayerid][FTeises] = true;

	format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}davë jums visø kat. vairavimo teises!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "{ffffff} Davëte visø kat. vairavimo teises þaidëjui {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:duotigunlic(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, String[216];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /duotigunlic <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(PI[giveplayerid][gLicenzija] == true) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas jau turi ginklø licenzijà!");

	PI[giveplayerid][gLicenzija] = true;

	format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}davë jums ginklø licenzijà!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "{ffffff} Davëte ginklø licenzijà þaidëjui {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:givescore(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, ExperienceCount, String[216];

	if(sscanf(params, "ud", giveplayerid, ExperienceCount)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /givescore <vardas_pavardë/id> <patirties kiekis>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(ExperienceCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Blogai ávestas patirties taðkø skaièius!");

	GivePlayerExperience(giveplayerid, ExperienceCount);

	format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}davë jums {FFAF00}%s {ffffff}EXP!", GetPlayerNameEx(playerid), konvertuoti_pinigus(ExperienceCount));
	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "{ffffff} Davëte {FFAF00}%s {ffffff}EXP þaidëjui {FFAF00}%s{ffffff}!", konvertuoti_pinigus(ExperienceCount), GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:takescore(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, ExperienceCount, String[216];

	if(sscanf(params, "ud", giveplayerid, ExperienceCount)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /takescore <vardas_pavardë/id> <patirties kiekis>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(ExperienceCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Blogai ávestas patirties taðkø skaièius!");

	if(ExperienceCount > GetPlayerScore(giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas neturi tiek patirties taðkø!");

	GivePlayerExperience(giveplayerid, -ExperienceCount);

	format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}nuëme jums {FFAF00}%s {ffffff}EXP!", GetPlayerNameEx(playerid), konvertuoti_pinigus(ExperienceCount));
	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "{ffffff} Nuëmëte {FFAF00}%s {ffffff}EXP þaidëjui {FFAF00}%s{ffffff}!", konvertuoti_pinigus(ExperienceCount), GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:emigruoti(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, String[216];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /emigruoti <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(PI[giveplayerid][ArEmigruotas]) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas jau yra emigruotas!");

	if(!ViskasDuX)	GivePlayerExperience(giveplayerid, 1000);
	else   			GivePlayerExperience(giveplayerid, 2000);

	if(!ViskasDuX)	GivePlayerMoneyA 	(giveplayerid, 7000);
	else 			GivePlayerMoneyA 	(giveplayerid, 14000);

	PI[giveplayerid][ArEmigruotas] = true;

	if(!ViskasDuX) 	format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}emigravo jus, gavote {FFAF00}1,000 {ffffff}EXP ir {FFAF00}$7,000{ffffff}!", GetPlayerNameEx(playerid));
	else 			format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}emigravo jus, gavote {FFAF00}2,000 {ffffff}EXP ir {FFAF00}$14,000{ffffff}!", GetPlayerNameEx(playerid));

	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "{ffffff} Sëkmingai emigravote þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:emigruotioff(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new Query[128], IsEmigrated, ExperienceCount, MoneyCount, OfflinePlayer[MAX_PLAYER_NAME], String[216];

	if(sscanf(params, "s[24]", OfflinePlayer)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /emigruotioff <vardas_pavardë>");

	new giveplayerid = GetPlayeridMid(OfflinePlayer);

	if(giveplayerid != INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra prisijungæs!");

	format(Query, sizeof(Query), "SELECT * FROM `players` WHERE `Vardas` = '%s'", OfflinePlayer);
	mysql_query(Query);

	mysql_store_result();

	mysql_retrieve_row();

	if(mysql_num_rows())
	{
		mysql_fetch_field_row(Query, "ArEmigruotas"); 	IsEmigrated 	= strval(Query);
		mysql_fetch_field_row(Query, "Xp"); 			ExperienceCount = strval(Query);
		mysql_fetch_field_row(Query, "MoneyPocket"); 	MoneyCount 		= strval(Query);

		if(IsEmigrated)
		{
			SendClientMessage(playerid, -1, "{ffffff} Þaidëjas jau yra emigruotas!");
		}
		else
		{
			format(String, sizeof(String), "{ffffff} Sëkmingai emigravote þaidëjà {FFAF00}%s{ffffff}!", OfflinePlayer);
			SendClientMessage(playerid, -1, String);

			if(!ViskasDuX) 	format(Query, sizeof(Query), "UPDATE `players` SET `Xp` = '%d', `MoneyPocket` = '%d', `ArEmigruotas` = '1' WHERE `Vardas` = '%s'", ExperienceCount + 1000, MoneyCount + 7000, OfflinePlayer);
			else 			format(Query, sizeof(Query), "UPDATE `players` SET `Xp` = '%d', `MoneyPocket` = '%d', `ArEmigruotas` = '1' WHERE `Vardas` = '%s'", ExperienceCount + 2000, MoneyCount + 14000, OfflinePlayer);

			mysql_query(Query);
		}
	}
	else
	{
		SendClientMessage(playerid, -1, "{ffffff} Tokio vartotojo mûsø duomenø bazëje nëra!");
	}

	return 1;
}

CMD:aod(playerid)
{
	new String[128];

	if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	if(PI[playerid][AdminLevel] < LEVEL_OWNER)
	{
		if(PI[playerid][AODtime] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Turite padirbti bent 2 minutes kaip administratorius!");
	}

	if(!PI[playerid][AOD])
	{
		format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}pradëjo administratoriaus darbà ( {FFAF00}Admin On Duty{ffffff} )!", GetPlayerNameEx(playerid));
		SendClientMessageToAll(-1, String);

		PI[playerid][AOD] 		= true;
		PI[playerid][AODtime] 	= gettime() + 30;
	}
	else
	{
		format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}baigë administratoriaus darbà ( {FFAF00}Admin off Duty{ffffff} )!", GetPlayerNameEx(playerid));
		SendClientMessageToAll(-1, String);

		PI[playerid][AOD] 		= false;
		PI[playerid][AODtime] 	= 0;
	}

	return 1;
}

CMD:s(playerid, params[])
{
	new String[216], Level[50];

	if(PI[playerid][AdminLevel] < LEVEL_VIP) return 0;

	if(PI[playerid][AdminLevel] != LEVEL_OWNER)
	{
		if(CheckMute(playerid)) return 1;
	}

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(isnull(params)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /s <tekstas>");

	if(strlen(params) > 128) return SendClientMessage(playerid, -1, "{ffffff} Tekstas per ilgas!");

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_VIP: 	Level = "VIP narys";
		case LEVEL_FIRST: 	Level = "I lygio administratorius";
		case LEVEL_SECOND: 	Level = "II lygio administratorius";
		case LEVEL_THIRD: 	Level = "III lygio administratorius";
		case LEVEL_OWNER: 	Level = "Savininkas";
	}

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_VIP: 	format(String, sizeof(String), "{ffffff} {FFAF00}%s {ffffff}%s(%i) {FFAF00}praneða visiems serverio þaidëjams:", Level, GetPlayerNameEx(playerid), playerid);
		case LEVEL_FIRST: 	format(String, sizeof(String), "{ffffff} {FFAF00}%s {ffffff}%s(%i) {FFAF00}praneða visiems serverio þaidëjams:", Level, GetPlayerNameEx(playerid), playerid);
		case LEVEL_SECOND: 	format(String, sizeof(String), "{ffffff} {FFAF00}%s {ffffff}%s(%i) {FFAF00}praneða visiems serverio þaidëjams:", Level, GetPlayerNameEx(playerid), playerid);
		case LEVEL_THIRD: 	format(String, sizeof(String), "{ffffff} {FFAF00}%s {ffffff}%s(%i) {FFAF00}praneða visiems serverio þaidëjams:", Level, GetPlayerNameEx(playerid), playerid);
		case LEVEL_OWNER: 	format(String, sizeof(String), "{ffffff} {FFAF00}%s {ffffff}%s(%i) {FFAF00}praneða visiems serverio þaidëjams:", Level, GetPlayerNameEx(playerid), playerid);
	}

	SendClientMessageToAll(-1, String);

	format(String, sizeof(String), "{ffffff}%s", params);
	SendClientMessageToAll(-1, String);

	return 1;
}

CMD:pm(playerid, params[])
{
	new String[216], Tekstas[128], giveplayerid;

	if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	if(PI[playerid][AdminLevel] != LEVEL_OWNER)
	{
		if(CheckMute(playerid)) return 1;
	}

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(sscanf(params, "us[128]", giveplayerid, Tekstas)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /pm <vardas_pavardë/id> <tekstas>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(strlen(Tekstas) > 128) return SendClientMessage(playerid, -1, "{ffffff} Tekstas per ilgas!");

	format(String, sizeof(String), "{49B25A}Gavote asmeninæ þinutæ nuo {93EBA2}%s(%i){49B25A}:", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "{49B25A}%s", Tekstas);
	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "{49B25A}Nusiuntëte asmeninæ þinutæ þaidëjui {93EBA2}%s(%i){49B25A}:", GetPlayerNameEx(giveplayerid), giveplayerid);
	SendClientMessage(playerid, -1, String);

	format(String, sizeof(String), "{49B25A}%s", Tekstas);
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:ginklai(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_VIP) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	if(PI[playerid][kalejimo_laikas] > 0) return SendClientMessage(playerid, -1, "{ffffff} Kalëjime ginklø naudoti negali!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

    if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_VIP:
		{
			if(PI[playerid][KadaGun] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Ginklus imti galima tik kas 5 minutes!");

			if(PI[playerid][gLicenzija] == false) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite ginklø licenzijos!");

			if(GetPlayerMoneyA(playerid) < 500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

			PI[playerid][KadaGun] = gettime() + 300;

			ac_GivePlayerWeapon(playerid, 23, 200);
			ac_GivePlayerWeapon(playerid, 25, 200);
			ac_GivePlayerWeapon(playerid, 29, 200);
			ac_GivePlayerWeapon(playerid, 31, 200);
			GivePlayerMoneyA(playerid, -500);

			SendClientMessage(playerid, -1, "{ffffff} Gavote VIP ginklø paketà!");
		}

		case LEVEL_FIRST:
		{
			if(PI[playerid][KadaGun] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Ginklus imti galima tik kas 5 minutes!");

			if(PI[playerid][gLicenzija] == false) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite ginklø licenzijos!");

			if(GetPlayerMoneyA(playerid) < 1000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

			if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

			PI[playerid][KadaGun] = gettime() + 300;

			ac_GivePlayerWeapon(playerid, 23, 300);
			ac_GivePlayerWeapon(playerid, 25, 300);
			ac_GivePlayerWeapon(playerid, 29, 300);
			ac_GivePlayerWeapon(playerid, 31, 300);
			GivePlayerMoneyA(playerid, -1000);

			SendClientMessage(playerid, -1, "{ffffff} Gavote administratoriaus ginklø paketà!");
		}

		case LEVEL_SECOND:
		{
			//if(PI[playerid][KadaGun] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Ginklus imti galima tik kas 5 minutes!");

			if(PI[playerid][gLicenzija] == false) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite ginklø licenzijos!");

			if(GetPlayerMoneyA(playerid) < 1500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
			
			if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

			PI[playerid][KadaGun] = gettime() + 300;

			ac_GivePlayerWeapon(playerid, 23, 400);
			ac_GivePlayerWeapon(playerid, 25, 400);
			ac_GivePlayerWeapon(playerid, 29, 400);
			ac_GivePlayerWeapon(playerid, 31, 400);
			GivePlayerMoneyA(playerid, -1500);

			SendClientMessage(playerid, -1, "{ffffff} Gavote administratoriaus ginklø paketà!");
		}

		case LEVEL_THIRD:
		{
			//if(PI[playerid][KadaGun] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Ginklus imti galima tik kas 5 minutes!");

			if(PI[playerid][gLicenzija] == false) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite ginklø licenzijos!");

			if(GetPlayerMoneyA(playerid) < 2000) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");
			
			if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

			PI[playerid][KadaGun] = gettime() + 300;

			ac_GivePlayerWeapon(playerid, 23, 500);
			ac_GivePlayerWeapon(playerid, 25, 500);
			ac_GivePlayerWeapon(playerid, 29, 500);
			ac_GivePlayerWeapon(playerid, 31, 500);
			ac_GivePlayerWeapon(playerid, 34, 500);
			GivePlayerMoneyA(playerid, -2000);

			SendClientMessage(playerid, -1, "{ffffff} Gavote administratoriaus ginklø paketà!");
		}

		case LEVEL_OWNER:
		{
			ac_GivePlayerWeapon(playerid, 24, 1000);
			ac_GivePlayerWeapon(playerid, 27, 1000);
			ac_GivePlayerWeapon(playerid, 29, 1000);
			ac_GivePlayerWeapon(playerid, 31, 1000);
			ac_GivePlayerWeapon(playerid, 34, 1000);

			SendClientMessage(playerid, -1, "{ffffff} Gavote administratoriaus ginklø paketà!");
		}
	}

	SetPlayerChatBubble (playerid, "Panaudojau komandà:\n{FFAF00} /ginklai", 0xFFFFFFFF, 15.0, 5000);
	SetPlayerArmedWeapon(playerid, 0);

	return 1;
}
CMD:fot(playerid)
{

			ac_GivePlayerWeapon(playerid, 43, 200);


	return 1;
}
CMD:count(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_VIP) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new String[216];

	if(Skaicevimas == true) return SendClientMessage(playerid, -1, "{ffffff} Skaièiavimas jau pradëtas!");

	Skaicevimas = true;

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_VIP: 				format(String, sizeof(String), "{ffffff}  VIP  {FFAF00}%s {ffffff}pradëjo skaièiavimà!", GetPlayerNameEx(playerid));
		case LEVEL_FIRST..LEVEL_OWNER: 	format(String, sizeof(String), "{ffffff}  ADMIN  {FFAF00}%s {ffffff}pradëjo skaièiavimà!", GetPlayerNameEx(playerid));
	}

	SendClientMessageToAll(-1, String);

	for(new i, size = GetPlayerPoolSize(); i <= size; i++)
	{
		GameTextForPlayer	(i, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~-~y~ 3 ~g~-", 1000, 3);
		PlaySound 			(i, 1056);
	}

	SetTimer("count2", 1000, 0);
	SetTimer("count1", 2000, 0);
	SetTimer("countgo", 3000, 0);
	SetTimer("stop", 6000, 0);

	return 1;
}

CMD:to(playerid, params[])
{
	new giveplayerid, Float: Player_Pos[3];

	if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /to <vardas_pavardë/id>");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðio veiksmo panaudoti negalite!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[playerid][Kraunasi] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu ðios komandos naudoti negalima!");

	if(PI[playerid][Issikrauna] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu ðios komandos naudoti negalima!");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");
	
	if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

	if(PI[playerid][AdminLevel] < LEVEL_OWNER)
	{
		if(PI[playerid][beglys] == true) return SendClientMessage(playerid, -1, "{ffffff} Jus esate begliø sàraðe!");
	}

	if(PI[playerid][kalejimo_laikas] > 0) return SendClientMessage(playerid, -1, "{ffffff} Jus esate kalëjime!");

	if(PI[playerid][JustDie] > 0) return SendClientMessage(playerid, -1, "{ffffff} Jus dar negalite teleportuotis, nes esate gydomas!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	if(Dazasvydis[giveplayerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas daþasvydyje!");

	if(PI[playerid][AdminLevel] >= LEVEL_OWNER)
	{
		GetPlayerPos         (giveplayerid, Player_Pos[0], Player_Pos[1], Player_Pos[2]);
		AC_SetPlayerPos      (playerid,     Player_Pos[0], Player_Pos[1], Player_Pos[2]);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior    (playerid, GetPlayerInterior(giveplayerid));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));

		new String[128];
		format(String, 128, "Panaudojau komandà:\n{FFAF00} /to %s", GetPlayerNameEx(giveplayerid));
		SetPlayerChatBubble (playerid, String, 0xFFFFFFFF, 15.0, 5000);

		SelectedCreditHouseID[playerid] = -1;
	}
	else
	{
		if(PI[giveplayerid][AdminLevel] >= LEVEL_OWNER) return SendClientMessage(playerid, -1, "{ffffff} Pas savininkus teleportuotis draudþiama!");

		GetPlayerPos         (giveplayerid, Player_Pos[0], Player_Pos[1], Player_Pos[2]);
		AC_SetPlayerPos      (playerid,     Player_Pos[0], Player_Pos[1], Player_Pos[2]);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior    (playerid, GetPlayerInterior(giveplayerid));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));

		new String[128];
		format(String, 128, "Panaudojau komandà:\n{FFAF00} /to %s", GetPlayerNameEx(giveplayerid));
		SetPlayerChatBubble (playerid, String, 0xFFFFFFFF, 15.0, 5000);

		SelectedCreditHouseID[playerid] = -1;
	}

	return 1;
}

CMD:nesutinku(playerid)
{
	if(PI[playerid][PasiuleGet] < gettime()) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite jokio pasiûlymo atsiteliportavimui!");

	PI[playerid][PasiuleGet] = 0;

	return 1;
}

CMD:sutinku(playerid)
{
	if(PI[playerid][PasiuleGet] < gettime()) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite jokio pasiûlymo atsiteliportavimui!");

	AC_SetPlayerPos      (playerid, PI[playerid][GetPos][0], PI[playerid][GetPos][1], PI[playerid][GetPos][2]);
	SetPlayerVirtualWorld(playerid, PI[playerid][GetVW]);
	SetPlayerInterior    (playerid, PI[playerid][GetInt]);

	PI[playerid][PasiuleGet] = 0;
	SelectedCreditHouseID[playerid] = -1;

	return 1;
}

CMD:get(playerid, params[])
{
	new giveplayerid, Float: Player_Pos[3], String[216];

	if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /get <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðio veiksmo panaudoti negalite!");

	if(GetPlayerVirtualWorld(playerid) > 0) return SendClientMessage(playerid, -1, "{ffffff} Negalite atiteliportuoti þaidëjo pas save kai esate namuose!");

	if(PI[giveplayerid][ikalintas]) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra kalëjime!");

	if(PI[playerid][kalejimo_laikas] > 0) return SendClientMessage(playerid, -1, "{ffffff} Jus esate kalëjime!");

	if(PI[giveplayerid][Kraunasi] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu ðios þaidëjo atiteliportuoti negalima!");

	if(PI[giveplayerid][Issikrauna] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu ðios þaidëjo atiteliportuoti negalima!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[giveplayerid][PasiuleGet] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas jau turi pasiûlymà atsiteliportavimui!");

	if(PI[giveplayerid][beglys] == true) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra begliø sàraðe!");

	if(SelectedSkin[giveplayerid] > -1) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra drabuþiø parduotuvëje!");

	if(SelectedGangSkin[giveplayerid] > -1) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra drabuþiø parduotuvëje!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	if(Dazasvydis[giveplayerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas daþasvydyje!");
	
	if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

	PI[giveplayerid][PasiuleGet] = gettime() + 20;

	GetPlayerPos         (playerid, Player_Pos[0], Player_Pos[1], Player_Pos[2]);
	GetPlayerVirtualWorld(playerid);

	PI[giveplayerid][GetPos][0] = Player_Pos[0];
	PI[giveplayerid][GetPos][1] = Player_Pos[1];
	PI[giveplayerid][GetPos][2] = Player_Pos[2];
	PI[giveplayerid][GetVW]     = GetPlayerVirtualWorld(playerid);
	PI[giveplayerid][GetInt]    = GetPlayerInterior(playerid);

	format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}siûlo jums get pas já. Pasiûlymas galios {FFAF00}20{ffffff} sec!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);

	SendClientMessage(giveplayerid, -1, "{ffffff} Jeigu sutinkate teleportuotis, raðykite {FFAF00} /sutinku{ffffff}, jei ne - {FFAF00} /nesutinku{ffffff}!");

	return 1;
}

f_public: RealSpawn(playerid)
{
    SetPlayerHealth(playerid, 99.9);
	Spawned[playerid] = true;
}

stock StopSpectating(playerid)
{
	TogglePlayerSpectating	(playerid, false);
	SetCameraBehindPlayer	(playerid);
	SetPlayerVirtualWorld 	(playerid, spectateInfo[playerid][2]);
	SetPlayerInterior     	(playerid, spectateInfo[playerid][1]);
	SetPlayerSkin        	(playerid, spectateInfo[playerid][3]);
	ac_ResetPlayerWeapons 	(playerid);
	LoadPlayerGuns		  	(playerid);
	SetTimerEx 				("RealSpawn", 1000, false, "i", playerid);
	AC_SetPlayerPos 		(playerid, Pos[playerid][0], Pos[playerid][1], Pos[playerid][2]);

	NeedCheckTuningAB[playerid] = 5;
	spectateInfo[playerid][0] 	= INVALID_PLAYER_ID;
	Spawned[playerid] 			= false;

	return 1;
}

CMD:spec(playerid, params[])
{
	if(PI[playerid][Priziuretojas] == PRIZ_NIEKO && PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(spectateInfo[playerid][0] != INVALID_PLAYER_ID) return StopSpectating(playerid); // Jeigu kaþkà stebëjo sustabdom stebëjimà.

	new id, String[128];

	if(sscanf(params, "u", id)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /spec <vardas_pavardë/id>");

	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(id == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðio veiksmo panaudoti negalite!");

	if(PI[playerid][AdminLevel] < LEVEL_OWNER)
	{
		if(PI[id][AdminLevel] == LEVEL_OWNER)
		{
			return SendClientMessage(playerid, -1, "{ffffff} Ant savininkø ðios komandos panaudoti negalite!");
		}
	}

	SavePlayerGuns(playerid);
	ac_ResetPlayerWeapons(playerid);

   	format(String, sizeof(String), "{ffffff} Priþiûrite þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(id));
	SendClientMessage(playerid, -1, String);

	GetPlayerPos( playerid, Pos[ playerid ][ 0 ], Pos[ playerid ][ 1 ], Pos[ playerid ][ 2 ] );

    spectateInfo[ playerid ][ 0 ] = id;
	spectateInfo[ playerid ][ 2 ] = GetPlayerVirtualWorld( playerid );
	spectateInfo[ playerid ][ 1 ] = GetPlayerInterior( playerid );
    spectateInfo[ playerid ][ 3 ] = GetPlayerSkin( playerid );

	playerInfo[ id ][ 1 ] = false;
	playerInfo[ id ][ 0 ] = true;

	SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( id ) );
	SetPlayerInterior( playerid, GetPlayerInterior( id ) );

    TogglePlayerSpectating( playerid, true );

    if ( IsPlayerInAnyVehicle( id ) )
		PlayerSpectateVehicle( playerid, GetPlayerVehicleID( id ) );
    else
		PlayerSpectatePlayer( playerid, id );

	return 1;
}

CMD:boom(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_VIP) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(!IsPlayerInAnyVehicle(playerid)) return 1;

	if(VehicleInfo[GetPlayerVehicleID(playerid)][vNupirkta]) return 1;

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_VIP: 				SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë buvo sëkmingai sunaikinta!");
		case LEVEL_FIRST..LEVEL_OWNER: 	SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë buvo sëkmingai sunaikinta!");
	}

	return 1;
}

CMD:ac(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	/*if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}*/

	if(CheckMute(playerid)) return 1;

	new Tekstas[128], String[216];

	if(sscanf(params, "s[128]", Tekstas)) return SendClientMessage(playerid, -1, "{ffffff} {FFAF00} /ac <tekstas>");

	if(strlen(Tekstas) > 128) return SendClientMessage(playerid, -1, "{ffffff} {ffffff}Tekstas per ilgas!");

	format(String, sizeof(String), "{ffffff} [ADMIN CHAT] {FFAF00}%s(%i){ffffff}: %s", GetPlayerNameEx(playerid), playerid, Tekstas);

	for(new p, size = GetPlayerPoolSize(); p <= size; p++)
	{
		if(!IsPlayerConnected(p) || IsPlayerNPC(p)) continue;

		if(PI[p][AdminLevel] < LEVEL_FIRST) continue;

		SendClientMessage(p, -1, String);
	}

	//SendMessageToAdmins(String);

	return 1;
}

CMD:vc(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_VIP) return 0;

	if(CheckMute(playerid)) return 1;

	new Tekstas[128], String[216];

	if(sscanf(params, "s[128]", Tekstas)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /vc <tekstas>");

	if(strlen(Tekstas) > 128) return SendClientMessage(playerid, -1, "{ffffff} Tekstas per ilgas!");

	format(String, sizeof(String), "{ffffff} [VIP CHAT] {FFAF00}%s(%i){ffffff}: %s", GetPlayerNameEx(playerid), playerid, Tekstas);
	SendMessageToVips (-1, String);

	return 1;
}

CMD:tpm1(playerid) // VIP ir > lygio komanda
{
	if(PI[playerid][AdminLevel] < LEVEL_VIP) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(PI[playerid][PasirinktaMasina] != -1) return SendClientMessage(playerid, -1, "{ffffff} Dabar ðios komandos naudoti negalite!");

	if(PI[playerid][JustDie] > 0) return SendClientMessage(playerid, -1, "{ffffff} Jus dar negalite teleportuotis, nes esate gydomas!");

	if(PI[playerid][ikalintas]) return SendClientMessage(playerid, -1, "{ffffff} Ið kalëjimo teleportuotis negalite!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[playerid][beglys] == true) return SendClientMessage(playerid, -1, "{ffffff} Jus esate begliø sàraðe!");

	if(PI[playerid][Ieskomas] > 10) return SendClientMessage(playerid, -1, "{ffffff} Jus esate ieðkomas daugiau nei 10 lygiu!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");
	
	if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

	new vehicleid = PI[playerid][Transportas1];

	if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 1-ojo transporto!");

	if(VehicleInfo[vehicleid][vSprogusi]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonë yra sudauþyta!");

	new Float: V_Pos[4];

	GetVehiclePos        (vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);
	GetVehicleZAngle     (vehicleid, V_Pos[3]);
	AC_SetPlayerPos         (playerid, V_Pos[0], V_Pos[1], V_Pos[2] + 1);
	SetPlayerFacingAngle (playerid, V_Pos[3]);
	SetPlayerInterior    (playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);

	SetPlayerChatBubble (playerid, "Panaudojau komandà:\n{FFAF00} /tpm1", 0xFFFFFFFF, 15.0, 5000);

	SelectedCreditHouseID[playerid] = -1;

	return 1;
}

CMD:tpm2(playerid) // VIP ir > lygio komanda
{
	if(PI[playerid][AdminLevel] < LEVEL_VIP) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(PI[playerid][PasirinktaMasina] != -1) return SendClientMessage(playerid, -1, "{ffffff} Dabar ðios komandos naudoti negalite!");

	if(PI[playerid][JustDie] > 0) return SendClientMessage(playerid, -1, "{ffffff} Jus dar negalite teleportuotis, nes esate gydomas!");

	if(PI[playerid][ikalintas]) return SendClientMessage(playerid, -1, "{ffffff} Ið kalëjimo teleportuotis negalite!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[playerid][beglys] == true) return SendClientMessage(playerid, -1, "{ffffff} Jus esate begliø sàraðe!");

	if(PI[playerid][Ieskomas] > 10) return SendClientMessage(playerid, -1, "{ffffff} Jus esate ieðkomas daugiau nei 10 lygiu!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");
	
	if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

	new vehicleid = PI[playerid][Transportas2];

	if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 2-ojo transporto!");

	if(VehicleInfo[vehicleid][vSprogusi]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonë yra sudauþyta!");

	new Float: V_Pos[4];

	GetVehiclePos        (vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);
	GetVehicleZAngle     (vehicleid, V_Pos[3]);
	AC_SetPlayerPos         (playerid, V_Pos[0], V_Pos[1], V_Pos[2] + 1);
	SetPlayerFacingAngle (playerid, V_Pos[3]);
	SetPlayerInterior    (playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);

	SetPlayerChatBubble (playerid, "Panaudojau komandà:\n{FFAF00} /tpm2", 0xFFFFFFFF, 15.0, 5000);

	SelectedCreditHouseID[playerid] = -1;

	return 1;
}

CMD:tpm3(playerid) // VIP ir > lygio komanda
{
	if(PI[playerid][AdminLevel] < LEVEL_VIP) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(PI[playerid][PasirinktaMasina] != -1) return SendClientMessage(playerid, -1, "{ffffff} Dabar ðios komandos naudoti negalite!");

	if(PI[playerid][JustDie] > 0) return SendClientMessage(playerid, -1, "{ffffff} Jus dar negalite teleportuotis, nes esate gydomas!");

	if(PI[playerid][ikalintas]) return SendClientMessage(playerid, -1, "{ffffff} Ið kalëjimo teleportuotis negalite!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[playerid][beglys] == true) return SendClientMessage(playerid, -1, "{ffffff} Jus esate begliø sàraðe!");

	if(PI[playerid][Ieskomas] > 10) return SendClientMessage(playerid, -1, "{ffffff} Jus esate ieðkomas daugiau nei 10 lygiu!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");
	
	if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

	new vehicleid = PI[playerid][Transportas3];

	if(vehicleid == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite 3-ojo transporto!");

	if(VehicleInfo[vehicleid][vSprogusi]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonë yra sudauþyta!");

	new Float: V_Pos[4];

	GetVehiclePos        (vehicleid, V_Pos[0], V_Pos[1], V_Pos[2]);
	GetVehicleZAngle     (vehicleid, V_Pos[3]);
	AC_SetPlayerPos         (playerid, V_Pos[0], V_Pos[1], V_Pos[2] + 1);
	SetPlayerFacingAngle (playerid, V_Pos[3]);
	SetPlayerInterior    (playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);

	SetPlayerChatBubble (playerid, "Panaudojau komandà:\n{FFAF00} /tpm3", 0xFFFFFFFF, 15.0, 5000);

	SelectedCreditHouseID[playerid] = -1;

	return 1;
}

CMD:takew(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid;

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /takew <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(Dazasvydis[giveplayerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas daþasvydyje!");
	
	if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_FIRST:
		{
			if(PI[giveplayerid][AdminLevel] >= LEVEL_FIRST) return SendClientMessage(playerid, -1, "{ffffff} Aukðtesnio ir tokio paèio rango administratoriams ginklø atimti negalite!");
		}

		case LEVEL_SECOND:
		{
			if(PI[giveplayerid][AdminLevel] >= LEVEL_SECOND) return SendClientMessage(playerid, -1, "{ffffff} Aukðtesnio ir tokio paèio rango administratoriams ginklø atimti negalite!");
		}

		case LEVEL_THIRD:
		{
			if(PI[giveplayerid][AdminLevel] >= LEVEL_THIRD) return SendClientMessage(playerid, -1, "{ffffff} Aukðtesnio ir tokio paèio rango administratoriams ginklø atimti negalite!");
		}
	}

	ac_ResetPlayerWeapons		(giveplayerid);
	SendClientMessage 	(playerid, -1, "{ffffff} Ginklai atimti!");

	new String[128];
	format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}atëmë jûsø ginklus!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);

	return 1;
}

CMD:pinigai(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, String[216];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /pinigai <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	format(String, sizeof(String), "{ffffff} Rankose þaidëjas {FFAF00}%s {ffffff}turi {FFAF00}$%s{ffffff}, o banke {FFAF00}$%s{ffffff}!",
	GetPlayerNameEx(giveplayerid), konvertuoti_pinigus(GetPlayerMoneyA(giveplayerid)), konvertuoti_pinigus(PI[giveplayerid][banke]));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:freeze(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, String[128];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /freeze <vardas_pavardë/id>");
	
	if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_FIRST:
		{
			if(PI[giveplayerid][AdminLevel] >= LEVEL_FIRST) return SendClientMessage(playerid, -1, "{ffffff} Aukðtesnio ir tokio paèio rango administratoriø uþðaldyti negalite!");
		}

		case LEVEL_SECOND:
		{
			if(PI[giveplayerid][AdminLevel] >= LEVEL_SECOND) return SendClientMessage(playerid, -1, "{ffffff} Aukðtesnio ir tokio paèio rango administratoriø uþðaldyti negalite!");
		}

		case LEVEL_THIRD:
		{
			if(PI[giveplayerid][AdminLevel] >= LEVEL_THIRD) return SendClientMessage(playerid, -1, "{ffffff} Aukðtesnio ir tokio paèio rango administratoriø uþðaldyti negalite!");
		}
	}

	TogglePlayerControllable(giveplayerid, false);

	format(String, sizeof(String), "{ffffff} Sëkmingai uþðaldëte þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:unfreeze(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, String[128];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /freeze <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");
	
	if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

	if(PI[playerid][AdminLevel] <= LEVEL_THIRD)
	{
		if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðio veiksmo panaudoti negalite!");
	}

	PI[giveplayerid][cuffed] = false;

	TogglePlayerControllable(giveplayerid, true);
	SetPlayerSpecialAction  (giveplayerid, SPECIAL_ACTION_NONE);

	if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 0)) RemovePlayerAttachedObject(giveplayerid, 0);

	format(String, sizeof(String), "{ffffff} Sëkmingai atðaldëte þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:kill(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, String[128], Reason[64];

	if(sscanf(params, "us[64]", giveplayerid, Reason)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /kill <vardas_pavardë/id> <prieþastis>");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(PI[giveplayerid][JustDie] > 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra gydomas, todël nuþudyti jo negalite!");

	if(Dazasvydis[giveplayerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas daþasvydyje!");
	
	if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_FIRST:
		{
			if(PI[giveplayerid][AdminLevel] >= LEVEL_FIRST) return SendClientMessage(playerid, -1, "{ffffff} Aukðtesnio ir tokio paèio rango administratoriø nuþudyti negalite!");

			format(String, sizeof(String), "{ffffff} Jus nuþudë administratorius {FFAF00}%s{ffffff}. Prieþastis: {FFAF00}%s", GetPlayerNameEx(playerid), Reason);
		}

		case LEVEL_SECOND:
		{
			if(PI[giveplayerid][AdminLevel] >= LEVEL_SECOND) return SendClientMessage(playerid, -1, "{ffffff} Aukðtesnio ir tokio paèio rango administratoriø nuþudyti negalite!");

			format(String, sizeof(String), "{ffffff} Jus nuþudë administratorius {FFAF00}%s{ffffff}. Prieþastis: {FFAF00}%s", GetPlayerNameEx(playerid), Reason);
		}

		case LEVEL_THIRD:
		{
			if(PI[giveplayerid][AdminLevel] >= LEVEL_THIRD) return SendClientMessage(playerid, -1, "{ffffff} Aukðtesnio ir tokio paèio rango administratoriø nuþudyti negalite!");

			format(String, sizeof(String), "{ffffff} Jus nuþudë administratorius {FFAF00}%s{ffffff}. Prieþastis: {FFAF00}%s", GetPlayerNameEx(playerid), Reason);
		}

		case LEVEL_OWNER:
		{
			format(String, sizeof(String), "{ffffff} Jus nuþudë Savininkas {FFAF00}%s{ffffff}. Prieþastis: {FFAF00}%s", GetPlayerNameEx(playerid), Reason);
		}
	}

	ac_ResetPlayerWeapons		(giveplayerid);
	SendClientMessage 	(giveplayerid, -1, String);

	format(String, sizeof(String), "{ffffff} Nuþudëte þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	SetPlayerHealthEx(giveplayerid, 0);

	return 1;
}

CMD:piltikura(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti transp. priemonëje!");

	if(PI[playerid][bakelis] == false) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite kuro bakelio. Já ásigyti galite bet kurios degalinës viduje!");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(IsABike(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Dviraèiams ðios komandos panaudoti negalite!");

	if(VehicleInfo[vehicleid][vKuras] >= VehicleInfo[vehicleid][vBakas]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø transp. priemonës bakas pilnas!");

	new Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective;

	GetVehicleParamsEx(vehicleid, Engine, Lights, Alarm, Doors, Bonnet, Boot, Objective);

	if(Engine) return SendClientMessage(playerid, -1, "{ffffff} Uþgesinkite transp. priemonës variklá!");

	if(!VehicleInfo[vehicleid][vDujos]) // Maðina neturi dujø árangos
	{
		VehicleInfo[vehicleid][vKuras] += 20.00;
		PI[playerid][bakelis] 			= false;

		if(VehicleInfo[vehicleid][vKuras] > VehicleInfo[vehicleid][vBakas])
		{
			VehicleInfo[vehicleid][vKuras] = VehicleInfo[vehicleid][vBakas];
		}

		if(VehicleHasDriver(vehicleid))
		{
			UpdateFuelBar(playerid);
		}

		SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë pripildyta kuro!");
	}
	else // Dujø áranga yra
	{
		if(VehicleInfo[vehicleid][vIjungta]) return SendClientMessage(playerid, -1, "{ffffff} Prieð pilant kurà iðjunkite dujø árangà!");
	}

	return 1;
}

CMD:pildyti(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_VIP) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti transp. priemonëje!");

	if(GetPlayerMoneyA(playerid) < 500) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

	new vehicleid = GetPlayerVehicleID(playerid);

	new Medikai = 0;

	for(new p = 0; p < MAX_PLAYERS; p++)
	{
		if(IsPlayerConnected(p) && !PI[p][AFK_Stat])
		{
			switch(PI[p][specialybe])
			{
				case MECHANIKAI: Medikai ++;
			}
		}
	}

	if(Medikai > 2) return SendClientMessage(playerid, -1, "{ffffff} Serveryje yra mechanikø, praðome naudotis jø paslaugomis!");

	if(IsABike(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Dviraèiams ðios komandos panaudoti negalite!");

	Pelnas[1] += 250;

	SetPlayerChatBubble (playerid, "Panaudojau komandà:\n{FFAF00} /pildyti", 0xFFFFFFFF, 15.0, 5000);

	GivePlayerMoneyA(playerid, -500);
	SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë pripildyta degalø! Uþ tai sumokëjote {FFAF00}$500{ffffff}.");

	if(!VehicleInfo[vehicleid][vDujos]) // Maðina neturi dujø árangos
	{
		VehicleInfo[vehicleid][vKuras] = VehicleInfo[vehicleid][vBakas];

		if(VehicleHasDriver(vehicleid))
		{

			UpdateFuelBar(playerid);
		}
	}
	else // Dujø áranga yra
	{
		if(!VehicleInfo[vehicleid][vIjungta]) // Dujos iðjungtos
		{
			VehicleInfo[vehicleid][vKuras] = VehicleInfo[vehicleid][vBakas];

			if(VehicleHasDriver(vehicleid))
			{
				UpdateFuelBar(playerid);
			}
		}
		else // Dujos ájungtos
		{
			VehicleInfo[vehicleid][vDujuLikutis] = VehicleInfo[vehicleid][vDujuBakas];

			UpdateFuelBar(playerid);
		}
	}

	return 1;
}

CMD:tele(playerid)
{
	new String[500];

	if(PI[playerid][AdminLevel] < LEVEL_VIP) return 0;

	if(PI[playerid][Kraunasi] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu ðios komandos naudoti negalima!");

	if(PI[playerid][Issikrauna] == true) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu ðios komandos naudoti negalima!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(!VehicleInfo[vehicleid][vNupirkta]) return SendClientMessage(playerid, -1, "{ffffff} Ðiame transporte teleportuotis draudþiama!");
	}

	strcat(String, "1. San Fierro\n");
	strcat(String, "2. DRAG vieta\n");
	strcat(String, "3. DRIFT vieta\n");
	strcat(String, "4. DM vieta\n");
	strcat(String, "5. Buliø kautyniø vieta\n");
	strcat(String, "6. Motokrosø vieta\n");
	strcat(String, "7. Kartingø vieta\n");
	strcat(String, "8. AFK zona\n");
	strcat(String, "9. Medþioklës laivas\n");
	ShowPlayerDialogEx(playerid, 9635, DIALOG_STYLE_LIST, "Teleportai", String, "Pasirinkti", "");

	return 1;
}

CMD:megatest(playerid)
{
	if(	PlayerInZone(playerid, -2464.2332,1450.8206, -2399.1199,1453.5428) || PlayerInZone(playerid, -2403.5088,1429.0901, -2400.8433,1453.7195) ||
		PlayerInZone(playerid, -2410.3289,1429.5035, -2400.4282,1432.2861) || PlayerInZone(playerid, -2465.7004,1428.9535, -2457.6633,1432.3746) ||
		PlayerInZone(playerid, -2463.9307,1429.4803, -2461.0876,1454.0513))
	{
		SendClientMessage(playerid, -1, ""COL_ERROR"zona");
	}
	else SendClientMessage(playerid, -1, ""COL_ERROR"nezona");

	//if(PlayerInZone(playerid, -2464.2332,1450.8206, -2399.1199,1453.5428))
	//if(PlayerInZone(playerid, -2403.5088,1429.0901, -2400.8433,1453.7195))
	//if(PlayerInZone(playerid, -2410.3289,1429.5035, -2400.4282,1432.2861))
	//if(PlayerInZone(playerid, -2465.7004,1428.9535, -2457.6633,1432.3746))
	//if(PlayerInZone(playerid, -2463.9307,1429.4803, -2461.0876,1454.0513))

	return 1;
}

CMD:heal(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_VIP) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, String[216];

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /heal <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	if(Dazasvydis[giveplayerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas daþasvydyje!");
	
	if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

	if(PI[playerid][AdminLevel] < LEVEL_OWNER)
	{
		new Medikai = 0;

		for(new p = 0; p < MAX_PLAYERS; p++)
		{
			if(IsPlayerConnected(p) && !PI[p][AFK_Stat])
			{
				switch(PI[p][specialybe])
				{
					case MEDIKAI: Medikai ++;
				}
			}
		}

		if(Medikai > 2) return SendClientMessage(playerid, -1, "{ffffff} Serveryje yra medikø, praðome naudotis jø paslaugomis!");
	}

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_VIP:
		{
			if(PI[playerid][KadaGydesi] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Gydyti galima tik kas 2 minutes!");

			if(PI[giveplayerid][GavoZala] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Gydyti galima tik praëjus 30 sekundþiø nuo paskutinio karto, kai buvo suþalotas!");

			if(giveplayerid != playerid) format(String, sizeof(String), "{ffffff} Jus pagydë VIP narys {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid));

			PI[playerid][KadaGydesi] = gettime() + 120;
		}

		case LEVEL_FIRST:
		{
			if(PI[playerid][KadaGydesi] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Gydyti galima tik kas 1 minute!");

			if(PI[giveplayerid][GavoZala] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Gydyti galima tik praëjus 30 sekundþiø nuo paskutinio karto, kai buvo suþalotas!");

			if(giveplayerid != playerid) format(String, sizeof(String), "{ffffff} Jus pagydë administratorius {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid));

			PI[playerid][KadaGydesi] = gettime() + 60;

			SetPlayerArmourEx(giveplayerid, 20);
		}

		case LEVEL_SECOND:
		{
			if(PI[playerid][KadaGydesi] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Gydyti galima tik kas 30 sekundþiø!");

			if(PI[giveplayerid][GavoZala] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Gydyti galima tik praëjus 30 sekundþiø nuo paskutinio karto, kai buvo suþalotas!");

			if(giveplayerid != playerid) format(String, sizeof(String), "{ffffff} Jus pagydë administratorius {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid));

			PI[playerid][KadaGydesi] = gettime() + 30;

			SetPlayerArmourEx(giveplayerid, 50);
		}

		case LEVEL_THIRD:
		{
			if(PI[playerid][KadaGydesi] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Gydyti galima tik kas 15 sekundþiø!");

			if(PI[giveplayerid][GavoZala] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Gydyti galima tik praëjus 30 sekundþiø nuo paskutinio karto, kai buvo suþalotas!");

			if(giveplayerid != playerid) format(String, sizeof(String), "{ffffff} Jus pagydë administratorius {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid));

			PI[playerid][KadaGydesi] = gettime() + 15;

			SetPlayerArmourEx(giveplayerid, 70);
		}

		case LEVEL_OWNER:
		{

			if(giveplayerid != playerid) format(String, sizeof(String), "{ffffff} Jus pagydë Savininkas {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid));

			SetPlayerArmourEx(giveplayerid, 100);
		}
	}

	SetPlayerHealthEx(giveplayerid, 100);
	SendClientMessage(giveplayerid, -1, String);

	format(String, 128, "Panaudojau komandà:\n{FFAF00} /heal %s", GetPlayerNameEx(giveplayerid));
	SetPlayerChatBubble (playerid, String, 0xFFFFFFFF, 15.0, 5000);

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_VIP:
		{
			format(String, sizeof(String), "{ffffff} Pagydëte þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
		}

		case LEVEL_FIRST..LEVEL_OWNER:
		{
			format(String, sizeof(String), "{ffffff} Pagydëte þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
		}
	}

	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:eheal(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_SECOND) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");
	
	if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

	new Float: P_Pos[3], String[216];

	GetPlayerPos(playerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_SECOND:
		{
			if(PI[playerid][KadaGydesi] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Gydyti galima tik kas 2 minutes!");

			if(PI[playerid][GavoZala] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Gydyti galima tik praëjus 30 sekundþiø nuo paskutinio karto, kai buvo suþalotas!");

			format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s{ffffff} pagydë visus ðalia esanèius þaidëjus!", GetPlayerNameEx(playerid));

			PI[playerid][KadaGydesi] = gettime() + 120;
		}

		case LEVEL_THIRD:
		{
			if(PI[playerid][KadaGydesi] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Gydyti galima tik kas 1 minutæ!");

			if(PI[playerid][GavoZala] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Gydyti galima tik praëjus 30 sekundþiø nuo paskutinio karto, kai buvo suþalotas!");

			format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s{ffffff} pagydë visus ðalia esanèius þaidëjus!", GetPlayerNameEx(playerid));

			PI[playerid][KadaGydesi] = gettime() + 60;
		}

		case LEVEL_OWNER:
		{
			format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s{ffffff} pagydë visus ðalia esanèius þaidëjus!", GetPlayerNameEx(playerid));
		}
	}

	for(new p = 0; p < MAX_PLAYERS; p ++)
	{
		if(IsPlayerConnected(p))
		{
			if(IsPlayerInRangeOfPoint(p, 20.0, P_Pos[0], P_Pos[1], P_Pos[2]))
			{
				if(PI[p][GavoZala] < gettime())
				{
					SetPlayerHealthEx(p, 100);
					SetPlayerArmourEx(p, 100);
				}

				SendClientMessage(p, -1, String);
			}
		}
	}

	return 1;
}

CMD:egun(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_SECOND) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	if(PI[playerid][kalejimo_laikas] > 0) return SendClientMessage(playerid, -1, "{ffffff} Kalëjime ginklø naudoti negali!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");
	
	if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

	new Float: P_Pos[3], String[216];

	GetPlayerPos(playerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_SECOND:
		{
			if(PI[playerid][KadaGun] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Ginklus imti/dalinti galima tik kas 30 sekundþiø!");

			format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s{ffffff} iðdalino ginklus visiems ðalia esantiems þaidëjams!", GetPlayerNameEx(playerid));

			PI[playerid][KadaGun] = gettime() + 30;
		}

		case LEVEL_THIRD:
		{
			if(PI[playerid][KadaGun] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Ginklus imti/dalinti galima tik kas 15 sekundþiø!");

			format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s{ffffff} iðdalino ginklus visiems ðalia esantiems þaidëjams!", GetPlayerNameEx(playerid));

			PI[playerid][KadaGun] = gettime() + 15;
		}

		case LEVEL_OWNER:
		{
			format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s{ffffff} iðdalino ginklus visiems ðalia esantiems þaidëjams!", GetPlayerNameEx(playerid));
		}
	}

	for(new p = 0; p < MAX_PLAYERS; p ++)
	{
		if(IsPlayerConnected(p))
		{
			if(IsPlayerInRangeOfPoint(p, 20.0, P_Pos[0], P_Pos[1], P_Pos[2]))
			{
				ac_GivePlayerWeapon(p, 25, 50);
				ac_GivePlayerWeapon(p, 30, 100);
				SendClientMessage (p, -1, String);
			}
		}
	}

	return 1;
}

CMD:vipwarn(playerid, params[])
{
	if(PI[playerid][Priziuretojas] != PRIZ_VIP && PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, String[128], Reason[128];

	if(sscanf(params, "us[128]", giveplayerid, Reason)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /vipwarn <vardas_pavardë/id> <prieþastis>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(PI[giveplayerid][AdminLevel] != LEVEL_VIP) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas ne VIP narys!");

	if(PI[giveplayerid][AdminLevel] == LEVEL_OWNER) return SendClientMessage(playerid, -1, "{ffffff} Serverio savininkui áspëjimo duoti negalite!");

	PI[giveplayerid][AdminWarns] ++;

	switch(PI[giveplayerid][AdminLevel])
	{
		case LEVEL_VIP:
		{
			if(PI[playerid][Priziuretojas] == PRIZ_VIP && PI[playerid][AdminLevel] < LEVEL_OWNER)
			{
				format(String, sizeof(String), "{ffffff} VIP priþiûrëtojas {FFAF00}%s{ffffff} áspëjo VIP nará {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			}
			else
			{
				format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s{ffffff} áspëjo VIP nará {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			}

			SendClientMessageToAll(-1, String);

			format(String, sizeof(String), "{ffffff} Prieþastis: {FFAF00}%s {ffffff}| Þaidëjas gavo {FFAF00}%d/3 {ffffff}VIP áspëjimà!", Reason, PI[giveplayerid][AdminWarns]);
			SendClientMessageToAll(-1, String);
		}
	}

	new query[150];

	format(query, 87, "UPDATE players SET AdminWarns = '%d' WHERE Vardas = '%s'", PI[giveplayerid][AdminWarns], GetPlayerNameEx(giveplayerid));
	mysql_query(query);

	if(PI[giveplayerid][AdminWarns] >= 3)
	{
		switch(PI[giveplayerid][AdminLevel])
		{
			case LEVEL_VIP:
			{
				format(String, sizeof(String), "{ffffff} VIP narys {FFAF00}%s {ffffff}prarado savo pareigas!", GetPlayerNameEx(giveplayerid));
			}
		}

		SendClientMessageToAll(-1, String);

		SendClientMessageToAll(-1, "{ffffff} Prieþastis: {FFAF00}3 surinkti áspëjimai!");

		PI[giveplayerid][AdminLevel]  = LEVEL_NONE;
		PI[giveplayerid][AdminWarns]  = 0;
		PI[giveplayerid][AdminLaikas] = 0;

		format(query, 150, "UPDATE players SET Admin = '%d', AdminWarns = '%d', AdminLaikas = '%d' WHERE Vardas = '%s'",
		PI[giveplayerid][AdminLevel], PI[giveplayerid][AdminWarns], PI[giveplayerid][AdminLaikas], GetPlayerNameEx(giveplayerid));
		mysql_query(query);
	}

	return 1;
}

CMD:vipunwarn(playerid, params[])
{
	if(PI[playerid][Priziuretojas] != PRIZ_VIP && PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, String[128];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /vipunwarn <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Sau áspëjimo nusiimti negalite!");

	if(PI[giveplayerid][AdminLevel] != LEVEL_VIP) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas ne VIP narys!");

	if(PI[giveplayerid][AdminWarns] <= 0) return SendClientMessage(playerid, -1, "{ffffff} VIP narys neturi áspëjimø!");

	PI[giveplayerid][AdminWarns] --;

	switch(PI[giveplayerid][AdminLevel])
	{
		case LEVEL_VIP:
		{
			format(String, sizeof(String), "{ffffff}  ADMIN  {FFAF00}%s {ffffff}nuëme áspëjimà VIP nariui {FFAF00}%s{ffffff} ({FFAF00}%d/3{ffffff})!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), PI[giveplayerid][AdminWarns]);
		}
	}

	SendClientMessageToAll(-1, String);

	new query[150];

	format(query, 150, "UPDATE players SET AdminWarns = '%d' WHERE Vardas = '%s'", PI[giveplayerid][AdminWarns], GetPlayerNameEx(giveplayerid));
	mysql_query(query);

	return 1;
}

CMD:aktyvumas(playerid)
{
	if(PI[playerid][Priziuretojas] != PRIZ_ADMIN && PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	mysql_query("SELECT `Vardas`, `Admin`, `LastActive` FROM `players` WHERE `Admin` > '1'");
	mysql_store_result();

	new pName[24], dID, dName[4], dDate[32], pStatus[30], adminai, String[200], Stringas[2500], resultline[50];

	strcat(Stringas, "Vardas_Pavardë\tLygis\tStatusas\tPask. prisijungimas\n");

	while(mysql_fetch_row_format(resultline))
	{
		sscanf(resultline, "p<|>s[24]ds[32]", pName, dID, dDate);

		adminai ++;

		switch(dID)
		{
			case LEVEL_FIRST: 	dName = "I";
			case LEVEL_SECOND: 	dName = "II";
			case LEVEL_THIRD: 	dName = "III";
			case LEVEL_OWNER: 	dName = "IV";
		}

		if(GetPlayeridMid(pName) != INVALID_PLAYER_ID) 	pStatus = "{19F14F}ONLINE{ffffff}";
		else 											pStatus = "{FFAF00}OFFLINE{ffffff}";

		format(String, sizeof(String), "%d. {FFAF00}%s\t{FFAF00}%s\t%s\t{FFAF00}%s\n", adminai, pName, dName, pStatus, dDate);
		strcat(Stringas, String);
	}

	ShowPlayerDialogEx(playerid, 1114, DIALOG_STYLE_TABLIST_HEADERS, "Administratoriø aktyvumas", Stringas, "Uþdaryti", "");

	mysql_free_result();

	return 1;
}

CMD:adminwarn(playerid, params[])
{
	if(PI[playerid][Priziuretojas] != PRIZ_ADMIN && PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	new giveplayeridas[MAX_PLAYER_NAME], String[216], Reason[128], Query[128];

	if(sscanf(params, "ss[128]", giveplayeridas, Reason)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /adminwarn <vardas_pavardë> <prieþastis>");

	new giveplayerid = GetPlayeridMid(giveplayeridas);

	if(giveplayerid != INVALID_PLAYER_ID)
	{
		if(PI[giveplayerid][AdminLevel] < LEVEL_FIRST) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas ne administratorius!");

		if(PI[giveplayerid][AdminLevel] == LEVEL_OWNER) return SendClientMessage(playerid, -1, "{ffffff} Serverio savininkui áspëjimo duoti negalite!");

		PI[giveplayerid][AdminWarns] ++;

		format(String, sizeof(String), "{ffffff} Administratoriø priþiûrëtojas {FFAF00}%s{ffffff} áspëjo administratoriø {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		SendClientMessageToAll(-1, String);

		format(String, sizeof(String), "{ffffff} Prieþastis: {FFAF00}%s {ffffff}| Þaidëjas gavo {FFAF00}%d/3 {ffffff}ADMIN áspëjimà!", Reason, PI[giveplayerid][AdminWarns]);
		SendClientMessageToAll(-1, String);

		if(PI[giveplayerid][AdminWarns] >= 3)
		{
			switch(PI[giveplayerid][AdminLevel])
			{
				case LEVEL_FIRST..LEVEL_THIRD:
				{
					format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}prarado savo pareigas!", GetPlayerNameEx(giveplayerid));
				}
			}

			SendClientMessageToAll(-1, String);

			SendClientMessageToAll(-1, "{ffffff} Prieþastis: {FFAF00}3 surinkti áspëjimai!");

			PI[giveplayerid][AdminLevel]  = LEVEL_NONE;
			PI[giveplayerid][AdminWarns]  = 0;
			PI[giveplayerid][AdminLaikas] = 0;

			format(Query, 150, "UPDATE players SET Admin = '%d', AdminWarns = '%d', AdminLaikas = '%d' WHERE Vardas = '%s'",
			PI[giveplayerid][AdminLevel], PI[giveplayerid][AdminWarns], PI[giveplayerid][AdminLaikas], GetPlayerNameEx(giveplayerid));
			mysql_query(Query);
		}
	}
	else
	{
		new aLevel, aWarns;

		format(Query, 128, "SELECT FROM `players` WHERE `Vardas` = '%s'", giveplayeridas);
		mysql_query(Query);

		mysql_store_result();
		mysql_retrieve_row();

		if(mysql_num_rows())
		{
			mysql_fetch_field_row(Query, "Admin"); 		aLevel = strval(Query);
			mysql_fetch_field_row(Query, "AdminWarns"); aWarns = strval(Query);

			switch(aLevel)
			{
				case LEVEL_NONE, LEVEL_VIP: return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas ne administratorius!");
				case LEVEL_OWNER: 			return SendClientMessage(playerid, -1, "{ffffff} Serverio savininkui áspëjimo duoti negalite!");
				default:
				{
					format(Query, 150, "UPDATE players SET `AdminWarns` = '%d' WHERE `Vardas` = '%s'", aWarns + 1, giveplayeridas);
					mysql_query(Query);

					mysql_fetch_field_row(Query, "AdminWarns"); aWarns = strval(Query);

					switch(aWarns)
					{
						case 0..2:
						{
							format(String, sizeof(String), "{ffffff} Administratoriø priþiûrëtojas {FFAF00}%s{ffffff} áspëjo administratoriø {FFAF00}%s{ffffff}!",
							GetPlayerNameEx(playerid), giveplayeridas);
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String), "{ffffff} Prieþastis: {FFAF00}%s {ffffff}| Þaidëjas gavo {FFAF00}%d/3 {ffffff}ADMIN áspëjimà!", Reason, aWarns);
							SendClientMessageToAll(-1, String);
						}

						default:
						{
							format(String, sizeof(String), "{ffffff} Administratoriø priþiûrëtojas {FFAF00}%s{ffffff} áspëjo administratoriø {FFAF00}%s{ffffff}!",
							GetPlayerNameEx(playerid), giveplayeridas);
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String), "{ffffff} Prieþastis: {FFAF00}%s {ffffff}| Þaidëjas gavo {FFAF00}%d/3 {ffffff}ADMIN áspëjimà!", Reason, aWarns);
							SendClientMessageToAll(-1, String);

							format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}prarado savo pareigas!", giveplayeridas);
							SendClientMessageToAll(-1, String);

							SendClientMessageToAll(-1, "{ffffff} Prieþastis: {FFAF00}3 surinkti áspëjimai!");

							format(Query, 150, "UPDATE players SET Admin = '0', AdminWarns = '0', AdminLaikas = '0' WHERE Vardas = '%s'", giveplayeridas);
							mysql_query(Query);
						}
					}
				}
			}
		}
		else
		{
			SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra mûsø duomenø bazëje!");
		}
	}

	return 1;
}

CMD:adminunwarn(playerid, params[])
{
	if(PI[playerid][Priziuretojas] != PRIZ_ADMIN && PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, String[216];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /adminunwarn <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Sau áspëjimo nusiimti negalite!");

	if(PI[giveplayerid][AdminLevel] < LEVEL_VIP) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas ne administratorius arba VIP narys!");

	if(PI[giveplayerid][AdminWarns] <= 0) return SendClientMessage(playerid, -1, "{ffffff} Administratorius arba VIP narys neturi áspëjimø!");

	PI[giveplayerid][AdminWarns] --;

	switch(PI[giveplayerid][AdminLevel])
	{
		case LEVEL_VIP:
		{
			format(String, sizeof(String), "{ffffff}  ADMIN  {FFAF00}%s {ffffff}nuëme áspëjimà VIP nariui {FFAF00}%s{ffffff} ({FFAF00}%d/3{ffffff})!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), PI[giveplayerid][AdminWarns]);
		}

		case LEVEL_FIRST..LEVEL_THIRD:
		{
			format(String, sizeof(String), "{ffffff}  ADMIN  {FFAF00}%s {ffffff}nuëme áspëjimà administratoriui {FFAF00}%s{ffffff} ({FFAF00}%d/3{ffffff})!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), PI[giveplayerid][AdminWarns]);
		}
	}

	SendClientMessageToAll(-1, String);

	new query[150];

	format(query, 150, "UPDATE players SET AdminWarns = '%d' WHERE Vardas = '%s'", PI[giveplayerid][AdminWarns], GetPlayerNameEx(giveplayerid));
	mysql_query(query);

	return 1;
}

CMD:unmute(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_THIRD) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, Reason[128], String[216];

	if(sscanf(params, "us[128]", giveplayerid, Reason)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /unmute <vardas_pavardë/id> <prieþastis>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(PI[playerid][AdminLevel] <= LEVEL_THIRD)
	{
		if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðio veiksmo panaudoti negalite!");
	}

	if(PI[giveplayerid][Muted] < gettime()) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nëra uþtildytas!");

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_THIRD:
		{
			format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}atitildë þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		}

		case LEVEL_OWNER:
		{
			format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}atitildë þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		}
	}

	PI[giveplayerid][Muted] = 0;

	SendClientMessageToAll(-1, String);

	format(String, sizeof(String), "{ffffff} Prieþastis: {FFAF00}%s", Reason);
	SendClientMessageToAll(-1, String);

	return 1;
}

CMD:eventcar(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	ShowPlayerDialogEx(playerid, 31000, DIALOG_STYLE_LIST, "Eventø transportas",
	"1. Buliø kautyniø transportas\n2. DRIFT transportas\n3. Kartingø transportas\n4. DRAG transportas\n5. Motokrosø transportas", "Pasirinkti", "Uþdaryti");

	return 1;
}

CMD:akomandos(playerid)
{
	ShowPlayerDialogEx(playerid, 9634, DIALOG_STYLE_LIST, "Administratoriø/vip komandos",
	"1. VIP statuso komandos\n2. I lygio administratoriø komandos\n3. II lygio administratoriø komandos\n4. III lygio administratoriø komandos", "Pasirinkti", "Uþdaryti");

	return 1;
}

CMD:jetpack(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);

	return 1;
}

CMD:bausti(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_FIRST) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid;

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /bausti <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	if(PI[giveplayerid][AdminLevel] > PI[playerid][AdminLevel]) return SendClientMessage(playerid, -1, "{ffffff} Negalite bausti aukðtesnio lygio administratoriø uþ jus!");

	ChoosedPlayer[playerid] = giveplayerid;

	new String[1500], Stringas[1500];

	switch(PI[playerid][AdminLevel])
	{
		case LEVEL_FIRST:
		{
			strcat(String, "Bausmë\tLaikas\n");

			for(new i = 0; i < sizeof(FAL); i ++)
			{
				if(FAL[i][bLaikas] == 0)
				{
					format(Stringas, sizeof(Stringas), "%s\n", FAL[i][Bausme]);
					strcat(String, Stringas);
				}
				else
				{
					format(Stringas, sizeof(Stringas), "%s\t{FFAF00}%s {ffffff}min.\n", FAL[i][Bausme], konvertuoti_pinigus(FAL[i][bLaikas]));
					strcat(String, Stringas);
				}
			}

			ShowPlayerDialogEx(playerid, FALDialog, DIALOG_STYLE_TABLIST_HEADERS, "Þaidëjo baudimas", String, "Pasirinkti", "Uþdaryti");
		}

		/*case LEVEL_SECOND:
		{
			strcat(String, "Bausmë\tLaikas\n");

			for(new i = 0; i < sizeof(SAL); i ++)
			{
				if(SAL[i][bLaikas] == 0)
				{
					format(Stringas, sizeof(Stringas), "%s\n", SAL[i][Bausme]);
					strcat(String, Stringas);
				}
				else
				{
					format(Stringas, sizeof(Stringas), "%s\t{FFAF00}%s {ffffff}min.\n", SAL[i][Bausme], konvertuoti_pinigus(SAL[i][bLaikas]));
					strcat(String, Stringas);
				}
			}

			ShowPlayerDialogEx(playerid, SALDialog, DIALOG_STYLE_TABLIST_HEADERS, "Þaidëjo baudimas", String, "Pasirinkti", "Uþdaryti");
		}*/

		case LEVEL_SECOND, LEVEL_THIRD, LEVEL_OWNER:
		{
			strcat(String, "Bausmë\tLaikas\n");

			for(new i = 0; i < sizeof(TAL); i ++)
			{
				if(TAL[i][bLaikas] == 0)
				{
					format(Stringas, sizeof(Stringas), "%s\n", TAL[i][Bausme]);
					strcat(String, Stringas);
				}
				else
				{
					format(Stringas, sizeof(Stringas), "%s\t{FFAF00}%s {ffffff}min.\n", TAL[i][Bausme], konvertuoti_pinigus(TAL[i][bLaikas]));
					strcat(String, Stringas);
				}
			}

			ShowPlayerDialogEx(playerid, TALDialog, DIALOG_STYLE_TABLIST_HEADERS, "Þaidëjo baudimas", String, "Pasirinkti", "Uþdaryti");
		}
	}

	return 1;
}

/*CMD:bausmes(playerid)
{
	new String[2048];

	strcat(String, "{ffffff}Èia galite suþinoti uþ kà ir kiek galite gauti þaidëjo áspëjimø!\n\n");

	strcat(String, "{ffffff}Paprasto þaidëjo/VIP nario/administratoriaus áþeidimas - {FFAF00}1 {ffffff}ásp.\n");
	strcat(String, "{ffffff}Administratoriø/VIP nariø neklausymas event'uose - {FFAF00}1 {ffffff}ásp.\n");
	strcat(String, "{ffffff}Pagydymo, unjail praðymas - {FFAF00}1 {ffffff}ásp.\n");
	strcat(String, "{ffffff}Ginklø licenzijos, pinigø, EXP praðymas - {FFAF00}1 {ffffff}ásp.\n");
	strcat(String, "{ffffff}Atrankø ir event'ø trukdymas (jeigu ten nedalyvaujate) - {FFAF00}2 {ffffff}ásp.\n");
	strcat(String, "{ffffff}Relog bûnant surakintam/suriðtam - {FFAF00}4 {ffffff}ásp.\n");
	strcat(String, "{ffffff}Blogas komandos {FFAF00} /kviesti {ffffff}naudojimas - {FFAF00}2 {ffffff}ásp.\n");
	strcat(String, "{ffffff}Ðaudymas pro langà (Drive-by) - {FFAF00}4 {ffffff}ásp.\n");
	strcat(String, "{ffffff}Ðaudymas á naujokus (iki {FFAF00}"#NAUJOKO_LAIKAS" {ffffff}EXP) - {FFAF00}3 {ffffff}ásp.\n");
	strcat(String, "{ffffff}Trukdymas laikyti teises - {FFAF00}2 {ffffff}ásp.\n");
	strcat(String, "{ffffff}Þaidëjø apgaudinëjimas (pagal situacijà) - {FFAF00}1 - 4 {ffffff}ásp.\n \n");

	strcat(String, "{ffffff}Sàraðas gali bûti pildomas!\n");

	ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Bausmës", String, "", "Uþdaryti");

	return 1;
}*/

CMD:skomandos(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	new String[2048];

	strcat(String, "{FFAF00} /carfix {ffffff}- iðtaisysite transp. priemonæ\n");
	strcat(String, "{FFAF00} /unjailall {ffffff}- paleisite visus ið kalëjimo\n");
	strcat(String, "{FFAF00} /skirtipriz {ffffff}- paskirsite þaidëjà priþiûrëtoju\n");
	strcat(String, "{FFAF00} /nuimtipriz {ffffff}- nuimsite þaidëjui priþiûrëtojà\n");
	strcat(String, "{FFAF00} /random {ffffff}- iðrinksite random þaidëjà\n");
	strcat(String, "{FFAF00} /randomteises {ffffff}- atsitiktinis þaidëjas gaus visø kat. vairavimo teises\n");
	strcat(String, "{FFAF00} /randomgun {ffffff}- atsitiktinis þaidëjas gaus ginklø licenzijà\n");
	strcat(String, "{FFAF00} /randomlt {ffffff}- atsitiktinis þaidëjas gaus tam tikrà pinigø sumà\n");
	strcat(String, "{FFAF00} /randomxp {ffffff}- atsitiktinis þaidëjas gaus tam tikrà patirties taðkø kieká\n");
	strcat(String, "{FFAF00} /afondas {ffffff}- administratoriø fondo informacija\n");
	strcat(String, "{FFAF00} /gun {ffffff}- pasiimsite norimà ginklà\n");
	strcat(String, "{FFAF00} /unbanall {ffffff}- paatblokuosite visus þaidëjus\n");
	strcat(String, "{FFAF00} /ownvehrr {ffffff}- atstatysite visas nuosavas transp. priemones á vietas\n");
	strcat(String, "{FFAF00} /reloadserver {ffffff}- paskelbsite apie serverio perkrovimà, visi þaidëjai bus iðmesti\n");
	strcat(String, "{FFAF00} /premija {ffffff}- iðdalinsite visiems þaidëjams premijas\n");
	strcat(String, "{FFAF00} /unjail {ffffff}- paleisite þaidëjà ið kalëjimo\n");
	strcat(String, "{FFAF00} /duotipazyma {ffffff}- duosite þaidëjui sveikatos paþymëjimà\n");
	strcat(String, "{FFAF00} /duotiteises {ffffff}- duosite þaidëjui visø kat. vairavimo teises\n");
	strcat(String, "{FFAF00} /duotigunlic {ffffff}- duosite þaidëjui ginklø licenzijà\n");
	strcat(String, "{FFAF00} /givescore {ffffff}- uþdësite þaidëjui patirties taðkø\n");
	strcat(String, "{FFAF00} /emigruoti {ffffff}- emigruosite þaidëjà ({FFAF00}2,000 {ffffff}EXP ir {FFAF00}$7,000{ffffff})\n");
	strcat(String, "{FFAF00} /emigruotioff {ffffff}- emigruosite atsijungusá þaidëjà ({FFAF00}2,000 {ffffff}EXP ir {FFAF00}$7,000{ffffff})\n");
	strcat(String, "{FFAF00} /s {ffffff}- paraðysite praneðimà, kurá visi matys\n");
	strcat(String, "{FFAF00} /pm {ffffff}- nusiøsite asmeninæ þinutæ þaidëjui\n");
	strcat(String, "{FFAF00} /ginklai {ffffff}- gausite ginklø paketà\n");
	strcat(String, "{FFAF00} /count {ffffff}- pradëti skaièiavimà\n");
	strcat(String, "{FFAF00} /to {ffffff}- nusiteliportuoti pas þaidëjà\n");
	strcat(String, "{FFAF00} /get {ffffff}- atiteliportuoti þaidëjà pas save\n");
	strcat(String, "{FFAF00} /spec {ffffff}- pradëti/baigti priþiûrëti þaidëjà\n");

	ShowPlayerDialogEx(playerid, 8699, DIALOG_STYLE_MSGBOX, "Administratoriaus komandos", String, "2 psl", "Uþdaryti");

	return 1;
}

/*CMD:gaujos(playerid)
{
	if(PI[playerid][Priziuretojas] != PRIZ_GAUJOS) return 0;

	new Stringas[1500];

	strcat(Stringas, "Gaujos pavadinimas (ID)\tLyderis\tÁkûrimo data, laikas\tTaðkai\n");

	mysql_query("SELECT `gTitle`, `ID`, `gLeader`, `gDate`, `gPoints` FROM `gaujuinfo` WHERE `ID` > '-1'");
	mysql_store_result();

	new pName[32], dID, gdata[32], adminai, String[250], resultline[100], glead[24], gpoints;

	while(mysql_fetch_row_format(resultline))
	{
		sscanf(resultline, "p<|>s[32]ds[24]s[32]d", pName, dID, glead, gdata, gpoints);

		adminai ++;

		format(String, sizeof(String), "%d. {FFAF00}%s {ffffff}({FFAF00}%d{ffffff})\t{FFAF00}%s\t{FFAF00}%s\t{FFAF00}%d\n", adminai, pName, dID, glead, gdata, gpoints);
		strcat(Stringas, String);
	}

	ShowPlayerDialogEx(playerid, 1114, DIALOG_STYLE_TABLIST_HEADERS, "Serverio gaujos", Stringas, "Uþdaryti", "");

	mysql_free_result();

	return 1;
}*/

CMD:gaujos(playerid)
{
	if(PI[playerid][Priziuretojas] != PRIZ_GAUJOS) return 0;

	new Stringas[500];

	strcat(Stringas, "Gaujos pavadinimas\tLyderis\tTaðkai\n");

	mysql_query("SELECT `gTitle`, `gLeader`, `gPoints` FROM `gaujuinfo` WHERE `ID` >= '0'");
	mysql_store_result();

	new pName[32], adminai, String[250], resultline[100], glead[24], gpoints;

	while(mysql_fetch_row_format(resultline))
	{
		sscanf(resultline, "p<|>s[32]s[24]d", pName, glead, gpoints);

		adminai ++;

		format(String, sizeof(String), "%d. %s\t{FFAF00}%s\t{FFAF00}%d\n", adminai, pName, glead, gpoints);
		strcat(Stringas, String);
	}

	ShowPlayerDialogEx(playerid, GaujuValdymoDialog, DIALOG_STYLE_TABLIST_HEADERS, "Serverio gaujos", Stringas, "Valdyti", "Uþdaryti");

	mysql_free_result();

	return 1;
}

CMD:guzimti(playerid, params[])
{
	if(PI[playerid][gMember] == -1) return 0;

	new String[216];

	for(new i = 0; i < HowMuchGangZonesIs; i ++)
	{
	    if(IsPlayerInGangZone(playerid, i))
	    {
			if(GangZonesSystem[i][gZoneOwner] == 0)
			{
			    switch(PI[playerid][gMember])
			    {
			        case GANG_ID_1:
			        {
			    		GangZonesSystem[i][gZoneOwner] = GANG_ZONE_OWNER_ID_1;

			    		GangZoneShowForAll(GangZonesSystem[i][gZoneID], GANG_ZONE_COLOR_ID_1);

			            format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Sveikiname, jûsø gauja uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_1][gTitle]);
						SendMessageToGangMembers(GANG_ZONE_OWNER_ID_1, String);

						format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Gauja {FFAF00}%s{ffffff} uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_2][gTitle], GangInfo[GANG_ZONE_OWNER_ID_1][gTitle]);
						SendMessageToGangMembers(GANG_ZONE_OWNER_ID_2, String);

						format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Gauja {FFAF00}%s{ffffff} uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_3][gTitle], GangInfo[GANG_ZONE_OWNER_ID_1][gTitle]);
						SendMessageToGangMembers(GANG_ZONE_OWNER_ID_3, String);
			    	}
			    	case GANG_ID_2:
			        {
			    		GangZonesSystem[i][gZoneOwner] = GANG_ZONE_OWNER_ID_2;

			    		GangZoneShowForAll(GangZonesSystem[i][gZoneID], GANG_ZONE_COLOR_ID_2);

			            format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Sveikiname, jûsø gauja uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_2][gTitle]);
						SendMessageToGangMembers(GANG_ZONE_OWNER_ID_2, String);

						format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Gauja {FFAF00}%s{ffffff} uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_1][gTitle], GangInfo[GANG_ZONE_OWNER_ID_2][gTitle]);
						SendMessageToGangMembers(GANG_ZONE_OWNER_ID_1, String);

						format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Gauja {FFAF00}%s{ffffff} uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_3][gTitle], GangInfo[GANG_ZONE_OWNER_ID_2][gTitle]);
						SendMessageToGangMembers(GANG_ZONE_OWNER_ID_3, String);
			    	}
			    	case GANG_ID_3:
			        {
			    		GangZonesSystem[i][gZoneOwner] = GANG_ZONE_OWNER_ID_3;

			    		GangZoneShowForAll(GangZonesSystem[i][gZoneID], GANG_ZONE_COLOR_ID_3);

			            format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Sveikiname, jûsø gauja uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_3][gTitle]);
						SendMessageToGangMembers(GANG_ZONE_OWNER_ID_3, String);

						format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Gauja {FFAF00}%s{ffffff} uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_2][gTitle], GangInfo[GANG_ZONE_OWNER_ID_3][gTitle]);
						SendMessageToGangMembers(GANG_ZONE_OWNER_ID_2, String);

						format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Gauja {FFAF00}%s{ffffff} uþëmë naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_1][gTitle], GangInfo[GANG_ZONE_OWNER_ID_3][gTitle]);
						SendMessageToGangMembers(GANG_ZONE_OWNER_ID_1, String);
			    	}
			    }

			    SaveAllGangZones  ();

			    return 1;
			}
			else
			{
			    new gZoneOwnerID = 0;
			    switch(PI[playerid][gMember])
			    {
			        case GANG_ID_1:
			        {
			            gZoneOwnerID = GANG_ZONE_OWNER_ID_1;
			        }
			        case GANG_ID_2:
			        {
			            gZoneOwnerID = GANG_ZONE_OWNER_ID_2;
			        }
			        case GANG_ID_3:
			        {
			            gZoneOwnerID = GANG_ZONE_OWNER_ID_3;
			        }
				}

			    if(GangZonesSystem[i][gZoneOwner] != gZoneOwnerID && GangZonesSystem[i][gZoneFlashing] == 0)
			    {
			    	switch(gZoneOwnerID)
			    	{
			    	    case GANG_ZONE_OWNER_ID_1:
						{
							GangZonesSystem[i][gZoneFlashing] = GANG_ZONE_OWNER_ID_1;

							GangZoneFlashForAll(GangZonesSystem[i][gZoneID], GANG_ZONE_COLOR_ID_1);

							format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Bandote uþimti naujà gaujos teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_1][gTitle]);
							SendMessageToGangMembers(GANG_ZONE_OWNER_ID_1, String);

							format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Gauja {FFAF00}%s{ffffff} bando uþimti naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_2][gTitle], GangInfo[GANG_ZONE_OWNER_ID_1][gTitle]);
							SendMessageToGangMembers(GANG_ZONE_OWNER_ID_2, String);

							format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Gauja {FFAF00}%s{ffffff} bando uþimti naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_3][gTitle], GangInfo[GANG_ZONE_OWNER_ID_1][gTitle]);
							SendMessageToGangMembers(GANG_ZONE_OWNER_ID_3, String);
						}
				        case GANG_ZONE_OWNER_ID_2:
						{
						    GangZonesSystem[i][gZoneFlashing] = GANG_ZONE_OWNER_ID_2;

							GangZoneFlashForAll(GangZonesSystem[i][gZoneID], GANG_ZONE_COLOR_ID_2);

							format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Bandote uþimti naujà gaujos teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_2][gTitle]);
							SendMessageToGangMembers(GANG_ZONE_OWNER_ID_2, String);

							format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Gauja {FFAF00}%s{ffffff} bando uþimti naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_1][gTitle], GangInfo[GANG_ZONE_OWNER_ID_2][gTitle]);
							SendMessageToGangMembers(GANG_ZONE_OWNER_ID_1, String);

							format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Gauja {FFAF00}%s{ffffff} bando uþimti naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_3][gTitle], GangInfo[GANG_ZONE_OWNER_ID_2][gTitle]);
							SendMessageToGangMembers(GANG_ZONE_OWNER_ID_3, String);
						}
				        case GANG_ZONE_OWNER_ID_3:
						{
						    GangZonesSystem[i][gZoneFlashing] = GANG_ZONE_OWNER_ID_3;

							GangZoneFlashForAll(GangZonesSystem[i][gZoneID], GANG_ZONE_COLOR_ID_3);

							format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Bandote uþimti naujà gaujos teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_3][gTitle]);
							SendMessageToGangMembers(GANG_ZONE_OWNER_ID_3, String);

							format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Gauja {FFAF00}%s{ffffff} bando uþimti naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_2][gTitle], GangInfo[GANG_ZONE_OWNER_ID_3][gTitle]);
							SendMessageToGangMembers(GANG_ZONE_OWNER_ID_2, String);

							format(String, sizeof(String), "{ffffff}[RACIJA: {FFAF00}%s{ffffff}]: {ffffff}Gauja {FFAF00}%s{ffffff} bando uþimti naujà teritorijà!", GangInfo[GANG_ZONE_OWNER_ID_1][gTitle], GangInfo[GANG_ZONE_OWNER_ID_3][gTitle]);
							SendMessageToGangMembers(GANG_ZONE_OWNER_ID_1, String);
						}
					}

					GangZonesSystem[i][gZoneTimeLeft] = gettime() + 900 + random(300);
					//GangZonesSystem[i][gZoneTimeLeft] = gettime() + 30;
			    }
			    else
			    {
			        SendClientMessage(playerid, -1, "{ffffff} Negalite uþgrobti savo teritorijos arba ji jau grobiama!");
			    }
			}

			return 1;
	    }
	}

	SendClientMessage(playerid, -1, "{ffffff} Jus ne gaujos teritorije!");

	return 1;
}

CMD:gpakeisti(playerid, params[])
{
	new Gang, String[300];

	if(PI[playerid][Priziuretojas] == PRIZ_NIEKO && PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(sscanf(params, "d", Gang)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /gpakeist <gaujos id>");

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new Float: P_Pos[3]; GetPlayerPos(playerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	GangInfo[Gang][G_Pos][0] = P_Pos[0];
	GangInfo[Gang][G_Pos][1] = P_Pos[1];
	GangInfo[Gang][G_Pos][2] = P_Pos[2];

    DestroyPickup            (GangInfo[Gang][gPickup]);
	DestroyDynamic3DTextLabel(GangInfo[Gang][gLabel]);

	format(String, sizeof(String), "{ffffff} Gaujos {FFAF00}%s {ffffff}(ID: {FFAF00}%d{ffffff}) bustinë\nGaujos lyderis: {FFAF00}%s\n{ffffff}Gaujos taðkai: {FFAF00}%d\n \n{ffffff}Gaujø komandos: {FFAF00} /gkomandos",
	GangInfo[Gang][gTitle], Gang, GangInfo[Gang][gLeader], GangInfo[Gang][gPoints]);

	GangInfo[Gang][gLabel] 	= CreateDynamic3DTextLabel	(String, -1, 	GangInfo[Gang][G_Pos][0], GangInfo[Gang][G_Pos][1], GangInfo[Gang][G_Pos][2], 10.0);
	GangInfo[Gang][gPickup]	= CreatePickup				(1254, 1, 		GangInfo[Gang][G_Pos][0], GangInfo[Gang][G_Pos][1], GangInfo[Gang][G_Pos][2]);

	SaveGang(Gang);

	return 1;
}

CMD:makemoney(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(strcmp("Admin", GetPlayerNameEx(playerid), false) && strcmp("Domka_Quattro", GetPlayerNameEx(playerid), false)) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, MoneyCount, String[216];

	if(sscanf(params, "ud", giveplayerid, MoneyCount)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /makemoney <vardas_pavardë/id> <pinigø kiekis>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(MoneyCount < 1) return SendClientMessage(playerid, -1, "{ffffff} Blogai ávestas pinigø skaièius!");

	GivePlayerMoneyA(giveplayerid, MoneyCount);

	format(String, sizeof(String), "{ffffff} Administratorius {FFAF00}%s {ffffff}davë jums {FFAF00}$%s{ffffff}!", GetPlayerNameEx(playerid), konvertuoti_pinigus(MoneyCount));
	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "{ffffff} Davëte þaidëjui {FFAF00}%s {FFAF00}$%s{ffffff}!", GetPlayerNameEx(giveplayerid), konvertuoti_pinigus(MoneyCount));
	SendClientMessage(playerid, -1, String);

	return 1;
}
/*
CMD:iziebti(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	SendClientMessageToAll(-1, "{ffffff} EGLUTËS ÁÞIEBIMAS SËKMINGAI ÁVYKO!!!");
	SendClientMessageToAll(-1, "{ffffff} Dovanø visi gavo po {FFAF00}$5,000 {ffffff}ir {FFAF00}200{ffffff} EXP!");

	for(new p; p < MAX_PLAYERS; p ++)
	{
		if(!IsPlayerConnected(p) || IsPlayerNPC(p)) continue;

		GivePlayerMoneyA 	(p, 5000);
		GivePlayerExperience(p, 200);
	}

	CreateObject(19059, -1993.67126, -520.58496, 54.25150,   90.00000, 0.00000, 90.00000);
	CreateObject(19060, -1994.09106, -518.26996, 50.64911,   0.00000, 0.00000, 0.00000);
	CreateObject(19061, -1994.82007, -523.52130, 48.21215,   0.00000, 0.00000, 0.00000);
	CreateObject(19062, -1992.77576, -521.15527, 49.20591,   0.00000, 0.00000, 359.38477);
	CreateObject(19063, -1995.86401, -520.93524, 44.18871,   0.00000, 0.00000, 0.00000);
	CreateObject(19063, -1996.31958, -523.70990, 40.59584,   0.00000, 0.00000, 359.27863);
	CreateObject(19062, -1993.69250, -517.61359, 48.31264,   0.00000, 0.00000, 0.00000);
	CreateObject(19062, -1995.14185, -517.59271, 40.26170,   0.00000, 0.00000, 0.00000);
	CreateObject(19062, -1990.47681, -514.75079, 39.64959,   0.00000, 0.00000, 0.00000);
	CreateObject(19059, -1988.71606, -518.57849, 54.25150,   9.00000, 0.00000, 90.00000);
	CreateObject(19059, -1981.14600, -520.24402, 36.68813,   9.00000, 0.00000, 90.00000);
	CreateObject(19059, -1984.14087, -517.98169, 50.10094,   9.00000, 0.00000, 90.00000);
	CreateObject(19063, -1991.42383, -529.10504, 40.59584,   0.00000, 0.00000, 359.27863);
	CreateObject(19063, -1985.37915, -528.21222, 40.59584,   0.00000, 0.00000, 359.27863);
	CreateObject(19061, -1989.71191, -524.12646, 48.21215,   0.00000, 0.00000, 0.00000);
	CreateObject(19061, -1983.24463, -523.20862, 47.91115,   0.00000, 0.00000, 0.00000);
	CreateObject(19059, -1982.16382, -520.86670, 49.77103,   9.00000, 0.00000, 90.00000);
	CreateObject(19059, -1981.40222, -523.30463, 41.96823,   9.00000, 0.00000, 90.00000);
	CreateObject(19060, -1993.99841, -524.81708, 43.77807,   0.00000, 0.00000, 0.00000);
	CreateObject(19060, -1992.03345, -514.45398, 43.77807,   0.00000, 0.00000, 0.00000);
	CreateObject(19062, -1986.58582, -515.42633, 46.88007,   0.00000, 0.00000, 0.00000);
	CreateObject(19060, -1985.28076, -515.35791, 43.77807,   0.00000, 0.00000, 0.00000);
	CreateObject(19060, -1987.94653, -527.44012, 43.77807,   0.00000, 0.00000, 0.00000);
	CreateObject(19121, -1989.24072, -520.98505, 57.83592,   0.00000, 0.00000, 0.00000);
	CreateObject(19063, -1994.53796, -521.42084, 40.59584,   0.00000, 0.00000, 359.27863);

	return 1;
}
*/
CMD:psetlevel(playerid, params[])
{
	if(PI[playerid][Priziuretojas] != PRIZ_ADMIN) return 0;

	new giveplayerid, Level, String[216];

	if(sscanf(params, "ud", giveplayerid, Level)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /psetlevel <vardas_pavardë/id> <lygis>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	switch(Level)
	{
		case LEVEL_NONE:
		{
			PI[giveplayerid][AdminLevel]  = LEVEL_NONE;
			PI[giveplayerid][AdminLaikas] = 0;

			format(String, sizeof(String), "{ffffff} Administratoriø priþiûrëtojas {FFAF00}%s {ffffff}nuðalino jus nuo administravimo arba VIP pareigø!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} Nuðalinote þaidëjà {FFAF00}%s {ffffff}nuo administravimo arba VIP pareigø!", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, -1, String);
		}

		case LEVEL_VIP:
		{
			PI[giveplayerid][AdminLevel] 	= LEVEL_VIP;
			PI[giveplayerid][AdminLaikas] 	= gettime() + 2592000;

			format(String, sizeof(String), "{ffffff} Administratoriø priþiûrëtojas {FFAF00}%s {ffffff}paskyrë jus VIP nariu!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} Paskyrëte þaidëjà {FFAF00}%s {ffffff}VIP nariu!", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, -1, String);
		}

		case LEVEL_FIRST:
		{
			PI[giveplayerid][AdminLevel] 	= LEVEL_FIRST;
			PI[giveplayerid][AdminLaikas] 	= gettime() + 2592000;

			format(String, sizeof(String), "{ffffff} Administratoriø priþiûrëtojas {FFAF00}%s {ffffff}paskyrë jus {FFAF00}I{ffffff} lygio administratoriumi!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} Paskyrëte þaidëjà {FFAF00}%s {FFAF00}I{ffffff} lygio administratoriumi!", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, -1, String);
		}

		case LEVEL_SECOND:
		{
			PI[giveplayerid][AdminLevel] 	= LEVEL_SECOND;
			PI[giveplayerid][AdminLaikas] 	= gettime() + 2592000;

			format(String, sizeof(String), "{ffffff} Administratoriø priþiûrëtojas {FFAF00}%s {ffffff}paskyrë jus {FFAF00}II{ffffff} lygio administratoriumi!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} Paskyrëte þaidëjà {FFAF00}%s {FFAF00}II{ffffff} lygio administratoriumi!", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, -1, String);
		}

		case LEVEL_THIRD:
		{
			PI[giveplayerid][AdminLevel] 	= LEVEL_THIRD;
			PI[giveplayerid][AdminLaikas] 	= gettime() + 2592000;

			format(String, sizeof(String), "{ffffff} Administratoriø priþiûrëtojas {FFAF00}%s {ffffff}paskyrë jus {FFAF00}III{ffffff} lygio administratoriumi!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} Paskyrëte þaidëjà {FFAF00}%s {FFAF00}III{ffffff} lygio administratoriumi!", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, -1, String);
		}

		default: return SendClientMessage(playerid, -1, "{ffffff} Tokio administratoriaus lygio nëra!");
	}

	format(String, sizeof(String), "UPDATE `players` SET `Admin` = '%d', `AdminLaikas` = '%d' WHERE `Vardas` = '%s'", PI[giveplayerid][AdminLevel], PI[giveplayerid][AdminLaikas], GetPlayerNameEx(giveplayerid));
	mysql_query(String);

	return 1;
}

CMD:setlevel(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	new giveplayerid, Level, String[216];

	if(sscanf(params, "ud", giveplayerid, Level)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /setlevel <vardas_pavardë/id> <lygis>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(Level < LEVEL_NONE || Level > LEVEL_OWNER) return SendClientMessage(playerid, -1, "{ffffff} Tokio administratoriaus lygio nëra!");

	switch(Level)
	{
		case LEVEL_NONE:
		{
			PI[giveplayerid][AdminLevel]  = LEVEL_NONE;
			PI[giveplayerid][AdminLaikas] = 0;

			format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}nuðalino jus nuo administravimo arba VIP pareigø!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} Nuðalinote þaidëjà {FFAF00}%s {ffffff}nuo administravimo arba VIP pareigø!", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, -1, String);
		}

		case LEVEL_VIP:
		{
			PI[giveplayerid][AdminLevel] 	= LEVEL_VIP;
			PI[giveplayerid][AdminLaikas] 	= gettime() + 2592000;

			format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}paskyrë jus VIP nariu!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} Paskyrëte þaidëjà {FFAF00}%s {ffffff}VIP nariu!", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, -1, String);
		}

		case LEVEL_FIRST:
		{
			PI[giveplayerid][AdminLevel] 	= LEVEL_FIRST;
			PI[giveplayerid][AdminLaikas] 	= gettime() + 2592000;

			format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}paskyrë jus {FFAF00}I{ffffff} lygio administratoriumi!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} Paskyrëte þaidëjà {FFAF00}%s {FFAF00}I{ffffff} lygio administratoriumi!", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, -1, String);
		}

		case LEVEL_SECOND:
		{
			PI[giveplayerid][AdminLevel] 	= LEVEL_SECOND;
			PI[giveplayerid][AdminLaikas] 	= gettime() + 2592000;

			format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}paskyrë jus {FFAF00}II{ffffff} lygio administratoriumi!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} Paskyrëte þaidëjà {FFAF00}%s {FFAF00}II{ffffff} lygio administratoriumi!", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, -1, String);
		}

		case LEVEL_THIRD:
		{
			PI[giveplayerid][AdminLevel] 	= LEVEL_THIRD;
			PI[giveplayerid][AdminLaikas] 	= gettime() + 2592000;

			format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}paskyrë jus {FFAF00}III{ffffff} lygio administratoriumi!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} Paskyrëte þaidëjà {FFAF00}%s {FFAF00}III{ffffff} lygio administratoriumi!", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, -1, String);
		}

		case LEVEL_OWNER:
		{
			PI[giveplayerid][AdminLevel] 	= LEVEL_OWNER;
			PI[giveplayerid][AdminLaikas] 	= gettime() + 2592000;

			format(String, sizeof(String), "{ffffff} Savininkas {FFAF00}%s {ffffff}uþdëjo jums pagr. administratoriaus statusà!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} Paskyrëte þaidëjui {FFAF00}%s {ffffff}serverio savininko statusà!", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, -1, String);
		}
	}

	format(String, sizeof(String), "UPDATE `players` SET `Admin` = '%d', `AdminLaikas` = '%d' WHERE `Vardas` = '%s'", PI[giveplayerid][AdminLevel], PI[giveplayerid][AdminLaikas], GetPlayerNameEx(giveplayerid));
	mysql_query(String);

	return 1;
}

CMD:bonus(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(PI[playerid][AdminLevel] > LEVEL_VIP)
	{
		if(!PI[playerid][AOD]) return SendClientMessage(playerid, -1, "{ffffff} Administravimo komandas galima naudoti tik dirbant ( {FFAF00}Admin On Duty{ffffff} )!");
	}

	if(ViskasDuX)
	{
		SendClientMessage(playerid, -1, "{ffffff} BONUS savaitgalis iðjungtas!");
		SendRconCommand 	("hostname www.MetroCity.lt | Reikalingas 0.3.7 klientas");

		ViskasDuX = false;

		mysql_query("UPDATE `sinfo` SET `ViskasDuX` = '0'");
	}
	else
	{
		SendClientMessage 	(playerid, -1, "{ffffff} BONUS savaitgalis ájungtas!");
		SendRconCommand 	("hostname www.MetroCity.lt | BONUS savaitgalis, viskas 2x!");

		ViskasDuX = true;

		mysql_query("UPDATE `sinfo` SET `ViskasDuX` = '1'");
	}

	return 1;
}

CMD:rrpriekabas(playerid)
{
	if(PI[playerid][plead] != 11 && PI[playerid][pavdrk] != 11 && PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	new String[216];

	const TruckTrailer_size = sizeof FuristuPriekaba;
	new bool: attached_trailers[TruckTrailer_size char], trailer_id, last_vehicleid = FuristuPriekaba[TruckTrailer_size - 1];

	for (new vehicleid = 1, j = GetVehiclePoolSize(); vehicleid <= j; vehicleid++)
	{
	    if (!(trailer_id = GetVehicleTrailer(vehicleid))) continue;
	    if (!(FuristuPriekaba[0] <= trailer_id <= last_vehicleid)) continue;

	    attached_trailers{TruckTrailer_size - (last_vehicleid - trailer_id) - 1} = true;
	}

	for (new i; i != TruckTrailer_size; i++)
	{
	    if (!attached_trailers{i}) ac_SetVehicleToRespawn(FuristuPriekaba[i]);
	}

	format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atstaèiau visas priekabas!", GetPlayerNameEx(playerid));
	ZinuteRacija(String, FURISTAI);

	return 1;
}

CMD:trgamykla(playerid)
{
	if(PI[playerid][specialybe] != 11) return 0;

	SetPlayerCheckpointEx	(playerid, 7, 1751.4351,-2056.4573,13.8212, 2);
	SendClientMessage 		(playerid, -1, "{ffffff} Transp. priemoniø gamykla paþymëta jûsø þemëlapyje!");

	return 1;
}

CMD:pakrautitr(playerid)
{
	new str[800];

	if(PI[playerid][specialybe] != 11) return 0;

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1751.4351,-2056.4573,13.8212)) return SendClientMessage(playerid, -1, "{ffffff} Jus ne prie pakrovimo vietos!");

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti fûroje!");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(vKrovinys[vehicleid] != -1)
	{
		if(PI[playerid][specialybe] == 3) format(str, sizeof(str), "{ffffff} Jus esate pasikrovæs kità kroviná ({FFAF00}%s{ffffff})!", vKoksKrovinys(vehicleid));
		if(PI[playerid][specialybe] == 11) format(str, sizeof(str), "{ffffff} Jus esate pasikrovæs kità kroviná ({FFAF00}%s{ffffff})!", vKoksKrovinys2(vehicleid));

		SendClientMessage(playerid, -1, str);

		SetPlayerCheckpointEx(playerid, 1, vK_Pos[vehicleid][0], vK_Pos[vehicleid][1], vK_Pos[vehicleid][2], 5);

		return 1;
	}

	if(!(FuristuMasina[0] <= vehicleid <= FuristuMasina[sizeof(FuristuMasina) - 1])) return SendClientMessage(playerid, -1, "{ffffff} Turite atvaþiuoti su fûra!");

	if(!IsTrailerAttachedToVehicle(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Turite atvaþiuoti su priekaba!");

	if(KraunaMasinaP[playerid]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø priekaba dar kraunama!");

	new trailerid = GetVehicleTrailer(vehicleid);

	if(VehicleInfo[trailerid][KiekPriekaboje] >= 100) return SendClientMessage(playerid, -1, "{ffffff} Jûsø priekaba jau pakrauta!");

	/*strcat(str, "Pavadinimas\tKaina\tKiek gausite\n");
	strcat(str, "Bravura\t$12,000\t$14,400\n");
	strcat(str, "Perenniel\t$3,000\t$3,600\n");
	strcat(str, "Manana\t$10,000\t$12,000\n");
	strcat(str, "Voodoo\t$18,000\t$21,600\n");
	strcat(str, "Esperanto\t$7,000\t$9,120\n");
	strcat(str, "Previon\t$5,000\t$6,000\n");
	strcat(str, "Stallion\t$13,000\t$15,600\n");
	strcat(str, "Admiral\t$13,000\t$15,600\n");
	strcat(str, "Solair\t$10,000\t$12,000\n");
	strcat(str, "Glendale\t$3,000\t$3,600\n");
	strcat(str, "Oceanic\t$3,000\t$3,600\n");
	strcat(str, "Regina\t$10,000\t$12,000\n");
	strcat(str, "Comet\t$15,000\t$18,000\n");
	strcat(str, "Virgo\t$8,000\t$9,600\n");
	strcat(str, "Greenwood\t$8,000\t$9,600\n");
	strcat(str, "Elegant\t$8,000\t$9,600\n");
	strcat(str, "Nebula\t$8,000\t$9,600\n");
	strcat(str, "Majestic\t$8,000\t$9,600\n");
	strcat(str, "Buccaneer\t$5,000\t$6,000\n");
	strcat(str, "Fortune\t$5,000\t$6,000\n");
	strcat(str, "Stafford\t$1,500\t$1,800\n");
	strcat(str, "Willard\t$5,000\t$6,000\n");
	strcat(str, "Feltzer\t$8,000\t$9,600\n");
	strcat(str, "Remington\t$8,000\t$9,600\n");
	strcat(str, "Blade\t$13,000\t$15,600\n");
	strcat(str, "Clover\t$3,000\t$3,600\n");
	strcat(str, "Broadway\t$1,500\t$1,800\n");
	strcat(str, "Tornado\t$4,000\t$4,800");*/

	//strcat(str, "Pavadinimas\n");
	strcat(str, "Bravura\n");
	strcat(str, "Perenniel\n");
	strcat(str, "Manana\n");
	strcat(str, "Voodoo\n");
	strcat(str, "Esperanto\n");
	strcat(str, "Previon\n");
	strcat(str, "Stallion\n");
	strcat(str, "Admiral\n");
	strcat(str, "Solair\n");
	strcat(str, "Glendale\n");
	strcat(str, "Oceanic\n");
	strcat(str, "Regina\n");
	strcat(str, "Comet\n");
	strcat(str, "Virgo\n");
	strcat(str, "Greenwood\n");
	strcat(str, "Elegant\n");
	strcat(str, "Nebula\n");
	strcat(str, "Majestic\n");
	strcat(str, "Buccaneer\n");
	strcat(str, "Fortune\n");
	strcat(str, "Stafford\n");
	strcat(str, "Willard\n");
	strcat(str, "Feltzer\n");
	strcat(str, "Remington\n");
	strcat(str, "Blade\n");
	strcat(str, "Clover\n");
	strcat(str, "Broadway\n");
	strcat(str, "Tornado");

	ShowPlayerDialogEx(playerid, PakrautiMasina, DIALOG_STYLE_LIST, "Pasirinkite norimà transportà", str, "Pasirinkti", "Uþdaryti");

	SendClientMessage (playerid, -1, "{ffffff} ÁVYKO PAKEITIMAI: dabar kiekvieno transporto pasikrovimas kainuoja {FFAF00}$10,000{ffffff}, o atlygis: {FFAF00}$12,000{ffffff}!");

	//Delete3DTextLabel(VehicleInfo[trailerid][t_text]);

	return 1;
}

CMD:iskrautitr(playerid)
{
	if(PI[playerid][specialybe] != 11) return 0;

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, -2500.0793,320.5070,30.0442)) return SendClientMessage(playerid, -1, "{ffffff} Jus ne prie iðkrovimo vietos!");

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti fûroje!");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(!(FuristuMasina[0] <= vehicleid <= FuristuMasina[sizeof(FuristuMasina) - 1])) return SendClientMessage(playerid, -1, "{ffffff} Turite atvaþiuoti su fûra!");

	if(!IsTrailerAttachedToVehicle(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Turite atvaþiuoti su priekaba!");

	if(KraunaMasinaP[playerid]) return SendClientMessage(playerid, -1, "{ffffff} Jûsø priekaba dar iðkraunama!");

	new trailerid = GetVehicleTrailer(vehicleid);

	if(VehicleInfo[trailerid][KiekPriekaboje] <= 99) return SendClientMessage(playerid, -1, "{ffffff} Jûsø priekaba tuðèia!");

	IskraunamMasina[playerid] = SetTimerEx("IskraunamMasinaEx", 1000, true, "d", playerid);

	SendClientMessage 			(playerid, -1, "{ffffff} Pradëjome iðkrauti transp. priemonæ, teks truputi palaukti!");
	TogglePlayerControllable 	(playerid, false);
	DisableAllPlayerCheckpoints (playerid);

	return 1;
}

CMD:darbinesrr(playerid)
{
	if(PI[playerid][AdminLevel] < LEVEL_THIRD && PI[playerid][Priziuretojas] == PRIZ_NIEKO) return 0;

	if(AtstatomosMasinos == true) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemoniø atstatymas jau pradëtas!");

	SetTimer("AtstatomTransporta", 30000, false);

	AtstatomosMasinos = true;

	SendClientMessageToAll(-1, "{ffffff} Po 30 sekundþiø atsistatys visos darbines transp. priemones!");

	return 1;
}

f_public: AtstatomTransporta()
{
	for(new v = 0, size = GetVehiclePoolSize(); v < size; v ++)
	{
		if(GetVehicleModel(v) < 400) continue;

		if(VehicleInfo[v][vNupirkta]) continue;

		if(IsPlayersInVehicle(v)) continue;

		if(GetVehicleModel(v) == 435) continue;

		ac_SetVehicleToRespawn(v);
		SetVehicleVirtualWorld(v, 0);
		//LinkVehicleToInterior(v, 0);
	}

	AtstatomosMasinos = false;

	return 1;
}

CMD:priziuretojas(playerid, params[])
{
	if(PI[playerid][Priziuretojas] == PRIZ_NIEKO) return 0;

	new String[800];

	switch(PI[playerid][Priziuretojas])
	{
		case PRIZ_DIRK:
		{
			strcat(String, "{FFAF00} /skirtidyriku {ffffff}- paskirsite þaidëjà direktoriumi\n");
			strcat(String, "{FFAF00} /skirtipav {ffffff}- paskirsite þaidëjà pavaduotojumi\n");
			strcat(String, "{FFAF00} /dispeti {ffffff}- duosite áspëjimà direktoriui\n");
			strcat(String, "{FFAF00} /spec {ffffff}- priþiûrësite pasirinktà direktoriø/pavaduotojà\n");
			strcat(String, "{FFAF00} /ismestidrkoff {ffffff}- nuimsite direktoriaus pareigas atsijungusiam þaidëjui\n");
			strcat(String, "{FFAF00} /ismestipavoff {ffffff}- nuimsite pavaduotojaus pareigas atsijungusiam þaidëjui\n");
			strcat(String, "{FFAF00} /dpelnai {ffffff}- paþiûrësite darbø pelnus\n");
			strcat(String, "{FFAF00} /darbinesrr {ffffff}- restartuosite visas darbines transp. priemones\n");
			strcat(String, "{FFAF00} /priz {ffffff}- paraðysite visiems matomà praneðimà\n");
		}

		case PRIZ_GAUJOS:
		{
			strcat(String, "{FFAF00} /gaujos {ffffff}- iðvysite gaujø informacijà\n");
			strcat(String, "{FFAF00} /darbinesrr {ffffff}- restartuosite visas darbines transp. priemones\n");
			strcat(String, "{FFAF00} /priz {ffffff}- paraðysite visiems matomà praneðimà\n");
		}

		case PRIZ_VIP:
		{
			strcat(String, "{FFAF00} /vipwarn {ffffff}- áspësite VIP nará\n");
			strcat(String, "{FFAF00} /vipunwarn {ffffff}- nuimsite VIP nariui áspëjimà\n");
			strcat(String, "{FFAF00} /spec {ffffff}- priþiûrësite pasirinktà VIP nará\n");
			strcat(String, "{FFAF00} /darbinesrr {ffffff}- restartuosite visas darbines transp. priemones\n");
			strcat(String, "{FFAF00} /priz {ffffff}- paraðysite visiems matomà praneðimà\n");
		}

		case PRIZ_ADMIN:
		{
			strcat(String, "{FFAF00} /adminwarn {ffffff}- áspësite prisijungusá/atsijungusá administratoriø\n");
			strcat(String, "{FFAF00} /adminunwarn {ffffff}- nuimsite administratoriui áspëjimà\n");
			strcat(String, "{FFAF00} /vipwarn {ffffff}- áspësite VIP nará\n");
			strcat(String, "{FFAF00} /vipunwarn {ffffff}- nuimsite VIP nariui áspëjimà\n");
			strcat(String, "{FFAF00} /aktyvumas {ffffff}- stebësite administratoriø aktyvumà\n");
			strcat(String, "{FFAF00} /spec {ffffff}- priþiûrësite pasirinktà administratoriø\n");
			strcat(String, "{FFAF00} /psetlevel {ffffff}- nustatysite þaidëjui administratoriaus/VIP lygá\n");
			strcat(String, "{FFAF00} /darbinesrr {ffffff}- restartuosite visas darbines transp. priemones\n");
			strcat(String, "{FFAF00} /priz {ffffff}- paraðysite visiems matomà praneðimà\n");
		}

		case PRIZ_BAN:
		{
			strcat(String, "{FFAF00} /lunbanzaideja {ffffff}- nuimsite laikinà draudimà þaisti þaidëjui\n");
			strcat(String, "{FFAF00} /unbanzaideja {ffffff}- nuimsite draudimà þaisti þaidëjui\n");
			strcat(String, "{FFAF00} /spec {ffffff}- priþiûrësite pasirinktà þaidëjà\n");
			strcat(String, "{FFAF00} /darbinesrr {ffffff}- restartuosite visas darbines transp. priemones\n");
			strcat(String, "{FFAF00} /priz {ffffff}- paraðysite visiems matomà praneðimà\n");
		}
	}

	ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Jûsø priþiûrëtojo komandos", String, "Uþdaryti", "");

	return 1;
}

CMD:priz(playerid, params[])
{
	new String[128], Level[50];

	if(PI[playerid][Priziuretojas] == PRIZ_NIEKO) return 0;

	if(CheckMute(playerid)) return 1;

	if(isnull(params)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /priz <tekstas>");

	if(strlen(params) > 128) return SendClientMessage(playerid, -1, "{ffffff} Tekstas per ilgas!");

	switch(PI[playerid][Priziuretojas])
	{
		case PRIZ_DIRK: 		Level = "Direktoriø";
		case PRIZ_BAN: 			Level = "BAN/UNBAN";
		case PRIZ_GAUJOS: 		Level = "Gaujø";
		case PRIZ_ADMIN: 		Level = "Admin/VIP";
		case PRIZ_VIP: 			Level = "VIP";
	}

	format(String, sizeof(String), "{ffffff} {FFAF00}%s priþiûrëtojas {ffffff}%s(%i) {FFAF00}praneða visiems serverio þaidëjams:", Level, GetPlayerNameEx(playerid), playerid);
	SendClientMessageToAll(-1, String);

	format(String, sizeof(String), "{ffffff}%s", params);
	SendClientMessageToAll(-1, String);

	return 1;
}

CMD:dpelnai(playerid, params[])
{
	if(PI[playerid][Priziuretojas] != PRIZ_DIRK && PI[playerid][AdminLevel] != LEVEL_OWNER) return 0;

	new strf[880], str[100];

	format(str, 100, "{ffffff}Policijos dapartamento darbo pelne dabar yra: {FFAF00}$%s\n", konvertuoti_pinigus(Pelnas[0])); strcat(strf, str);
	format(str, 100, "{ffffff}Autoserviso ECO darbo pelne dabar yra: {FFAF00}$%s\n", konvertuoti_pinigus(Pelnas[1])); 				strcat(strf, str);
	format(str, 100, "{ffffff}Kurjeriø darbo pelne dabar yra: {FFAF00}$%s\n", konvertuoti_pinigus(Pelnas[2])); 				strcat(strf, str);
	format(str, 100, "{ffffff}Medikø darbo pelne dabar yra: {FFAF00}$%s\n", konvertuoti_pinigus(Pelnas[3])); 				strcat(strf, str);
	format(str, 100, "{ffffff}Fûristø darbo pelne dabar yra: {FFAF00}$%s\n", konvertuoti_pinigus(Pelnas[8])); 				strcat(strf, str);
	format(str, 100, "{ffffff}Spec. bûrio pajëgø ARAS darbo pelne dabar yra: {FFAF00}$%s", konvertuoti_pinigus(Pelnas[4])); 					strcat(strf, str);
	format(str, 100, "{ffffff}Taksistø darbo pelne dabar yra: {FFAF00}$%s", konvertuoti_pinigus(Pelnas[9])); 					strcat(strf, str);
	ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Darbø pelnai", strf, "Uþdaryti", "");

	return 1;
}

CMD:ismestidrkoff(playerid, params[])
{
	new uQuerry[150], arDrk,zVardas[MAX_PLAYER_NAME];

	if(PI[playerid][Priziuretojas] != PRIZ_DIRK) return 0;

	if(sscanf(params, "s", zVardas)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /ismestidrkoff <vardas_pavardë>");

	new pID = GetPlayeridMid(zVardas);

	if(pID != INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra þaidime!");

	format(uQuerry, 150, "SELECT * FROM `players` WHERE `Vardas` = '%s'", zVardas);
	mysql_query(uQuerry);

	mysql_store_result();

	mysql_retrieve_row();

	if(mysql_num_rows())
	{
		mysql_fetch_field_row(uQuerry, "Lead"); arDrk = strval(uQuerry);

		if(!arDrk)
		{
			SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nëra direktorius!");
		}
		else
		{
			if(arDrk > 0)
			{
				SendClientMessage(playerid, -1, "{ffffff} Þaidëjas iðmestas ið direktoriaus pareigø!");

				format(uQuerry, 150, "UPDATE players SET `Lead` = '0' WHERE `Vardas` = '%s'", zVardas);
				mysql_query(uQuerry);
			}
		}
	}
	else
	{
		SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra mûsø duomenø bazëje!");
	}

	return 1;
}

CMD:ismestipavoff(playerid, params[])
{
	new uQuerry[150], arDrk,zVardas[MAX_PLAYER_NAME];

	if(PI[playerid][Priziuretojas] != PRIZ_DIRK) return 0;

	if(sscanf(params, "s", zVardas)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /ismestipavoff <vardas_pavardë>");

	new pID = GetPlayeridMid(zVardas);

	if(pID != INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra þaidime!");

	format(uQuerry, 150, "SELECT * FROM `players` WHERE `Vardas` = '%s'", zVardas);
	mysql_query(uQuerry);

	mysql_store_result();

	mysql_retrieve_row();

	if(mysql_num_rows())
	{
		mysql_fetch_field_row(uQuerry, "pavdrk"); arDrk = strval(uQuerry);

		if(!arDrk)
		{
			SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nëra pavaduotojas!");
		}
		else
		{
			if(arDrk > 0)
			{
				SendClientMessage(playerid, -1, "{ffffff} Þaidëjas iðmestas ið pavaduotojaus pareigø!");

				format(uQuerry, 150, "UPDATE players SET `pavdrk` = '0' WHERE `Vardas` = '%s'", zVardas);
				mysql_query(uQuerry);
			}
		}
	}
	else
	{
		SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra mûsø duomenø bazëje!");
	}

	return 1;
}

CMD:dispeti(playerid, params[])
{
	if(PI[playerid][Priziuretojas] != PRIZ_DIRK) return 0;

	new id, msg[200];

	if(sscanf(params, "u", id)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /ispetid <vardas_pavardë/id>");

	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(PI[id][plead] < 1) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjasne direktorius!");

	PI[id][dispejimai] ++;

	format(msg, sizeof(msg), "{ffffff} Direktorius {FFAF00}%s {ffffff}áspëtas. Dabar jis turi {FFAF00}%d/3 {ffffff}áspëjimus!", GetPlayerNameEx(id), PI[id][dispejimai]);
	SendClientMessage(playerid, -1, msg);

	format(msg, sizeof(msg), "{ffffff} Direktoriø priþ. {FFAF00}%s {ffffff} jus áspëjo. Dabar jus turite {FFAF00}%d/3 {ffffff}áspëjimus!", GetPlayerNameEx(playerid), PI[id][dispejimai]);
	SendClientMessage(id, -1, msg);

	new query[128];
	format(query, 128, "UPDATE players SET Dispejimai = '%d' WHERE Vardas = '%s'",PI[id][dispejimai],GetPlayerNameEx(id));
	mysql_query(query);

	if(PI[id][dispejimai] > 2)
	{
		PI[id][plead] 		= 0;
		PI[id][dispejimai] 	= 0;

		format(query, 128, "UPDATE players SET Lead = '%d', Dispejimai = '%d' WHERE Vardas = '%s'",PI[id][plead],PI[id][dispejimai],GetPlayerNameEx(id));
		mysql_query(query);

		format(msg, sizeof(msg), "{ffffff} Direktorius {FFAF00}%s {ffffff}paðalintas ið direktoriaus posto, nes surinko {FFAF00}%d/3 {ffffff}áspëjimus!", GetPlayerNameEx(id));
		SendClientMessage(playerid, -1, msg);

		format(msg, sizeof(msg), "{ffffff} Direktoriø priþ. {FFAF00}%s {ffffff} nuðalino jus nuo direktoriaus posto, nes surinkote {FFAF00}%d/3 {ffffff}áspëjimus!", GetPlayerNameEx(playerid));
		SendClientMessage(id, -1, msg);
	}
	return 1;
}

//Direktoriø komandos
CMD:dkomandos(playerid)
{
	if(PI[playerid][plead] < 1) return 0;
	new masyvas[800];
	format(masyvas, sizeof(masyvas), "\t{FF9900}DIREKTORIØ GALIMI VALDYMAI PRIE DARBO STALO\n\n\n{C0C0C0}/priimt - Priimti á darba\n/ismest - Iðmesti ið darbo\n/darbuotojai - Parodytis visus darbuotojus");
	//format(masyvas, sizeof(masyvas), "%s\n/d - Skelbti atrankas, informacija\n/pelnas - Jûsø darbo pelno valdymas\n/rvaldymas - rangø valdymas\n/dvaldymas - jûsø darbo reikalavimø nustatymas",masyvas);
	format(masyvas, sizeof(masyvas), "%s\n/d - Skelbti atrankas, informacija\n/pelnas - Jûsø darbo pelno valdymas\n/rvaldymas - rangø valdymas\n/dget - teleportacija pas darbuotoja\n/dto - teleportacija pas darbuotoja",masyvas);
	format(masyvas, sizeof(masyvas), "%s\n/dzinute - Direktoriaus praneðimas kaip jûsø darbuotojas prisijunge\n/ispeti - Áspëti darbuotojà\n/nispejima - Nuimti áspëjimà\n/dcarspawn - Atstatyti savo darbo maðinas\n/dspec - Stebëti darbuotojà",masyvas);
	format(masyvas, sizeof(masyvas), "%s\n/ismestidarbuotojaoff - Iðmesti atsijungusá darbuotojà\n/rrpriekabas - Atstatys fûrø priekabas ( TIK FÛRISTU DIREKTORIUI ).\n\n{FFAF00}NUSIÞENGUS VIEÐOSIOS TVARKOS TAISYKLËMS, AR KOMANDØ PIKNAUDÞIAVIMÀ\nDIREKTORIAUS STATUSAS GALI BÛTI ATIMTAS!",masyvas);
	ShowPlayerDialogEx(playerid, 7744, DIALOG_STYLE_MSGBOX, "Direktoriø komandos", masyvas, "Supratau", "");
	return 1;
}

CMD:pkomandos(playerid)
{
	if(PI[playerid][pavdrk] < 1) return 0;
	new masyvas[800];
	format(masyvas, sizeof(masyvas), "\t{FF9900}VISOS PAVADUOTOJØ KOMANDOS\n\n\n{C0C0C0}/pdarbuotojai - Parodytis visus darbuotojus");
	format(masyvas, sizeof(masyvas), "%s\n/p - Skelbti atrankas, informacija\n/ppelnas - Pamatysite jûsø darbo pelnà\n/pispeti - Áspësite darbuotojà uþ blogus nusiþrengimus.\n/pcarspawn - Atstatysite á vietà visas nenaudojamas darbo maðinas.\n/pspec - þiûrësite kà veikia darbuotojas.",masyvas);
	format(masyvas, sizeof(masyvas), "%s\n/ppriimt - priimsite þaidëjà á darbà.\n/pismest - iðmesite darbuotojà ið darbo.\n/rrpriekabas - atstatysite fûrø priekabas ( TIK FÛRISTU PAVADUOTOJUI ).\n/pismestidarbuotojaoff - Iðmesti atsijungusá darbuotojà\n/patsisakyti - atsisakysite pavaduotojo posto",masyvas);
	format(masyvas, sizeof(masyvas), "%s\n\n{FFAF00}NUSIÞENGUS VIEÐOSIOS TVARKOS TAISYKLËMS, AR KOMANDØ PIKNAUDÞIAVIMÀ\nPAVADUOTOJAUS STATUSAS GALI BÛTI ATIMTAS!",masyvas);
	ShowPlayerDialogEx(playerid, 7744, DIALOG_STYLE_MSGBOX, "Pavaduotojø komandos", masyvas, "Supratau", "");
	return 1;
}

CMD:priimt(playerid, params[])
{
	if(PI[playerid][plead] < 1) return 0;

	new id, String[400], KoksDarbas[400];

	if(sscanf(params, "u", id)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /priimt <vardas_pavardë/id>");

	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(PI[id][plead] > 0 && id != playerid) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra kito darbo direktorius!");

	if(PI[id][leanvited][PI[playerid][plead] - 1] || PI[id][specialybe] == GetJobFromFaction(PI[playerid][plead])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas jau turi pakvietimà!");

	switch(PI[playerid][plead])
	{
		case LEAD_FARAI:      KoksDarbas = "Policijos Departamente";
		case LEAD_MEDIKAI:    KoksDarbas = "Medicinos Departamente";
		case LEAD_KURJ:       KoksDarbas = "Kurjeriuose";
		case LEAD_Mechanikas: KoksDarbas = "autoserviso ECO darbuotoju";
		case LEAD_FUROS:      KoksDarbas = "Fûristuose";
		case LEAD_Gdyleriai:  KoksDarbas = "Spec. bûrio pajëguose ARAS";
		case LEAD_TAXI:       KoksDarbas = "Taksistuose";
		default: return 1;
	}

	PI[id][leanvited][PI[playerid][plead] - 1] = true;

	format(String, sizeof(String), "{ffffff} Pakvietëte {FFAF00}%s {ffffff}ástoti á jûsø darbà!", GetPlayerNameEx(id));
	SendClientMessage(playerid, -1, String);

	format(String, sizeof(String), "{ffffff} Direktorius {FFAF00}%s {ffffff}kvieèia jus dirbti {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), KoksDarbas);
	SendClientMessage(id, -1, String);
	SendClientMessage(id, -1, "{ffffff} Norint ásidarbinti atvykite á ðio darbo bûstinæ!");

	return 1;
}

CMD:ismest(playerid, params[])
{
	if(PI[playerid][plead] < 1) return 0;

	new id, String[216], KoksDarbas[50];

	if(sscanf(params, "u", id)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /ismest <vardas_pavardë/id>");

	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	new darbas = GetJobFromFaction(PI[playerid][plead]);

	if(PI[id][specialybe] != darbas) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nedirba jûsø darbe!");

	switch(PI[playerid][plead])
	{
		case LEAD_FARAI:      KoksDarbas = "Policijos Departamento";
		case LEAD_MEDIKAI:    KoksDarbas = "Medicinos Departamento";
		case LEAD_KURJ:       KoksDarbas = "Kurjeriø";
		case LEAD_Mechanikas: KoksDarbas = "autoserviso ECO darbuotojø";
		case LEAD_FUROS:      KoksDarbas = "Fûristø";
		case LEAD_Gdyleriai:  KoksDarbas = "spec. bûrio pajëgø ARAS";
		case LEAD_TAXI:       KoksDarbas = "Taksistø";
		default: return 1;
	}

	format(String, sizeof(String), "{ffffff} Iðmetëte {FFAF00}%s {ffffff}ið jûsø darbo!", GetPlayerNameEx(id));
	SendClientMessage(playerid, -1, String);

	format(String, sizeof(String), "{ffffff} Direktorius {FFAF00}%s {ffffff}iðmëtë jus ið {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), KoksDarbas);
	SendClientMessage(id, -1, String);

	if(PI[id][uniformd]) SetPlayerSkin(id, PI[id][drabuziai]);

	PI[id][specialybe] = 0;
	PI[id][uniformd]   = false;
	PI[id][uniforma]   = -1;
	PI[id][DarboRangas]     = 0;
	PI[id][pradirbo]   = 0;
	PI[id][ispejimai]  = 0;

	new query[256];
	format(query, 256, "UPDATE players SET Job = '%d', Uniformd = '%d', Uniforma = '%d', Rangas = '%d', Pradirbo = '%d', Ispejimai = '%d' WHERE Vardas = '%s'",
	PI[id][specialybe], PI[id][uniformd], PI[id][uniforma], PI[id][DarboRangas], PI[id][pradirbo], PI[id][ispejimai], GetPlayerNameEx(id));
	mysql_query(query);

	return 1;
}

CMD:d(playerid, params[])
{
	if(PI[playerid][plead] < 1) return 0;

	if(CheckMute(playerid)) return 1;

	new KoksDirektorius[50], String[216], Pranesimas[128];

	if(sscanf(params, "s[128]", Pranesimas)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /d <tekstas>");

	if(PI[playerid][ParaseDyrikas] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Praneðimà skelbti galima tik kas 60 sekundþiø!");

	switch(PI[playerid][plead])
	{
		case LEAD_FARAI:      KoksDirektorius = "Policijos Departamento direktorius";
		case LEAD_KURJ:       KoksDirektorius = "Kurjeriø direktorius";
		case LEAD_MEDIKAI:    KoksDirektorius = "Medicinos Departamento direktorius";
		case LEAD_Mechanikas: KoksDirektorius = "Autoserviso ECO direktorius";
		case LEAD_FUROS:      KoksDirektorius = "Fûristø direktorius";
		case LEAD_Gdyleriai:  KoksDirektorius = "Spec. bûrio pajëgø ARAS vadas";
		case LEAD_TAXI:       KoksDirektorius = "Taksistø direktorius";
		default: return 1;
	}

	format(String, sizeof(String), "{ffffff} {FFAF00}%s {ffffff}%s(%i) {FFAF00}praneða:", KoksDirektorius, GetPlayerNameEx(playerid), playerid);
	SendClientMessageToAll(-1, String);

	format(String, sizeof(String), "{ffffff}%s", Pranesimas);
	SendClientMessageToAll(-1, String);

	PI[playerid][ParaseDyrikas] = gettime() + 60;

	return 1;
}

CMD:pelnas(playerid, params[])
{
	if(PI[playerid][plead] < 1) return 0;

	if(GetPelnasIDFromLeader(playerid) == -1) return 1;

	ShowPlayerDialogEx(playerid, PELNO_DIALOG1, DIALOG_STYLE_LIST, "{ffffff}Pelno valdymas", "{ffffff}  Balansas.\n Paimti.\n Padëti.\n Iðdalinti.", "Pasirinkti", "Pultas");

	return 1;
}

CMD:ppelnas(playerid, params[])
{
	if(PI[playerid][pavdrk] < 1) return 0;

	if(GetPelnasIDFromPavas(playerid) == -1) return 1;

	new String[128];

	format(String, sizeof(String), "{ffffff}Ðiuo metu jûsø darbo pelne yra {FFAF00}$%s{ffffff}.", konvertuoti_pinigus(Pelnas[GetPelnasIDFromPavas(playerid)]));
	ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Darbo pelnas", String, "Uþdaryti", "");

	return 1;
}

//CMD:darbuotojai(playerid) 	return SendClientMessage(playerid, -1, "{ffffff} Atsipraðome, taèiau ði komanda laikinai yra iðimta!");
//CMD:pdarbuotojai(playerid) 	return SendClientMessage(playerid, -1, "{ffffff} Atsipraðome, taèiau ði komanda laikinai yra iðimta!");

/*CMD:rinfo(playerid)
{
    if(PI[playerid][plead] < 1) return 0;

    new String[216], Query[300];

	format(Query, sizeof(Query), "SELECT `RID`, `RPavadinimas`, `RSkin`, `RMasina` FROM `rangai` WHERE `RKint` = '%d'", PI[playerid][plead]);
	mysql_query(Query);

	mysql_store_result();

	if(mysql_num_rows())
	{
		while(mysql_fetch_row(Query))
		{
			new id, masinas, skin, pavadinimas[50];

			sscanf(Query, "p<|>is[50]ii", id, pavadinimas, skin, masinas);
			format(String, 1200, "%sID: %i - %s, Skin: %i, Transportas: %i\n", String, id, pavadinimas, skin, masinas);
		}
	}

	mysql_free_result();

	ShowPlayerDialogEx(playerid, 340, DIALOG_STYLE_LIST, "Rangø valdymas", String, "Pasirinkti", "Uþdaryti" );

    return 1;
}*/

CMD:darbuotojai(playerid)
{
	if( PI[ playerid ][ plead ] == 0 ) return false;

	new
		Index,
		query[ 300 ],
		query2[ 300 ],
		str  [ 1200 ];

	format( query, 200, "SELECT `Vardas`,`Job` FROM `players` WHERE `Job` =  '%d'", PI[ playerid ][ plead ] );
	mysql_query( query );
	mysql_store_result();
	if ( mysql_num_rows( ))
	{
		while( mysql_fetch_row( query2 ))
		{
			new
				name[ MAX_PLAYER_NAME ],
				factionid;

			sscanf( query2, "p<|>s[24]i", name, factionid);

			if(GetPlayeridMid(name) != INVALID_PLAYER_ID)
			{
				format( str, 1200, "%s%s - {FFAF00}ONLINE\n{FFFFFF}", str, name );
				Index++;
			}
			else
			{
				format( str, 1200, "%s%s - {FFAF00}OFFLINE\n{FFFFFF}", str, name );
				Index++;

			}
		}
	}
	mysql_free_result();
	if ( !Index )
	{
		SendClientMessage(playerid, -1, "{ffffff} Jûsø darbe nëra nei vieno darbuotojo!");
	}
	else
	{
		ShowPlayerDialogEx( playerid, 312, DIALOG_STYLE_LIST, "Jûsø darbuotojai", str, "Rinktis", "Atgal" );
	}

	return 1;
}

CMD:patsisakyti(playerid)
{
	if( PI[ playerid ][ pavdrk ] == 0 ) return false;

	PI[playerid][pavdrk] = 0;

	SendClientMessage(playerid, -1, "{ffffff} Sëkmingai atsisakëte pavaduotojo posto!");

	return 1;
}

CMD:pdarbuotojai(playerid)
{
	if( PI[ playerid ][ pavdrk ] == 0 ) return false;

	new
		Index,
		query[ 300 ],
		query2[ 300 ],
		str  [ 1200 ];

	format( query, 200, "SELECT `Vardas`,`Job` FROM `players` WHERE `Job` =  '%d'", PI[ playerid ][ pavdrk ] );
	mysql_query( query );
	mysql_store_result();
	if ( mysql_num_rows( ))
	{
		while( mysql_fetch_row( query2 ))
		{
			new
				name[ MAX_PLAYER_NAME ],
				factionid;

			sscanf( query2, "p<|>s[24]i", name, factionid);

			if(GetPlayeridMid(name) != INVALID_PLAYER_ID)
			{
				format( str, 1200, "%s%s - {FFAF00}ONLINE\n{FFFFFF}", str, name );
				Index++;
			}
			else
			{
				format( str, 1200, "%s%s - {FFAF00}OFFLINE\n{FFFFFF}", str, name );
				Index++;

			}
		}
	}
	mysql_free_result();
	if ( !Index )
	{
		SendClientMessage(playerid, -1, "{ffffff} Jûsø darbe nëra nei vieno darbuotojo!");
	}
	else
	{
		ShowPlayerDialogEx( playerid, 312, DIALOG_STYLE_LIST, "Jûsø darbuotojai", str, "Rinktis", "Atgal" );
	}

	return 1;
}

CMD:rvaldymas(playerid)
{
	if(PI[playerid][plead] < 1) return 0;

	ShowPlayerDialogEx( playerid, 310, DIALOG_STYLE_LIST,
	"Rangø Valdymas", "1. Sukurti naujà rangà\n2. Priskirti rangui uniformà\n3. Iðtrinti rangà", "Pasirinkti", "Atgal" );

	return 1;
}

CMD:dvaldymas(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER && PI[playerid][Priziuretojas] != PRIZ_DIRK) return 0;

	new dIDs;

	if(sscanf(params, "d", dIDs)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /dvaldymas <darbo_id>");

	switch(dIDs)
	{
		case 1: // PD
		{
			PolicijosDarboValdymas(playerid);
		}

		case 2: // Medikai
		{
			MedikuDarboValdymas(playerid);
		}

		case 3: // Kurjeriai
		{
			KurjeriuDarboValdymas(playerid);
		}

		case 4: // Mechanikai
		{
			MechanikuDarboValdymas(playerid);
		}

		case 5: // Dyleriai
		{
			DyleriuDarboValdymas(playerid);
		}

		case 11: // Fûristai
		{
			FuristuDarboValdymas(playerid);
		}

		case 13: // Taksistai
		{
			TaxiDarboValdymas(playerid);
		}

		default: return 0;
	}

	return 1;
}

stock IsPlayerAimingAtEx(playerid, Float:x, Float:y, Float:z, Float:radius)
{
	new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
	GetPlayerCameraPos(playerid, cx, cy, cz);
	GetPlayerCameraFrontVector(playerid, fx, fy, fz);
	return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

stock WhoIsDriver(vehicleid)
{
	for(new i = 0, size = GetPlayerPoolSize(); i <= size; i++) //Loops through all players
	{
	    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerState(i) == PLAYER_STATE_DRIVER) return i; //Returns playerid if the player is in the vehicleid provided AND is the driver
	}
	return 1;
}

stock PolicijosDarboValdymas(playerid)
{
	new String[1500], Stringas[1500], aTeises[64], bTeises[64], cTeises[64], Pazymas[64];

	if(Policininkas[TeisesA])		aTeises = "{FFAF00}reikalingos";
	else 						aTeises = ""COL_ERROR"nereikalingos";

	if(Policininkas[TeisesB])		bTeises = "{FFAF00}reikalingos";
	else 						bTeises = ""COL_ERROR"nereikalingos";

	if(Policininkas[TeisesC])		cTeises = "{FFAF00}reikalingos";
	else 						cTeises = ""COL_ERROR"nereikalingos";

	if(Policininkas[sPazyma])		Pazymas = "{FFAF00}reikalingas";
	else 						Pazymas = ""COL_ERROR"nereikalingas";

	format(Stringas, sizeof(Stringas), "1. Darbas nuo: {FFAF00}%s {ffffff}EXP\n", konvertuoti_pinigus(Policininkas[NuoKiekEXP]));
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "2. A kat. vairavimo teisës: %s\n", aTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "3. B kat. vairavimo teisës: %s\n", bTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "4. C kat. vairavimo teisës: %s\n", cTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "5. Sveikatos paþymëjimas: %s", Pazymas);
	strcat(String, Stringas);

	ShowPlayerDialogEx(playerid, PolicijosDarboValdymasDialogas, DIALOG_STYLE_LIST, "Policijos darbo valdymas", String, "Pasirinkti", "Uþdaryti");

	format(String, sizeof(String), "UPDATE `darbuinfo` SET `KiekXP` = '%d', `ATeises` = '%d', `BTeises` = '%d', `CTeises` = '%d', `sPazymas` = '%d' WHERE `Darbas` = 'Policija'",
	Policininkas[NuoKiekEXP], Policininkas[TeisesA], Policininkas[TeisesB], Policininkas[TeisesC], Policininkas[sPazyma]);
	mysql_query(String);

	return 1;
}

stock MedikuDarboValdymas(playerid)
{
	new String[1500], Stringas[1500], aTeises[64], bTeises[64], cTeises[64], Pazymas[64];

	if(Medikas[TeisesA])		aTeises = "{FFAF00}reikalingos";
	else 						aTeises = ""COL_ERROR"nereikalingos";

	if(Medikas[TeisesB])		bTeises = "{FFAF00}reikalingos";
	else 						bTeises = ""COL_ERROR"nereikalingos";

	if(Medikas[TeisesC])		cTeises = "{FFAF00}reikalingos";
	else 						cTeises = ""COL_ERROR"nereikalingos";

	if(Medikas[sPazyma])		Pazymas = "{FFAF00}reikalingas";
	else 						Pazymas = ""COL_ERROR"nereikalingas";

	format(Stringas, sizeof(Stringas), "1. Darbas nuo: {FFAF00}%s {ffffff}EXP\n", konvertuoti_pinigus(Medikas[NuoKiekEXP]));
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "2. A kat. vairavimo teisës: %s\n", aTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "3. B kat. vairavimo teisës: %s\n", bTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "4. C kat. vairavimo teisës: %s\n", cTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "5. Sveikatos paþymëjimas: %s", Pazymas);
	strcat(String, Stringas);

	ShowPlayerDialogEx(playerid, MedikuDarboValdymasDialogas, DIALOG_STYLE_LIST, "Medikø darbo valdymas", String, "Pasirinkti", "Uþdaryti");

	format(String, sizeof(String), "UPDATE `darbuinfo` SET `KiekXP` = '%d', `ATeises` = '%d', `BTeises` = '%d', `CTeises` = '%d', `sPazymas` = '%d' WHERE `Darbas` = 'Medikai'",
	Medikas[NuoKiekEXP], Medikas[TeisesA], Medikas[TeisesB], Medikas[TeisesC], Medikas[sPazyma]);
	mysql_query(String);

	return 1;
}

stock KurjeriuDarboValdymas(playerid)
{
	new String[1500], Stringas[1500], aTeises[64], bTeises[64], cTeises[64], Pazymas[64];

	if(Kurjeris[TeisesA])		aTeises = "{FFAF00}reikalingos";
	else 						aTeises = ""COL_ERROR"nereikalingos";

	if(Kurjeris[TeisesB])		bTeises = "{FFAF00}reikalingos";
	else 						bTeises = ""COL_ERROR"nereikalingos";

	if(Kurjeris[TeisesC])		cTeises = "{FFAF00}reikalingos";
	else 						cTeises = ""COL_ERROR"nereikalingos";

	if(Kurjeris[sPazyma])		Pazymas = "{FFAF00}reikalingas";
	else 						Pazymas = ""COL_ERROR"nereikalingas";

	format(Stringas, sizeof(Stringas), "1. Darbas nuo: {FFAF00}%s {ffffff}EXP\n", konvertuoti_pinigus(Kurjeris[NuoKiekEXP]));
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "2. A kat. vairavimo teisës: %s\n", aTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "3. B kat. vairavimo teisës: %s\n", bTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "4. C kat. vairavimo teisës: %s\n", cTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "5. Sveikatos paþymëjimas: %s", Pazymas);
	strcat(String, Stringas);

	ShowPlayerDialogEx(playerid, KurjeriuDarboValdymasDialogas, DIALOG_STYLE_LIST, "Kurjeriø darbo valdymas", String, "Pasirinkti", "Uþdaryti");

	format(String, sizeof(String), "UPDATE `darbuinfo` SET `KiekXP` = '%d', `ATeises` = '%d', `BTeises` = '%d', `CTeises` = '%d', `sPazymas` = '%d' WHERE `Darbas` = 'Kurj'",
	Kurjeris[NuoKiekEXP], Kurjeris[TeisesA], Kurjeris[TeisesB], Kurjeris[TeisesC], Kurjeris[sPazyma]);
	mysql_query(String);

	return 1;
}
stock TaxiDarboValdymas(playerid)
{
	new String[1500], Stringas[1500], aTeises[64], bTeises[64], cTeises[64], Pazymas[64];

	if(Taxi[TeisesA])			aTeises = "{FFAF00}reikalingos";
	else 						aTeises = ""COL_ERROR"nereikalingos";

	if(Taxi[TeisesB])			bTeises = "{FFAF00}reikalingos";
	else 						bTeises = ""COL_ERROR"nereikalingos";

	if(Taxi[TeisesC])			cTeises = "{FFAF00}reikalingos";
	else 						cTeises = ""COL_ERROR"nereikalingos";

	if(Taxi[sPazyma])			Pazymas = "{FFAF00}reikalingas";
	else 						Pazymas = ""COL_ERROR"nereikalingas";

	format(Stringas, sizeof(Stringas), "1. Darbas nuo: {FFAF00}%s {ffffff}EXP\n", konvertuoti_pinigus(Taxi[NuoKiekEXP]));
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "2. A kat. vairavimo teisës: %s\n", aTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "3. B kat. vairavimo teisës: %s\n", bTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "4. C kat. vairavimo teisës: %s\n", cTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "5. Sveikatos paþymëjimas: %s", Pazymas);
	strcat(String, Stringas);

	ShowPlayerDialogEx(playerid, TaxiDarboValdymasDialogas, DIALOG_STYLE_LIST, "Taksistø darbo valdymas", String, "Pasirinkti", "Uþdaryti");

	format(String, sizeof(String), "UPDATE `darbuinfo` SET `KiekXP` = '%d', `ATeises` = '%d', `BTeises` = '%d', `CTeises` = '%d', `sPazymas` = '%d' WHERE `Darbas` = 'Taxi'",
	Taxi[NuoKiekEXP], Taxi[TeisesA], Taxi[TeisesB], Taxi[TeisesC], Taxi[sPazyma]);
	mysql_query(String);

	return 1;
}

stock MechanikuDarboValdymas(playerid)
{
	new String[1500], Stringas[1500], aTeises[64], bTeises[64], cTeises[64], Pazymas[64];

	if(Mechanikas[TeisesA])		aTeises = "{FFAF00}reikalingos";
	else 						aTeises = ""COL_ERROR"nereikalingos";

	if(Mechanikas[TeisesB])		bTeises = "{FFAF00}reikalingos";
	else 						bTeises = ""COL_ERROR"nereikalingos";

	if(Mechanikas[TeisesC])		cTeises = "{FFAF00}reikalingos";
	else 						cTeises = ""COL_ERROR"nereikalingos";

	if(Mechanikas[sPazyma])		Pazymas = "{FFAF00}reikalingas";
	else 						Pazymas = ""COL_ERROR"nereikalingas";

	format(Stringas, sizeof(Stringas), "1. Darbas nuo: {FFAF00}%s {ffffff}EXP\n", konvertuoti_pinigus(Mechanikas[NuoKiekEXP]));
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "2. A kat. vairavimo teisës: %s\n", aTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "3. B kat. vairavimo teisës: %s\n", bTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "4. C kat. vairavimo teisës: %s\n", cTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "5. Sveikatos paþymëjimas: %s", Pazymas);
	strcat(String, Stringas);

	ShowPlayerDialogEx(playerid, MechanikuDarboValdymasDialogas, DIALOG_STYLE_LIST, "Autoserviso ECO darbo valdymas", String, "Pasirinkti", "Uþdaryti");

	format(String, sizeof(String), "UPDATE `darbuinfo` SET `KiekXP` = '%d', `ATeises` = '%d', `BTeises` = '%d', `CTeises` = '%d', `sPazymas` = '%d' WHERE `Darbas` = 'Mechanikai'",
	Mechanikas[NuoKiekEXP], Mechanikas[TeisesA], Mechanikas[TeisesB], Mechanikas[TeisesC], Mechanikas[sPazyma]);
	mysql_query(String);

	return 1;
}

stock DyleriuDarboValdymas(playerid)
{
	new String[1500], Stringas[1500], aTeises[64], bTeises[64], cTeises[64], Pazymas[64];

	if(Dyleris[TeisesA])		aTeises = "{FFAF00}reikalingos";
	else 						aTeises = ""COL_ERROR"nereikalingos";

	if(Dyleris[TeisesB])		bTeises = "{FFAF00}reikalingos";
	else 						bTeises = ""COL_ERROR"nereikalingos";

	if(Dyleris[TeisesC])		cTeises = "{FFAF00}reikalingos";
	else 						cTeises = ""COL_ERROR"nereikalingos";

	if(Dyleris[sPazyma])		Pazymas = "{FFAF00}reikalingas";
	else 						Pazymas = ""COL_ERROR"nereikalingas";

	format(Stringas, sizeof(Stringas), "1. Darbas nuo: {FFAF00}%s {ffffff}EXP\n", konvertuoti_pinigus(Dyleris[NuoKiekEXP]));
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "2. A kat. vairavimo teisës: %s\n", aTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "3. B kat. vairavimo teisës: %s\n", bTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "4. C kat. vairavimo teisës: %s\n", cTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "5. Sveikatos paþymëjimas: %s", Pazymas);
	strcat(String, Stringas);

	ShowPlayerDialogEx(playerid, DyleriuDarboValdymasDialogas, DIALOG_STYLE_LIST, "Spec. bûrio pajëgø ARAS darbo valdymas", String, "Pasirinkti", "Uþdaryti");

	format(String, sizeof(String), "UPDATE `darbuinfo` SET `KiekXP` = '%d', `ATeises` = '%d', `BTeises` = '%d', `CTeises` = '%d', `sPazymas` = '%d' WHERE `Darbas` = 'Dyleriai'",
	Dyleris[NuoKiekEXP], Dyleris[TeisesA], Dyleris[TeisesB], Dyleris[TeisesC], Dyleris[sPazyma]);
	mysql_query(String);

	return 1;
}

stock FuristuDarboValdymas(playerid)
{
	new String[1500], Stringas[1500], aTeises[64], bTeises[64], cTeises[64], Pazymas[64];

	if(Furistas[TeisesA])		aTeises = "{FFAF00}reikalingos";
	else 						aTeises = ""COL_ERROR"nereikalingos";

	if(Furistas[TeisesB])		bTeises = "{FFAF00}reikalingos";
	else 						bTeises = ""COL_ERROR"nereikalingos";

	if(Furistas[TeisesC])		cTeises = "{FFAF00}reikalingos";
	else 						cTeises = ""COL_ERROR"nereikalingos";

	if(Furistas[sPazyma])		Pazymas = "{FFAF00}reikalingas";
	else 						Pazymas = ""COL_ERROR"nereikalingas";

	format(Stringas, sizeof(Stringas), "1. Darbas nuo: {FFAF00}%s {ffffff}EXP\n", konvertuoti_pinigus(Furistas[NuoKiekEXP]));
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "2. A kat. vairavimo teisës: %s\n", aTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "3. B kat. vairavimo teisës: %s\n", bTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "4. C kat. vairavimo teisës: %s\n", cTeises);
	strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "5. Sveikatos paþymëjimas: %s", Pazymas);
	strcat(String, Stringas);

	ShowPlayerDialogEx(playerid, FuristuDarboValdymasDialogas, DIALOG_STYLE_LIST, "Fûristø darbo valdymas", String, "Pasirinkti", "Uþdaryti");

	format(String, sizeof(String), "UPDATE `darbuinfo` SET `KiekXP` = '%d', `ATeises` = '%d', `BTeises` = '%d', `CTeises` = '%d', `sPazymas` = '%d' WHERE `Darbas` = 'Furistai'",
	Furistas[NuoKiekEXP], Furistas[TeisesA], Furistas[TeisesB], Furistas[TeisesC], Furistas[sPazyma]);
	mysql_query(String);

	return 1;
}

CMD:dzinute(playerid, params[])
{
	if(PI[playerid][plead] < 1) return 0;
	new zinute[128], uQuerry[400], str[129];
	if(sscanf(params, "s[128]", zinute)) return SendClientMessage(playerid, BLUE, "* Naudojimas /dzinute [tekstas]");
	switch(PI[playerid][plead])
	{
		case 1:
		{
			format(uQuerry, 150, "UPDATE `dzinutes` SET `ZinutesTekstas` = '%s', `ArIjungtaZinute` = '1' WHERE `KokioDarboZinute` = 'Policija'", zinute);
			mysql_query(uQuerry);
			//format(uQuerry, sizeof(uQuerry), "INSERT INTO `dzinutes` (KokioDarboZinute, ZinutesTekstas, ArIjungtaZinute) VALUES ('Policija', '%s', '1')", zinute);
			//mysql_query(uQuerry);
		}
		case 2:
		{
			format(uQuerry, 150, "UPDATE `dzinutes` SET `ZinutesTekstas` = '%s', `ArIjungtaZinute` = '1' WHERE `KokioDarboZinute` = 'Medicina'", zinute);
			mysql_query(uQuerry);
			//format(uQuerry, sizeof(uQuerry), "INSERT INTO `dzinutes` (KokioDarboZinute, ZinutesTekstas, ArIjungtaZinute) VALUES ('Medicina', '%s', '1')", zinute);
			//mysql_query(uQuerry);
		}
		case 3:
		{
			format(uQuerry, 150, "UPDATE `dzinutes` SET `ZinutesTekstas` = '%s', `ArIjungtaZinute` = '1' WHERE `KokioDarboZinute` = 'Kurj'", zinute);
			mysql_query(uQuerry);
			//format(uQuerry, sizeof(uQuerry), "INSERT INTO `dzinutes` (KokioDarboZinute, ZinutesTekstas, ArIjungtaZinute) VALUES ('Taxi', '%s', '1')", zinute);
			//mysql_query(uQuerry);
		}
		case 4:
		{
			format(uQuerry, 150, "UPDATE `dzinutes` SET `ZinutesTekstas` = '%s', `ArIjungtaZinute` = '1' WHERE `KokioDarboZinute` = 'Mechanika'", zinute);
			mysql_query(uQuerry);
			//format(uQuerry, sizeof(uQuerry), "INSERT INTO `dzinutes` (KokioDarboZinute, ZinutesTekstas, ArIjungtaZinute) VALUES ('Mechanika', '%s', '1')", zinute);
			//mysql_query(uQuerry);
		}
		case 5:
		{
			format(uQuerry, 150, "UPDATE `dzinutes` SET `ZinutesTekstas` = '%s', `ArIjungtaZinute` = '1' WHERE `KokioDarboZinute` = 'Dyleriai'", zinute);
			mysql_query(uQuerry);
			//format(uQuerry, sizeof(uQuerry), "INSERT INTO `dzinutes` (KokioDarboZinute, ZinutesTekstas, ArIjungtaZinute) VALUES ('Mechanika', '%s', '1')", zinute);
			//mysql_query(uQuerry);
		}
		case 11:
		{
			format(uQuerry, 150, "UPDATE `dzinutes` SET `ZinutesTekstas` = '%s', `ArIjungtaZinute` = '1' WHERE `KokioDarboZinute` = 'Furistai'", zinute);
			mysql_query(uQuerry);
			//format(uQuerry, sizeof(uQuerry), "INSERT INTO `dzinutes` (KokioDarboZinute, ZinutesTekstas, ArIjungtaZinute) VALUES ('Furistai', '%s', '1')", zinute);
			//mysql_query(uQuerry);
		}
		case 13:
		{
			format(uQuerry, 150, "UPDATE `dzinutes` SET `ZinutesTekstas` = '%s', `ArIjungtaZinute` = '1' WHERE `KokioDarboZinute` = 'Taxi'", zinute);
			mysql_query(uQuerry);
			//format(uQuerry, sizeof(uQuerry), "INSERT INTO `dzinutes` (KokioDarboZinute, ZinutesTekstas, ArIjungtaZinute) VALUES ('Furistai', '%s', '1')", zinute);
			//mysql_query(uQuerry);
		}
	}
	format(str, sizeof(str), "* Nauja darbo þinute pakeistà á ''%s''", zinute);
	SendClientMessage(playerid, BLUE, str);
	return 1;
}

CMD:ispeti(playerid, params[])
{
	if(PI[playerid][plead] < 1) return 0;

	new giveplayerid, String[128];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /ispeti <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðio veiksmo panaudoti negalite!");

	if(PI[giveplayerid][specialybe] != PI[playerid][plead]) return SendClientMessage(playerid, -1, "{ffffff} Tai ne jûsø darbuotojas!");

	PI[giveplayerid][ispejimai] ++;

	if(PI[giveplayerid][ispejimai] > 2)
	{
		if(PI[giveplayerid][uniformd]) SetPlayerSkin(playerid, PI[giveplayerid][drabuziai]);

		PI[giveplayerid][specialybe] 	= 0;
		PI[giveplayerid][uniformd] 		= false;
		PI[giveplayerid][uniforma] 		= -1;
		PI[giveplayerid][ispejimai] 	= 0;
		PI[giveplayerid][pradirbo] 		= 0;
		PI[giveplayerid][DarboRangas] 	= 0;

		new query[180];

 		format(query, 80, "UPDATE `players` SET `Job` = '0' WHERE `Vardas` = '%s'", GetPlayerNameEx(giveplayerid));
		mysql_query(query);

		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}buvo iðmestas ið darbo!", GetPlayerNameEx(giveplayerid), PI[giveplayerid][ispejimai]);
		SendClientMessage(playerid, -1, String);

		format(String, sizeof(String), "{ffffff} Direktorius {FFAF00}%s{ffffff} áspëjo jus. Tai yra jûsø {FFAF00}3/3 {ffffff}áspëjimas!", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, -1, String);

		SendClientMessage(giveplayerid, -1, "{ffffff} Jus buvote iðmestas ið darbo!");

		for(new index = 0; index < 3; index ++) PI[giveplayerid][SiandienPriimta][index] 	= 0;
		for(new index = 0; index < 3; index ++) PI[giveplayerid][SiaSavaitePriimta][index] 	= 0;
		for(new index = 0; index < 3; index ++) PI[giveplayerid][IsVisoPriimta][index] 		= 0;

		format(query, sizeof(query), "UPDATE `players` SET `SiandienPriimta` = '%d', `SiaSavaitePriimta` = '%d', `IsVisoPriimta` = '%d' WHERE `Vardas` = '%s'",
		PI[giveplayerid][SiandienPriimta][0], PI[giveplayerid][SiaSavaitePriimta][0], PI[giveplayerid][IsVisoPriimta][0], GetPlayerNameEx(giveplayerid));
		mysql_query(query);
	}
	else
	{
		format(String, sizeof(String), "{ffffff} Áspëjote darbuotojà {FFAF00}%s{ffffff}, tai yra jo {FFAF00}%d/3 {ffffff}áspëjimas!", GetPlayerNameEx(giveplayerid), PI[giveplayerid][ispejimai]);
		SendClientMessage(playerid, -1, String);

		format(String, sizeof(String), "{ffffff} Direktorius {FFAF00}%s{ffffff} áspëjo jus. Tai yra jûsø {FFAF00}%d/3 {ffffff}áspëjimas!", GetPlayerNameEx(playerid), PI[giveplayerid][ispejimai]);
		SendClientMessage(giveplayerid, -1, String);
	}

	return 1;
}

CMD:nispejima(playerid, params[])
{
	if(PI[playerid][plead] < 1) return 0;

	new giveplayerid, String[128];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /nispejima <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðio veiksmo panaudoti negalite!");

	if(PI[giveplayerid][specialybe] != PI[playerid][plead]) return SendClientMessage(playerid, -1, "{ffffff} Tai ne jûsø darbuotojas!");

	if(PI[giveplayerid][ispejimai] < 1) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas neturi áspëjimø!");

	PI[giveplayerid][ispejimai] --;

	format(String, sizeof(String), "{ffffff} Nuëmete áspëjimà þaidëjui {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	format(String, sizeof(String), "{ffffff} Direktorius {FFAF00}%s{ffffff} jums nuëme áspëjimà!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);

	return 1;
}

CMD:dcarspawn(playerid, params[])
{
	if(PI[playerid][plead] < 1) return 0;

	new str[150];

	switch(PI[playerid][plead])
	{
		case 1:
		{
			for(new v = 0, size = GetVehiclePoolSize(); v <= size; v++)
			{
				if(!IsAnyPlayerInVehicle(v))
				{
					if(PolicijosMasina[0] <= v <= PolicijosMasina[sizeof(PolicijosMasina) - 1])
					{
						ac_SetVehicleToRespawn(v);
					}
				}
			}

			format(str, sizeof(str), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atstaèiau visas nenaudojamas darbines transp. priemones!", GetPlayerNameEx(playerid));
			ZinuteRacija(str, POLICIJA);

			return 1;
		}

		case 2:
		{
			for(new v = 0, size = GetVehiclePoolSize(); v <= size; v++)
			{
				if(!IsAnyPlayerInVehicle(v))
				{
					if(MedikuMasina[0] <= v <= MedikuMasina[sizeof(MedikuMasina) - 1])
					{
						ac_SetVehicleToRespawn(v);
					}
				}
			}

			format(str, sizeof(str), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atstaèiau visas nenaudojamas darbines transp. priemones!", GetPlayerNameEx(playerid));
			ZinuteRacija(str, MEDIKAI);

			return 1;
		}

		case 3:
		{
			for(new v = 0, size = GetVehiclePoolSize(); v <= size; v++)
			{
				if(!IsAnyPlayerInVehicle(v))
				{
					if(KurjeriuMasina[0] <= v <= KurjeriuMasina[sizeof(KurjeriuMasina) - 1])
					{
						ac_SetVehicleToRespawn(v);
					}
				}
			}

			format(str, sizeof(str), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atstaèiau visas nenaudojamas darbines transp. priemones!", GetPlayerNameEx(playerid));
			ZinuteRacija(str, KURJERIAI);

			return 1;
		}

		case 4:
		{
			for(new v = 0, size = GetVehiclePoolSize(); v <= size; v++)
			{
				if(!IsAnyPlayerInVehicle(v))
				{
					if(MechanikuMasina[0] <= v <= MechanikuMasina[sizeof(MechanikuMasina) - 1])
					{
						ac_SetVehicleToRespawn(v);
					}
				}
			}

			format(str, sizeof(str), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atstaèiau visas nenaudojamas darbines transp. priemones!", GetPlayerNameEx(playerid));
			ZinuteRacija(str, MECHANIKAI);

			return 1;
		}

		case 5:
	    {
	        for(new v = 0, size = GetVehiclePoolSize(); v < size; v++)
			{
				if(!IsAnyPlayerInVehicle(v))
				{
					if(ArasMasina[0] <= v <= ArasMasina[sizeof(ArasMasina) - 1])
					{
						ac_SetVehicleToRespawn(v);
					}
				}
			}

			format(str, sizeof(str), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atstaèiau visas nenaudojamas darbines transp. priemones!", GetPlayerNameEx(playerid));
			ZinuteRacija(str, DYLERIAI);

			return 1;
		}
		case 13:
		{
			for(new v = 0, size = GetVehiclePoolSize(); v <= size; v++)
			{
				if(!IsAnyPlayerInVehicle(v))
				{
					if(TaksiMasina[0] <= v <= TaksiMasina[sizeof(TaksiMasina) - 1])
					{
						ac_SetVehicleToRespawn(v);
					}
				}
			}

			format(str, sizeof(str), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atstaèiau visas nenaudojamas darbines transp. priemones!", GetPlayerNameEx(playerid));
			ZinuteRacija(str, TAXI);

			return 1;
		}

		case 11:
		{
			for(new v = 0, size = GetVehiclePoolSize(); v < size; v++)
			{
				if(!IsAnyPlayerInVehicle(v))
				{
					if(FuristuMasina[0] <= v <= FuristuMasina[sizeof(FuristuMasina) - 1])
					{
						ac_SetVehicleToRespawn(v);
					}
				}
			}

			format(str, sizeof(str), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atstaèiau visas nenaudojamas darbines transp. priemones!", GetPlayerNameEx(playerid));
			ZinuteRacija(str, FURISTAI);

			return 1;
		}
	}

	return 1;
}

CMD:dspec(playerid, params[])
{
	if(PI[playerid][plead] == 0) return 0;

	new giveplayerid, String[128];

	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		StopSpectating(playerid);
		return 1;
	}

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /dspec <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðio veiksmo panaudoti negalite!");

	if(PI[giveplayerid][specialybe] != PI[playerid][plead]) return SendClientMessage(playerid, -1, "{ffffff} Tai ne jûsø darbuotojas!");

	GetPlayerPos(playerid, PI[playerid][spos][0], PI[playerid][spos][1], PI[playerid][spos][2]);

	PI[playerid][spdata][24] = GetPlayerSkin        (playerid);
	PI[playerid][spdata][26] = GetPlayerInterior    (playerid);
	PI[playerid][spdata][27] = GetPlayerVirtualWorld(playerid);
	SetPlayerVirtualWorld	(playerid, GetPlayerVirtualWorld (giveplayerid));
	SetPlayerInterior    	(playerid, GetPlayerInterior     (giveplayerid));
	SavePlayerGuns 			(playerid);
	ac_ResetPlayerWeapons(playerid);

	if(IsPlayerInAnyVehicle(giveplayerid))
	{
		TogglePlayerSpectating(playerid, 1);
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(giveplayerid));
	}
	else
	{
		TogglePlayerSpectating(playerid, 1);
		PlayerSpectatePlayer(playerid, giveplayerid);
	}

	format(String, sizeof(String), "{ffffff} Priþiûrite darbuotojà {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:ismestidarbuotojaoff(playerid, params[])
{
	new uQuerry[150], arDarbuotojas,zVardas[MAX_PLAYER_NAME];
	if(PI[playerid][plead] <= 0 && PI[playerid][pavdrk] <= 0) return 0;
	if(sscanf(params, "s[24]", zVardas)) return SendClientMessage(playerid, BLUE, "* Iðmesti ið atsijungusi darbuotoja: /ismestidarbuotojaoff [Vardas_Pavardë]");
	if(GetPlayeridMid(zVardas) != INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "* Þaidëjas yra þaidime.");
	format(uQuerry, 150, "SELECT * FROM `players` WHERE `Vardas` = '%s'", zVardas);
	mysql_query(uQuerry);
	mysql_store_result();
	mysql_retrieve_row();
	if(mysql_num_rows())
	{
		mysql_fetch_field_row(uQuerry, "Job"); arDarbuotojas = strval(uQuerry);
		if(PI [ playerid ] [ plead ] != arDarbuotojas) return SendClientMessage(playerid,RED,"* Þaidëjas nëra jûsø darbuotojas.");
		else
		{
			if(arDarbuotojas > 0)
			{
				SendClientMessage(playerid, RED, "* Þaidëjas iðmestas ið darbo");
				format(uQuerry, 150, "UPDATE players SET `Job` = '0' WHERE `Vardas` = '%s'", zVardas);
				mysql_query(uQuerry);

				format(uQuerry, sizeof(uQuerry), "UPDATE `players` SET `SiandienPriimta` = '0', `SiaSavaitePriimta` = '0', `IsVisoPriimta` = '0' WHERE `Vardas` = '%s'", zVardas);
				mysql_query(uQuerry);

				return 1;
			}
		}
	}
	else
	{
		SendClientMessage(playerid, RED, "* Tokio vartotojo duomenø bazëje nëra.");
	}
	return 1;
}
//Pavaduotojø komandos

CMD:pspec(playerid, params[])
{
	if(PI[playerid][pavdrk] == 0) return 0;

	new giveplayerid, String[128];

	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		StopSpectating(playerid);
		return 1;
	}

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /pspec <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðio veiksmo panaudoti negalite!");

	if(PI[giveplayerid][specialybe] != PI[playerid][pavdrk]) return SendClientMessage(playerid, -1, "{ffffff} Tai ne jûsø darbuotojas!");

	GetPlayerPos(playerid, PI[playerid][spos][0], PI[playerid][spos][1], PI[playerid][spos][2]);

	PI[playerid][spdata][24] = GetPlayerSkin        (playerid);
	PI[playerid][spdata][26] = GetPlayerInterior    (playerid);
	PI[playerid][spdata][27] = GetPlayerVirtualWorld(playerid);
	SetPlayerVirtualWorld	(playerid, GetPlayerVirtualWorld (giveplayerid));
	SetPlayerInterior    	(playerid, GetPlayerInterior     (giveplayerid));
	SavePlayerGuns 			(playerid);
	ac_ResetPlayerWeapons(playerid);

	if(IsPlayerInAnyVehicle(giveplayerid))
	{
		TogglePlayerSpectating(playerid, 1);
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(giveplayerid));
	}
	else
	{
		TogglePlayerSpectating(playerid, 1);
		PlayerSpectatePlayer(playerid, giveplayerid);
	}

	format(String, sizeof(String), "{ffffff} Priþiûrite darbuotojà {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:pispeti(playerid, params[])
{
	if(PI[playerid][pavdrk] < 1) return 0;

	new giveplayerid, String[128];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /pispeti <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðio veiksmo panaudoti negalite!");

	if(PI[giveplayerid][specialybe] != PI[playerid][pavdrk]) return SendClientMessage(playerid, -1, "{ffffff} Tai ne jûsø darbuotojas!");

	PI[giveplayerid][ispejimai] ++;

	if(PI[giveplayerid][ispejimai] > 2)
	{
		if(PI[giveplayerid][uniformd]) SetPlayerSkin(playerid, PI[giveplayerid][drabuziai]);

		PI[giveplayerid][specialybe] 	= 0;
		PI[giveplayerid][uniformd] 		= false;
		PI[giveplayerid][uniforma] 		= -1;
		PI[giveplayerid][ispejimai] 	= 0;
		PI[giveplayerid][pradirbo] 		= 0;
		PI[giveplayerid][DarboRangas] 	= 0;

		new query[150];

 		format(query, 80, "UPDATE `players` SET `Job` = '0' WHERE `Vardas` = '%s'", GetPlayerNameEx(giveplayerid));
		mysql_query(query);

		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}buvo iðmestas ið darbo!", GetPlayerNameEx(giveplayerid), PI[giveplayerid][ispejimai]);
		SendClientMessage(playerid, -1, String);

		format(String, sizeof(String), "{ffffff} Pavaduotojas {FFAF00}%s{ffffff} áspëjo jus. Tai yra jûsø {FFAF00}3/3 {ffffff}áspëjimas!", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, -1, String);

		SendClientMessage(giveplayerid, -1, "{ffffff} Jus buvote iðmestas ið darbo!");

		for(new index = 0; index < 3; index ++) PI[giveplayerid][SiandienPriimta][index] 	= 0;
		for(new index = 0; index < 3; index ++) PI[giveplayerid][SiaSavaitePriimta][index] 	= 0;
		for(new index = 0; index < 3; index ++) PI[giveplayerid][IsVisoPriimta][index] 		= 0;


		format(query, sizeof(query), "UPDATE `players` SET `SiandienPriimta` = '%d', `SiaSavaitePriimta` = '%d', `IsVisoPriimta` = '%d' WHERE `Vardas` = '%s'",
		PI[giveplayerid][SiandienPriimta][0], PI[giveplayerid][SiaSavaitePriimta][0], PI[giveplayerid][IsVisoPriimta][0], GetPlayerNameEx(giveplayerid));
		mysql_query(query);
	}
	else
	{
		format(String, sizeof(String), "{ffffff} Áspëjote darbuotojà {FFAF00}%s{ffffff}, tai yra jo {FFAF00}%d/3 {ffffff}áspëjimas!", GetPlayerNameEx(giveplayerid), PI[giveplayerid][ispejimai]);
		SendClientMessage(playerid, -1, String);

		format(String, sizeof(String), "{ffffff} Pavaduotojas {FFAF00}%s{ffffff} áspëjo jus. Tai yra jûsø {FFAF00}%d/3 {ffffff}áspëjimas!", GetPlayerNameEx(playerid), PI[giveplayerid][ispejimai]);
		SendClientMessage(giveplayerid, -1, String);
	}

	return 1;
}

CMD:p(playerid, params[])
{
	if(PI[playerid][pavdrk] < 1) return 0;

	if(CheckMute(playerid)) return 1;

	new KoksPavaduotojas[80], String[216], Pranesimas[128];

	if(sscanf(params, "s[128]", Pranesimas)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /p <tekstas>");

	if(PI[playerid][ParaseDyrikas] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Praneðimà skelbti galima tik kas 60 sekundþiø!");

	switch(PI[playerid][pavdrk])
	{
		case LEAD_FARAI:      KoksPavaduotojas = "Policijos Departamento pavaduotojas";
		case LEAD_KURJ:       KoksPavaduotojas = "Kurjeriø pavaduotojas";
		case LEAD_MEDIKAI:    KoksPavaduotojas = "Medicinos Departamento pavaduotojas";
		case LEAD_Mechanikas: KoksPavaduotojas = "Autoserviso ECO pavaduotojas";
		case LEAD_FUROS:      KoksPavaduotojas = "Fûristø pavaduotojas";
		case LEAD_Gdyleriai:  KoksPavaduotojas = "Spec. bûrio pajëgø ARAS pavaduotojas";
		case LEAD_TAXI:  	  KoksPavaduotojas = "Taksistø pavaduotojas";
		default: return 1;
	}

	format(String, sizeof(String), "{ffffff} {FFAF00}%s {ffffff}%s(%i) {FFAF00}praneða:", KoksPavaduotojas, GetPlayerNameEx(playerid), playerid);
	SendClientMessageToAll(-1, String);

	format(String, sizeof(String), "{ffffff}%s", Pranesimas);
	SendClientMessageToAll(-1, String);

	PI[playerid][ParaseDyrikas] = gettime() + 60;

	return 1;
}

CMD:ppriimt(playerid, params[])
{
	if(PI[playerid][pavdrk] < 1) return 0;

	new id, String[216], KoksDarbas[50];

	if(sscanf(params, "u", id)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /priimt <vardas_pavardë/id>");

	if(PI[id][pavdrk] > 0 && id != playerid) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra kito darbo direktorius!");

	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(PI[id][leanvited][PI[playerid][pavdrk]-1] || PI[id][specialybe] == GetJobFromFaction(PI[playerid][pavdrk])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas jau turi pakvietimà!");

	switch(PI[playerid][pavdrk])
	{
		case LEAD_FARAI:      KoksDarbas = "Policijos Departamente";
		case LEAD_MEDIKAI:    KoksDarbas = "Medicinos Departamente";
		case LEAD_KURJ:       KoksDarbas = "Kurjeriuose";
		case LEAD_Mechanikas: KoksDarbas = "autoserviso ECO darbuotoju";
		case LEAD_Gdyleriai:  KoksDarbas = "Spec. bûrio pajëguose ARAS";
		case LEAD_FUROS:      KoksDarbas = "Fûristuose";
		case LEAD_TAXI:       KoksDarbas = "Taksistuose";
		default: return 1;
	}

	PI[id][leanvited][PI[playerid][pavdrk] - 1] = true;

	format(String, sizeof(String), "{ffffff} Pakvietëte {FFAF00}%s {ffffff}ástoti á jûsø darbà!", GetPlayerNameEx(id));
	SendClientMessage(playerid, -1, String);

	format(String, sizeof(String), "{ffffff} Pavaduotojas {FFAF00}%s {ffffff}kvieèia jus dirbti {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), KoksDarbas);
	SendClientMessage(id, -1, String);
	SendClientMessage(id, -1, "{ffffff} Norint ásidarbinti atvykite á ðio darbo bûstinæ!");

	return 1;
}

CMD:pismest(playerid, params[])
{
	if(PI[playerid][pavdrk] < 1) return 0;

	new id, String[216], KoksDarbas[50];

	if(sscanf(params, "u", id)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /pismest <vardas_pavardë/id>");

	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	new darbas = GetJobFromFaction(PI[playerid][pavdrk]);

	if(PI[id][specialybe] != darbas) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nedirba jûsø darbe!");

	switch(PI[playerid][pavdrk])
	{
		case LEAD_FARAI:      KoksDarbas = "Policijos Departamento";
		case LEAD_MEDIKAI:    KoksDarbas = "Medicinos Departamento";
		case LEAD_KURJ:       KoksDarbas = "Kurjeriø";
		case LEAD_Mechanikas: KoksDarbas = "autoserviso ECO darbuotojø";
		case LEAD_FUROS:      KoksDarbas = "Fûristø";
		case LEAD_Gdyleriai:  KoksDarbas = "Spec. bûrio pajëgø ARAS";
		case LEAD_TAXI:       KoksDarbas = "Taksistø";
	}

	format(String, sizeof(String), "{ffffff} Iðmetëte {FFAF00}%s {ffffff}ið jûsø darbo!", GetPlayerNameEx(id));
	SendClientMessage(playerid, -1, String);

	format(String, sizeof(String), "{ffffff} Pavaduotojas {FFAF00}%s {ffffff}iðmëtë jus ið {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid), KoksDarbas);
	SendClientMessage(id, -1, String);

	if(PI[id][uniformd]) SetPlayerSkin(id, PI[id][drabuziai]);

	PI[id][specialybe] = 0;
	PI[id][uniformd]   = false;
	PI[id][uniforma]   = -1;
	PI[id][DarboRangas]     = 0;
	PI[id][pradirbo]   = 0;
	PI[id][ispejimai]  = 0;

	new query[256];
	format(query, 256, "UPDATE players SET Job = '%d', Uniformd = '%d', Uniforma = '%d', Rangas = '%d', Pradirbo = '%d', Ispejimai = '%d' WHERE Vardas = '%s'",
	PI[id][specialybe], PI[id][uniformd], PI[id][uniforma], PI[id][DarboRangas], PI[id][pradirbo], PI[id][ispejimai], GetPlayerNameEx(id));
	mysql_query(query);

	return 1;
}

CMD:pcarspawn(playerid, params[])
{
	if(PI[playerid][pavdrk] < 1) return 0;

	new str[150];

	switch(PI[playerid][pavdrk])
	{
		case 1:
		{
			for(new v = 0, size = GetVehiclePoolSize(); v <= size; v++)
			{
				if(!IsAnyPlayerInVehicle(v))
				{
					if(PolicijosMasina[0] <= v <= PolicijosMasina[sizeof(PolicijosMasina) - 1])
					{
						ac_SetVehicleToRespawn(v);
					}
				}
			}

			format(str, sizeof(str), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atstaèiau visas nenaudojamas darbines transp. priemones!", GetPlayerNameEx(playerid));
			ZinuteRacija(str, POLICIJA);

			return 1;
		}

		case 2:
		{
			for(new v = 0, size = GetVehiclePoolSize(); v <= size; v++)
			{
				if(!IsAnyPlayerInVehicle(v))
				{
					if(MedikuMasina[0] <= v <= MedikuMasina[sizeof(MedikuMasina) - 1])
					{
						ac_SetVehicleToRespawn(v);
					}
				}
			}

			format(str, sizeof(str), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atstaèiau visas nenaudojamas darbines transp. priemones!", GetPlayerNameEx(playerid));
			ZinuteRacija(str, MEDIKAI);

			return 1;
		}

		case 3:
		{
			for(new v = 0, size = GetVehiclePoolSize(); v <= size; v++)
			{
				if(!IsAnyPlayerInVehicle(v))
				{
					if(KurjeriuMasina[0] <= v <= KurjeriuMasina[sizeof(KurjeriuMasina) - 1])
					{
						ac_SetVehicleToRespawn(v);
					}
				}
			}

			format(str, sizeof(str), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atstaèiau visas nenaudojamas darbines transp. priemones!", GetPlayerNameEx(playerid));
			ZinuteRacija(str, KURJERIAI);

			return 1;
		}
		case 13:
		{
			for(new v = 0, size = GetVehiclePoolSize(); v <= size; v++)
			{
				if(!IsAnyPlayerInVehicle(v))
				{
					if(TaksiMasina[0] <= v <= TaksiMasina[sizeof(TaksiMasina) - 1])
					{
						ac_SetVehicleToRespawn(v);
					}
				}
			}

			format(str, sizeof(str), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atstaèiau visas nenaudojamas darbines transp. priemones!", GetPlayerNameEx(playerid));
			ZinuteRacija(str, TAXI);

			return 1;
		}

		case 4:
		{
			for(new v = 0, size = GetVehiclePoolSize(); v <= size; v++)
			{
				if(!IsAnyPlayerInVehicle(v))
				{
					if(MechanikuMasina[0] <= v <= MechanikuMasina[sizeof(MechanikuMasina) - 1])
					{
						ac_SetVehicleToRespawn(v);
					}
				}
			}

			format(str, sizeof(str), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atstaèiau visas nenaudojamas darbines transp. priemones!", GetPlayerNameEx(playerid));
			ZinuteRacija(str, MECHANIKAI);

			return 1;
		}

		case 5:
	    {
	        for(new v = 0, size = GetVehiclePoolSize(); v <= size; v++)
			{
				if(!IsAnyPlayerInVehicle(v))
				{
					if(ArasMasina[0] <= v <= ArasMasina[sizeof(ArasMasina) - 1])
					{
						ac_SetVehicleToRespawn(v);
					}
				}
			}

			format(str, sizeof(str), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atstaèiau visas nenaudojamas darbines transp. priemones!", GetPlayerNameEx(playerid));
			ZinuteRacija(str, DYLERIAI);

			return 1;
		}

		case 11:
		{
			for(new v = 0, size = GetVehiclePoolSize(); v <= size; v++)
			{
				if(!IsAnyPlayerInVehicle(v))
				{
					if(FuristuMasina[0] <= v <= FuristuMasina[sizeof(FuristuMasina) - 1])
					{
						ac_SetVehicleToRespawn(v);
					}
				}
			}

			format(str, sizeof(str), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atstaèiau visas nenaudojamas darbines transp. priemones!", GetPlayerNameEx(playerid));
			ZinuteRacija(str, FURISTAI);

			return 1;
		}
	}

	return 1;
}

CMD:patikrinti(playerid, params[])
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	new giveplayerid, Float: P_Pos[3];

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /patikrinti <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	//if(GetPlayerScore(giveplayerid) < NAUJOKO_LAIKAS) return SendClientMessage(playerid, -1, "{ffffff} Ant naujoko ðios komandos panaudoti negalite!");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate suriðtas!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	new String[170];

	format(String, sizeof(String), "{ffffff} Pareigûnas {FFAF00}%s{ffffff} pradëjo jus tikrinti.", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "{ffffff} Pradëjote tikrinti þaidëjà {FFAF00}%s{ffffff}.", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	new str[2000], strf[300];

	new LicenseOfWeapon[64], LicenseOfBCategory[64], LicenseOfACategory[64], LicenseOfCCategory[64], DrunkLevel[128],
	Kokaino[64], Heroino[64], Weedo[64], Ekstazio[64], Uzsiseges[64], tApziura[64], rRegistracija[64];

	if(PI[giveplayerid][gLicenzija] == false) { LicenseOfWeapon = "{FFAF00}Neturi{ffffff}"; } else { LicenseOfWeapon = "{19F14F}Turi{ffffff}"; }

	if(PI[giveplayerid][teises] == false) { LicenseOfBCategory = "{FFAF00}Neturi{ffffff}"; } else { LicenseOfBCategory = "{19F14F}Turi{ffffff}"; }

	if(PI[giveplayerid][Mteises] == false) { LicenseOfACategory = "{FFAF00}Neturi{ffffff}"; } else { LicenseOfACategory = "{19F14F}Turi{ffffff}"; }

	if(PI[giveplayerid][FTeises] == false) { LicenseOfCCategory = "{FFAF00}Neturi{ffffff}"; } else { LicenseOfCCategory = "{19F14F}Turi{ffffff}"; }

	if(GetPlayerDrunkLevel(giveplayerid) < 2000)      { DrunkLevel = "{FFAF00}0.0 {ffffff}promilës"; }
	else if(GetPlayerDrunkLevel(giveplayerid) < 3000) { DrunkLevel = "{FFAF00}0.4 {ffffff}promilë, tai lengvas girtumas (taèiau leidþiamas)"; }
	else if(GetPlayerDrunkLevel(giveplayerid) < 4000) { DrunkLevel = "{FFAF00}1.0 {ffffff}promilës, tai vidutinis girtumas"; }
	else if(GetPlayerDrunkLevel(giveplayerid) > 4000) { DrunkLevel = "{FFAF00}2.0 {ffffff}promilës, tai sunkus girtumas"; }

	if(PI[giveplayerid][Kokainas] <= 0) { Kokaino 	= "{19F14F}Neturi{ffffff}"; } else { Kokaino 	= "{FFAF00}Turi{ffffff}"; }
	if(PI[giveplayerid][Heroinas] <= 0) { Heroino 	= "{19F14F}Neturi{ffffff}";	} else { Heroino 	= "{FFAF00}Turi{ffffff}";	}
	if(PI[giveplayerid][Weed] <= 0) 	{ Weedo 	= "{19F14F}Neturi{ffffff}";	} else { Weedo 		= "{FFAF00}Turi{ffffff}";	}
	if(PI[giveplayerid][Ekstazi] <= 0) 	{ Ekstazio 	= "{19F14F}Neturi{ffffff}"; } else { Ekstazio 	= "{FFAF00}Turi{ffffff}"; }

	if(!IsPlayerInAnyVehicle(giveplayerid))
	{
		format(strf, sizeof(strf), "\t{ffffff}Þaidëjo {FFAF00}%s {ffffff}patikrinimas\n \nTeisës/licenzijos:\n", GetPlayerNameEx(giveplayerid)); strcat(str, strf);
		format(strf, sizeof(strf), "{ffffff}A kat. vairavimo teisës: \t%s\n", LicenseOfACategory); 												strcat(str, strf);
		format(strf, sizeof(strf), "{ffffff}B kat. vairavimo teisës: \t%s\n", LicenseOfBCategory); 												strcat(str, strf);
		format(strf, sizeof(strf), "{ffffff}C kat. vairavimo teisës: \t%s\n", LicenseOfCCategory); 												strcat(str, strf);
		format(strf, sizeof(strf), "{ffffff}Ginklø licenzija: \t\t%s\n \nNarkotikai:\n", LicenseOfWeapon); 											strcat(str, strf);
		//format(strf, sizeof(strf), "{ffffff}Girtumas: \t\t\t%s\n", DrunkLevel); 																	strcat(str, strf);
		format(strf, sizeof(strf), "{ffffff}Kokainas: \t\t\t%s\n", Kokaino); 																		strcat(str, strf);
		format(strf, sizeof(strf), "{ffffff}Heroinas: \t\t\t%s\n", Heroino); 																		strcat(str, strf);
		format(strf, sizeof(strf), "{ffffff}Þolë: \t\t\t\t%s\n", Weedo); 																			strcat(str, strf);
		format(strf, sizeof(strf), "{ffffff}Ekstazi: \t\t\t%s\n \nKita:\n", Ekstazio); 																strcat(str, strf);
		format(strf, sizeof(strf), "{ffffff}Ieðkomas: \t\t\t{FFAF00}%d{ffffff} lygiu\n", PI[giveplayerid][Ieskomas]); 					strcat(str, strf);
		//format(strf, sizeof(strf), "{ffffff}Dirþas: \t\t\t%s\n", Uzsiseges); 																		strcat(str, strf);

		ShowPlayerDialogEx(playerid, PatikrinimoDialogas, DIALOG_STYLE_MSGBOX, "Patikrinimas", str, "Átarti", "Uþdaryti");
	}
	else
	{
		new vehicleid = GetPlayerVehicleID(giveplayerid);

		if(PI[giveplayerid][Dirzas])
		{
			Uzsiseges = "{19F14F}Uþsisegæs";
		}
		else
		{
			Uzsiseges = "{FFAF00}Neuþsisegæs";
		}

		if(VehicleInfo[vehicleid][vNupirkta])
		{
			if(!strcmp("Neregistruota", VehicleInfo[vehicleid][vNumeriai], true)) rRegistracija = "{FFAF00}Neregistruota{ffffff}";
			else rRegistracija = "{19F14F}Registruota{ffffff}";

			if(VehicleInfo[vehicleid][vTA] < gettime()) tApziura = "{FFAF00}Negalioja{ffffff}";
			else tApziura = "{19F14F}Galioja{ffffff}";

			format(strf, sizeof(strf), "\t{ffffff}Þaidëjo {FFAF00}%s {ffffff}patikrinimas\n \nTeisës/licenzijos:\n", GetPlayerNameEx(giveplayerid)); 	strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}A kat. vairavimo teisës: \t%s\n", LicenseOfACategory); 												strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}B kat. vairavimo teisës: \t%s\n", LicenseOfBCategory); 												strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}C kat. vairavimo teisës: \t%s\n", LicenseOfCCategory); 												strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Ginklø licenzija: \t\t%s\n \nGirtumas ir narkotikai:\n", LicenseOfWeapon); 								strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Girtumas: \t\t\t%s\n", DrunkLevel); 																	strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Kokainas: \t\t\t%s\n", Kokaino); 																		strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Heroinas: \t\t\t%s\n", Heroino); 																		strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Þolë: \t\t\t\t%s\n", Weedo); 																			strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Ekstazi: \t\t\t%s\n \nKita:\n", Ekstazio); 																strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Ieðkomas: \t\t\t{FFAF00}%d{ffffff} lygiu\n", PI[giveplayerid][Ieskomas]); 							strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Dirþas: \t\t\t%s\n", Uzsiseges); 																		strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Transp. priemonë: \t\t%s\n", rRegistracija); 															strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Transp. priemonës TA: \t%s\n", tApziura); 																strcat(str, strf);

			ShowPlayerDialogEx(playerid, PatikrinimoDialogas, DIALOG_STYLE_MSGBOX, "Patikrinimas", str, "Átarti", "Uþdaryti");
		}
		else
		{
			if(PI[giveplayerid][Dirzas])
			{
				Uzsiseges = "{19F14F}Uþsisegæs";
			}
			else
			{
				Uzsiseges = "{FFAF00}Neuþsisegæs";
			}

			format(strf, sizeof(strf), "\t{ffffff}Þaidëjo {FFAF00}%s {ffffff}patikrinimas\n \nTeisës/licenzijos:\n", GetPlayerNameEx(giveplayerid)); 	strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}A kat. vairavimo teisës: \t%s\n", LicenseOfACategory); 												strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}B kat. vairavimo teisës: \t%s\n", LicenseOfBCategory); 												strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}C kat. vairavimo teisës: \t%s\n", LicenseOfCCategory); 												strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Ginklø licenzija: \t\t%s\n \nGirtumas ir narkotikai:\n", LicenseOfWeapon); 								strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Girtumas: \t\t\t%s\n", DrunkLevel); 																	strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Kokainas: \t\t\t%s\n", Kokaino); 																		strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Heroinas: \t\t\t%s\n", Heroino); 																		strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Þolë: \t\t\t\t%s\n", Weedo); 																			strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Ekstazi: \t\t\t%s\n \nKita:\n", Ekstazio); 																strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Ieðkomas: \t\t\t{FFAF00}%d{ffffff} lygiu\n", PI[giveplayerid][Ieskomas]); 							strcat(str, strf);
			format(strf, sizeof(strf), "{ffffff}Dirþas: \t\t\t%s\n", Uzsiseges); 																		strcat(str, strf);

			ShowPlayerDialogEx(playerid, PatikrinimoDialogas, DIALOG_STYLE_MSGBOX, "Patikrinimas", str, "Átarti", "Uþdaryti");
		}
	}

	ItariamasZaidejas[giveplayerid] = playerid;
	ItariamasZaidejas[playerid]		= giveplayerid;

	/*format(strf, sizeof(strf), "{ffffff}Jus tikrina pareigûnas {FFAF00}%s{ffffff}\n \nTeisës/licenzijos:\n", GetPlayerNameEx(playerid)); 	strcat(str, strf);
	format(strf, sizeof(strf), "{ffffff}A kat. vairavimo teisës: \t%s\n", LicenseOfACategory); 												strcat(str, strf);
	format(strf, sizeof(strf), "{ffffff}B kat. vairavimo teisës: \t%s\n", LicenseOfBCategory); 												strcat(str, strf);
	format(strf, sizeof(strf), "{ffffff}C kat. vairavimo teisës: \t%s\n", LicenseOfCCategory); 												strcat(str, strf);
	format(strf, sizeof(strf), "{ffffff}Ginklø licenzija: \t\t%s\n \nGirtumas ir narkotikai:\n", LicenseOfWeapon); 								strcat(str, strf);
	format(strf, sizeof(strf), "{ffffff}Girtumas: \t\t\t%s\n", DrunkLevel); 																	strcat(str, strf);
	format(strf, sizeof(strf), "{ffffff}Kokainas: \t\t\t%s\n", Kokaino); 																		strcat(str, strf);
	format(strf, sizeof(strf), "{ffffff}Heroinas: \t\t\t%s\n", Heroino); 																		strcat(str, strf);
	format(strf, sizeof(strf), "{ffffff}Þolë: \t\t\t\t%s\n", Weedo); 																			strcat(str, strf);
	format(strf, sizeof(strf), "{ffffff}Ekstazi: \t\t\t%s\n \nKita:\n", Ekstazio); 																strcat(str, strf);
	format(strf, sizeof(strf), "{ffffff}Ieðkomas: \t\t\t{FFAF00}%d{ffffff} lygiu\n", PI[giveplayerid][Ieskomas]); 							strcat(str, strf);
	format(strf, sizeof(strf), "{ffffff}Dirþas: \t\t\t%s\n", Uzsiseges); 																		strcat(str, strf);

	ShowPlayerDialogEx(giveplayerid, 0, DIALOG_STYLE_MSGBOX, "Patikrinimas", str, "Uþdaryti", "");*/

	return 1;
}

CMD:ita(playerid, params[])
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	new giveplayerid, Float: P_Pos[3];

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /ita <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	//if(GetPlayerScore(giveplayerid) < NAUJOKO_LAIKAS) return SendClientMessage(playerid, -1, "{ffffff} Ant naujoko ðios komandos panaudoti negalite!"); // ToDo

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate suriðtas!");

	new str[1100];

	strcat(str, "Prieþastis\tÁtarimo lygis\n");
	strcat(str, "1. Vairavimas NON-RP \t10\n2. Vairavimas be teisiø \t15\n3. Vairavimas neblaiviam \t4\n4. Vaþiavimas be ðviesø bet kuriuo paros metu \t5\n");
	strcat(str, "5. Avarijos sukëlimas \t6\n6. Pabëgimas ið avarijos vietos \t8\n7. Greièio virðijimas (virð "#LEISTINAS_GREITIS" KM/H) \t8\n8. Civilio áþeidimas \t5\n");
	strcat(str, "9. Civilio suþeidimas \t15\n10. Civilio nuþudymas \t25\n11. Pareigûno áþeidimas \t10\n12. Pareigûno suþeidimas \t20\n");
	strcat(str, "13. Pareigûno nuþudymas \t30\n14. Narkotikø platinimas \t17\n15. Narkotikø vartojimas/laikymas \t15\n16. Ginklø platinimas \t12\n");
	strcat(str, "17. Necenzûriniø þodþiø vartojimas \t3\n18. Gràsinimai \t5\n19. Alkoholio vartojimas vieðai \t3\n20. Ðlapinimasis vieðai \t3\n");
	strcat(str, "21. Civilio suriðimas/pagrobimas \t30\n22. Pareigûno suriðimas/pagrobimas \t40\n23. Trukdymas policijos darbui \t15\n24. Bëgimas nuo policijos \t20\n25. Vairavimas be dirþo/ðalmo \t5\n");
	ShowPlayerDialogEx(playerid, ItaDialog, DIALOG_STYLE_TABLIST_HEADERS, "Átarimas", str, "Átarti", "Uþdaryti");

	ItariamasZaidejas[giveplayerid] = playerid;
	ItariamasZaidejas[playerid]		= giveplayerid;

	return 1;
}

CMD:ist(playerid, params[])
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	new giveplayerid, Float: P_Pos[3], String[216], Reason[64];

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "us[64]", giveplayerid, Reason)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /ist <vardas_pavardë/id> <prieþastis>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	if(strlen(Reason) > 64) return SendClientMessage(playerid, -1, "{ffffff} Prieþastis per ilga!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate suriðtas!");

	format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}iðteisino jus. Prieþastis: {FFAF00}%s", GetPlayerNameEx(playerid), Reason);
	SendClientMessage(giveplayerid, -1, String);

	new str[128];
	PI[giveplayerid][Ieskomas] = 0;
	PI[playerid][beglys] = false;

	format(str, sizeof(str), "~y~[]~w~ ITARIMO LYGIS:~R~ %d", PI[giveplayerid][Ieskomas]);
	PlayerTextDrawSetString(giveplayerid, hudas_p[giveplayerid][1], str);

	format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Iðteisinau þaidëjà {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	switch(PI[playerid][specialybe])
	{
		case 1: ZinuteRacija(String, POLICIJA);
		case 5: ZinuteRacija(String, 5);
	}

	format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Prieþastis: {FFAF00}%s", GetPlayerNameEx(playerid), Reason);
	switch(PI[playerid][specialybe])
	{
		case 1: ZinuteRacija(String, POLICIJA);
		case 5: ZinuteRacija(String, 5);
	}

	return 1;
}

CMD:kon(playerid, params[])
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	new giveplayerid, Float: P_Pos[3], String[216];

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /kon <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate suriðtas!");

	format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}konfiskavo ið jûsø narkotikus!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);

	PI[giveplayerid][Weed]     = 0;
	PI[giveplayerid][Heroinas] = 0;
	PI[giveplayerid][Ekstazi]  = 0;
	PI[giveplayerid][Kokainas] = 0;

	format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Konfiskavau narkotikus ið {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	switch(PI[playerid][specialybe])
	{
		case 1: ZinuteRacija(String, POLICIJA);
		case 5: ZinuteRacija(String, 5);
	}

	return 1;
}

CMD:kgun(playerid, params[])
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	new giveplayerid, Float: P_Pos[3], String[216];

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /kgun <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate suriðtas!");

	format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}konfiskavo ið jûsø ginklus!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);

	ac_ResetPlayerWeapons(giveplayerid);

	format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Konfiskavau ginklus ið {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	switch(PI[playerid][specialybe])
	{
		case 1: ZinuteRacija(String, POLICIJA);
		case 5: ZinuteRacija(String, 5);
	}

	return 1;
}

CMD:tazeris(playerid)
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, ""COL_ERROR"××× {ffffff}Karo zonoje ðià komandà draudþiama naudoti!");

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, ""COL_ERROR"××× {ffffff}Jus esate be darbiniø drabuþiø!");

	if(PI[playerid][NaudojoTazeri] > gettime()) return SendClientMessage(playerid, -1, ""COL_ERROR"××× {ffffff}Tazerá galima naudoti tik kas 5 minutes!");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, ""COL_ERROR"××× {ffffff}Jus esate suriðtas!");

	if(!Tazer[playerid])
	{
		Tazer[playerid] = true;

		ac_GivePlayerWeapon(playerid, TAZE_WEAPON, 10);

		SendClientMessage(playerid, -1, ""COL_INFO" {ffffff}Iðsitraukëte tazerá!");
	}
	else
	{
		Tazer[playerid] = false;

		//ac_ResetPlayerWeapon(playerid, 2);
		ac_ResetPlayerWeapon(playerid, TAZE_WEAPON);

		SendClientMessage(playerid, -1, ""COL_INFO" {ffffff}Uþsikiðote tazerá uþ dirþo!");
	}

	return 1;
}

CMD:uztvara(playerid, params[])
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	new Paskirtis[64];

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	if(sscanf(params, "s[64]", Paskirtis)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /uztvara <paskirtis>");

	if(strlen(Paskirtis) > 64) return SendClientMessage(playerid, -1, "{ffffff} Tekstas per ilgas!");

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Ðios komandos transp. priemonëje naudoti negalima!");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate suriðtas!");

	new Float: BarPos[4];

	if(PI[playerid][uztvara] != INVALID_OBJECT_ID)
	{
		GetDynamicObjectPos (PI[playerid][uztvara], BarPos[0], BarPos[1], BarPos[2]);
		DestroyDynamicObject(PI[playerid][uztvara]);
		Delete3DTextLabel 	(tUztvara[playerid]);

		PI[playerid][uztvara] = INVALID_OBJECT_ID;

		SendClientMessage(playerid, -1, "{ffffff} Paðalinote kelio uþtvarà!");
	}
	else
	{
		new String[200];

		GetPlayerPos 		(playerid, BarPos[0], BarPos[1], BarPos[2]);
		GetPlayerFacingAngle(playerid, BarPos[3]);

		format(String, sizeof(String), "{ffffff}Uþtvarà padëjo {FFAF00}%s{ffffff}!\nPaskirtis: {ffffff} %s\n\n{ffffff}Laikas: {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), Paskirtis, GetDateEx());
		tUztvara[playerid] = Create3DTextLabel(String, -1, BarPos[0], BarPos[1], BarPos[2] - 0.3, 10, 0, 0);

		PI[playerid][uztvara] = CreateDynamicObject(978, BarPos[0], BarPos[1], BarPos[2] - 0.3, 0.0, 0.0, BarPos[3]);

		SendClientMessage(playerid, -1, "{ffffff} Padëjote kelio uþtvarà!");
	}

	return 1;
}

CMD:pmapp(playerid)
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	SetPlayerCheckpointEx	(playerid, 7, -1039.7489,-587.6690,32.0078, 2);
	SendClientMessage 		(playerid, -1, "{ffffff} Narkotikø/ginklø sandëlis paþymëtas jûsø þemëlapyje!");

	return 1;
}

CMD:liemene(playerid)
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	if(IsPlayerAttachedObjectSlotUsed(playerid, POLICEARMOUR_ATTACH_SLOT))
	{
	    RemovePlayerAttachedObject(playerid, POLICEARMOUR_ATTACH_SLOT);

	    SendClientMessage(playerid, -1, "{ffffff} Nusiëmetë neperðaunamà liemenæ!");
	}
	else
	{
    	SetPlayerAttachedObject(playerid, POLICEARMOUR_ATTACH_SLOT, 19142, 1, 0.077107, 0.038268, 0.011460, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);

    	SendClientMessage(playerid, -1, "{ffffff} Uþsidëjote neperðaunamà liemenæ!");
	}

	return 1;
}

CMD:stop(playerid, params[])
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	new giveplayerid, Float: P_Pos[3], String[216];

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /stop <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	//if(GetPlayerScore(giveplayerid) < NAUJOKO_LAIKAS) return SendClientMessage(playerid, -1, "{ffffff} Ant naujoko ðios komandos panaudoti negalite!");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate suriðtas!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 30.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(PI[playerid][rasestab] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Ðià komandà naudoti galima tik kas 5 sekundes!");

	PI[playerid][rasestab] = gettime() + 5;

	format(String, sizeof(String), "~r~%s~n~~g~PRASO JUSU SUSTOTI", GetPlayerNameEx(playerid));
	GameTextForPlayer(giveplayerid, String, 2000, 4);

	format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s{ffffff} gavo praneðimà, kad turi sustoti!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:kliutis(playerid, params[])
{
    if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;
    if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

    if(PI[playerid][PadejesKliuti] == true)
	{
	    DestroyDynamicObject(PI[playerid][KliutisObject]);
	    Delete3DTextLabel(PI[playerid][KliutisTekstas]);
	    PI[playerid][PadejesKliuti] = false;

	    GameTextForPlayer(playerid, "~r~KLIUTIS SUNAIKINTA", 3000, 3);
	}
	else if(PI[playerid][PadejesKliuti] == false)
	{
	    for(new s = 0; s < 1; s ++) PlayerTextDrawShow(playerid, kliutis_p[playerid][s]);
		for(new s = 0; s < 7; s ++)	TextDrawShowForPlayer(playerid, kliutis_g[s]);
		SelectTextDraw(playerid, 0x00FF00FF);
	}
	return 1;
}

CMD:ant(playerid, params[])
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	new giveplayerid, Float: P_Pos[3], String[216];

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /ant <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	//if(GetPlayerScore(giveplayerid) < NAUJOKO_LAIKAS) return SendClientMessage(playerid, -1, "{ffffff} Ant naujoko ðios komandos panaudoti negalite!");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate suriðtas!");

	if(PI[giveplayerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra suriðtas!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerSpeed(giveplayerid) >= 70) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjo greitis yra per didelis, negalite jo surakinti!");

	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Ðios komandos transp. priemonëje naudoti negalima!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(PI[giveplayerid][cuffed])
	{
		Surakinti(giveplayerid, true);

		format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}nuëme jums antrankius!", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, -1, String);

		format(String, sizeof(String), "{ffffff} Nuëmete antrankius þaidëjui {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, -1, String);

	}
	else
	{
		Surakinti(giveplayerid, false);

		format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}uþdëjo jums antrankius!", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, -1, String);

		format(String, sizeof(String), "{ffffff} Uþdëjote antrankius þaidëjui {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, -1, String);
	}

	return 1;
}

CMD:atim(playerid, params[])
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	new giveplayerid, Float: P_Pos[3], String[216], LicenseID;

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate suriðtas!");

	if(sscanf(params, "ud", giveplayerid, LicenseID))
	{
		SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /atim <vardas_pavardë/id> <1, 2, 3, 4>");

		SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}1 {ffffff}- automobilio vairavimo teisës, {FFAF00}2 {ffffff}- motociklo vairavimo teisës.");

		SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}3 {ffffff}- vilkiko vairavimo teisës, {FFAF00}4 {ffffff}- ginklø licenzija.");

		return 1;
	}

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	//if(GetPlayerScore(giveplayerid) < NAUJOKO_LAIKAS) return SendClientMessage(playerid, -1, "{ffffff} Ant naujoko ðios komandos panaudoti negalite!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	switch(LicenseID)
	{
		case 1:
		{
			if(PI[giveplayerid][teises] == false) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas neturi ðios kategorijos teisiø!");

			PI[giveplayerid][teises] = false;

			format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}atëme ið jûsø automobilio vairavimo teises!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atëmiau automobilio vairavimo teises ið {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			switch(PI[playerid][specialybe])
			{
				case 1: ZinuteRacija(String, POLICIJA);
				case 5: ZinuteRacija(String, 5);
			}
		}

		case 2:
		{
			if(PI[giveplayerid][Mteises] == false) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas neturi ðios kategorijos teisiø!");

			PI[giveplayerid][Mteises] = false;

			format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}atëme ið jûsø motociklo vairavimo teises!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atëmiau motociklo vairavimo teises ið {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			switch(PI[playerid][specialybe])
			{
				case 1: ZinuteRacija(String, POLICIJA);
				case 5: ZinuteRacija(String, 5);
			}
		}

		case 3:
		{
			if(PI[giveplayerid][FTeises] == false) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas neturi ðios kategorijos teisiø!");

			PI[giveplayerid][FTeises] = false;

			format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}atëme ið jûsø vilkiko vairavimo teises!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atëmiau vilkiko vairavimo teises ið {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			switch(PI[playerid][specialybe])
			{
				case 1: ZinuteRacija(String, POLICIJA);
				case 5: ZinuteRacija(String, 5);
			}
		}

		case 4:
		{
			if(PI[giveplayerid][gLicenzija] == false) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas neturi ginklø licenzijos!");

			PI[giveplayerid][gLicenzija] = false;

			format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}atëme ið jûsø ginklø licenzijà!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Atëmiau ginklø licenzijà ið {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			switch(PI[playerid][specialybe])
			{
				case 1: ZinuteRacija(String, POLICIJA);
				case 5: ZinuteRacija(String, 5);
			}
		}

		default:
		{
			SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /atim <vardas_pavardë/id> <1, 2, 3, 4>");

			SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}1 {ffffff}- automobilio teisës, {FFAF00}2 {ffffff}- motociklo teisës.");

			SendClientMessage(playerid, -1, "{ffffff}  {FFAF00}3 {ffffff}- vilkiko teisës, {FFAF00}4 {ffffff}- ginklø licenzija.");
		}
	}

	return 1;
}

CMD:cproperty(playerid, params[])
{
	new Float: ProP_Pos[3], PropTitle[64], String[300], papildomas[10];

	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(sscanf(params, "s[64]", PropTitle)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} Komandos naudojimas: /cproperty <pavadinimas>");

	for(new Property; Property < MAX_PROPERTYS; Property ++)
	{
		format(String, sizeof(String), "SELECT * FROM `verslai` WHERE `ID` = '%d'", Property);
		mysql_query(String);

		mysql_store_result();

		if(!mysql_num_rows())
		{
			/*switch(PapPelnas)
			{
				case 0: PropertyInfo[Property][pPelnas] = false;
				case 1: PropertyInfo[Property][pPelnas] = true;
				default: SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} Komandos naudojimas: /cproperty <pavadinimas> <pap. pelnas: 0/1>");
			}*/

		    GetPlayerPos(playerid, ProP_Pos[0], ProP_Pos[1], ProP_Pos[2]);

			format(PropertyInfo[Property][pOwner], MAX_PLAYER_NAME, "Nera");
			format(PropertyInfo[Property][pBuyDate], 32, "-");

			strdel(PropertyInfo[Property][pTitle], 0,         64);
			strcat(PropertyInfo[Property][pTitle], PropTitle, 64);

			//if(PropertyInfo[Property][pPelnas] == true)		PropertyInfo[Property][pPrice] = 300000 + random(700000), PropertyInfo[Property][pEarning] = floatround(PropertyInfo[Property][pPrice] / 11000);
			//else 											PropertyInfo[Property][pPrice] = 100000 + random(200000), PropertyInfo[Property][pEarning] = floatround(PropertyInfo[Property][pPrice] / 7000);

			PropertyInfo[Property][pPelnas] 	= false;
			//PropertyInfo[Property][pPrice] 		= 100000 + random(200000), PropertyInfo[Property][pEarning] = floatround(PropertyInfo[Property][pPrice] / 7000);
			if(PropertyInfo[Property][pPelnas] == true)	PropertyInfo[Property][pPrice] = 300000 + random(700000), PropertyInfo[Property][pEarning] = floatround(PropertyInfo[Property][pPrice] / 11000);
			else 										PropertyInfo[Property][pPrice] = 100000 + random(200000), PropertyInfo[Property][pEarning] = floatround(PropertyInfo[Property][pPrice] / 7000);
			PropertyInfo[Property][pCreated] 	= true;
			PropertyInfo[Property][pBuyed] 		= false;
			PropertyInfo[Property][pProfit] 	= 0;
			PropertyInfo[Property][pPos_X] 		= ProP_Pos[0];
			PropertyInfo[Property][pPos_Y] 		= ProP_Pos[1];
			PropertyInfo[Property][pPos_Z] 		= ProP_Pos[2];

			if(PropertyInfo[Property][pPelnas] == true) papildomas = "yra";
			else										papildomas = "nëra";

			format(String, sizeof(String), "{ffffff}Verslas: {ffffff} %s\n \n{ffffff}Unikalus ID: {FFAF00}%d\n{ffffff}Savininkas: {FFAF00}%s\n{ffffff}Kaina: {FFAF00}$%s\n{ffffff}Uþdarbis: {FFAF00}$%d/1 min\n{ffffff}Papildomas pelnas: {ffffff} %s\n \n{ffffff}Norëdami valdyti verslà spauskite ALT",
			PropertyInfo[Property][pTitle], Property + 1, PropertyInfo[Property][pOwner], konvertuoti_pinigus(PropertyInfo[Property][pPrice]), PropertyInfo[Property][pEarning], papildomas);

			PropertyInfo[Property][pText] 		= CreateDynamic3DTextLabel (String, -1, PropertyInfo[Property][pPos_X], PropertyInfo[Property][pPos_Y], PropertyInfo[Property][pPos_Z], 10, INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0);
			PropertyInfo[Property][pPickup] 	= CreatePickup		(19134,	  1, PropertyInfo[Property][pPos_X], PropertyInfo[Property][pPos_Y], PropertyInfo[Property][pPos_Z], 0);

			new Query[128];
			format(Query, sizeof(Query), "UPDATE `verslai` SET `Data` = '%s', `pPelnas` = '%d' WHERE `ID` = '%d'", PropertyInfo[Property][pBuyDate], PropertyInfo[Property][pPelnas], Property);
			mysql_query(Query);

			format(String, sizeof(String), "INSERT INTO `verslai` (ID) VALUES ('%d')", Property);
			mysql_query(String);

			SaveProperty(Property);

			SendClientMessage(playerid, -1, "{ffffff} Sëkmingai sukurëte verslà!");

			return 1;
		}

		mysql_free_result();
	}

	return SendClientMessage(playerid, -1, "{ffffff} Jus jau pasiekëte leistinà verslø limità!");
}

CMD:dproperty(playerid, params[])
{
	new Property, String[43];

	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(sscanf(params, "d", Property)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} Komandos naudojimas: /dproperty <verslo unikalus id>");

	if(Property < 1 || Property > MAX_PROPERTYS + 1) return SendClientMessage(playerid, -1, "{ffffff} Verslo su tokiu ID nëra!");

	Property --;

    if(!PropertyInfo[Property][pCreated]) return SendClientMessage(playerid, -1, "{ffffff} Verslo su tokiu ID nëra!");

	format(String, sizeof(String), "SELECT * FROM `verslai` WHERE `ID` = '%d'", Property);
	mysql_query(String);

	mysql_store_result();

	if(mysql_num_rows())
	{
		format(PropertyInfo[Property][pOwner], MAX_PLAYER_NAME, "Nera");
		strdel(PropertyInfo[Property][pTitle], 0, 64);
		format(PropertyInfo[Property][pBuyDate], 32, "-");

	    PropertyInfo[Property][pCreated] 	= false;
		PropertyInfo[Property][pBuyed] 		= false;
		PropertyInfo[Property][pPelnas] 	= false;
		PropertyInfo[Property][pPrice] 		= -1;
		PropertyInfo[Property][pProfit] 	= -1;
		PropertyInfo[Property][pEarning] 	= -1;
		PropertyInfo[Property][pPos_X] 		= -1;
		PropertyInfo[Property][pPos_Y] 		= -1;
		PropertyInfo[Property][pPos_Z] 		= -1;

		Delete3DTextLabel(PropertyInfo[Property][pText]);

		DestroyPickup(PropertyInfo[Property][pPickup]);

   		format(String, sizeof(String), "DELETE FROM `verslai` WHERE `ID` = '%d'", Property);
		mysql_query(String);

		SendClientMessage(playerid, -1, "{ffffff} Sëkmingai paðalinote verslà!");

		return 1;
	}

	mysql_free_result();

	return SendClientMessage(playerid, -1, "Verslo su tokiu ID nëra.");
}

CMD:isodinti(playerid, params[])
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	new giveplayerid, Float: P_Pos[3], String[216], vehicleid = GetPlayerVehicleID(playerid);

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /isodinti <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	if(GetVehicleCategory(vehicleid) == BOATS) return SendClientMessage(playerid, -1, "{ffffff} Á laivus ásodinti þaidëjø negalima!");

	//if(GetPlayerScore(giveplayerid) < NAUJOKO_LAIKAS) return SendClientMessage(playerid, -1, "{ffffff} Ant naujoko ðios komandos panaudoti negalite!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerSpeed(giveplayerid) >= 70) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjo greitis yra per didelis, negalite jo ásodinti!");

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti transp. priemonëje!");

	if(IsABike(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Á dviraèius ásodinti þaidëjo negali!");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate suriðtas!");

	PutPlayerInVehicleEx(giveplayerid, vehicleid, 1);

	format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}ásodino jus á transp. priemonæ!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "{ffffff} Ásodinote þaidëjà {FFAF00}%s {ffffff}á transp. priemonæ!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:sekti(playerid, params[])
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	new giveplayerid, Float: P_Pos[3], String[216];

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /sekti <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate suriðtas!");

	if(SekamasZaidejas[playerid] != -1)
	{
		SekamasZaidejas[playerid] = -1;

		DisablePlayerCheckpointEx(playerid, 21);

		SendClientMessage(playerid, -1, "{ffffff} Sekimas atðauktas!");

		return 1;
	}

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	SetPlayerCheckpointEx(playerid, 21, P_Pos[0], P_Pos[1], P_Pos[2], 2);

	SekamasZaidejas[playerid] = giveplayerid;

	format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Pradëjau sekti þaidëjà {FFAF00}%s{ffffff}.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	switch(PI[playerid][specialybe])
	{
		case 1: ZinuteRacija(String, POLICIJA);
		case 5: ZinuteRacija(String, 5);
	}

	return 1;
}

CMD:beglys(playerid, params[])
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	new giveplayerid, Float: P_Pos[3], String[216];

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /beglys <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	//if(GetPlayerScore(giveplayerid) < NAUJOKO_LAIKAS) return SendClientMessage(playerid, -1, "{ffffff} Ant naujoko ðios komandos panaudoti negalite!");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate suriðtas!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(PI[giveplayerid][beglys] == true)
	{
		PI[giveplayerid][beglys] = false;

		format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Iðëmiau þaidëjà {FFAF00}%s{ffffff} ið bëgliø sàraðo.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		switch(PI[playerid][specialybe])
		{
			case 1: ZinuteRacija(String, POLICIJA);
			case 5: ZinuteRacija(String, 5);
		}
	}
	else
	{
		PI[giveplayerid][beglys] = true;

		format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}%s: {ffffff}Átraukiau þaidëjà {FFAF00}%s{ffffff} á begliø sàraðà.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		switch(PI[playerid][specialybe])
		{
			case 1: ZinuteRacija(String, POLICIJA);
			case 5: ZinuteRacija(String, 5);
		}
	}

	return 1;
}

CMD:bauda(playerid, params[])
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	new giveplayerid, Float: P_Pos[3], String[216];

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /bauda <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	//if(GetPlayerScore(giveplayerid) < NAUJOKO_LAIKAS) return SendClientMessage(playerid, -1, "{ffffff} Ant naujoko ðios komandos panaudoti negalite!");

	if(PI[giveplayerid][Ieskomas] < 1) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nëra ieðkomas!");

	if(PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate suriðtas!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(PI[giveplayerid][Ieskomas] > 60) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas turi daugiau nei {FFAF00}60 {ffffff}ieðkomumo lygiu, todël veþkite já á kalëjimà!");

	new bauda = PI[giveplayerid][Ieskomas] * 150;

	PI[giveplayerid][rkaina][0] = bauda;
	PI[giveplayerid][rid][0]    = playerid;

	format(String, sizeof(String), "{FFAF00}%s {ffffff}siûlo jums susimokëti baudà {FFAF00}$%s {ffffff}uþ jûsø nusikaltimus.\n\n\tAr mokësite?", GetPlayerNameEx(playerid), konvertuoti_pinigus(bauda));
	ShowPlayerDialogEx(giveplayerid, 7341, DIALOG_STYLE_MSGBOX, "Baudos mokëjimas", String, "Taip", "Ne");

	format(String, sizeof(String), "{ffffff} Pasiûlëte mokëti baudà þaidëjui {FFAF00}%s {ffffff}uþ {FFAF00}$%s{ffffff}!", GetPlayerNameEx(giveplayerid), konvertuoti_pinigus(bauda));
	SendClientMessage(playerid, -1, String);

	if(!PI[playerid][mdDuotBauda]) PI[playerid][mdDuotBauda] = true;

	return 1;
}

CMD:begliai(playerid)
{
	if(PI[playerid][specialybe] != 1 && PI[playerid][specialybe] != 5) return 0;

	new String[1500], Stringas[1500], Number;

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	foreach(Player, i)
	{
		if(IsPlayerConnected(i) && PI[i][beglys])
		{
			Number ++;

			format(Stringas, sizeof(Stringas), "{ffffff}%d. {FFAF00}%s\n", Number, GetPlayerNameEx(i));
			strcat(String, Stringas);

			ShowPlayerDialogEx(playerid, 8695, DIALOG_STYLE_MSGBOX, "Bëgliai:", String, "Uþdaryti", "");
		}
	}
	return 1;
}

CMD:ieskomi(playerid)
{
	new String[1500], Stringas[1500], Number;

	foreach(Player, i)
	{
		if(IsPlayerConnected(i) && PI[i][Ieskomas] >= 1)
		{
			Number ++;

			format(Stringas, sizeof(Stringas), "{ffffff}%d. {FFAF00}%s {ffffff}ieðkomas {FFAF00}%d {ffffff}lygiu.\n", Number, GetPlayerNameEx(i), PI[i][Ieskomas]);
			strcat(String, Stringas);

			ShowPlayerDialogEx(playerid, 8695, DIALOG_STYLE_MSGBOX, "Ieðkomi:", String, "Uþdaryti", "");
		}
	}

	return 1;
}

CMD:parduotig(playerid, params[])
{
	//if(PI[playerid][specialybe] != 5) return 0;

	new giveplayerid, Float: P_Pos[3], String[216], AmmoCount, MoneyCount, pWeapon = GetPlayerWeapon(playerid), WeaponName[64];

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	//if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "udd", giveplayerid, AmmoCount, MoneyCount)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /parduotig <vardas_pavardë/id> <kulkø kiekis> <kaina uþ kulkà>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	if(PI[playerid][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Ðià komandà naudoti galësite tik praþaidus {FFAF00}"#NAUJOKO_LAIKAS"{ffffff} min!");

		return 1;
	}

	if(PI[giveplayerid][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra naujokas!");

		return 1;
	}

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(ac_GetPlayerAmmo(playerid, pWeapon) < AmmoCount) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek ðoviniø!");

	if(AmmoCount < 1 || MoneyCount < 1) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /parduotig <vardas_pavardë/id> <kulkø kiekis> <kaina uþ kulkà>");

	switch(pWeapon)
	{
		case 9, 18, 35..40, 44, 45:
		{
			ac_ResetPlayerWeapons(playerid);

			Kick(playerid);
		}
	}

	GetWeaponName(pWeapon, WeaponName, sizeof(WeaponName));

	ChoosedPlayer[giveplayerid]  = playerid;
	PI[giveplayerid][KokiGinkla] = pWeapon;
	PI[giveplayerid][KiekKulku]  = AmmoCount;
	PI[giveplayerid][KainaKulku] = AmmoCount * MoneyCount;

	if(GetPlayerMoneyA(giveplayerid) < AmmoCount * MoneyCount) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjui neuþtenka pinigø!");

	format(String, sizeof(String), "{FFAF00}%s {ffffff}siûlo jums ginklo {FFAF00}%s {FFAF00}%d kulkø uþ {FFAF00}$%s{ffffff}.\n\n\tAr pirksite?", GetPlayerNameEx(playerid), WeaponName, AmmoCount, konvertuoti_pinigus(AmmoCount * MoneyCount));
	ShowPlayerDialogEx(giveplayerid, 5888, DIALOG_STYLE_MSGBOX, "Ginklo pirkimas", String, "Taip", "Ne");

	return 1;
}

CMD:perku(playerid, params[])
{
	if(PI[playerid][pSARVUS] == true)
	{
	    if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");
	    new SuggPlayerid = ChoosedPlayer[playerid];
		new SuggMoney    = PI[playerid][sArmoroKaina];
		SendClientMessage(playerid, -1, "{ffffff} Nusipirkote ðarvus!");

		SendClientMessage(SuggPlayerid, -1, "{ffffff} Pardavëte þaidëjui ðarvus!");
		
		PI[playerid][pSARVUS] = false;
		Pelnas[3] += SuggMoney/2;

		GivePlayerMoneyA(playerid, -SuggMoney);
		GivePlayerMoneyA(SuggPlayerid, SuggMoney);

		SetPlayerArmourEx(playerid, 100);
	}
	else if(PI[playerid][pHEAL] == true)
	{
	    if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");
	    new SuggPlayerid = ChoosedPlayer[playerid];
		new SuggMoney    = PI[playerid][sGyvybiuKaina];
		SendClientMessage(playerid, -1, "{ffffff} Nusipirkote gyvybes!");

		SendClientMessage(SuggPlayerid, -1, "{ffffff} Pardavëte þaidëjui gyvybes!");
		
		PI[playerid][pHEAL] = false;
		Pelnas[3] += SuggMoney/2;

		GivePlayerMoneyA(playerid, -SuggMoney);
		GivePlayerMoneyA(SuggPlayerid, SuggMoney);

		SetPlayerHealthEx(playerid, 100);
	}
	else if(PI[playerid][pPAZ] == true)
	{
	    if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");
        new SuggPlayerid = ChoosedPlayer[playerid];
		new SuggMoney    = PI[playerid][sPazymosKaina];
		SendClientMessage(playerid, -1, "{ffffff} Nusipirkote sveikatos paþymëjimà!");

		SendClientMessage(SuggPlayerid, -1, "{ffffff} Pardavëte þaidëjui sveikatos paþymëjimà!");
		
		PI[playerid][pPAZ] = false;
		Pelnas[3] += SuggMoney/2;
		
		GivePlayerMoneyA(playerid, -SuggMoney);
		GivePlayerMoneyA(SuggPlayerid, SuggMoney);

		PI[playerid][medicinospazyma] = gettime() + 259200;
	}
	return 1;
}

CMD:neperku(playerid, params[])
{
    new SuggPlayerid = ChoosedPlayer[playerid], Str[128];
	if(PI[playerid][pHEAL] == true)
	{
	    PI[playerid][pHEAL] = false;

		format(Str, sizeof(Str), "{9999cc} GYVYBËS {b4b4e0} Atsisakëte mediko {9999cc}%s{b4b4e0} suteiktø paslaugø!", GetPlayerNameEx(SuggPlayerid));
		SendClientMessage(playerid, -1, Str);

		format(Str, sizeof(Str), "{9999cc} GYVYBËS {b4b4e0} Þaidëjas {9999cc}%s{b4b4e0} atsisakë jûsø paslaugø!", GetPlayerNameEx(playerid));
		SendClientMessage(SuggPlayerid, -1, Str);
	}
	else if(PI[playerid][pSARVUS] == true)
	{
	    PI[playerid][pSARVUS] = false;

		format(Str, sizeof(Str), "{9999cc} ÐARVAI {b4b4e0} Atsisakëte mediko {9999cc}%s{b4b4e0} suteiktø paslaugø!", GetPlayerNameEx(SuggPlayerid));
		SendClientMessage(playerid, -1, Str);

		format(Str, sizeof(Str), "{9999cc} ÐARVAI {b4b4e0} Þaidëjas {9999cc}%s{b4b4e0} atsisakë jûsø paslaugø!", GetPlayerNameEx(playerid));
		SendClientMessage(SuggPlayerid, -1, Str);
	}
	else if(PI[playerid][pPAZ] == true)
	{
	    PI[playerid][pPAZ] = false;

		format(Str, sizeof(Str), "{9999cc} PAÞYMËJIMAS {b4b4e0} Atsisakëte mediko {9999cc}%s{b4b4e0} suteiktø paslaugø!", GetPlayerNameEx(SuggPlayerid));
		SendClientMessage(playerid, -1, Str);

		format(Str, sizeof(Str), "{9999cc} PAÞYMËJIMAS {b4b4e0} Þaidëjas {9999cc}%s{b4b4e0} atsisakë jûsø paslaugø!", GetPlayerNameEx(playerid));
		SendClientMessage(SuggPlayerid, -1, Str);
	}
	return 1;
}

CMD:mgyvybes(playerid, params[])
{
	if(PI[playerid][specialybe] != 2) return 0;

	new giveplayerid, Float: P_Pos[3], String[216], MoneyCount;

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "ud", giveplayerid, MoneyCount)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /mgyvybes <vardas_pavardë/id> <kaina>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerMoneyA(giveplayerid) < MoneyCount) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjui neuþtenka pinigø!");

	if(MoneyCount < 1 || MoneyCount > 300) return SendClientMessage(playerid, -1, "{ffffff} Gydymo kaina turi bûti nuo {FFAF00}$1 {ffffff}iki {FFAF00}$300{ffffff}!");

	if(PI[playerid][DarboCMD][0] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Siûlyti gydymà galima tik kas 30 sekundþiø!");

	ChoosedPlayer[giveplayerid]		= playerid;
	PI[giveplayerid][sGyvybiuKaina] = MoneyCount;
	PI[playerid][DarboCMD][0] 		= gettime() + 30; 

	PI[giveplayerid][pHEAL] = true;

	format(String, sizeof(String), "{9999cc} GYVYBËS {b4b4e0} Medikas {9999cc}%s{b4b4e0} siûlo jums pirkti gyvybiø uþ ${9999cc}%d", GetPlayerNameEx(playerid), MoneyCount);
	SendClientMessage(giveplayerid, -1, String);
	SendClientMessage(giveplayerid, -1, "{9999cc} GYVYBËS {b4b4e0} Jei sutinkate pirkti gyvybiø - {9999cc}/perku{b4b4e0} jei nesutinkate - {9999cc}/neperku");

	format(String, sizeof(String), "{9999cc} GYVYBËS {b4b4e0} Pasiûlëte þaidëjui {9999cc}%s {b4b4e0}nusipirkti gyvybiø!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:msarvai(playerid, params[])
{
	if(PI[playerid][specialybe] != 2) return 0;

	new giveplayerid, Float: P_Pos[3], String[216], MoneyCount;

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "ud", giveplayerid, MoneyCount)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /msarvai <vardas_pavardë/id> <kaina>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerMoneyA(giveplayerid) < MoneyCount) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjui neuþtenka pinigø!");

	if(MoneyCount < 1 || MoneyCount > 300) return SendClientMessage(playerid, -1, "{ffffff} Ðarvø kaina turi bûti nuo {FFAF00}$1 {ffffff}iki {FFAF00}$300{ffffff}!");

	if(PI[playerid][DarboCMD][1] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Siûlyti ðarvus galima tik kas 30 sekundþiø!");

	ChoosedPlayer[giveplayerid] 	= playerid;
	PI[giveplayerid][sArmoroKaina] 	= MoneyCount;
	PI[playerid][DarboCMD][1] 		= gettime() + 30; 
	PI[giveplayerid][pSARVUS] = true;
	
	format(String, sizeof(String), "{9999cc} ÐARVAI {b4b4e0} Medikas {9999cc}%s{b4b4e0} siûlo jums pirkti ðarvus uþ ${9999cc}%d", GetPlayerNameEx(playerid), MoneyCount);
	SendClientMessage(giveplayerid, -1, String);
	SendClientMessage(giveplayerid, -1, "{9999cc} ÐARVAI {b4b4e0} Jei sutinkate pirkti ðarvus - {9999cc}/perku{b4b4e0} jei nesutinkate - {9999cc}/neperku");

	format(String, sizeof(String), "{9999cc} ÐARVAI {b4b4e0} Pasiûlëte þaidëjui {9999cc}%s {b4b4e0}nusipirkti ðarvø!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:mpazymejimas(playerid, params[])
{
	if(PI[playerid][specialybe] != 2) return 0;

	new giveplayerid, Float: P_Pos[3], String[216], MoneyCount;

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate be darbiniø drabuþiø!");

	if(sscanf(params, "ud", giveplayerid, MoneyCount)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /mpazymejimas <vardas_pavardë/id> <kaina>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerMoneyA(giveplayerid) < MoneyCount) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjui neuþtenka pinigø!");

	if(MoneyCount < 1 || MoneyCount > 1000) return SendClientMessage(playerid, -1, "{ffffff} Sveikatos paþymëjimo kaina turi bûti nuo {FFAF00}$1 {ffffff}iki {FFAF00}$1,000{ffffff}!");

	ChoosedPlayer[giveplayerid]     = playerid;
	PI[giveplayerid][sPazymosKaina] = MoneyCount;
	PI[giveplayerid][pPAZ] = true;

	format(String, sizeof(String), "{9999cc} PAÞYMËJIMAS {b4b4e0} Medikas {9999cc}%s{b4b4e0} siûlo jums pirkti paþymëjimà uþ ${9999cc}%d", GetPlayerNameEx(playerid), MoneyCount);
	SendClientMessage(giveplayerid, -1, String);
	SendClientMessage(giveplayerid, -1, "{9999cc} PAÞYMËJIMAS {b4b4e0} Jei sutinkate pirkti paþymëjimà - {9999cc}/perku{b4b4e0} jei nesutinkate - {9999cc}/neperku");

	format(String, sizeof(String), "{9999cc} PAÞYMËJIMAS {b4b4e0} Pasiûlëte þaidëjui {9999cc}%s {b4b4e0}nusipirkti paþymëjimà!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

/*CMD:dujos(playerid)
{
	new
		vehicleid = GetPlayerNearestVehicle(playerid),
		Float:x,
		Float:y,
		Float:z;
		
	//if(PI[playerid][specialybe] != 4) return 0;

	GetVehiclePos(vehicleid, x, y, z);
	if(IsPlayerInRangeOfPoint(playerid,8.0, x, y, z))
	{
		if(IsVehicleSeatOccupied(vehicleid, 0) == 1) return SendClientMessage(playerid, -1, "{ffffff} transporto priemonëje sëdi vairuotojas !");
	}
	else
	{
		SendClientMessage(playerid, -1, "{ffffff} ðalia nëra jokios tr. priemonës"); // WORRRRKS
		return 1;
	}


	    if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Ðià komandà galima naudoti tik apsirengus darbo uniformà!");

		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti transp. priemonëje!");

		pDUJU[playerid] = cD_StartBar(playerid, "Duju sistema montuojama", 10000);
	}
	return 1;
}*/

CMD:mechanikas(playerid)
{
	if(PI[playerid][specialybe] != 4) return 0;

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Ðià komandà galima naudoti tik apsirengus darbo uniformà!");

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti transp. priemonëje!");

	new String[400];

	strcat(String, "Pasirinkimas\tKaina\n");
	strcat(String, "1. Taisyti tr. priemonæ\t{FFAF00}$350\n");
	strcat(String, "2. Ápilti degalø\t{FFAF00}$200\n");
	strcat(String, "3. Atlikti tech. apþiûrà\t{FFAF00}$500\n");
	strcat(String, "4. Ámontuoti dujø árangà\t{FFAF00}$1,000\n \n");
	strcat(String, "5. Sunaikinti darbinæ tr. priemonæ");

	ShowPlayerDialogEx(playerid, 1045, DIALOG_STYLE_TABLIST_HEADERS, "Autoserviso ECO darbo valdymas", String, "Pasirinkti", "Uþdaryti");

	return 1;
}

CMD:tune(playerid)
{
	if(PI[playerid][specialybe] != 4) return 0;

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Ðià komandà galima naudoti tik apsirengus darbo uniformà!");

	if(!PlayerInZone(playerid, -2699, -63, -2613, 31)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti Autoserviso ECO garaþe arba ðalia jo!");

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti transp. priemonëje!");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(IsABike(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Dviraèiø tuninguoti negalima!");

	ShowPlayerDialogEx(playerid, MechDialog, DIALOG_STYLE_TABLIST_HEADERS, "Transporto tuningavimas",
	"Pasirinkimas\tKaina\n1. Spalvø kodai (ID)\n2. Daþyti transportà\t{FFAF00}$400\n3. Keisti transporto ratus\t{FFAF00}$1,000\n4. Tuninguoti transportà\n5. Nuimti tuningà\t{FFAF00}$1,500", "Pasirinkti", "Uþdaryti");

	return 1;
}

CMD:prikabinti(playerid)
{
	if(PI[playerid][specialybe] != 4) return 0;

	if(!PI[playerid][uniformd]) return SendClientMessage(playerid, -1, "{ffffff} Ðià komandà galima naudoti tik apsirengus darbo uniformà!");

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti transp. priemonëje!");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
   	{
		if(GetVehicleModel(vehicleid) == 525)
		{
			new Float:aPos[3], Float: kabinamosz, Float: mechz;

			for(new v = 0, size = GetVehiclePoolSize(); v <= size; v++)
			{
			    if(GetVehicleModel(v) < 400 || v == vehicleid) continue;

				GetVehiclePos(v, aPos[0], aPos[1], aPos[2]);

				GetVehicleZAngle(vehicleid, mechz);
				GetVehicleZAngle(v, kabinamosz);

				if(IsPlayerInRangeOfPoint(playerid, 7.0, aPos[0], aPos[1], aPos[2]))
				{
					if(mechz <= kabinamosz + 10 && mechz >= kabinamosz - 10)
					{
						if(VehicleInfo[v][vNupirkta])
						{
							new vOwner = GetPlayeridMid(VehicleInfo[v][vSavininkas]);

							new str[128];

							format(str, sizeof(str), "{ffffff} Pradëjote vilkti þaidëjo {FFAF00}%s {FFFFFF}transp. priemonæ!", GetPlayerNameEx(vOwner));
							SendClientMessage(playerid, -1, str);

							format(str, sizeof(str), "{ffffff} Autoserviso ECO darbuotojas {FFAF00}%s {FFFFFF}pradëjo vilkti jûsø {FFAF00}%s{FFFFFF}!", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(v) - 400]);
							SendClientMessage(vOwner, -1, str);
						}

						AttachTrailerToVehicle(v, vehicleid);
					}
				}
			}
		}
	}

	return 1;
}

CMD:atkabinti(playerid)
{
	if(PI[playerid][specialybe] != 11 && PI[playerid][specialybe] != 4) return 0;

	if(IsPlayerConnected(playerid))
	{
		new tmpcar = GetPlayerVehicleID(playerid);

		if(IsTrailerAttachedToVehicle(tmpcar))
		{
			DetachTrailerFromVehicle(tmpcar);
		}
		else
		{
			SendClientMessage(playerid, -1, "{ffffff} Jus nieko neprisikabinæ!");
		}
	}

	return 1;
}

CMD:ismesti(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti tr. priemonëje!");

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti tr. priemonës vairuotojo vietoje!");

	new vehicleid = GetPlayerVehicleID(playerid);

	for(new p = 0; p < MAX_PLAYERS; p ++)
	{
		if(p == playerid) continue;

		if(IsPlayerInVehicle(p, vehicleid))
		{
			RemovePlayerFromVehicle(p);
		}
	}

	SendClientMessage(playerid, -1, "{ffffff} Visi þaidëjai buvo iðmesti ið tr. priemonës.");

	return 1;
}

CMD:darbas(playerid)
{
	new String[1500];

	switch(PI[playerid][specialybe])
	{
		case 1:
		{
			strcat(String, "{FFAF00} /r {ffffff}- paraðysite á darbo racijà\n");
			strcat(String, "{FFAF00} /rt {ffffff}- paraðysite á teisësaugos racijà\n");
			strcat(String, "{FFAF00} /patikrinti {ffffff}- patikrinsite þaidëjo turimas vairavimo teises, narkotikus ir t.t.\n");
			strcat(String, "{FFAF00} /ita {ffffff}- uþdësite þaidëjui átarimo lygá\n");
			strcat(String, "{FFAF00} /bauda {ffffff}- pasiûlysite þaidëjui mokëti baudà\n");
			strcat(String, "{FFAF00} /ist {ffffff}- iðteisinsite þaidëjà\n");
			strcat(String, "{FFAF00} /kon {ffffff}- konfiskuosite þaidëjo narkotikus\n");
			strcat(String, "{FFAF00} /kgun {ffffff}- konfiskuosite þaidëjo ginklus\n");
			strcat(String, "{FFAF00} /tazeris {ffffff}- paimsite/pasidësite tazerá\n");
			strcat(String, "{FFAF00} /uztvara {ffffff}- padësite/paðalinsite kelio uþtvarà\n");
			strcat(String, "{FFAF00} /ant {ffffff}- uþdësite/nuimsite þaidëjui antrankius\n");
			strcat(String, "{FFAF00} /atim {ffffff}- atimsite þaidëjui vairavimo teises arba ginklø licenzijà\n");
			strcat(String, "{FFAF00} /isodinti {ffffff}- ásodinsite þaidëjà á transp. priemonæ\n");
			strcat(String, "{FFAF00} /sekti {ffffff}- pradësite/nustosite sekti þaidëjà\n");
			strcat(String, "{FFAF00} /liemene {ffffff}- uþsidësite nusiimsite neperðaunamà liemenæ (nuims maþiau gyvybiø)\n");
			strcat(String, "{FFAF00} /beglys {ffffff}- átrauksite/iðimsite þaidëjà ið bëgliø sàraðo\n");
			strcat(String, "{FFAF00} /begliai {ffffff}- pamatysite visus bëgliais paþymëtus þaidëjus\n");
			strcat(String, "{FFAF00} /ieskomi {ffffff}- pamatysite visus ieðkomus þaidëjus\n");
			strcat(String, "{FFAF00} /vaziuoju {ffffff}- priimsite iðkvietimà\n");
			strcat(String, "{FFAF00} /stop {ffffff}- praneðite þaidëjui, kad jis turi sustoti\n");
			ShowPlayerDialogEx(playerid, 8695, DIALOG_STYLE_MSGBOX, "Jûsø darbo komandos", String, "Uþdaryti", "");
		}

		case 2:
		{
			strcat(String, "{FFAF00} /mgyvybes {ffffff}- parduosite þaidëjui gyvybes\n");
			strcat(String, "{FFAF00} /msarvai {ffffff}- parduosite þaidëjui ðarvus\n");
			strcat(String, "{FFAF00} /mpazymejimas {ffffff}- parduosite þaidëjui sveikatos paþymëjimà\n");
			strcat(String, "{FFAF00} /vaziuoju {ffffff}- priimsite iðkvietimà\n");
			ShowPlayerDialogEx(playerid, 8695, DIALOG_STYLE_MSGBOX, "Jûsø darbo komandos", String, "Uþdaryti", "");
		}

		case 3:
		{
			strcat(String, "{FFAF00} /pasikrovimas {ffffff}- gausite kroviniø pasikrovimo koordinates\n");
			ShowPlayerDialogEx(playerid, 8695, DIALOG_STYLE_MSGBOX, "Jûsø darbo komandos", String, "Uþdaryti", "");
		}

		case 4:
		{
			strcat(String, "{FFAF00} /mechanikas {ffffff}- pagrindinis autoserviso ECO darbo valdymas\n");
			strcat(String, "{FFAF00} /tune {ffffff}- tuninguoti tr. priemonæ\n");
			strcat(String, "{FFAF00} /prikabinti (arba +) {ffffff}- prikabinsite tr. priemonæ\n");
			strcat(String, "{FFAF00} /atkabinti {ffffff}- atkabinsite prikabintà tr. priemonæ\n");
			strcat(String, "{FFAF00} /vaziuoju {ffffff}- priimsite iðkvietimà\n");
			ShowPlayerDialogEx(playerid, 8695, DIALOG_STYLE_MSGBOX, "Jûsø darbo komandos", String, "Uþdaryti", "");
		}

		case 5:
		{
			strcat(String, "{FFAF00} /r {ffffff}- paraðysite á darbo racijà\n");
			strcat(String, "{FFAF00} /rt {ffffff}- paraðysite á teisësaugos racijà\n");
			strcat(String, "{FFAF00} /patikrinti {ffffff}- patikrinsite þaidëjo turimas vairavimo teises, narkotikus ir t.t.\n");
			strcat(String, "{FFAF00} /ita {ffffff}- uþdësite þaidëjui átarimo lygá\n");
			strcat(String, "{FFAF00} /bauda {ffffff}- pasiûlysite þaidëjui mokëti baudà\n");
			strcat(String, "{FFAF00} /ist {ffffff}- iðteisinsite þaidëjà\n");
			strcat(String, "{FFAF00} /kon {ffffff}- konfiskuosite þaidëjo narkotikus\n");
			strcat(String, "{FFAF00} /kgun {ffffff}- konfiskuosite þaidëjo ginklus\n");
			strcat(String, "{FFAF00} /tazeris {ffffff}- paimsite/pasidësite tazerá\n");
			strcat(String, "{FFAF00} /uztvara {ffffff}- padësite/paðalinsite kelio uþtvarà\n");
			strcat(String, "{FFAF00} /ant {ffffff}- uþdësite/nuimsite þaidëjui antrankius\n");
			strcat(String, "{FFAF00} /atim {ffffff}- atimsite þaidëjui vairavimo teises arba ginklø licenzijà\n");
			strcat(String, "{FFAF00} /isodinti {ffffff}- ásodinsite þaidëjà á transp. priemonæ\n");
			strcat(String, "{FFAF00} /sekti {ffffff}- pradësite/nustosite sekti þaidëjà\n");
			strcat(String, "{FFAF00} /liemene {ffffff}- uþsidësite nusiimsite neperðaunamà liemenæ (nuims maþiau gyvybiø)\n");
			strcat(String, "{FFAF00} /beglys {ffffff}- átrauksite/iðimsite þaidëjà ið bëgliø sàraðo\n");
			strcat(String, "{FFAF00} /begliai {ffffff}- pamatysite visus bëgliais paþymëtus þaidëjus\n");
			strcat(String, "{FFAF00} /ieskomi {ffffff}- pamatysite visus ieðkomus þaidëjus\n");
			strcat(String, "{FFAF00} /stop {ffffff}- praneðite þaidëjui, kad jis turi sustoti\n");
			ShowPlayerDialogEx(playerid, 8695, DIALOG_STYLE_MSGBOX, "Jûsø darbo komandos", String, "Uþdaryti", "");
		}

		case 11:
		{
			strcat(String, "{FFAF00} /atkabinti {ffffff}- atkabinsite prikabintà priekabà\n");
			strcat(String, "{FFAF00} /iskrautitr {ffffff}- iðkrausite transp. priemonæ ið priekabos\n");
			strcat(String, "{FFAF00} /pakrautitr {ffffff}- pakrausite transp. priemonæ á priekabà\n");
			strcat(String, "{FFAF00} /trgamykla {ffffff}- gausite koordinates á transp. priemoniø gamyklà\n");
			strcat(String, "{FFAF00} /pasikrovimas {ffffff}- gausite legaliø kroviniø pasikrovimo koordinates\n");
			ShowPlayerDialogEx(playerid, 8695, DIALOG_STYLE_MSGBOX, "Jûsø darbo komandos", String, "Uþdaryti", "");
		}
		case 13:
		{
		strcat(String, "{FFAF00} /r {ffffff}- paraðysite á darbo racijà\n");
		strcat(String, "{FFAF00} /vaziuoju {ffffff}- priimsite iðkvietimà\n");
		strcat(String, "{FFAF00} /dirbti {ffffff}- pradëti darbà su nuosavu transportu\n");
		ShowPlayerDialogEx(playerid, 8695, DIALOG_STYLE_MSGBOX, "Jûsø darbo komandos", String, "Uþdaryti", "");
		}

		case 20:
		{
			strcat(String, "{FFAF00} /pica {ffffff}- pasiûlysite þaidëjui pavalgyti picà\n \n");
			strcat(String, "{ffffff}Jûsø darbo tikslas - pasiimti ið picerijos pagamintà picà, padëti jà á motorolerá ir pristatyti á nurodytà vietà.\n");
			strcat(String, "{ffffff}Privaþiavus prie nurodytos vietos, turësite paimti picà ið motorolerio paspaudus mygtukà \"N\" ir nuneðti prie namo durø. Sëkmës!\n");
			ShowPlayerDialogEx(playerid, 8695, DIALOG_STYLE_MSGBOX, "Jûsø darbo informacija", String, "Uþdaryti", "");
		}

		case 22:
		{
			strcat(String, "{ffffff}Jûsø darbo tikslas - vaþinëti po miestà ir valyti kelius iki kol baigsis valomasis skystis.\n");
			strcat(String, "{ffffff}Valomojo skysèio likutis rodomas mëlyname progressbar'e po spidometru. Pasibaigus skysèiui, jus\n");
			strcat(String, "{ffffff}gausite tam tikrà atlygá. Dar kartà valomàjá skystá galësite ásipilti valytojø bazëje. Sëkmës!");
			ShowPlayerDialogEx(playerid, 8695, DIALOG_STYLE_MSGBOX, "Jûsø darbo informacija", String, "Uþdaryti", "");
		}
		
		case 24:
		{
			strcat(String, "{FFAF00} /autobusas {ffffff}- pradëti arba baigti darbui!");
			ShowPlayerDialogEx(playerid, 8695, DIALOG_STYLE_MSGBOX, "Jûsø darbo informacija", String, "Uþdaryti", "");
		}

		case 26:
		{
			strcat(String, "{ffffff}Jûsø darbo tikslas - laukti iðkvietimø, kad yra gaisras.\n");
			strcat(String, "{ffffff}gave iðkvietimà nedelsiant vaþiuokite á paþymëtà vietà ir\n");
			strcat(String, "{ffffff}gesinkite gaisrà. Uþgesinus gausite atitinkamà atlygá. Sëkmës!");
			ShowPlayerDialogEx(playerid, 8695, DIALOG_STYLE_MSGBOX, "Jûsø darbo informacija", String, "Uþdaryti", "");
		}

		default: return 0;
	}

	return 1;
}

CMD:priziuretojai(playerid, params[])
{
	mysql_query("SELECT Vardas, Priziuretojas FROM players WHERE Priziuretojas > '0'");
	mysql_store_result( );

	new dVardas[MAX_PLAYER_NAME], x, resultline[50], str[130], fstr[1600], dKoks[60], kLead, dStatus[30];

	while(mysql_fetch_row_format(resultline))
	{
		sscanf(resultline,"p<|>s[24]d", dVardas, kLead);

		x++;

		if(kLead > 0)
		{
			if(kLead == 1) 			dKoks = "Admin/VIP";
			else if(kLead == 2) 	dKoks = "VIP nariø";
			else if(kLead == 3)	 	dKoks = "Gaujø";
			else if(kLead == 4) 	dKoks = "Direktoriø";
			else if(kLead == 5) 	dKoks = "BAN/UNBAN";

			if(GetPlayeridMid(dVardas) != INVALID_PLAYER_ID) { dStatus = "{FFAF00}ONLINE"; } else { dStatus = "{FFAF00}OFFLINE"; }

			format(str, sizeof(str), "{ffffff}%d. %s priþiûrëtojas - %s | Statusas: %s\n", x, dKoks, dVardas, dStatus);
			strcat(fstr, str);
		}
	}

	ShowPlayerDialogEx(playerid, 1114, DIALOG_STYLE_MSGBOX, "Priþiûrëtojai", fstr, "Uþdaryti", "");

	mysql_free_result();

	return 1;
}
CMD:direktoriai(playerid)
{
	enum E {
		j_id[15],
		j_name[32]
	};

	new 
		vardas[MAX_PLAYER_NAME],
		status[24],
		inner_ispejimai,
		line[256],
		string[2048],
		jobs[][E] = {
			{1, "Policijos departamentas"},
			{2, "Medicinos departamentas"},
			{3, "Kurjeriai"},
			{4, "Autoservisas \"ECO\""},
			{5, "Spec. bûrio pajëgos \"Aras\""},
			{11, "Fûristai"},
			{13, "Taksistai"}
	};

#define LEAD_FARAI 		1
#define LEAD_MEDIKAI 	2
#define LEAD_KURJ 		3
#define LEAD_Mechanikas 4
#define LEAD_FUROS 		11
#define LEAD_Gdyleriai	5
#define LEAD_TAXI      13

#define POLICIJA			1
#define MEDIKAI				2
#define KURJERIAI 			3
#define MECHANIKAI 			4
#define DYLERIAI 			5
#define FURISTAI			11
#define PICAI 				20
#define KELIAI 				22
#define AUTOBUSAI 			24
#define GAISRAI 			26
#define TAXI                13

	for(new job = 0; job < sizeof jobs; job++)
	{
		// Isgaunam direktorius visus sito darbo
		format(line, sizeof line, "SELECT `Vardas`,`Dispejimai` FROM `players` WHERE `Lead` = '%d'", jobs[job][j_id]);
		mysql_query(line);
		mysql_store_result();

		format(line, sizeof line, "{ffffff} - %s\n{FFFFFF}", jobs[job][j_name]);
		strcat(string, line);


		if(mysql_num_rows())
		{
			while(mysql_retrieve_row())
			{
				mysql_get_field("Vardas", vardas);
				mysql_get_field("Dispejimai", line[0]); inner_ispejimai = strval(line[0]);


				if(GetPlayeridMid(vardas) != INVALID_PLAYER_ID) status = "{19F14F}ONLINE{ffffff}";
				else status = "{FFAF00}OFFLINE{ffffff}";

				format(line, sizeof line, "Direktorius {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n{ffffff}", vardas, status, inner_ispejimai);
				strcat(string, line);
			}
		}
		else
		{
			format(line, sizeof line, "Direktorius dar neiðrinktas\n");
			strcat(string, line);
		}
		mysql_free_result();

		// Ta pati su pavaduotojais
		format(line, sizeof line, "SELECT `Vardas` FROM `players` WHERE `pavdrk` = '%d'", jobs[job][j_id]);
		mysql_query(line);
		mysql_store_result();

		if(mysql_num_rows())
		{
			while(mysql_retrieve_row())
			{
				mysql_get_field("Vardas", vardas);

				if(GetPlayeridMid(vardas) != INVALID_PLAYER_ID) status = "{19F14F}ONLINE{ffffff}";
				else status = "{FFAF00}OFFLINE{ffffff}";

				format(line, sizeof line, "Pavaduotojas {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n{ffffff}", vardas, status, inner_ispejimai);
				strcat(string, line);
			}
		}
		else
		{
			format(line, sizeof line, "Pavaduotojas dar neiðrinktas\n");
			strcat(string, line);
		}
		mysql_free_result();
	}
	ShowPlayerDialogEx(playerid, 1114, DIALOG_STYLE_MSGBOX, "Serverio darbø valdþia", string, "Uþdaryti", "");
	return 1;
}

COMMAND:direktoriaii(playerid)
{
	mysql_query("SELECT `Vardas`, `Dispejimai` FROM `players` WHERE `Lead` = '1'");
	mysql_store_result();

	new pName[24], pName1[24], dDate[32], dDate1[32], pStatus[30], pStatus1[30], dyrikai,
	String[800], Stringas[2000], resultline[50], resultline1[50], Dispejimai, Pispejimai, pavai;

	while(mysql_fetch_row(resultline))
	{
		sscanf(resultline, "p<|>s[24]s[32]d", pName, dDate, Dispejimai);

		dyrikai ++;

		mysql_query("SELECT `Vardas` FROM `players` WHERE `pavdrk` = '1'");
		mysql_store_result();

		while(mysql_fetch_row(resultline1))
		{
			sscanf(resultline1, "p<|>s[24]s[32]d", pName1, dDate1, Pispejimai);

			pavai ++;
		}
	}

	if(GetPlayeridMid(pName) != INVALID_PLAYER_ID) 	pStatus = "{19F14F}ONLINE{ffffff}";
	else 											pStatus = "{FFAF00}OFFLINE{ffffff}";

	if(GetPlayeridMid(pName1) != INVALID_PLAYER_ID) pStatus1 = "{19F14F}ONLINE{ffffff}";
	else 											pStatus1 = "{FFAF00}OFFLINE{ffffff}";

	strcat(Stringas, "{ffffff} - Policijos departamento valdþia\n");

	if(dyrikai > 0)
	{
		format(String, sizeof(String), "{ffffff}\tDirektorius {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n", pName, pStatus, Dispejimai);
		strcat(Stringas, String);
	}
	else
	{
		strcat(Stringas, "{ffffff}\tDirektorius ðiuo metu dar neiðrinktas\n");
	}

	if(pavai > 0)
	{
		format(String, sizeof(String), "{ffffff}\tPavaduotojas {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n \n", pName1, pStatus1, Pispejimai);
		strcat(Stringas, String);
	}
	else
	{
		strcat(Stringas, "{ffffff}\tPavaduotojas ðiuo metu dar neiðrinktas\n \n");
	}

	resultline[0] 	= EOS;
	resultline1[0] 	= EOS;
	dyrikai 		= 0;
	pavai 			= 0;

	mysql_free_result();

	mysql_query("SELECT `Vardas`, `Dispejimai` FROM `players` WHERE `Lead` = '2'");
	mysql_store_result();

	while(mysql_fetch_row(resultline))
	{
		sscanf(resultline, "p<|>s[24]s[32]d", pName, dDate, Dispejimai);

		dyrikai ++;

		mysql_query("SELECT `Vardas` FROM `players` WHERE `pavdrk` = '2'");
		mysql_store_result();

		while(mysql_fetch_row(resultline1))
		{
			sscanf(resultline1, "p<|>s[24]s[32]d", pName1, dDate1, Pispejimai);

			pavai ++;
		}
	}

	if(GetPlayeridMid(pName) != INVALID_PLAYER_ID) 	pStatus = "{19F14F}ONLINE{ffffff}";
	else 											pStatus = "{FFAF00}OFFLINE{ffffff}";

	if(GetPlayeridMid(pName1) != INVALID_PLAYER_ID) pStatus1 = "{19F14F}ONLINE{ffffff}";
	else 											pStatus1 = "{FFAF00}OFFLINE{ffffff}";

	strcat(Stringas, "{ffffff} - Medicinos departamento valdþia\n");

	if(dyrikai > 0)
	{
		format(String, sizeof(String), "{ffffff}\tDirektorius {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n", pName, pStatus, Dispejimai);
		strcat(Stringas, String);
	}
	else
	{
		strcat(Stringas, "{ffffff}\tDirektorius ðiuo metu dar neiðrinktas\n");
	}

	if(pavai > 0)
	{
		format(String, sizeof(String), "{ffffff}\tPavaduotojas {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n \n", pName1, pStatus1, Pispejimai);
		strcat(Stringas, String);
	}
	else
	{
		strcat(Stringas, "{ffffff}\tPavaduotojas ðiuo metu dar neiðrinktas\n \n");
	}

	resultline[0] 	= EOS;
	resultline1[0] 	= EOS;
	dyrikai 		= 0;
	pavai 			= 0;

	mysql_free_result();

	mysql_query("SELECT `Vardas`, `Dispejimai` FROM `players` WHERE `Lead` = '3'");
	mysql_store_result();

	while(mysql_fetch_row(resultline))
	{
		sscanf(resultline, "p<|>s[24]s[32]d", pName, dDate, Dispejimai);

		dyrikai ++;

		mysql_query("SELECT `Vardas` FROM `players` WHERE `pavdrk` = '3'");
		mysql_store_result();

		while(mysql_fetch_row(resultline1))
		{
			sscanf(resultline1, "p<|>s[24]s[32]d", pName1, dDate1, Pispejimai);

			pavai ++;
		}
	}

	if(GetPlayeridMid(pName) != INVALID_PLAYER_ID) 	pStatus = "{19F14F}ONLINE{ffffff}";
	else 											pStatus = "{FFAF00}OFFLINE{ffffff}";

	if(GetPlayeridMid(pName1) != INVALID_PLAYER_ID) pStatus1 = "{19F14F}ONLINE{ffffff}";
	else 											pStatus1 = "{FFAF00}OFFLINE{ffffff}";

	strcat(Stringas, "{ffffff} - Kurjeriø valdþia\n");

	if(dyrikai > 0)
	{
		format(String, sizeof(String), "{ffffff}\tDirektorius {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n", pName, pStatus, Dispejimai);
		strcat(Stringas, String);
	}
	else
	{
		strcat(Stringas, "{ffffff}\tDirektorius ðiuo metu dar neiðrinktas\n");
	}

	if(pavai > 0)
	{
		format(String, sizeof(String), "{ffffff}\tPavaduotojas {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n \n", pName1, pStatus1, Pispejimai);
		strcat(Stringas, String);
	}
	else
	{
		strcat(Stringas, "{ffffff}\tPavaduotojas ðiuo metu dar neiðrinktas\n \n");
	}

	resultline[0] 	= EOS;
	resultline1[0] 	= EOS;
	dyrikai 		= 0;
	pavai 			= 0;

	mysql_free_result();

	mysql_query("SELECT `Vardas`, `Dispejimai` FROM `players` WHERE `Lead` = '4'");
	mysql_store_result();

	while(mysql_fetch_row(resultline))
	{
		sscanf(resultline, "p<|>s[24]s[32]d", pName, dDate, Dispejimai);

		dyrikai ++;

		mysql_query("SELECT `Vardas` FROM `players` WHERE `pavdrk` = '4'");
		mysql_store_result();

		while(mysql_fetch_row(resultline1))
		{
			sscanf(resultline1, "p<|>s[24]s[32]d", pName1, dDate1, Pispejimai);

			pavai ++;
		}
	}

	if(GetPlayeridMid(pName) != INVALID_PLAYER_ID) 	pStatus = "{19F14F}ONLINE{ffffff}";
	else 											pStatus = "{FFAF00}OFFLINE{ffffff}";

	if(GetPlayeridMid(pName1) != INVALID_PLAYER_ID) pStatus1 = "{19F14F}ONLINE{ffffff}";
	else 											pStatus1 = "{FFAF00}OFFLINE{ffffff}";

	strcat(Stringas, "{ffffff} - Autoserviso ECO valdþia\n");

	if(dyrikai > 0)
	{
		format(String, sizeof(String), "{ffffff}\tDirektorius {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n", pName, pStatus, Dispejimai);
		strcat(Stringas, String);
	}
	else
	{
		strcat(Stringas, "{ffffff}\tDirektorius ðiuo metu dar neiðrinktas\n");
	}

	if(pavai > 0)
	{
		format(String, sizeof(String), "{ffffff}\tPavaduotojas {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n \n", pName1, pStatus1, Pispejimai);
		strcat(Stringas, String);
	}
	else
	{
		strcat(Stringas, "{ffffff}\tPavaduotojas ðiuo metu dar neiðrinktas\n \n");
	}

	resultline[0] 	= EOS;
	resultline1[0] 	= EOS;
	dyrikai 		= 0;
	pavai 			= 0;

	mysql_free_result();

	mysql_query("SELECT `Vardas`, `Dispejimai` FROM `players` WHERE `Lead` = '5'");
	mysql_store_result();

	while(mysql_fetch_row(resultline))
	{
		sscanf(resultline, "p<|>s[24]s[32]d", pName, dDate, Dispejimai);

		dyrikai ++;

		mysql_query("SELECT `Vardas`, FROM `players` WHERE `pavdrk` = '5'");
		mysql_store_result();

		while(mysql_fetch_row(resultline1))
		{
			sscanf(resultline1, "p<|>s[24]s[32]d", pName1, dDate1, Pispejimai);

			pavai ++;
		}
	}

	if(GetPlayeridMid(pName) != INVALID_PLAYER_ID) 	pStatus = "{19F14F}ONLINE{ffffff}";
	else 											pStatus = "{FFAF00}OFFLINE{ffffff}";

	if(GetPlayeridMid(pName1) != INVALID_PLAYER_ID) pStatus1 = "{19F14F}ONLINE{ffffff}";
	else 											pStatus1 = "{FFAF00}OFFLINE{ffffff}";

	strcat(Stringas, "{ffffff} - Spec. bûrio pajëgø ARAS valdþia\n");

	if(dyrikai > 0)
	{
		format(String, sizeof(String), "{ffffff}\tDirektorius {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n", pName, pStatus, Dispejimai);
		strcat(Stringas, String);
	}
	else
	{
		strcat(Stringas, "{ffffff}\tDirektorius ðiuo metu dar neiðrinktas\n");
	}

	if(pavai > 0)
	{
		format(String, sizeof(String), "{ffffff}\tPavaduotojas {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n \n", pName1, pStatus1, Pispejimai);
		strcat(Stringas, String);
	}
	else
	{
		strcat(Stringas, "{ffffff}\tPavaduotojas ðiuo metu dar neiðrinktas\n \n");
	}

	resultline[0] 	= EOS;
	resultline1[0] 	= EOS;
	dyrikai 		= 0;
	pavai 			= 0;

	mysql_free_result();

	mysql_query("SELECT `Vardas`, `Dispejimai` FROM `players` WHERE `Lead` = '11'");
	mysql_store_result();

	dyrikai 		= 0;
	pavai 			= 0;

	while(mysql_fetch_row(resultline))
	{
		sscanf(resultline, "p<|>s[24]s[32]d", pName, dDate, Dispejimai);

		dyrikai ++;

		mysql_query("SELECT `Vardas` FROM `players` WHERE `pavdrk` = '11'");
		mysql_store_result();

		while(mysql_fetch_row(resultline1))
		{
			sscanf(resultline1, "p<|>s[24]s[32]d", pName1, dDate1, Pispejimai);

			pavai ++;
		}
	}

	if(GetPlayeridMid(pName) != INVALID_PLAYER_ID) 	pStatus = "{19F14F}ONLINE{ffffff}";
	else 											pStatus = "{FFAF00}OFFLINE{ffffff}";

	if(GetPlayeridMid(pName1) != INVALID_PLAYER_ID) pStatus1 = "{19F14F}ONLINE{ffffff}";
	else 											pStatus1 = "{FFAF00}OFFLINE{ffffff}";

	strcat(Stringas, "{ffffff} - Fûristø valdþia\n");

	if(dyrikai > 0)
	{
		format(String, sizeof(String), "{ffffff}\tDirektorius {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n", pName, pStatus, Dispejimai);
		strcat(Stringas, String);
	}
	else
	{
		strcat(Stringas, "{ffffff}\tDirektorius ðiuo metu dar neiðrinktas\n");
	}

	if(pavai > 0)
	{
		format(String, sizeof(String), "{ffffff}\tPavaduotojas {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n \n", pName1, pStatus1, Pispejimai);
		strcat(Stringas, String);
	}
	else
	{
		strcat(Stringas, "{ffffff}\tPavaduotojas ðiuo metu dar neiðrinktas\n \n");
	}

	resultline[0] 	= EOS;
	resultline1[0] 	= EOS;
	dyrikai 		= 0;
	pavai 			= 0;

	mysql_free_result();
	
	mysql_query("SELECT `Vardas`, `Dispejimai` FROM `players` WHERE `Lead` = '13'");
	mysql_store_result();

	dyrikai 		= 0;
	pavai 			= 0;

	while(mysql_fetch_row(resultline))
	{
		sscanf(resultline, "p<|>s[24]s[32]d", pName, dDate, Dispejimai);

		dyrikai ++;

		mysql_query("SELECT `Vardas` FROM `players` WHERE `pavdrk` = '13'");
		mysql_store_result();

		while(mysql_fetch_row(resultline1))
		{
			sscanf(resultline1, "p<|>s[24]s[32]d", pName1, dDate1, Pispejimai);

			pavai ++;
		}
	}

	if(GetPlayeridMid(pName) != INVALID_PLAYER_ID) 	pStatus = "{19F14F}ONLINE{ffffff}";
	else 											pStatus = "{FFAF00}OFFLINE{ffffff}";

	if(GetPlayeridMid(pName1) != INVALID_PLAYER_ID) pStatus1 = "{19F14F}ONLINE{ffffff}";
	else 											pStatus1 = "{FFAF00}OFFLINE{ffffff}";

	strcat(Stringas, "{ffffff} - Taksi valdþia\n");

	if(dyrikai > 0)
	{
		format(String, sizeof(String), "{ffffff}\tDirektorius {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n", pName, pStatus, Dispejimai);
		strcat(Stringas, String);
	}
	else
	{
		strcat(Stringas, "{ffffff}\tDirektorius ðiuo metu dar neiðrinktas\n");
	}

	if(pavai > 0)
	{
		format(String, sizeof(String), "{ffffff}\tPavaduotojas {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n \n", pName1, pStatus1, Pispejimai);
		strcat(Stringas, String);
	}
	else
	{
		strcat(Stringas, "{ffffff}\tPavaduotojas ðiuo metu dar neiðrinktas\n \n");
	}

	resultline[0] 	= EOS;
	resultline1[0] 	= EOS;
	dyrikai 		= 0;
	pavai 			= 0;

	mysql_free_result();

	ShowPlayerDialogEx(playerid, 1114, DIALOG_STYLE_MSGBOX, "Serverio darbø valdþia", Stringas, "Uþdaryti", "");

	mysql_free_result();

	return 1;
}
COMMAND:direktoriaiiii(playerid, params[])
{
	mysql_query("SELECT Vardas, Lead, Dispejimai FROM players WHERE Lead > '0'");
	mysql_store_result( );

	new dVardas[MAX_PLAYER_NAME], dyrikai, resultline[50], str[6000], fstr[6000], dKoks[1000], kLead, dStatus[1000], Dispejimai;

	while(mysql_fetch_row_format(resultline))
	{
		sscanf(resultline, "p<|>s[24]dd", dVardas, kLead, Dispejimai);

		dyrikai ++;

		if(kLead > 0)
		{
			if(kLead == 1) 			dKoks = "Policijos direktorius (-ë)";
			else if(kLead == 2) 	dKoks = "Medikø direktorius (-ë)";
			else if(kLead == 3)	 	dKoks = "Kurjeriø direktorius (-ë)";
			else if(kLead == 4) 	dKoks = "Mechanikø direktorius (-ë)";
			else if(kLead == 11) 	dKoks = "Fûristø direktorius (-ë)";
			else if(kLead == 5) 	dKoks = "Dyleriø direktorius (ë)";
			else if(kLead == 13) 	dKoks = "Taksi direktorius (ë)";

			if(kLead == 1) 			dKoks = "Policijos departamento valdþia";
			else if(kLead == 2) 	dKoks = "Medicinos departamento valdþia";
			else if(kLead == 3)	 	dKoks = "Kurjeriø valdþia";
			else if(kLead == 4) 	dKoks = "Autoserviso ECO valdþia";
			else if(kLead == 11) 	dKoks = "Fûristø valdþia";
			else if(kLead == 5) 	dKoks = "Dyleriø valdþia";
			else if(kLead == 13) 	dKoks = "Taksi valdþia";

			if(GetPlayeridMid(dVardas) != INVALID_PLAYER_ID) { dStatus = "{19F14F}ONLINE{ffffff}"; } else { dStatus = "{FFAF00}OFFLINE{ffffff}"; }

			format(str, sizeof(str), "{ffffff} - %s\n", dKoks);
			strcat(fstr, str);
			
			if(dyrikai > 0)
			{
			format(str, sizeof(str), "{ffffff}\tDirektorius {FFAF00}%s {ffffff}(%s), áspëjimai: {FFAF00}%d/3\n", dVardas, dStatus, Dispejimai);
			strcat(fstr, str);
			}
			else
   			{
			format(str, sizeof(str), "{ffffff}\tDirektorius ðiuo metu dar neiðrinktas\n");
			strcat(fstr, str);
			}
		}
	}

	ShowPlayerDialogEx(playerid, 1114, DIALOG_STYLE_MSGBOX, "Direktoriai", fstr, "Uþdaryti", "");

	dyrikai 		= 0;

	mysql_free_result();

	return 1;
}
CMD:skelbti(playerid, params[])
{
	new String[216], Tekstas[128];

	if(CheckMute(playerid)) return 1;

	if(GetPlayerInterior(playerid) != 12) return SendClientMessage(playerid, -1, "{ffffff} Ðià komandà galima naudoti tik skelbimø centre!");

	if(sscanf(params, "s[128]", Tekstas)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /skelbti <tekstas>");

	if(PI[playerid][ParaseSkelbima] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Skelbti skelbimus galima tik kas 30 sekundþiø!");

	if(GetPlayerMoneyA(playerid) < 200) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

	if(strlen(Tekstas) > 128) return SendClientMessage(playerid, -1, "{ffffff} Tekstas per ilgas!");

	if(PI[playerid][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Skelbimus skelbti galësite tik praþaidus {FFAF00}"#NAUJOKO_LAIKAS"{ffffff} min!");

		return 1;
	}

	format(String, sizeof(String), "{73FF00}Skelbëjas {FFAF00}%s(%i) {73FF00}praneða visiems serverio þaidëjams:", GetPlayerNameEx(playerid), playerid);
	SendClientMessageToAll(-1, String);

	format(String, sizeof(String), "{C7FF97}%s", Tekstas);
	SendClientMessageToAll(-1, String);

	GivePlayerMoneyA(playerid, -200);

	PI[playerid][ParaseSkelbima] = gettime() + 30;

	if(PropertyInfo[SKELBIMU_CENTRAS][pBuyed])
	{
		PropertyInfo[SKELBIMU_CENTRAS][pProfit] += 200;
	}

	return 1;
}

CMD:lunbanzaideja(playerid, params[])
{
	new uQuerry[150], ArUzbanintasLaikui, zVardas[MAX_PLAYER_NAME], String[128];

	if(PI[playerid][Priziuretojas] != PRIZ_BAN && PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(sscanf(params, "s[24]", zVardas)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /lunbanzaideja <vardas_pavardë>");

	new pID = GetPlayeridMid(zVardas);

	if(pID != INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Ðis þaidëjas nëra uþblokuotas!");

	format(uQuerry, 150, "SELECT * FROM `players` WHERE `Vardas` = '%s'", zVardas);
	mysql_query(uQuerry);

	mysql_store_result();
	mysql_retrieve_row();

	if(mysql_num_rows())
	{
		mysql_fetch_field_row(uQuerry, "BanLaikas"); ArUzbanintasLaikui = strval(uQuerry);

		if(ArUzbanintasLaikui < gettime())
		{
			SendClientMessage(playerid, -1, "{ffffff} Ðis þaidëjas nëra uþblokuotas!");
		}
		else
		{
			format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s{ffffff} sëkmingai atblokuotas!", zVardas);
			SendClientMessage(playerid, -1, String);

			format(uQuerry, 150, "UPDATE players SET `BanLaikas` = '0' WHERE `Vardas` = '%s'", zVardas);
			mysql_query(uQuerry);
		}
	}
	else
	{
		SendClientMessage(playerid, -1, "{ffffff} Tokio vartotojo mûsø duomenø bazëje nëra!");
	}

	return 1;
}

CMD:unbanzaideja(playerid, params[])
{
	new uQuerry[150], zVardas[MAX_PLAYER_NAME], String[128];

	if(PI[playerid][Priziuretojas] != PRIZ_BAN && PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(sscanf(params, "s[24]", zVardas)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /unbanzaideja <vardas_pavardë>");

	new pID = GetPlayeridMid(zVardas);

	if(pID != INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Ðis þaidëjas nëra uþblokuotas!");

	format(uQuerry, 150, "SELECT * FROM `bannedplayers` WHERE `User` = '%s'", zVardas);
	mysql_query(uQuerry);

	mysql_store_result();
	mysql_retrieve_row();

	if(mysql_num_rows())
	{
		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s{ffffff} sëkmingai atblokuotas!", zVardas);
		SendClientMessage(playerid, -1, String);

		format(uQuerry, 150, "DELETE FROM `bannedplayers` WHERE `User` = '%s'", zVardas);
		mysql_query(uQuerry);
	}
	else
	{
		SendClientMessage(playerid, -1, "{ffffff} Ðis þaidëjas nëra uþblokuotas!");
	}

	return 1;
}

CMD:duoti(playerid, params[])
{
	new giveplayerid, MoneyCount, String[216], Float: P_Pos[3];
	
	if(PI[playerid][VisoPrazaide] < 120)
	{
		SendClientMessage(playerid, -1, "{ffffff} turite praþaisti {FFAF00}120{ffffff} min!");
		return 1;
	}

	if(sscanf(params, "ud", giveplayerid, MoneyCount)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /duoti <vardas_pavardë/id> <pinigø kiekis>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerMoneyA(playerid) < MoneyCount) return SendClientMessage(playerid, -1, "{ffffff} Jus tiek neturite!");

	if(MoneyCount < 1) return 1;

	GivePlayerMoneyA(giveplayerid, MoneyCount);
	GivePlayerMoneyA(playerid, -MoneyCount);

	format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}davë jums {FFAF00}$%s{ffffff}!", GetPlayerNameEx(playerid), konvertuoti_pinigus(MoneyCount));
	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "{ffffff} Davëte þaidëjui {FFAF00}%s {FFAF00}$%s{ffffff}!", GetPlayerNameEx(giveplayerid), konvertuoti_pinigus(MoneyCount));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:ginklas(playerid, params[])
{
	new id, kiek, Float:Coo[3], wep[64], msg[200];

	if(sscanf(params, "ud", id, kiek)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /ginklas <vardas_pavardë/id> <kulkø kiekis>");

	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	new weapon = GetPlayerWeapon(playerid);
	new ammo = ac_GetPlayerAmmo(playerid, weapon);

	if(kiek < 1) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /ginklas <vardas_pavardë/id> <kulkø kiekis>");

	if(ammo < kiek) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek ðio ginklo kulkø!");

	GetPlayerPos(id,Coo[0],Coo[1],Coo[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, Coo[0],Coo[1],Coo[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra per toli nuo jûsø!");

	if(GetPlayerState(id) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(PI[id][ikalintas]) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas kalëjime, ten ginklai draudþiami!");

	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	if(PI[playerid][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Ginklus galësite duoti tik praþaidus {FFAF00}"#NAUJOKO_LAIKAS"{ffffff} min!");

		return 1;
	}

	if(PI[id][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra naujokas!");

		return 1;
	}

	ac_GivePlayerWeapon 	(playerid, weapon, - kiek);
	ac_GivePlayerWeapon 	(id, weapon, kiek);
	GetWeaponName 	(weapon, wep, sizeof(wep));

	format(msg, sizeof(msg), "{ffffff} Davëte ginklà {FFAF00}%s {ffffff}su {FFAF00}%s{ffffff} kulkø þaidëjui {FFAF00}%s{ffffff}!", wep, konvertuoti_pinigus(kiek), GetPlayerNameEx(id));
	SendClientMessage(playerid, -1, msg);

	format(msg, sizeof(msg), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}davë jums {FFAF00}%s{ffffff} ginklà su {FFAF00}%s{ffffff} kulkø!", GetPlayerNameEx(playerid), wep, konvertuoti_pinigus(kiek));
	SendClientMessage(id, -1, msg);

	return 1;
}

CMD:sexy(playerid) return ApplyAnimation(playerid, "PED", "WOMAN_walksexy",4.1,1,1,1,1,1);
CMD:gulet(playerid) return ApplyAnimation(playerid, "BEACH", "bather", 4.000000, 0, 1, 1, 1, -1);
CMD:yohyoh(playerid) return ApplyAnimation(playerid, "benchpress", "gym_bp_celebrate", 4.000000, 1, 0, 0, 0, 0);
CMD:ateik(playerid) return ApplyAnimation(playerid, "CAMERA", "camstnd_cmon", 4.000000, 1, 0, 0, 0, 0);
CMD:spresti(playerid) return ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.000000, 1, 0, 0, 0, 0);
CMD:xczx(playerid) return ApplyAnimation(playerid, "DODGE", "Cover_Dive_01", 4.000000, 0, 1, 1, 0, 0);
CMD:gogogo(playerid) return ApplyAnimation(playerid, "POLICE", "CopTraf_Away", 4.000000, 1, 0, 0, 0, 0);
CMD:verkt(playerid) return ApplyAnimation(playerid, "GRAVEYARD", "mrnF_loop", 4.000000, 1, 1, 1, 0, 0);
CMD:mot(playerid) return ApplyAnimation(playerid, "KISSING", "gfwave2", 4.000000, 0, 0, 0, 0, 0);
CMD:trenkt(playerid) return ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.000000, 0, 0, 0, 0, 0);
CMD:pee(playerid) return ApplyAnimation(playerid, "PAULNMAC", "Piss_loop", 4.000000, 0, 1, 1, 0, 0);
CMD:wank(playerid) return ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.000000, 1, 0, 0, 0, 0);
CMD:taip(playerid) return ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.000000, 0, 0, 0, 0, 0);
CMD:ne(playerid) return ApplyAnimation(playerid, "GANGS", "Invite_No", 4.000000, 0, 0, 0, 0, 0);
CMD:parkour(playerid) return ApplyAnimation(playerid, "DAM_JUMP", "DAM_Dive_Loop", 4.000000, 1, 1, 1, 1, 0);
CMD:kungfu(playerid) return ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop", 4.000000, 1, 0, 0, 0, 0);
CMD:baik(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)){return 1;}

	if(Tazed[playerid]) return 1;

	ClearAnimations(playerid);
	return 1;
}
CMD:pakelt(playerid)
{
	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	return 1;
}
CMD:rukyti(playerid)
{
	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
	return 1;
}
CMD:sokti(playerid)
{
	switch(random(3))
	{
		case 0: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
	}
	return 1;
}
CMD:sedet(playerid, params[])
{
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid,BLUE,"* Atsisësti: /sedet [1-4]");
	if(id > 4 || id < 1) return SendClientMessage(playerid,BLUE,"* Yra tik 4 sëdëjimo pozos [1-4]");
	switch(id)
	{
		case 1: ApplyAnimation(playerid, "BEACH", "ParkSit_W_loop", 4.000000, 1, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.000000, 1, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid, "INT_HOUSE", "LOU_In", 4.000000, 0, 1, 1, 1, -1);
		case 4: ApplyAnimation(playerid, "INT_OFFICE", "FF_Dam_Fwd", 4.000000, 0, 1, 1, 1, -1);
	}
	return 1;
}

CMD:buciuot(playerid, params[])
{
	new id, Float:Coo[3], Float:vPos[3], masyvas[80];
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR, "* Pabuèiuoti zaidejà: /buciuot [Vardas_Pavardë/ID]");
	if(id==INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR, "* Tokio þaidëjo nëra");
	if(id==playerid) return SendClientMessage(playerid, COLOR, "* Kaip pabuèiuosi save?");
	GetPlayerPos(id,Coo[0],Coo[1],Coo[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 7.0, Coo[0],Coo[1],Coo[2])) return SendClientMessage(playerid, COLOR, "* Þaidëjas per toli, kaip tu já tokiu atstumu pabuèiuosi?");
	if(PI[playerid][ikalintas] || PI[id][ikalintas]) return SendClientMessage(playerid, COLOR, "* Kalejime buciuotis negalima.");
	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");
	AC_SetPlayerPos(id,Coo[0],Coo[1]+1.28,Coo[2]);
	SetPlayerFacingAngle(playerid,0);
	SetPlayerFacingAngle(id,180);
	ClearAnimations(playerid);
	ClearAnimations(id);
	ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_03",4.0,0,0,0,0,-1); //Pakeisti animacija
	ApplyAnimation(id,"KISSING","Grlfrd_Kiss_03",4.0,0,0,0,0,-1);
	GetPlayerPos(playerid, vPos[0], vPos[1], vPos[2]);
	format(masyvas, 80, "%s pabuèiavo %s",GetPlayerNameEx(playerid), GetPlayerNameEx(id));

	for(new p = 0; p < MAX_PLAYERS; p++)
	{
		if(IsPlayerConnected(p))
		{
			if(IsPlayerInRangeOfPoint(p, 20.0, vPos[0], vPos[1], vPos[2]))
			{
				SendClientMessage(p, -1, masyvas);
			}
		}
	}
	return 1;
}

CMD:skirtidyriku(playerid, params[])
{
	new String[216], Post[40], Leader, giveplayerid;

	if(PI[playerid][Priziuretojas] != PRIZ_DIRK && PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(sscanf(params, "rd", giveplayerid, Leader)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /skirtidyriku <vardas_pavardë/id> <darbo id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	switch(Leader)
	{
		case 0:
		{
			if(PI[giveplayerid][plead] == 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nëra jokio darbo direktorius!");

			format(String, sizeof(String), "{ffffff} Paðalinote þaidëjà {FFAF00}%s {ffffff}ið direktoriaus pareigø!", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, -1, String);

			format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}paðalino jus ið direktoriaus pareigø!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			PI[giveplayerid][plead] = 0;

			format(String, sizeof(String), "UPDATE `players` SET `Lead` = '%d' WHERE `Vardas` = '%s'", PI[giveplayerid][plead], GetPlayerNameEx(giveplayerid));
			mysql_query(String);

			return 1;
		}

		case 1: Post = "Policijos Departamento";
		case 2: Post = "Medicinos Departamento";
		case 3: Post = "Kurjeriø";
		case 4: Post = "autoserviso ECO";
		case 5: Post = "spec. bûrio pajëgø ARAS";
		case 11: Post = "Fûristø";
		case 13: Post = "Taksistø";
		default: return SendClientMessage(playerid, -1, "{ffffff} Tokio darbo ID nëra!");
	}

	PI[giveplayerid][plead] 		= Leader;
	PI[giveplayerid][dispejimai] 	= 0;

	format(String, sizeof(String), "UPDATE `players` SET `Lead` = '%d' WHERE `Vardas` = '%s'", PI[giveplayerid][plead], GetPlayerNameEx(giveplayerid));
	mysql_query(String);

	format(String, sizeof(String), "{ffffff} Paskyrëte þaidëjà {FFAF00}%s %s {ffffff}direktoriumi!", GetPlayerNameEx(giveplayerid), Post);
	SendClientMessage(playerid, -1, String);

	format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}paskyrë jus {FFAF00}%s{ffffff} direktoriumi!", GetPlayerNameEx(playerid), Post);
	SendClientMessage(giveplayerid, -1, String);

	return 1;
}

CMD:skirtipav(playerid, params[])
{
	new String[216], Post[40], Leader, giveplayerid;

	if(PI[playerid][Priziuretojas] != PRIZ_DIRK && PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	if(sscanf(params, "ud", giveplayerid, Leader)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /skirtipav <vardas_pavardë/id> <darbo id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	switch(Leader)
	{
		case 0:
		{
			if(PI[giveplayerid][pavdrk] == 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nëra jokio darbo pavaduotojas!");

			format(String, sizeof(String), "{ffffff} Paðalinote þaidëjà {FFAF00}%s {ffffff}ið pavaduotojo pareigø!", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, -1, String);

			format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}paðalino jus ið pavaduotojo pareigø!", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, -1, String);

			PI[giveplayerid][pavdrk] = 0;

			format(String, sizeof(String), "UPDATE `players` SET `pavdrk` = '%d' WHERE `Vardas` = '%s'", PI[giveplayerid][pavdrk], GetPlayerNameEx(giveplayerid));
			mysql_query(String);

			return 1;
		}

		case 1: Post = "Policijos Departamento";
		case 2: Post = "Medicinos Departamento";
		case 3: Post = "Kurjeriø";
		case 4: Post = "autoserviso ECO";
		case 5: Post = "spec. bûrio pajëgø ARAS";
		case 11: Post = "Fûristø";
		default: return SendClientMessage(playerid, -1, "{ffffff} Tokio darbo ID nëra!");
	}

	PI[giveplayerid][pavdrk] = Leader;

	format(String, sizeof(String), "UPDATE `players` SET `pavdrk` = '%d' WHERE `Vardas` = '%s'", PI[giveplayerid][pavdrk], GetPlayerNameEx(giveplayerid));
	mysql_query(String);

	format(String, sizeof(String), "{ffffff} Paskyrëte þaidëjà {FFAF00}%s %s {ffffff}pavaduotojumi!", GetPlayerNameEx(giveplayerid), Post);
	SendClientMessage(playerid, -1, String);

	format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}paskyrë jus {FFAF00}%s{ffffff} pavaduotojumi!", GetPlayerNameEx(playerid), Post);
	SendClientMessage(giveplayerid, -1, String);

	return 1;
}

CMD:tarnybos(playerid)
{
	new String[700], Stringas[700];

	new
		Policininkai = 0,
		Medikai      = 0,
		Taxix        = 0,
		Mechanikai   = 0
	;

	for(new p = 0; p < MAX_PLAYERS; p++)
	{
		if(IsPlayerConnected(p) && !PI[p][AFK_Stat])
		{
			switch(PI[p][specialybe])
			{
				case 1: Policininkai ++;
				case 2: Medikai ++;
				case 13: Taxix ++;
				case 4: Mechanikai ++;
			}

			//if(PI[p][DirbaTaksi] == true)
			//{
			//	Taksistai ++;
			//}
		}
	}

	format(String, sizeof(String), "{ffffff}1. Policininkai | Ðiuo metu dirba: {FFAF00}%d{ffffff} | Numeris: {FFAF00}02\n", Policininkai); 	strcat(Stringas, String);

	format(String, sizeof(String), "{ffffff}2. Medikai | Ðiuo metu dirba: {FFAF00}%d{ffffff} | Numeris: {FFAF00}03\n", Medikai); 				strcat(Stringas, String);

	format(String, sizeof(String), "{ffffff}3. Taksistai | Ðiuo metu dirba: {FFAF00}%d{ffffff} | Numeris: {FFAF00}1428\n", Taxix); 			strcat(Stringas, String);

	format(String, sizeof(String), "{ffffff}4. Autoservisas ECO | Ðiuo metu dirba: {FFAF00}%d{ffffff} | Numeris: {FFAF00}1888\n", Mechanikai); 		strcat(Stringas, String);

	ShowPlayerDialogEx(playerid, 8954, DIALOG_STYLE_MSGBOX, "Tarnybos", Stringas, "Uþdaryti", "");

	return 1;
}

CMD:nkauliukas(playerid)
{
	if(PI[playerid][Kauliukas] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite kauliuko. Já ásigyti galite betkuriame Lietuvos spauda kioske!");

	if(KS[playerid][KS_playedtime] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Kauliukà mesti galima tik kas 30 sekundþiø!");

	KS[playerid][KS_firstplayer] 	= random(6);
	KS[playerid][KS_playedtime] 	= gettime() + 5;

	new String[150];
	format(String, sizeof(String), "{24F34A} KAULIUKAS  {ffffff}Þaidëjas {FFAF00}%s {ffffff}meta kauliukà... Iðkrito skaièius: {FFAF00}%d{ffffff}!", GetPlayerNameEx(playerid), KS[playerid][KS_firstplayer] + 1);
	SendDistanceMessage(10.0, playerid, String);

	return 1;
}

CMD:kauliukas(playerid, params[])
{
	new giveplayerid, String[250], MoneyCount, Float: P_Pos[3];

	if(PI[playerid][Kauliukas] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite kauliuko. Já ásigyti galite betkuriame Lietuvos spauda kioske!");

	if(sscanf(params, "ud", giveplayerid, MoneyCount)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /kauliukas <vardas_pavardë/id> <pinigø kiekis>");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Su savim kauliuko þaisti negalite!");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(PI[giveplayerid][Kauliukas] == 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas neturi kauliuko!");

	if(PI[playerid][VisoPrazaide] < NAUJOKO_LAIKAS) return SendClientMessage(playerid, -1, "{ffffff} Jus esate naujokas!");

	if(PI[giveplayerid][VisoPrazaide] < NAUJOKO_LAIKAS) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra naujokas!");

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(MoneyCount < 1000) return SendClientMessage(playerid, -1, "{ffffff} Minimaliai galima þaisti ið {FFAF00}$1,000{ffffff}!");

	if(MoneyCount > 100000) return SendClientMessage(playerid, -1, "{ffffff} Maksimaliai galima þaisti ið {FFAF00}$100,000{ffffff}!");

	if(GetPlayerMoneyA(playerid) < MoneyCount) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek pinigø!");

	if(GetPlayerMoneyA(giveplayerid) < MoneyCount) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas tiek pinigø neturi!");

	if(KS[playerid][KS_playedtime] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Kauliukà þaisti galima tik kas 30 sekundþiø!");

	if(KS[playerid][KS_time] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Jus jau pasiûlëte arba jums kaþkas pasiûlë þaisti kauliukà!");

	if(KS[giveplayerid][KS_playedtime] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas kauliukà þaisti gali tik kas 30 sekundþiø!");

	if(KS[giveplayerid][KS_time] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjui jau kaþkas pasiûlë þaisti kauliukà!");

	KS[playerid][KS_time] 		= gettime() + 20;
	KS[giveplayerid][KS_time] 	= gettime() + 20;

	KS[playerid][KS_money] 		= MoneyCount;
	KS[giveplayerid][KS_money] 	= MoneyCount;

	KS[playerid][KS_giveplayerid] 		= giveplayerid;
	KS[giveplayerid][KS_giveplayerid]	= playerid;

	format(String, sizeof(String), "{ffffff} Pasiûlëte þaidëjui {FFAF00}%s {ffffff}þaisti kauliukà ið {FFAF00}$%s{ffffff}!", GetPlayerNameEx(giveplayerid), konvertuoti_pinigus(MoneyCount));
	SendClientMessage(playerid, -1, String);

	format(String, sizeof(String), "{ffffff}Þaidëjas {FFAF00}%s {ffffff}siûlo jums þaisti kauliukà ið {FFAF00}$%s{ffffff}!\nPasiûlymas galios 20 sekundþiø.\n \nSVARBU: ið laimëtos pinigø sumos bus nuskaièiuota 15 procentø.",
	GetPlayerNameEx(playerid), konvertuoti_pinigus(MoneyCount));
	ShowPlayerDialogEx(giveplayerid, KauliukoDialog, DIALOG_STYLE_MSGBOX, "Kauliukas", String, "Sutikti", "Atsisakyti");

	return 1;
}

COMMAND:kviesti(playerid, params[])
{
	new Numeris, Vieta[64], String[216];

	if(KvieciaTarnyba[playerid] == true) return SendClientMessage(playerid, -1, ""COL_ERROR"[KLAIDA]: {ffffff}Jus jau kvieciate tarnyba!");

	if(sscanf(params, "ds[64]", Numeris, Vieta))
	{
		SendClientMessage(playerid, -1, ""COL_USAGE"[NAUDOJIMAS]: {FFAF00} /kviesti <numeris> <vieta>");
		SendClientMessage(playerid, -1, "{ffffff} [INFO]: {ffffff}Visu tarnybu numerius galite suþinoti paraðæ {FFAF00} /tarnybos{ffffff}!");
		return 1;
	}

	KvieciaTarnyba[playerid] = true;

	PakeltiRaga(playerid);
	
	switch(Numeris)
	{
		case TELLPHONE_NUMBER_POLICE:
		{
			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Þaidëjas {FFAF00}%s {ffffff}kvieèia policijà!", GetPlayerNameEx(playerid));
			ZinuteRacija(String, POLICIJA);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Vieta: {FFAF00}%s{ffffff}, raðyk {FFAF00} /vaziuoju %s{ffffff}!", Vieta, GetPlayerNameEx(playerid));
			ZinuteRacija(String, POLICIJA);

			PI[playerid][IskvietesPolicija] = true;

			SendClientMessage(playerid, -1, "{ffffff} Tarnyba iðkviesta, laukite atsakymo!");
		}

		case TELLPHONE_NUMBER_MEDICS:
		{
			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Þaidëjas {FFAF00}%s {ffffff}kvieèia medikus!", GetPlayerNameEx(playerid));
			ZinuteRacija(String, MEDIKAI);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Vieta: {FFAF00}%s{ffffff}, raðyk {FFAF00} /vaziuoju %s{ffffff}!", Vieta, GetPlayerNameEx(playerid));
			ZinuteRacija(String, MEDIKAI);

			PI[playerid][IskvietesMedikus] = true;

			SendClientMessage(playerid, -1, "{ffffff} Tarnyba iðkviesta, laukite atsakymo!");
		}

		case TELLPHONE_NUMBER_TAXI:
		{
			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Þaidëjas {FFAF00}%s {ffffff}kvieèia taksistus!", GetPlayerNameEx(playerid));
			ZinuteRacija(String, TAXI);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Vieta: {FFAF00}%s{ffffff}, raðyk {FFAF00} /vaziuoju %s{ffffff}!", Vieta, GetPlayerNameEx(playerid));
			ZinuteRacija(String, TAXI);

			PI[playerid][IskvietesTaxi] = true;

			SendClientMessage(playerid, -1, "{ffffff} Tarnyba iðkviesta, laukite atsakymo!");
		}

		case TELLPHONE_NUMBER_MECHANICS:
		{
			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Þaidëjas {FFAF00}%s {ffffff}kvieèia autoserviso ECO darbuotojà!", GetPlayerNameEx(playerid));
			ZinuteRacija(String, MECHANIKAI);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Vieta: {FFAF00}%s{ffffff}, raðyk {FFAF00} /vaziuoju %s{ffffff}!", Vieta, GetPlayerNameEx(playerid));
			ZinuteRacija(String, MECHANIKAI);

			PI[playerid][Iskvietesmechanikus] = true;

			SendClientMessage(playerid, -1, "{ffffff} Tarnyba iðkviesta, laukite atsakymo!");
		}
			default: SendClientMessage(playerid, -1, ""COL_ERROR"[KLAIDA]: {ffffff}Tokio numerio nera!");
		}
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) PadetiRaga(playerid);

		KvieciaTarnyba[playerid] = false;

	return 1;
}

/*f_public: TarnybosKvietimas1(playerid, Numeris)
{
	new Tarnyba[128], String[128];

	switch(Numeris)
	{
		case TELLPHONE_NUMBER_POLICE: 		Tarnyba = "Policijos departamentas klauso. Aiðkiai nurodykite atvykimo vietà:";
		case TELLPHONE_NUMBER_MECHANICS: 	Tarnyba = "Autoservisas ECO klauso. Aiðkiai nurodykite atvykimo vietà:";
		case TELLPHONE_NUMBER_MEDICS: 		Tarnyba = "Medicinos departamentas klauso. Aiðkiai nurodykite atvykimo vietà:";
		case TELLPHONE_NUMBER_TAXI: 		Tarnyba = "Taksi klauso. Aiðkiai nurodykite atvykimo vietà:";
		default: 							SendClientMessage(playerid, -1, "{ffffff} Tokio numerio nëra!");
	}

	format(String, 216, "{ffffff}%s", Tarnyba);
	ShowPlayerDialogEx(playerid, 6645, DIALOG_STYLE_INPUT, "Tarnybos kvietimas", String, "Kviesti", "Atðaukti");

	return 1;
}

f_public: TarnybosKvietimas(playerid, vietuke[])
{
	new String[216];

	KvieciaTarnyba[playerid] = false;

	switch(PI[playerid][KaKviecia])
	{
		case TELLPHONE_NUMBER_POLICE:
		{
			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Þaidëjas {FFAF00}%s {ffffff}kvieèia policijà!", GetPlayerNameEx(playerid));
			ZinuteRacija(String, POLICIJA);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Vieta: {FFAF00}%s{ffffff}, raðyk {FFAF00} /vaziuoju %s{ffffff}!", vietuke, GetPlayerNameEx(playerid));
			ZinuteRacija(String, POLICIJA);

			PI[playerid][IskvietesPolicija] = true;

			SendClientMessage(playerid, -1, "{ffffff} Tarnyba iðkviesta, laukite atsakymo!");
		}

		case TELLPHONE_NUMBER_MEDICS:
		{
			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Þaidëjas {FFAF00}%s {ffffff}kvieèia medikus!", GetPlayerNameEx(playerid));
			ZinuteRacija(String, MEDIKAI);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Vieta: {FFAF00}%s{ffffff}, raðyk {FFAF00} /vaziuoju %s{ffffff}!", vietuke, GetPlayerNameEx(playerid));
			ZinuteRacija(String, MEDIKAI);

			PI[playerid][IskvietesMedikus] = true;

			SendClientMessage(playerid, -1, "{ffffff} Tarnyba iðkviesta, laukite atsakymo!");
		}

		case TELLPHONE_NUMBER_TAXI:
		{
			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Þaidëjas {FFAF00}%s {ffffff}kvieèia taksistus!", GetPlayerNameEx(playerid));
			ZinuteRacija(String, TAXI);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Vieta: {FFAF00}%s{ffffff}, raðyk {FFAF00} /vaziuoju %s{ffffff}!", vietuke, GetPlayerNameEx(playerid));
			ZinuteRacija(String, TAXI);

			PI[playerid][IskvietesTaxi] = true;

			SendClientMessage(playerid, -1, "{ffffff} Tarnyba iðkviesta, laukite atsakymo!");
		}

		case TELLPHONE_NUMBER_MECHANICS:
		{
			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Þaidëjas {FFAF00}%s {ffffff}kvieèia autoserviso ECO darbuotojà!", GetPlayerNameEx(playerid));
			ZinuteRacija(String, MECHANIKAI);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Vieta: {FFAF00}%s{ffffff}, raðyk {FFAF00} /vaziuoju %s{ffffff}!", vietuke, GetPlayerNameEx(playerid));
			ZinuteRacija(String, MECHANIKAI);

			PI[playerid][Iskvietesmechanikus] = true;

			SendClientMessage(playerid, -1, "{ffffff} Tarnyba iðkviesta, laukite atsakymo!");
		}

		default: SendClientMessage(playerid, -1, "{ffffff} Tokio numerio nëra!"), RemovePlayerAttachedObject(playerid, TELPHONE_ATTACH_SLOT);
	}
	
	

	return 1;
}*/
f_public: TarnybosKvietimas(playerid, number, vietuke[])
{
	new String[216];

    switch(number)
	{
		case TELLPHONE_NUMBER_POLICE:
		{
			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Þaidëjas {FFAF00}%s {ffffff}kvieèia policijà!", GetPlayerNameEx(playerid));
			ZinuteRacija(String, POLICIJA);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Vieta: {FFAF00}%s{ffffff}, raðyk {FFAF00} /vaziuoju %s{ffffff}!", vietuke, GetPlayerNameEx(playerid));
			ZinuteRacija(String, POLICIJA);

			PI[playerid][IskvietesPolicija] = true;

			SendClientMessage(playerid, -1, "{ffffff} Tarnyba iðkviesta, laukite atsakymo!");
		}

		case TELLPHONE_NUMBER_MEDICS:
		{
			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Þaidëjas {FFAF00}%s {ffffff}kvieèia medikus!", GetPlayerNameEx(playerid));
			ZinuteRacija(String, MEDIKAI);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Vieta: {FFAF00}%s{ffffff}, raðyk {FFAF00} /vaziuoju %s{ffffff}!", vietuke, GetPlayerNameEx(playerid));
			ZinuteRacija(String, MEDIKAI);

			PI[playerid][IskvietesMedikus] = true;

			SendClientMessage(playerid, -1, "{ffffff} Tarnyba iðkviesta, laukite atsakymo!");
		}

		case TELLPHONE_NUMBER_TAXI:
		{
			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Þaidëjas {FFAF00}%s {ffffff}kvieèia taksistus!", GetPlayerNameEx(playerid));
			ZinuteRacija(String, TAXI);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Vieta: {FFAF00}%s{ffffff}, raðyk {FFAF00} /vaziuoju %s{ffffff}!", vietuke, GetPlayerNameEx(playerid));
			ZinuteRacija(String, TAXI);

			PI[playerid][IskvietesTaxi] = true;

			SendClientMessage(playerid, -1, "{ffffff} Tarnyba iðkviesta, laukite atsakymo!");
		}

		case TELLPHONE_NUMBER_MECHANICS:
		{
			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Þaidëjas {FFAF00}%s {ffffff}kvieèia autoserviso ECO darbuotojà!", GetPlayerNameEx(playerid));
			ZinuteRacija(String, MECHANIKAI);

			format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}Operatorë: {ffffff}Vieta: {FFAF00}%s{ffffff}, raðyk {FFAF00} /vaziuoju %s{ffffff}!", vietuke, GetPlayerNameEx(playerid));
			ZinuteRacija(String, MECHANIKAI);

			PI[playerid][Iskvietesmechanikus] = true;

			SendClientMessage(playerid, -1, "{ffffff} Tarnyba iðkviesta, laukite atsakymo!");
		}
			default: SendClientMessage(playerid, -1, ""COL_ERROR"[KLAIDA]: {ffffff}Tokio numerio nera!");
		}
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) PadetiRaga(playerid);

		KvieciaTarnyba[playerid] = false;

	return 1;
}
CMD:me(playerid, params[])
{
	if(CheckMute(playerid)) return 1;
	new String[216], msg[155], Float:coo[3];
	if(sscanf(params, "s[216]", String)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /me <tekstas>");
	format(msg, sizeof(msg), "* %s %s", GetPlayerNameEx(playerid), String);
	GetPlayerPos(playerid,coo[0],coo[1],coo[2]);
	for(new player = 0; player < MAX_PLAYERS; player++)
	{
		if(IsPlayerConnected(player))
		{
			if(IsPlayerInRangeOfPoint(player, 20.0, coo[0],coo[1],coo[2]))
			{
				SendClientMessage(player, HOMER, msg);
			}
		}
	}
	return 1;
}

CMD:r(playerid, params[])
{
	if(CheckMute(playerid)) return 1;

	new String[216];

	if(PI[playerid][specialybe] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite racijos!");

	if(isnull(params)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /r <tekstas>");

	if(strlen(params) > 128) return SendClientMessage(playerid, -1, "{ffffff} Tekstas per ilgas!");

	format(String, sizeof(String), "{ffffff} [RACIJA] {FFAF00}%s(%d): {ffffff}%s", GetPlayerNameEx(playerid), playerid, params);
	ZinuteRacija(String, PI[playerid][specialybe]);

	return 1;
}

CMD:rt(playerid, params[])
{
	if(CheckMute(playerid)) return 1;

	new String[216], darbass[30];

	if(PI[playerid][specialybe] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite racijos!");

	if(isnull(params)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /rt <tekstas>");

	if(strlen(params) > 128) return SendClientMessage(playerid, -1, "{ffffff} Tekstas per ilgas!");

	switch(PI[playerid][specialybe])
	{
		case 1: darbass = "{FFAF00}PD{ffffff} ";
		case 5: darbass = "{FFAF00}ARAS{ffffff} ";
	}

	foreach(Player, p)
	{
		switch(PI[p][specialybe])
		{
			case 1, 5:
			{
				format(String, sizeof(String), "{ffffff} [T. RACIJA (%s)] {FFAF00}%s(%d): {ffffff}%s", darbass, GetPlayerNameEx(playerid), playerid, params);
				SendClientMessage(p, -1, String);
			}
		}
	}

	return 1;
}

CMD:bendradarbiai(playerid, params[])
{
	new s = 0, str[28];

	if(PI[playerid][specialybe] == 0) return 0;

	new spc = PI[playerid][specialybe];
	switch(spc)
	{
		default:
		{
			SendClientMessage(playerid, -1, "{ffffff} Prisijungæ bendradarbiai:");
			for(new p = 0; p < MAX_PLAYERS; p++)
			{
				if(IsPlayerConnected(p) && PI[p][specialybe] == spc)
				{
					s ++;
					format(str, sizeof(str), "%d. %s", s, GetPlayerNameEx(p));
					SendClientMessage(playerid, BLUE, str);
				}
			}
		}
	}
	return 1;
}

CMD:tvaldymas(playerid)
{
	new String[1000];
	strcat(String, "{FFAF00} /autopilotas {ffffff}- nevirðysite leistino + {FFAF00}$20/min\n{FFAF00} /radijas {ffffff}- ájungsite/iðjungsite serverio radijà\n{FFAF00} /bagazine {ffffff}- bagaþinës valdymas\n");
	strcat(String, "{FFAF00} /perjungtiv {ffffff}- perjunksite tr. priemonës variklá á benzininá/dujiná\n{FFAF00} /variklis {ffffff} arba {FFAF00} NUM4 {ffffff}- uþvesite/uþgesinsite variklá\n");
	strcat(String, "{FFAF00} /salmas {ffffff}- uþsidësite/nusiimsite ðalmà\n{FFAF00} /dirzas {ffffff}- uþsisegsite/atsisegsite dirþà\n{FFAF00} /sviesos {ffffff}- ájungsite/iðjungsite ðviesas\n");
	strcat(String, "{FFAF00} NUM6 {ffffff}- pagrindinis transporto valdymas");
	ShowPlayerDialogEx(playerid, 8695, DIALOG_STYLE_MSGBOX, "Transporto valdymas", String, "Uþdaryti", "");

	return 1;
}

CMD:raktas(playerid)
{
	new house = HouseID[playerid];
	if(house > -1)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[house][IntX], HouseInfo[house][IntY], HouseInfo[house][IntZ]))
		{
			if(strcmp(HouseInfo[house][Owner], GetPlayerNameEx(playerid), false)) return SendClientMessage(playerid, -1, "{ffffff} Jus ne namo savininkas!");
			if(!HouseInfo[house][Locked])
			{
				HouseInfo[house][Locked] = true;
				SendClientMessage(playerid, -1, "{ffffff} Uþrakinote namo duris!");
			}
			else
			{
				HouseInfo[house][Locked] = false;
				SendClientMessage(playerid, -1, "{ffffff} Atrakinote namo duris!");
			}
			SaveHouse(house);
			return 1;
		}
	}
	for(house = 0; house < MAX_HOUSES; house++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ]))
		{
			if(strcmp(HouseInfo[house][Owner], GetPlayerNameEx(playerid), false)) return SendClientMessage(playerid, -1, "{ffffff} Jus ne namo savininkas!");
			if(!HouseInfo[house][Locked])
			{
				HouseInfo[house][Locked] = true;
				SendClientMessage(playerid, -1, "{ffffff} Uþrakinote namo duris!");
			}
			else
			{
				HouseInfo[house][Locked] = false;
				SendClientMessage(playerid, -1, "{ffffff} Atrakinote namo duris!");
			}
			SaveHouse(house);
			return 1;
		}
	}
	return 1;
}

CMD:namas(playerid, params[])
{
	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	new house = HouseID[playerid];

	if(house == -1 && GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti namie!");

	if(strcmp(HouseInfo[house][Owner], GetPlayerNameEx(playerid), false)) return SendClientMessage(playerid, -1, "{ffffff} Jus ne namo savininkas!");

	switch(HouseInfo[house][hType])
	{
		case TYPE_RATAI:
		{
			ShowPlayerDialogEx(playerid, 5930, DIALOG_STYLE_LIST, "Namo valdymas",
			"1. Parduoti namà\n2. Atiduoti namà\n3. Namo seifas\n4. Pavalgyti", "Pasirinkti", "Uþdaryti");
		}
		case TYPE_BUTAS:
		{
			ShowPlayerDialogEx(playerid, 5930, DIALOG_STYLE_LIST, "Namo valdymas",
			"1. Parduoti namà\n2. Atiduoti namà\n3. Namo seifas\n4. Pavalgyti\n5. Pasigydyti\n6. Padëti ginklus\n7. Paimti ginklus", "Pasirinkti", "Uþdaryti");
		}
		default:
		{
			ShowPlayerDialogEx(playerid, 5930, DIALOG_STYLE_LIST, "Namo valdymas",
			"1. Parduoti namà\n2. Atiduoti namà\n3. Namo seifas\n4. Pavalgyti\n5. Pasigydyti\n6. Padëti ginklus\n7. Paimti ginklus\n8. Padëti narkotikus\n9. Paimti narkotikus", "Pasirinkti", "Uþdaryti");
		}
	}

	return 1;
}

CMD:addhouse(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;

	new type, Float: pPos[4], hQuery[43], str[300], houset[10];

	if(sscanf(params, "d", type)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /addhouse <namo tipas (1, 2, 3)>");

	for(new house; house < MAX_HOUSES; house ++)
	{
		format(hQuery, 43, "SELECT * FROM `houses` WHERE `ID` = '%d'", house);
		mysql_query(hQuery);

		mysql_store_result();

		if(!mysql_num_rows())
		{
			GetPlayerPos 		(playerid, pPos[0], pPos[1], pPos[2]);
			GetPlayerFacingAngle(playerid, pPos[3]);

			format(HouseInfo[house][Owner], MAX_PLAYER_NAME, "Savivaldybë");
			HouseInfo[house][hCreated] 	= true;
			HouseInfo[house][Buyed] 	= false;
			HouseInfo[house][IsGarageUsed] = false;
			HouseInfo[house][Locked] 	= true;
			HouseInfo[house][htVW] 		= house + 1;
			HouseInfo[house][ExitX] 	= pPos[0];
			HouseInfo[house][ExitY] 	= pPos[1];
			HouseInfo[house][ExitZ] 	= pPos[2];
			HouseInfo[house][ExitAngle] = pPos[3];
			HouseInfo[house][hType] 	= type;

			for(new i = 0; i < MAX_CHEST_SLOTS; i ++)
			{
			    HouseChest[house][i][ItemID]		= 0;
				HouseChest[house][i][ItemAmmount]	= 0;
			}

			switch(type)
			{
				case TYPE_RATAI:
				{
					houset 					= "Namuko";
					HouseInfo[house][Cost] 	= 100000 + random(50000);

					new inter = random(4);
					//inter --;

					HouseInfo[house][hInt] = hInterior1[inter][Int];
					HouseInfo[house][IntX] = hInterior1[inter][IntX];
					HouseInfo[house][IntY] = hInterior1[inter][IntY];
					HouseInfo[house][IntZ] = hInterior1[inter][IntZ];

					printf("%d", inter);
				}

				case TYPE_BUTAS:
				{
					houset 					= "Buto";
					HouseInfo[house][Cost] 	= 200000 + random(70000);

					new inter = random(9);
					//inter --;

					HouseInfo[house][hInt] = hInterior2[inter][Int];
					HouseInfo[house][IntX] = hInterior2[inter][IntX];
					HouseInfo[house][IntY] = hInterior2[inter][IntY];
					HouseInfo[house][IntZ] = hInterior2[inter][IntZ];
				}

				case TYPE_NAMAS:
				{
					houset 					= "Namo";
					HouseInfo[house][Cost] 	= 400000 + random(100000);

					new inter = random(4);
					//inter --;

					HouseInfo[house][hInt] = hInterior3[inter][Int];
					HouseInfo[house][IntX] = hInterior3[inter][IntX];
					HouseInfo[house][IntY] = hInterior3[inter][IntY];
					HouseInfo[house][IntZ] = hInterior3[inter][IntZ];
				}

				default: return SendClientMessage(playerid, -1, "{ffffff} Tokio namo tipo nëra!");
			}

			format(str, 300, "{DEFF88}%s numeris: {FFAF00}%d\n{DEFF88}Savininkas: {FFAF00}%s\n{DEFF88}Kaina: {FFAF00}$%s\n \n{DEFF88}Norëdami nupirkti, spauskite ENTER",
			houset, house + 1, HouseInfo[house][Owner], konvertuoti_pinigus(HouseInfo[house][Cost]));

			HouseInfo[house][House3D] = Create3DTextLabel(str, -1, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ], 10, 0, 0);
			HouseInfo[house][HousePickup] = CreatePickup(1273, 1, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ], 0);

			format(hQuery, 42, "INSERT INTO `houses` (ID) VALUES ('%d')", house);
			mysql_query(hQuery);

			SaveHouse 			(house);
			SendClientMessage 	(playerid, -1, "{ffffff} Namas sukurtas!");

			return 1;
		}

		mysql_free_result();
	}

	return SendClientMessage(playerid, -1, "{ffffff} Serveryje yra per daug namø!");
}

/*CMD:addhouse2(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;
	new inter,, price, Float:pPos[4], hQuery[43], str[300];
	if(sscanf(params, "d", inter)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /adhouse2 <interjero id>");
	if(inter < 1 || inter > 5) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /adhouse2 <interjero id>");
	for(new house; house < MAX_HOUSES; house++)
	{
		format(hQuery, 43, "SELECT * FROM `houses` WHERE `ID` = '%d'", house);
		mysql_query(hQuery);
		mysql_store_result();
		if(!mysql_num_rows())
		{
			GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
			GetPlayerFacingAngle(playerid, pPos[3]);
			format(HouseInfo[house][Owner], MAX_PLAYER_NAME, "Nera");
			HouseInfo[house][hCreated] = true;
			HouseInfo[house][Buyed] = false;
			HouseInfo[house][Locked] = true;
			HouseInfo[house][Cost] = 500000 + random(500000);
			HouseInfo[house][Money] = 0;
			HouseInfo[house][htVW] = house + 1;
			HouseInfo[house][ExitX] = pPos[0];
			HouseInfo[house][ExitY] = pPos[1];
			HouseInfo[house][ExitZ] = pPos[2];
			HouseInfo[house][ExitAngle] = pPos[3];
			inter--;
			HouseInfo[house][hInt] = hInterior[inter][Int];
			HouseInfo[house][IntX] = hInterior[inter][IntX];
			HouseInfo[house][IntY] = hInterior[inter][IntY];
			HouseInfo[house][IntZ] = hInterior[inter][IntZ];
			HouseInfo[house][IntAngle] = hInterior[inter][IntAngle];
			format(str, 300, "{FFFFFF}Namo numeris: {FFAF00}%d\n{FFFFFF}Namas parduodamas\n{FFFFFF}Namo kaina: {FFAF00}$%s\n \n{FFFFFF}Norint nusipirkti - spauskite ENTER", house + 1, konvertuoti_pinigus(HouseInfo[house][Cost]));
			HouseInfo[house][House3D] = Create3DTextLabel(str, -1, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ], 10, 0, 0);
			HouseInfo[house][HousePickup] = CreatePickup(1273, 1, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ], 0);
			format(hQuery, 42, "INSERT INTO `houses` (ID) VALUES ('%d')", house);
			mysql_query(hQuery);
			SaveHouse(house);
			SendClientMessage(playerid, -1, "{ffffff} Namas sukurtas!");
			return 1;
		}
		mysql_free_result();
	}
	return SendClientMessage(playerid, -1, "{ffffff} Serveryje yra per daug namø!");
}

CMD:addhouse(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;
	new inter,, price, Float:pPos[4], hQuery[43], str[300];
	if(sscanf(params, "d", inter)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /adhouse <interjero id>");
	if(inter < 1 || inter > 5) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /adhouse <interjero id>");
	for(new house; house < MAX_HOUSES; house++)
	{
		format(hQuery, 43, "SELECT * FROM `houses` WHERE `ID` = '%d'", house);
		mysql_query(hQuery);
		mysql_store_result();
		if(!mysql_num_rows())
		{
			GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
			GetPlayerFacingAngle(playerid, pPos[3]);
			format(HouseInfo[house][Owner], MAX_PLAYER_NAME, "Nera");
			HouseInfo[house][hCreated] = true;
			HouseInfo[house][Buyed] = false;
			HouseInfo[house][Locked] = true;
			HouseInfo[house][Cost] = 100000 + random(200000);
			HouseInfo[house][Money] = 0;
			HouseInfo[house][htVW] = house + 1;
			HouseInfo[house][ExitX] = pPos[0];
			HouseInfo[house][ExitY] = pPos[1];
			HouseInfo[house][ExitZ] = pPos[2];
			HouseInfo[house][ExitAngle] = pPos[3];
			inter--;
			HouseInfo[house][hInt] = hInterior[inter][Int];
			HouseInfo[house][IntX] = hInterior[inter][IntX];
			HouseInfo[house][IntY] = hInterior[inter][IntY];
			HouseInfo[house][IntZ] = hInterior[inter][IntZ];
			HouseInfo[house][IntAngle] = hInterior[inter][IntAngle];
			format(str, 300, "{FFFFFF}Namo numeris: {FFAF00}%d\n{FFFFFF}Namas parduodamas\n{FFFFFF}Namo kaina: {FFAF00}$%s\n \n{FFFFFF}Norint nusipirkti - spauskite ENTER", house + 1, konvertuoti_pinigus(HouseInfo[house][Cost]));
			HouseInfo[house][House3D] = Create3DTextLabel(str, -1, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ], 10, 0, 0);
			HouseInfo[house][HousePickup] = CreatePickup(1273, 1, HouseInfo[house][ExitX], HouseInfo[house][ExitY], HouseInfo[house][ExitZ], 0);
			format(hQuery, 42, "INSERT INTO `houses` (ID) VALUES ('%d')", house);
			mysql_query(hQuery);
			SaveHouse(house);
			SendClientMessage(playerid, -1, "{ffffff} Namas sukurtas!");
			return 1;
		}
		mysql_free_result();
	}
	return SendClientMessage(playerid, -1, "{ffffff} Serveryje yra per daug namø!");
}*/

CMD:delhouse(playerid, params[])
{
	if(PI[playerid][AdminLevel] < LEVEL_OWNER) return 0;
	new house, hQuery[43];
	if(sscanf(params, "d", house)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /delhouse <namo numeris>");
	if(house < 1 || house > MAX_HOUSES + 1) return SendClientMessage(playerid, -1, "{ffffff} Namo su tokiu numeriu nëra!");
	house --;
	if(!HouseInfo[house][hCreated]) return SendClientMessage(playerid, -1, "{ffffff} Namo su tokiu numeriu nëra!");
	format(hQuery, 43, "SELECT * FROM `houses` WHERE `ID` = '%d'", house);
	mysql_query(hQuery);
	mysql_store_result();
	if(mysql_num_rows())
	{
		HouseInfo[house][hCreated] = false;
		HouseInfo[house][IsGarageUsed] = false;
		HouseInfo[house][Buyed] = false;
		HouseInfo[house][Locked] = false;
		format(HouseInfo[house][Owner], MAX_PLAYER_NAME, "Savivaldybë");
		HouseInfo[house][Cost] = -1;
		HouseInfo[house][ExitX] = -1;
		HouseInfo[house][ExitY] = -1;
		HouseInfo[house][ExitZ] = -1;
		HouseInfo[house][ExitAngle] = -1;
		HouseInfo[house][hInt] = -1;
		HouseInfo[house][IntX] = -1;
		HouseInfo[house][IntY] = -1;
		HouseInfo[house][IntZ] = -1;
		HouseInfo[house][IntAngle] = -1;
		HouseInfo[house][htVW] = -1;
		HouseInfo[house][Money] = -1;
		HouseInfo[house][hType] = 0;
		Delete3DTextLabel(HouseInfo[house][House3D]);
		DestroyPickup(HouseInfo[house][HousePickup]);
		format(hQuery, 41, "DELETE FROM `houses` WHERE `ID` = '%d'", house);
		mysql_query(hQuery);
		SendClientMessage(playerid, -1, "{ffffff} Paðalinote namà!");
		return 1;
	}
	mysql_free_result();
	return SendClientMessage(playerid, -1, "{ffffff} Namo su tokiu numeriu nëra!");
}

/*CMD:cgang(playerid, params[])
{
	new GangTitle[24], Float: P_Pos[3], String[300], Query[128];

	if(PI[playerid][gMember] != -1) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite gaujà!");

	if(sscanf(params, "s[24]", GangTitle)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /cgang <gaujos pavadinimas>");

	if(GetPlayerMoneyA(playerid) < GANG_COST) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka pinigø!");

	if(GetPlayerScore(playerid) < GANG_EXPERIENCE) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka patirties taðkø!");

	if(strlen(GangTitle) > 24) return SendClientMessage(playerid, -1, "{ffffff} Gaujos pavadinimas yra per ilgas!");

	GetPlayerPos(playerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	for(new Gang; Gang < MAX_GANGS; Gang ++)
	{
		format(Query, sizeof(Query), "SELECT * FROM `gaujuinfo` WHERE `ID` = '%d'", Gang);
		mysql_query(Query);

		mysql_store_result();

		if(!mysql_num_rows())
		{
			GivePlayerMoneyA(playerid, -GANG_COST);

			PI[playerid][gMember] = Gang;

			format(Query, sizeof(Query), "UPDATE `players` SET `gMember` = '%d' WHERE `Vardas` = '%s'", Gang, GetPlayerNameEx(playerid));
			mysql_query(Query);

			strdel(GangInfo[Gang][gTitle], 0,         	24);
			strcat(GangInfo[Gang][gTitle], GangTitle, 	24);

			format(GangInfo[Gang][gDate], 32, "%s", GetDateEx());
			format(GangInfo[Gang][gLeader], 24, "%s", GetPlayerNameEx(playerid));

			GangInfo[Gang][G_Pos][0]	= P_Pos[0];
			GangInfo[Gang][G_Pos][1] 	= P_Pos[1];
			GangInfo[Gang][G_Pos][2] 	= P_Pos[2];
			GangInfo[Gang][gChest] 		= 0;
			GangInfo[Gang][gPoints]		= 0;
			GangInfo[Gang][gTele]		= false;
			GangInfo[Gang][gVirve]		= false;
			GangInfo[Gang][gIsodinti]	= false;

			format(String, sizeof(String), "{ffffff} Gaujos {FFAF00}%s {ffffff} (ID: {FFAF00}%d{ffffff} ) bustinë\nGaujos lyderis: {FFAF00}%s\n{ffffff} Gaujos taðkai: {FFAF00}%d\n \n{ffffff} Gaujø komandos: {FFAF00} /gkomandos",
			GangInfo[Gang][gTitle], Gang, GangInfo[Gang][gLeader], GangInfo[Gang][gPoints]);

			GangInfo[Gang][gLabel] 	= CreateDynamic3DTextLabel	(String, -1, 	GangInfo[Gang][G_Pos][0], GangInfo[Gang][G_Pos][1], GangInfo[Gang][G_Pos][2], 10.0);
			GangInfo[Gang][gPickup]	= CreatePickup				(1254, 1, 		GangInfo[Gang][G_Pos][0], GangInfo[Gang][G_Pos][1], GangInfo[Gang][G_Pos][2]);

			format(Query, sizeof(Query), "INSERT INTO `gaujuinfo` (ID) VALUES ('%d')", Gang);
			mysql_query(Query);

			SaveGang(Gang);

			format(String, sizeof(String), "{ffffff} Gauja {FFAF00}%s {ffffff}sëkmingai sukurta ir jus esate jos lyderis!", GangInfo[Gang][gTitle]);
			SendClientMessage(playerid, -1, String);

			return 1;
		}

		mysql_free_result();
	}

	return SendClientMessage(playerid, -1, "{ffffff} Serveryje jau yra sukurta 30 gaujø, daugiau sukurti negalima!");
}*/

CMD:gr(playerid, params[])
{
	new Gang = GangMember(playerid), String[216], Pranesimas[128];

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	if(CheckMute(playerid)) return 1;

	if(sscanf(params, "s[128]", Pranesimas)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /gr <tekstas>");

	if(strlen(Pranesimas) > 128) return SendClientMessage(playerid, -1, "{ffffff} Tekstas per ilgas!");

	format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ] {FFAF00}%s(%i): {ffffff}%s", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), playerid, Pranesimas);
	SendMessageToGangMembers(Gang, String);

	return 1;
}

/*CMD:gnaikinti(playerid, params[])
{
	new Gang = GangMember(playerid), Query[128], String[216];

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	if(strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gaujos lyderis!");

	format(Query, sizeof(Query), "SELECT * FROM `players` WHERE `gMember` = '%d'", Gang);
    mysql_query(Query);

	mysql_store_result();

	if(mysql_num_rows() != 0)
	{
	    while(mysql_retrieve_row())
	    {
	        format(Query, sizeof(Query), "UPDATE `players` SET `gMember` = '-1' WHERE `gMember` = '%d'", Gang);
	        mysql_query(Query);
	    }
	}

	mysql_free_result( );

	strdel(GangInfo[Gang][gTitle],  0, 24);
	strdel(GangInfo[Gang][gLeader], 0, MAX_PLAYER_NAME);

	GangInfo[Gang][G_Pos][0] = 0.0000;
	GangInfo[Gang][G_Pos][1] = 0.0000;
	GangInfo[Gang][G_Pos][2] = 0.0000;

	GangInfo[Gang][gChest] 	= -1;
	GangInfo[Gang][gPoints] = -1;

	GangInfo[Gang][gTele]		= false;
	GangInfo[Gang][gVirve]		= false;
	GangInfo[Gang][gIsodinti]	= false;

    DestroyPickup            (GangInfo[Gang][gPickup]);
	DestroyDynamic3DTextLabel(GangInfo[Gang][gLabel]);

	format(Query, sizeof(Query), "DELETE FROM `gaujuinfo` WHERE `ID` = '%d'", Gang);
	mysql_query(Query);

	for(new p = 0; p < MAX_PLAYERS; p ++)
	{
		if(PI[p][gMember] == PI[playerid][gMember] && p != playerid)
		{
		    PI[p][gMember] = -1;

		    format(String, sizeof(String), "{ffffff} Gaujos lyderis {FFAF00}%s {ffffff}uþdarë gaujà, todël jus buvote automatiðkai iðmestas ið jos!", GetPlayerNameEx(playerid));
		    SendClientMessage(p, -1, String);
		}
	}

	SendClientMessage(playerid, -1, "{ffffff} Gauja buvo sëkmingai uþdaryta, visi nariai yra automatiðkai iðmesti!");

	PI[playerid][gMember] = -1;

	return 1;
}*/

CMD:gpalikti(playerid)
{
	new Gang = GangMember(playerid), String[216], Query[216];

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	if(!strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) // Jeigu lyderis
	{
		format(Query, sizeof(Query), "SELECT * FROM `players` WHERE `gMember` = '%d'", Gang);
	    mysql_query(Query);

		mysql_store_result();

		if(mysql_num_rows() != 0)
		{
		    while(mysql_retrieve_row())
		    {
		        format(Query, sizeof(Query), "UPDATE `players` SET `gMember` = '-1' WHERE `gMember` = '%d'", Gang);
		        mysql_query(Query);
		    }
		}

		mysql_free_result( );

		strdel(GangInfo[Gang][gLeader], 0,         	24);
		strcat(GangInfo[Gang][gLeader], "Nera", 	24);

		GangInfo[Gang][gChest] 		= 0;
		GangInfo[Gang][gPoints] 	= 0;
		GangInfo[Gang][Ginklai1]	= 0;
		GangInfo[Gang][Ginklai2]	= 0;
		GangInfo[Gang][Ginklai3]	= 0;
		GangInfo[Gang][Narkai1]		= 0;
		GangInfo[Gang][Narkai2]		= 0;
		GangInfo[Gang][Narkai3]		= 0;
		GangInfo[Gang][Narkai4]		= 0;
		GangInfo[Gang][gTele]		= false;
		GangInfo[Gang][gVirve]		= false;
		GangInfo[Gang][gIsodinti]	= false;

		for(new p = 0; p < MAX_PLAYERS; p ++)
		{
			if(PI[p][gMember] == Gang && p != playerid)
			{
			    PI[p][gMember] = -1;

			    format(String, sizeof(String), "{ffffff} Jûsø gaujos lyderis {FFAF00}%s {ffffff}paliko gaujà, todël jus buvote automatiðkai iðmestas ið jos!", GetPlayerNameEx(playerid));
			    SendClientMessage(p, -1, String);
			}
		}

		PI[playerid][gMember] = -1;

		UpdateGangLabel (Gang);
		SaveGang 		(Gang);

		return 1;
	}

	format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gaujos narys {FFAF00}%s {ffffff}paliko gaujà!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid));
	SendMessageToGangMembers(Gang, String);

	format(String, sizeof(String), "{ffffff} Sëkmingai palikote {FFAF00}%s {ffffff}gaujà!", GangInfo[Gang][gTitle]);
	SendClientMessage(playerid, -1, String);

	PI[playerid][gMember] = -1;

	format(String, sizeof(String), "UPDATE `players` SET `gMember` = '%d' WHERE `Vardas` = '%s'", PI[playerid][gMember], GetPlayerNameEx(playerid));
	mysql_query(String);

	return 1;
}

/*CMD:gskin(playerid)
{
	new Gang = GangMember(playerid), String[500], Skin[32];

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	if(strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gaujos lyderis!");

	ShowModelSelectionMenu(playerid, skinlist, "Pasirink skina");

	return 1;
}*/

CMD:gl(playerid, params[])
{
	new Gang = GangMember(playerid), String[216], Pranesimas[128];

	if(CheckMute(playerid)) return 1;

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	if(strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gaujos lyderis!");

	if(PI[playerid][ParaseGauja] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Raðyti vieðà praneðimà galima tik kas 30 sekundþiø!");

	if(sscanf(params, "s[128]", Pranesimas)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /gs <tekstas>");

	if(strlen(Pranesimas) > 128) return SendClientMessage(playerid, -1, "{ffffff} Tekstas per ilgas!");

	format(String, sizeof(String), "{ffffff} Gaujos {FFAF00}%s{ffffff} lyderis {FFAF00}%s(%d){ffffff} praneða visiems serverio þaidëjams:", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), playerid);
	SendClientMessageToAll(-1, String);

	format(String, sizeof(String), "{ffffff}%s", Pranesimas);
	SendClientMessageToAll(-1, String);

	PI[playerid][ParaseGauja] = gettime() + 30;

	return 1;
}

CMD:gnariai(playerid)
{
	new Gang = GangMember(playerid), String[1500], Stringas[500], IsConnected[64], Query[128], pName[MAX_PLAYER_NAME], pID = -1, GangCount;

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	format(Query, sizeof(Query), "SELECT * FROM `players` WHERE `gMember` = '%d'", Gang);
	mysql_query(Query);

	mysql_store_result();

	if(mysql_num_rows() != 0)
	{
		while(mysql_retrieve_row())
		{
		    GangCount ++;

		    mysql_get_field("Vardas", pName);

		    pID = GetPlayeridMid(pName);

		    if(pID != INVALID_PLAYER_ID ) 	IsConnected = "{3AD73A}Prisijungæs";
		    else 							IsConnected = "{FFAF00}Neprisijungæs";

		    format(Stringas, sizeof(Stringas), "{ffffff}%d. {FFAF00}%s{ffffff}. \t\tBûsena: %s\n", GangCount, pName, IsConnected);
			strcat(String, Stringas);

			ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Prisijungæ jûsø gaujos nariai", String, "Uþdaryti", "");
		}
	}

	mysql_free_result();

	return 1;
}

CMD:gpakviesti(playerid, params[])
{
	new Gang = GangMember(playerid), String[216], giveplayerid;

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	if(strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gaujos lyderis!");

	if(sscanf(params, "r", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /gpakviesti <vardas_pavardë/id>");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðio veiksmo panaudoti negalite!");

	if(PI[giveplayerid][gMember] != -1) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas priklauso kitai gaujai!");

	if(PI[giveplayerid][specialybe] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðis þaidëjas dirba teisësaugoje!");

	if(PI[giveplayerid][specialybe] == 5) return SendClientMessage(playerid, -1, "{ffffff} Ðis þaidëjas dirba teisësaugoje!");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(PI[giveplayerid][VisoPrazaide] < 120)
	{
		SendClientMessage(playerid, -1, "{ffffff} Naujokø á gaujà priimti negalima! Bûtina praþaisti bent 120 minuèiø.");

		return 1;
	}

	new Float: P_Pos[3]; GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	format(String, sizeof(String), "{ffffff} Gaujos {FFAF00}%s{ffffff}  lyderis {FFAF00}%s {ffffff} kvieèia jus prisijungti á gaujà.\n\n\tAr sutinkate?", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid));
	ShowPlayerDialogEx(giveplayerid, GangInviteDialog, DIALOG_STYLE_MSGBOX, " ", String, "Taip", "Ne");

	format(String, sizeof(String), "{ffffff} Pakvietëte þaidëjà {FFAF00}%s {ffffff}prisijungti prie jûsø gaujos!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	ChoosedPlayer[giveplayerid] = playerid;

	return 1;
}

/*CMD:glyderis(playerid, params[])
{
	new Gang = GangMember(playerid), String[300], giveplayerid;

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	if(strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gaujos lyderis!");

	if(sscanf(params, "r", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /gpakviesti <vardas_pavardë/id>");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðio veiksmo panaudoti negalite!");

	if(PI[giveplayerid][gMember] != Gang) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nepriklauso jûsø gaujai!");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(GetPlayerScore(giveplayerid) < GANG_EXPERIENCE) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas neturi {FFAF00}"#GANG_EXPERIENCE" {ffffff}EXP!");

	new Float: P_Pos[3]; GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	format(GangInfo[Gang][gLeader], 24, "%s", GetPlayerNameEx(giveplayerid));
	UpdateGangLabel(Gang);

	format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gaujos lyderis {FFAF00}%s {ffffff}perleido savo postà {FFAF00}%s{ffffff}!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	SendMessageToGangMembers(Gang, String);

	SaveGang(Gang);

	return 1;
}*/

CMD:gismesti(playerid, params[])
{
	new Gang = GangMember(playerid), String[216], giveplayerid;

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	if(strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gaujos lyderis!");

	if(sscanf(params, "r", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /gismesti <vardas_pavardë/id>");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðio veiksmo panaudoti negalite!");

	if(PI[giveplayerid][gMember] != Gang) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas nepriklauso jûsø gaujai!");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	PI[giveplayerid][gMember] = -1;

	format(String, sizeof(String), "{ffffff} [RACIJA: {FFAF00}%s{ffffff} ]: {ffffff}Gaujos lyderis {FFAF00}%s {ffffff}iðmëte ið gaujos {FFAF00}%s{ffffff}!", GangInfo[Gang][gTitle], GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	SendMessageToGangMembers(Gang, String);

	format(String, sizeof(String), "{ffffff} Jus buvote iðmestas ið {FFAF00}%s {ffffff}gaujos!", GangInfo[Gang][gTitle]);
	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "UPDATE `players` SET `gMember` = '%d' WHERE `Vardas` = '%s'", PI[playerid][gMember], GetPlayerNameEx(playerid));
	mysql_query(String);

	return 1;
}

CMD:sandelis(playerid, params[])
{
	new Gang = GangMember(playerid);

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	if(strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gaujos lyderis!");
	
	if(GangInfo[Gang][gClosed] == true)
	{
		GangInfo[Gang][gClosed] = false;

		SendClientMessage 		(playerid, -1, "{ffffff} Atrakinote gaujos sandëli!");
	}
	else
	{
		GangInfo[Gang][gClosed] = true;

		SendClientMessage 		(playerid, -1, "{ffffff} Uþrakinote gaujos sandëlá!");
	}

	SaveGang(Gang);

	return 1;
}

CMD:gsandelis(playerid)
{
	new Gang = GangMember(playerid), String[216];

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	if(GangInfo[Gang][gClosed] == true) return SendClientMessage(playerid, -1, "{ffffff} Gaujos sandëlis uþrakintas!");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, GangInfo[Gang][G_Pos][0], GangInfo[Gang][G_Pos][1], GangInfo[Gang][G_Pos][2])) return SendClientMessage(playerid, -1, "{ffffff} Turite stovëti prie jûsø gaujos bûstinës (pickup'o)!");

	format(String, sizeof(String), "{ffffff} Gaujos pelne ðiuo metu yra: {FFAF00}$%s{ffffff} .\n \n1. Paimti pinigus ið pelno (gaujos lyderiui)\n2. Padëti pinigus á pelnà\n3. Ginklø sandëlis\n4. Narkotikø sandëlis", konvertuoti_pinigus(GangInfo[Gang][gChest]));
	ShowPlayerDialogEx(playerid, GangChestDialog, DIALOG_STYLE_LIST, " ", String, "Pasirinkti", "Uþdaryti");

	return 1;
}

CMD:gmapp(playerid)
{
	new Gang = GangMember(playerid);

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	SetPlayerCheckpointEx	(playerid, 1, -721.5038,955.0447,12.1328, 2);
	SendClientMessage 		(playerid, -1, "{ffffff} Narkotikø/ginklø sandëlis paþymëtas jûsø þemëlapyje!");

	return 1;
}

CMD:pasikrovimas(playerid)
{
	if(PI[playerid][specialybe] != 3 && PI[playerid][specialybe] != 11) return 0;

	SetPlayerCheckpointEx	(playerid, 1, 1812.5504,-2071.4951,13.5519, 2);
	SendClientMessage 		(playerid, -1, "{ffffff} Pasikrovimo vieta paþymëta jûsø þemëlapyje!");

	return 1;
}

CMD:gvirve(playerid, params[])
{
	new Gang = GangMember(playerid), String[216], giveplayerid, Float: P_Pos[3];

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	if(GangInfo[Gang][gVirve] == false)
	{
		SendClientMessage(playerid, -1, "{ffffff} Jûsø gauja neturi leidimo naudoti ðios komandos!");
		SendClientMessage(playerid, -1, "{ffffff} Leidimà galite gauti paraðæ {FFAF00} /gtaskai{ffffff}!");

		return 1;
	}

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /gvirve <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[giveplayerid][cuffed] == true) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra surakintas!");

	if(PI[giveplayerid][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Ant naujoko ðios komandos panaudoti negalite!");

		return 1;
	}

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerSpeed(giveplayerid) >= 70) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjo greitis yra per didelis, negalite jo suriðti!");

	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Ðios komandos transp. priemonëje naudoti negalima!");

	if(PI[giveplayerid][banded])
	{
		PI[giveplayerid][banded] = false;
		TogglePlayerControllable(giveplayerid, true);
		SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_NONE);
		if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 0)) RemovePlayerAttachedObject(giveplayerid, 0);

		format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}atriðo jus!", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, -1, String);

		format(String, sizeof(String), "{ffffff} Atriðote þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, -1, String);
	}
	else
	{
		PI[giveplayerid][banded] = true;
		TogglePlayerControllable(giveplayerid, false);
		SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED);
		SetPlayerAttachedObject(giveplayerid, 0, 19418, 5, 0.016000, 0.032000, 0.025000, 17.500005, -10.099991, -48.099990, 1.000000, 1.000000, 1.000000);

		format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}suriðo jus!", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, -1, String);

		format(String, sizeof(String), "{ffffff} Suriðote þaidëjà {FFAF00}%s{ffffff}!", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, -1, String);
	}

	return 1;
}

CMD:gisodinti(playerid, params[])
{
	new Gang = GangMember(playerid), String[216], giveplayerid, Float: P_Pos[3], vehicleid = GetPlayerVehicleID(playerid);

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	if(GangInfo[Gang][gIsodinti] == false)
	{
		SendClientMessage(playerid, -1, "{ffffff} Jûsø gauja neturi leidimo naudoti ðios komandos!");
		SendClientMessage(playerid, -1, "{ffffff} Leidimà galite gauti paraðæ {FFAF00} /gtaskai{ffffff}!");

		return 1;
	}

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /gisodinti <vardas_pavardë/id>");

	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[giveplayerid][cuffed] == true) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra surakintas!");

	if(PI[playerid][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Ant naujoko ðios komandos panaudoti negalite!");

		return 1;
	}

	GetPlayerPos(giveplayerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, P_Pos[0], P_Pos[1], P_Pos[2])) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas per toli nuo jûsø!");

	if(GetPlayerSpeed(giveplayerid) >= 70) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjo greitis yra per didelis, negalite jo ásodinti!");

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti transp. priemonëje!");

	if(IsABike(vehicleid)) return SendClientMessage(playerid, -1, "{ffffff} Á dviraèius ásodinti þaidëjo negali!");

	PutPlayerInVehicleEx(giveplayerid, vehicleid, 1);

	format(String, sizeof(String), "{ffffff}  {FFAF00}%s {ffffff}ásodino jus á transp. priemonæ!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, -1, String);

	format(String, sizeof(String), "{ffffff} Ásodinote þaidëjà {FFAF00}%s {ffffff}á transp. priemonæ!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, -1, String);

	return 1;
}

CMD:gtele(playerid)
{
	new Gang = GangMember(playerid);

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	if(GangInfo[Gang][gTele] == false)
	{
		SendClientMessage(playerid, -1, "{ffffff} Jûsø gauja neturi leidimo naudoti ðios komandos!");
		SendClientMessage(playerid, -1, "{ffffff} Leidimà galite gauti paraðæ {FFAF00} /gtaskai{ffffff}!");

		return 1;
	}

	if(PlayerInZone(playerid, -1138, -772, -958, -577)) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje ðià komandà draudþiama naudoti!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[playerid][beglys] == true) return SendClientMessage(playerid, -1, "{ffffff} Jus esate begliø sàraðe!");

	AC_SetPlayerPos(playerid, GangInfo[Gang][G_Pos][0], GangInfo[Gang][G_Pos][1], GangInfo[Gang][G_Pos][2]);

	return 1;
}

CMD:gtaskai(playerid)
{
	new Gang = GangMember(playerid);

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	if(strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gaujos lyderis!");

	new str[500], strf[100], LeidimasVirve[64], LeidimasIsodinti[64], LeidimasTele[64], LeidimasKauke[64], LeidimasKliutis[64];

	switch(Gang)
	{
		case -1: LeidimasTele = "{FFAF00}-", LeidimasVirve = "{FFAF00}-", LeidimasIsodinti = "{FFAF00}-";

		default:
		{
			if(GangInfo[Gang][gVirve] == true)		LeidimasVirve = "{ffffff} Taip";
			else 									LeidimasVirve = "{FFAF00}Ne";

			if(GangInfo[Gang][gTele] == true)		LeidimasTele = "{ffffff} Taip";
			else 									LeidimasTele = "{FFAF00}Ne";

			if(GangInfo[Gang][gIsodinti] == true)	LeidimasIsodinti = "{ffffff} Taip";
			else 									LeidimasIsodinti = "{FFAF00}Ne";
			
			if(GangInfo[Gang][gKauke] == true)		LeidimasKauke = "{ffffff} Taip";
			else 									LeidimasKauke = "{FFAF00}Ne";
			
			if(GangInfo[Gang][gKliutis] == true)	LeidimasKliutis = "{ffffff} Taip";
			else 									LeidimasKliutis = "{FFAF00}Ne";
		}
	}

	format(strf, 100, "{ffffff}Gaujos patobulinimas uþ taðkus. Jûsø gauja turi: {FFAF00}%d {ffffff}taðkø", GangInfo[Gang][gPoints]);
	format(str, 500, "Patobulinimas\tAr patobulinimas nupirktas\tPatobulinimo kaina (gaujos taðkais)\n1. Galimybë suriðinëti þaidëjus\t%s\t{FFAF00}"#GangBandPrice"\n2. Galimybë teleportuotis á bazæ\t%s\t{FFAF00}"#GangTeleportPrice"\n3. Galimybë ásodinti þaidëjus á maðinà\t%s\t{FFAF00}"#GangIsodintiPrice"\n4. Galimybë naudoti gaujø kaukes\t%s\t{FFAF00}"#GangKaukePrice"\n5. Galimybë gaujai naudoti kliûtá\t%s\t{FFAF00}"#GangKliutisPrice"",
	LeidimasVirve, LeidimasTele, LeidimasIsodinti, LeidimasKauke, LeidimasKliutis);
	ShowPlayerDialogEx(playerid, GaujosTobulininimas, DIALOG_STYLE_TABLIST_HEADERS, strf, str, "Pasirinkti", "Uþdaryti");

	return 1;
}

CMD:grobti(playerid) // ToDo
{
	new Gang = GangMember(playerid), PoliceCount, GangCount;

	if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");

	if(strcmp(GangInfo[Gang][gLeader], GetPlayerNameEx(playerid), false, MAX_PLAYER_NAME)) return SendClientMessage(playerid, -1, "{ffffff} Jus nesate gaujos lyderis!");

	if(VykstaGrobimas != -1) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu jau vyksta kitas grobimas!");

	if(KadaGrobe > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Pastatus grobti galima tik kas valandà!");

	for(new p, size = GetPlayerPoolSize(); p <= size; p ++) if(PI[p][gMember] == PI[playerid][gMember]) GangCount ++;

	if(GangCount < 5) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu yra maþai jûsø gaujos nariø, jø turi bûti bent 5!");

	for(new p; p < MAX_PLAYERS; p ++)
	{
		if(PI[p][specialybe] == 1)
		{
			if(!PI[p][AFK_Stat]) PoliceCount ++;
		}

		if(PI[p][specialybe] == 5)
		{
			if(!PI[p][AFK_Stat]) PoliceCount ++;
		}
	}

	if(PoliceCount < 5) return SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu yra maþai policininkø/ARAS, jø turi bûti bent 5!");

	//if(IsPlayerInRangeOfPoint(playerid, 2.0, 208.2638,-96.9579,1005.2578)) 			KaGrobia = GROBIA_SALONA;
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2228.4309,-1150.6011,1025.7969))		KaGrobia = GROBIA_HOTEL;
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, -92.4043,2211.9736,-78.9980))		KaGrobia = GROBIA_PD;
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, 366.5718,158.7439,1008.3828))		KaGrobia = GROBIA_VYRIAUSYBE;
	else return SendClientMessage(playerid, -1, "{ffffff} Turite stovëti prie uþgrobimo vietos!");

	VykstaGrobimas 	= Gang;
	GrobimoLaikas 	= gettime() + 900;
	KadaGrobe 		= gettime() + 3600;

	new str[70];

	switch(KaGrobia)
	{
		case GROBIA_PD: 		str = "policijos departamentà";
		case GROBIA_SALONA:		str = "drabuþiø parduotuvæ";
		case GROBIA_VYRIAUSYBE: str = "vyriausybæ";
		case GROBIA_HOTEL: 		str = "vieðbutá";
	}

	new String[216];

	format(String, sizeof(String), "{ffffff} Gauja {FFAF00}%s{ffffff}  uþgrobë {ffffff} %s{ffffff} ! Grobimo laikas: {FFAF00}15{ffffff}  minuèiø.", GangInfo[Gang][gTitle], str);
	SendClientMessageToAll(-1, String);

	return 1;
}

CMD:gkomandos(playerid)
{
	new String[1600], Stringas[300], LeidimasVirve[64], LeidimasIsodinti[64], LeidimasTele[64];

	new Gang = GangMember(playerid);

	switch(Gang)
	{
		case -1: LeidimasTele = "{FFAF00}-", LeidimasVirve = "{FFAF00}-", LeidimasIsodinti = "{FFAF00}-";

		default:
		{
			if(GangInfo[Gang][gVirve] == true)		LeidimasVirve = "{ffffff} galima";
			else 									LeidimasVirve = "{FFAF00}negalima";

			if(GangInfo[Gang][gTele] == true)		LeidimasTele = "{ffffff} galima";
			else 									LeidimasTele = "{FFAF00}negalima";

			if(GangInfo[Gang][gIsodinti] == true)	LeidimasIsodinti = "{ffffff} galima";
			else 									LeidimasIsodinti = "{FFAF00}negalima";
		}
	}

	strcat(String, "{FFAF00} /gsandelis {ffffff}- gaujos pinigø, ginklø bei narkotikø sandëlis\n{FFAF00} /gpakviesti {ffffff}- pakviesite þaidëjà á gaujà\n{FFAF00} /gnariai {ffffff}- pamatysite jûsø gaujos narius\n");
	strcat(String, "{FFAF00} /gpalikti {ffffff}- paliksite gaujà\n{FFAF00} /gismesti {ffffff}- iðmesite þaidëjà ið gaujos\n{FFAF00} /gr {ffffff}- gaujos racija\n{FFAF00} /gl {ffffff}- paraðysite praneðimà, kurá visi matys\n");
	strcat(String, "{FFAF00} /gmapp {ffffff}- iðgausite narkotikø bei ginklø sandëlio vietà\n{FFAF00} /gtaskai {ffffff}- nusipirksite gaujos patobulinimus uþ taðkus\n{FFAF00} /guzimti {ffffff}- pradësite uþiminëti gaujø teritorijà\n");
	strcat(String, "{FFAF00} /gsunaikinti {ffffff}- Sunaikinsite gaujos transportà\n");
	strcat(String, "{FFAF00} /parduotih {ffffff}- Pasiûlysite pasirinktam þaidëjui nusipirkti heroino\n");
	strcat(String, "{FFAF00} /parduotic {ffffff}- Pasiûlysite pasirinktam þaidëjui nusipirkti kokaino\n");
	strcat(String, "{FFAF00} /parduotie {ffffff}- Pasiûlysite pasirinktam þaidëjui nusipirkti ekstazio\n");
	strcat(String, "{FFAF00} /parduotiz {ffffff}- Pasiûlysite pasirinktam þaidëjui nusipirkti þolës\n");
	strcat(String, "{FFAF00} /parduotig {ffffff}- Pasiûlysite pasirinktam þaidëjui nusipirkti ginklus\n");
	strcat(String, "{FFAF00} /sandelis {ffffff}- Atrakinsite/uþrakinsite gaujos sandëlá\n");
	format(Stringas, sizeof(Stringas), "{FFAF00} /gvirve - {ffffff}suriðite/atriðite þaidëjà (%s{ffffff})\n", LeidimasVirve); 					strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "{FFAF00} /gisodinti - {ffffff}ásodinsite þaidëjà á transp. priemonæ (%s{ffffff})\n", LeidimasIsodinti); strcat(String, Stringas);
	format(Stringas, sizeof(Stringas), "{FFAF00} /gtele - {ffffff}teleportuotis á gaujos bazæ (%s{ffffff})\n", LeidimasTele); 					strcat(String, Stringas);
	ShowPlayerDialogEx(playerid, 8695, DIALOG_STYLE_MSGBOX, "Gaujø komandos", String, "Uþdaryti", "");

	return 1;
}

CMD:gkliutis(playerid, params[])
{
    new Gang = GangMember(playerid);
    
    if(Gang == -1) return SendClientMessage(playerid, -1, "{ffffff} Jus nepriklausote jokiai gaujai!");
    if(PI[playerid][arKaroZonoje] == true) return SendClientMessage(playerid, -1, "{ffffff} Karo zonoje negalima naudoti ðios komandos!");

	if(GangInfo[Gang][gKliutis] == false)
	{
		SendClientMessage(playerid, -1, "{ffffff} Jûsø gauja neturi leidimo naudoti ðios komandos!");
		SendClientMessage(playerid, -1, "{ffffff} Leidimà galite gauti paraðæ {FFAF00} /gtaskai{ffffff}!");

		return 1;
	}
    
	if(PI[playerid][PadejesKliuti] == true)
	{
	    DestroyDynamicObject(PI[playerid][KliutisObject]);
	    Delete3DTextLabel(PI[playerid][KliutisTekstas]);
	    PI[playerid][PadejesKliuti] = false;
	    
	    GameTextForPlayer(playerid, "~r~KLIUTIS SUNAIKINTA", 3000, 3);
	}
	else if(PI[playerid][PadejesKliuti] == false)
	{
	    new Float:gPos[4], Str[256];
	    
	    GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);
	    GetPlayerFacingAngle(playerid, gPos[3]);
	    PI[playerid][PadejesKliuti] = true;
	    
	    GameTextForPlayer(playerid, "~g~KLIUTIS SUKURTA", 3000, 3);
	    
	    format(Str, sizeof(Str), "{33cc66} GAUJA {FFFFFF}\nKliûtá padëjo {33cc66}%s{FFFFFF} ({ffcc00}%s{FFFFFF})", GetPlayerNameEx(playerid), GetDateEx());
	    
	    PI[playerid][KliutisTekstas] = Create3DTextLabel(Str, -1, gPos[0], gPos[1], gPos[2], 20.0, GetPlayerVirtualWorld(playerid), 0);
	    PI[playerid][KliutisObject] = CreateDynamicObject(1334, gPos[0], gPos[1], gPos[2], 0, 0, gPos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
 	}
	return 1;
}

CMD:nametag(playerid)
{
	if(VardaiIsjungti[playerid] == false)
	{
		for(new i = 0; i < MAX_PLAYERS; i ++) ShowPlayerNameTagForPlayer(playerid, i, false);

		VardaiIsjungti[playerid] = true;

		SendClientMessage(playerid, -1, "{ffffff} Þaidëjø vardø rodymas: iðjungtas. Norint ájungti raðykite {FFAF00} /nametag{ffffff}!");
	}
	else
	{
		for(new i = 0; i < MAX_PLAYERS; i ++) ShowPlayerNameTagForPlayer(playerid, i, true);

		VardaiIsjungti[playerid] = false;

		SendClientMessage(playerid, -1, "{ffffff} Þaidëjø vardø rodymas: ájungtas. Norint iðjungti raðykite {FFAF00} /nametag{ffffff}!");
	}

	return 1;
}

CMD:krauti(playerid)
{
	if(PI[playerid][MobilePhone] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite telefono!");

	if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, -1, "{ffffff} Pakrauti telefonà galite betkuriame pastate!");

	if(PI[playerid][Battery] >= 100) return SendClientMessage(playerid, -1, "{ffffff} Jûsø telefono baterija pilnai uþkrauta!");

	PI[playerid][Battery] = 100;

	SendClientMessage(playerid, -1, "{ffffff} Jûsø telefonas buvo sëkmingai pakrautas!");

	return 1;
}

CMD:skambinti(playerid, params[])
{
	if(CheckMute(playerid)) return 1;

	new giveplayerid;

	if(PI[playerid][MobilePhone] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite telefono!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[playerid][PhoneStatus] == 0 || PI[playerid][Battery] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jûsø telefonas yra iðjungtas!");

	if(PI[playerid][Sutartis] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite mobiliojo ryðio kortelës!");

	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /sms <vardas_pavardë/id>");

	PI[playerid][TelphoneInUse] = 1;
	SetTimerEx("PlayerCalling", 4000, false, "ddd", playerid, PI[giveplayerid][MobilePhoneNumber], 0);

	PlayerPlaySound           (playerid, 3600, 0.0, 0.0, 0.0); // Sound Mobile Dialing.
	Fix_SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	return 1;
}

CMD:pakelti(playerid)
{
	if(CheckMute(playerid)) return 1;

	if(PI[playerid][MobilePhone] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite telefono!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[playerid][PhoneStatus] == 0 || PI[playerid][Battery] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jûsø telefonas yra iðjungtas!");

	if(PI[playerid][Sutartis] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite mobiliojo ryðio kortelës!");

	foreach(Player, pid)
	{
		if(PI[pid][TelphoneInUse] == playerid)
	    {
	    	PI[playerid][TelphoneInUse] = pid;

			PI[pid][TelphoneCalling]      = TELPHONE_SOUND_STOP;
            PI[playerid][TelphoneCalling] = TELPHONE_SOUND_STOP;

	        Fix_SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	        switch(PI[pid][Sutartis])
	        {
	        	case 1: PI[pid][PhoneMoney]		 -= 0.75;
	        	case 2: PI[pid][TelMokesciai]	 += 0.75;
	        }

			new String[110];

			format(String, sizeof(String), "{ffffff} Jus sujungtas su þaidëju {FFAF00}%s{ffffff}!", GetPlayerNameEx(playerid));
			SendClientMessage(pid, -1, String);

			format(String, sizeof(String), "{ffffff} Jus sujungtas su þaidëju {FFAF00}%s{ffffff}!", GetPlayerNameEx(pid));
			SendClientMessage(playerid, -1, String);

			return 1;
		}
 	}

	SendClientMessage(playerid, -1, "{ffffff} Jums niekas neskambina!");

	return 1;
}

CMD:padeti(playerid, params[])
{
	if(PI[playerid][MobilePhone] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite telefono!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[playerid][PhoneStatus] == 0 || PI[playerid][Battery] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jûsø telefonas yra iðjungtas!");

	if(PI[playerid][Sutartis] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite mobiliojo ryðio kortelës!");

	if(PI[playerid][TelphoneInUse] == -1 && PI[playerid][TelphoneCalling] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus nekalbate telefonu!");

	new String[128];

	if(PI[playerid][TelphoneInUse] != INVALID_PLAYER_ID)
	{
		format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}padëjo ragelá. Pokalbis baigtas!", GetPlayerNameEx(playerid));
		SendClientMessage(PI[playerid][TelphoneInUse], -1, String);
	}

	if(PI[playerid][TelphoneCalling] > 0)
	{
	    format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}numetë ragelá!", GetPlayerNameEx(playerid));
		SendClientMessage(PI[playerid][TelphoneInUse], -1, String);
	}

	Fix_SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

	if(PI[playerid][TelphoneInUse] != INVALID_PLAYER_ID)
	{
		Fix_SetPlayerSpecialAction(PI[playerid][TelphoneInUse], SPECIAL_ACTION_STOPUSECELLPHONE);

   		PI[PI[playerid][TelphoneInUse]][TelphoneCalling] = TELPHONE_SOUND_STOP;
    	PI[PI[playerid][TelphoneInUse]][TelphoneInUse]   = -1;
	}

	PI[playerid][TelphoneInUse]   = -1;
	PI[playerid][TelphoneCalling] = TELPHONE_SOUND_STOP;

	return 1;
}

CMD:gautieji(playerid)
{
	if(PI[playerid][MobilePhone] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite telefono!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[playerid][PhoneStatus] == 0 || PI[playerid][Battery] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jûsø telefonas yra iðjungtas!");

	if(PI[playerid][Sutartis] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite mobiliojo ryðio kortelës!");

	new String[800], Stringas[120];

	for(new i = 0; i < MAX_INBOX_SENT_SLOTS; i ++)
	{
	    if(strlen(PlayerTelphoneInbox[playerid][i]) != 0)
		{
		    new SenterName[MAX_PLAYER_NAME];

		    sscanf(PlayerTelphoneInbox[playerid][i], "p<|>s[24]{s[24]s[800]}", SenterName);

	    	format(Stringas, sizeof(Stringas), "{ffffff}%d. Gauta nuo: {FFAF00}%s\n", i + 1, SenterName);
	    	strcat(String, Stringas);
		}
		else
		{
		    format(Stringas, sizeof(Stringas), "{ffffff}%d. nëra\n", i + 1);
	    	strcat(String, Stringas);
		}
	}

	ShowPlayerDialog(playerid, PlayerTelphoneInboxDialog, DIALOG_STYLE_LIST, "{F2F2F2}Gautos þinutës", String, "Skaityti", "Uþdaryti");

	return 1;
}

CMD:sms(playerid, params[])
{
	if(CheckMute(playerid)) return 1;

	if(PI[playerid][MobilePhone] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite telefono!");

	if(PI[playerid][cuffed] || PI[playerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Jus esate surakintas arba suriðtas!");

	if(PI[playerid][PhoneStatus] == 0 || PI[playerid][Battery] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jûsø telefonas yra iðjungtas!");

	if(PI[playerid][Sutartis] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite mobiliojo ryðio kortelës!");

	if(PI[playerid][Sutartis] == 1 && PI[playerid][PhoneMoney] < 0.30) return SendClientMessage(playerid, -1, "{ffffff} Jûsø sàskaitos likutis nepakankamas!");

	new giveplayerid, Pranesimas[128];

	if(sscanf(params, "us[128]", giveplayerid, Pranesimas)) return SendClientMessage(playerid, -1, "{ffffff}  {FFAF00} /sms <vardas_pavardë/id> <tekstas>");

	if(!IsPlayerNPC(giveplayerid))
    {
    	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{ffffff} Tokio þaidëjo nëra!");

    	if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "{ffffff} Ant savæs ðios komandos panaudoti negalite!");

   	    if(PI[giveplayerid][MobilePhone] == 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas neturi telefono!");

		if(PI[giveplayerid][PhoneStatus] == 0 || PI[giveplayerid][Battery] == 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjo telefonas yra iðjungtas!");

		if(PI[giveplayerid][Sutartis] == 0) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas neturi mobiliojo ryðio kortelës!");

		if(PI[giveplayerid][cuffed] || PI[giveplayerid][banded]) return SendClientMessage(playerid, -1, "{ffffff} Þaidëjas yra surakintas arba suriðtas!");

		switch(PI[playerid][Sutartis])
        {
        	case 1: PI[playerid][PhoneMoney]	 -= 0.30;
        	case 2: PI[playerid][TelMokesciai]	 += 0.30;
        }

        new String[800];

        if(PI[giveplayerid][AFK_Stat] == true)
    	{
    		format(String, sizeof(String), "{ffffff} Iðsiuntëte SMS þinutæ AFK þaidëjui {FFAF00}%s(%i){ffffff}:", GetPlayerNameEx(giveplayerid), giveplayerid);
    	}
    	else
    	{
    		format(String, sizeof(String), "{ffffff} Iðsiuntëte SMS þinutæ þaidëjui {FFAF00}%s(%i){ffffff}:", GetPlayerNameEx(giveplayerid), giveplayerid);
    	}

		//format(String, sizeof(String), "{ffffff} Iðsiuntëte SMS þinutæ þaidëjui {FFAF00}%s(%i){ffffff}:", GetPlayerNameEx(giveplayerid), giveplayerid);
        SendClientMessage(playerid, -1, String);

        format(String, sizeof(String), "{FFAF00}%s", Pranesimas);
        SendClientMessage(playerid, -1, String);

        format(String, sizeof(String), "{ffffff} Gavote SMS þinutæ nuo þaidëjo {FFAF00}%s(%i){ffffff}:", GetPlayerNameEx(playerid), playerid);
        SendClientMessage(giveplayerid, -1, String);

        format(String, sizeof(String), "{FFAF00}%s", Pranesimas);
        SendClientMessage(giveplayerid, -1, String);

        String[0] = EOS;

        for(new Slot = MAX_INBOX_SENT_SLOTS - 1; Slot >= 0; Slot --)
	    {
	    	if(Slot > 0)
	        {
		    	strdel(PlayerTelphoneInbox[giveplayerid][Slot], 0, 800);
		    	strcat(PlayerTelphoneInbox[giveplayerid][Slot], PlayerTelphoneInbox[giveplayerid][Slot - 1]);
			}
			else if(Slot == 0)
			{
			    strdel(PlayerTelphoneInbox[giveplayerid][Slot], 0, 800);

				format(String, sizeof(String), "%s | %s | %s", GetPlayerNameEx(playerid), GetDateEx(), Pranesimas);

			    strcat(PlayerTelphoneInbox[giveplayerid][Slot], String);
			}
		}
    }

	return 1;
}

CMD:telefonas(playerid)
{
	new String[500], Pavadinimas[32], Statusas[64], tSutartis[128], Baterija[32];

	if(PI[playerid][MobilePhone] == 0) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite telefono!");

	switch(PI[playerid][MobilePhone])
	{
		case 1: Pavadinimas = "iPhone";
		case 2: Pavadinimas = "Samsung";
		case 3: Pavadinimas = "Nokia";
		case 4: Pavadinimas = "Sony";
		case 5: Pavadinimas = "Alcatel";
		case 6: Pavadinimas = "HTC";
	}

	switch(PI[playerid][PhoneStatus])
	{
		case 0: Statusas = "{FFAF00}Iðjungtas. {ffffff}Ájungti.";
		case 1: Statusas = "{2D7F1F}Ájungtas. {ffffff}Iðjungti.";
	}

	switch(PI[playerid][Sutartis])
	{
		case 0:
		{
			tSutartis = "-";
		}

		case 1:
		{
			format(tSutartis, sizeof(tSutartis), "Mobiliojo ryðio kortelë (sàsk. likutis: {FFAF00}$%.2f{ffffff}, tel. numeris: {FFAF00}%d{ffffff})", PI[playerid][PhoneMoney], PI[playerid][MobilePhoneNumber]);
		}

		case 2:
		{
			format(tSutartis, sizeof(tSutartis), "Abonentinë sutartis (mokesèiai: {FFAF00}$%.2f{ffffff}, tel. numeris: {FFAF00}%d{ffffff})", PI[playerid][TelMokesciai], PI[playerid][MobilePhoneNumber]);
		}
	}

	switch(PI[playerid][Battery])
	{
		case 0..15: 	format(Baterija, sizeof(Baterija), "{FFAF00}%d%", PI[playerid][Battery]);
		case 16..40: 	format(Baterija, sizeof(Baterija), "{FF4444}%d%", PI[playerid][Battery]);
		case 41..70: 	format(Baterija, sizeof(Baterija), "{FFDA00}%d%", PI[playerid][Battery]);
		case 71..100: 	format(Baterija, sizeof(Baterija), "{2D7F1F}%d%", PI[playerid][Battery]);
	}

	format(String, sizeof(String), "1. Telefono pavadinimas: {FFAF00}%s\n2. Statusas: %s\n3. %s\n4. Baterijos likutis: %s\n \n5. Telefono komandos\n6. Iðmesti telefonà", Pavadinimas, Statusas, tSutartis, Baterija);
	ShowPlayerDialogEx(playerid, MobilePhoneInfoDialog, DIALOG_STYLE_LIST, "Telefono valdymas", String, "Pasirinkti", "Uþdaryti");

	return 1;
}

CMD:vskystis(playerid)
{
	if(PI[playerid][specialybe] != 22) return 0;

	if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti valytojø maðinoje!");

	new model = GetVehicleModel(GetPlayerVehicleID(playerid));

	if(model != 574) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti valytojø maðinoje!");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, -2052.1765,11.9380,35.3374)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti valytojø bazëje!");

	VehicleInfo[GetPlayerVehicleID(playerid)][Vanduo] = 30.0;
	VehicleInfo[GetPlayerVehicleID(playerid)][Parase] = false;
	VehicleInfo[GetPlayerVehicleID(playerid)][Pasibaiges] = false;

	SendClientMessage(playerid, -1, "{ffffff} Transp. priemonë pripildyta valomojo skysèio!");

	return 1;
}

CMD:uzduotys(playerid)
{
	ShowPlayerDialogEx(playerid, 4588, DIALOG_STYLE_LIST, "Serverio uþduotys", "1. 7 uliunø Stebuklai\n2. Serverio misijos", "Pasirinkti", "Uþdaryti");

	return 1;
}

CMD:stebuklas(playerid)
{
	/*if((PI[playerid][stebuklas1] == 1) &&
		(PI[playerid][stebuklas2] == 1) &&
		(PI[playerid][stebuklas3] == 1) &&
		(PI[playerid][stebuklas4] == 1) &&
		(PI[playerid][stebuklas5] == 1) &&
		(PI[playerid][stebuklas6] == 1) &&
		(PI[playerid][stebuklas7] == 1)) return SendClientMessage(playerid, -1, "{ffffff} Jus esate ávykdæs visus stebuklus!");*/

	if(PI[playerid][VisoPrazaide] < NAUJOKO_LAIKAS)
	{
		SendClientMessage(playerid, -1, "{ffffff} Stebuklø vykdymà pradëti galësite tik praþaidus {FFAF00}"#NAUJOKO_LAIKAS"{ffffff} min!");

		return 1;
	}

	if(PI[playerid][stebuklas7] == 1) return SendClientMessage(playerid, -1, "{ffffff} Jus jau ávykdëte visus stebuklus!");

	if(PI[playerid][stebuklas1] == 0)
	{
		if(PI[playerid][stebuklas1] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðis stebuklas jau ávykdytas!");

		if(!IsPlayerInRangeOfPoint(playerid, 4.0, 686.6038,1716.7845,7.0127)) return SendClientMessage(playerid, -1, "{ffffff} Jus esate per toli nuo apleistos maðinos!");

		PI[playerid][stebuklas1] = 1;

		SendClientMessage(playerid, -1, "{ffffff} Sveikiname, pirmasis MetroCity.lt Stebuklas rastas! Prizà galësite atsiimti kai surasite visus septynis stebuklus.");

		return 1;
	}

	if(PI[playerid][stebuklas2] == 0)
	{
		if(PI[playerid][stebuklas1] == 0) return SendClientMessage(playerid, -1, "{ffffff} Norint vykdyti antràjá stebuklà, turite ávykdyti pirmàjá!");

		if(PI[playerid][stebuklas2] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðis stebuklas jau ávykdytas!");

		if(!IsPlayerInRangeOfPoint(playerid, 4.0, 2351.1135,-652.4021,127.0725)) return SendClientMessage(playerid, -1, "{ffffff} Jus esate per toli nuo nuodingojo raganos viralo!");

		PI[playerid][stebuklas2] = 1;

		SendClientMessage(playerid, -1, "{ffffff} Sveikiname, antrasis MetroCity.lt Stebuklas rastas! Prizà galësite atsiimti kai surasite visus septynis stebuklus.");

		return 1;
	}

	if(PI[playerid][stebuklas3] == 0)
	{
		if(PI[playerid][stebuklas2] == 0) return SendClientMessage(playerid, -1, "{ffffff} Norint vykdyti treèiàjá stebuklà, turite ávykdyti antràjá!");

		if(PI[playerid][stebuklas3] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðis stebuklas jau ávykdytas!");

		if(!IsPlayerInRangeOfPoint(playerid, 4.0, -1725.9496,-1650.2821,21.8857)) return SendClientMessage(playerid, -1, "{ffffff} Jus esate per toli nuo obuoliø pintinës!");

		PI[playerid][stebuklas3] = 1;

		SendClientMessage(playerid, -1, "{ffffff} Sveikiname, treèiasis MetroCity.lt Stebuklas rastas! Prizà galësite atsiimti kai surasite visus septynis stebuklus.");

		return 1;
	}

	if(PI[playerid][stebuklas4] == 0)
	{
		if(PI[playerid][stebuklas3] == 0) return SendClientMessage(playerid, -1, "{ffffff} Norint vykdyti ketvirtàjá stebuklà, turite ávykdyti treèiàjá!");

		if(PI[playerid][stebuklas4] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðis stebuklas jau ávykdytas!");

		if(!IsPlayerInRangeOfPoint(playerid, 4.0, -216.6145,-1695.6584,4.6885)) return SendClientMessage(playerid, -1, "{ffffff} Jus esate per toli nuo amþinai deganèio lauþo!");

		PI[playerid][stebuklas4] = 1;

		SendClientMessage(playerid, -1, "{ffffff} Sveikiname, ketvirtasis MetroCity.lt Stebuklas rastas! Prizà galësite atsiimti kai surasite visus septynis stebuklus.");

		return 1;
	}

	if(PI[playerid][stebuklas5] == 0)
	{
		if(PI[playerid][stebuklas4] == 0) return SendClientMessage(playerid, -1, "{ffffff} Norint vykdyti penktàjá stebuklà, turite ávykdyti ketvirtàjá!");

		if(PI[playerid][stebuklas5] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðis stebuklas jau ávykdytas!");

		if(!IsPlayerInRangeOfPoint(playerid, 4.0, 2487.1389,-1646.1624,14.0703)) return SendClientMessage(playerid, -1, "{ffffff} Jus esate per toli nuo garsaus gitaristo gitaros!");

		PI[playerid][stebuklas5] = 1;

		SendClientMessage(playerid, -1, "{ffffff} Sveikiname, penktasis MetroCity.lt Stebuklas rastas! Prizà galësite atsiimti kai surasite visus septynis stebuklus.");

		return 1;
	}

	if(PI[playerid][stebuklas6] == 0)
	{
		if(PI[playerid][stebuklas5] == 0) return SendClientMessage(playerid, -1, "{ffffff} Norint vykdyti ðeðtàjá stebuklà, turite ávykdyti penktàjá!");

		if(PI[playerid][stebuklas6] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðis stebuklas jau ávykdytas!");

		if(!IsPlayerInRangeOfPoint(playerid, 4.0, 2323.6504,1283.2288,97.5950)) return SendClientMessage(playerid, -1, "{ffffff} Jus esate per toli nuo gyvybës eliksyro!");

		PI[playerid][stebuklas6] = 1;

		SendClientMessage(playerid, -1, "{ffffff} Sveikiname, ðeðtasis MetroCity.lt Stebuklas rastas! Prizà galësite atsiimti kai surasite visus septynis stebuklus.");

		return 1;
	}

	if(PI[playerid][stebuklas7] == 0)
	{
		if(PI[playerid][stebuklas6] == 0) return SendClientMessage(playerid, -1, "{ffffff} Norint vykdyti septintàjá stebuklà, turite ávykdyti ðeðtàjá!");

		if(PI[playerid][stebuklas7] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðis stebuklas jau ávykdytas!");

		if(!IsPlayerInRangeOfPoint(playerid, 4.0, 701.4233,1992.6064,4.5369)) return SendClientMessage(playerid, -1, "{ffffff} Jus esate per toli nuo raganos kepurës!");

		PI[playerid][stebuklas7] = 1;

		SendClientMessage(playerid, -1, "{ffffff} Sveikiname, septintasis ir paskutinis MetroCity.lt Stebuklas rastas!");
		SendClientMessage(playerid, -1, "{ffffff} Prizà atsiimti galite pradinëje event vietoje, jà rasite: {FFAF00} /gps > Kitos vietovës > 7 ULIUNO Stebuklai{ffffff}!");

		return 1;
	}

	return 1;
}

CMD:kvalgyti(playerid)
{
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 21.2884,2033.7419,-2.5621)) return SendClientMessage(playerid, -1, "{ffffff} Jus esate per toli nuo valgymo stalo!");

	SendClientMessage 	(playerid, -1, "{ffffff} Valgote kalëjimo maistà!");
	Sotumas				(playerid, 100);
	ApplyAnimation		(playerid, "VENDING", "vend_eat1_P", 4.1, 0, 0, 0, 0, 0);

	return 1;
}

/*CMD:nkepure(playerid)
{
	if(!IsPlayerAttachedObjectSlotUsed(playerid, POLICETAZER_ATTACH_SLOT)) return SendClientMessage(playerid, -1, "{ffffff} Jus neuþsidëjæs kepurës!");

	RemovePlayerAttachedObject(playerid, POLICETAZER_ATTACH_SLOT);
	SendClientMessage 	(playerid, -1, "{ffffff} Nusiëmete Kalëdinæ kepuræ!");

	return 1;
}*/

/*CMD:elnias(playerid)
{
	if(!IsPlayerAttachedObjectSlotUsed(playerid, POLICETAZER_ATTACH_SLOT)) return SendClientMessage(playerid, -1, "{ffffff} Kalëdø event'à vykdyti galima tik su Kalëdine kepure!");

	if(IsPlayerInRangeOfPoint(playerid, 4.0, -2657.13501, -2367.17896, 2.41586)) // 1 Stirna
	{
		if(PI[playerid][Stirna1] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðá elnià jus jau radote!");

		PI[playerid][Stirna1] = 1;

		SendClientMessage(playerid, -1, "{ffffff} Suradote elnià! Visus turimus elnius pamatyti galite paraðæ {FFAF00} /elniai{ffffff}!");
	}

	else if(IsPlayerInRangeOfPoint(playerid, 4.0, -37.95813, 89.77388, 2.61803)) // 2 Stirna
	{
		if(PI[playerid][Stirna2] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðá elnià jus jau radote!");

		PI[playerid][Stirna2] = 1;

		SendClientMessage(playerid, -1, "{ffffff} Suradote elnià! Visus turimus elnius pamatyti galite paraðæ {FFAF00} /elniai{ffffff}!");
	}

	else if(IsPlayerInRangeOfPoint(playerid, 4.0, -628.96478, 2708.48901, 71.84130)) // 3 Stirna
	{
		if(PI[playerid][Stirna3] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðá elnià jus jau radote!");

		PI[playerid][Stirna3] = 1;

		SendClientMessage(playerid, -1, "{ffffff} Suradote elnià! Visus turimus elnius pamatyti galite paraðæ {FFAF00} /elniai{ffffff}!");
	}

	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 437.38245, 1454.71948, 6.27177)) // 4 Stirna
	{
		if(PI[playerid][Stirna4] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðá elnià jus jau radote!");

		PI[playerid][Stirna4] = 1;

		SendClientMessage(playerid, -1, "{ffffff} Suradote elnià! Visus turimus elnius pamatyti galite paraðæ {FFAF00} /elniai{ffffff}!");
	}

	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2555.94312, 120.67274, 25.26703)) // 5 Stirna
	{
		if(PI[playerid][Stirna5] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðá elnià jus jau radote!");

		PI[playerid][Stirna5] = 1;

		SendClientMessage(playerid, -1, "{ffffff} Suradote elnià! Visus turimus elnius pamatyti galite paraðæ {FFAF00} /elniai{ffffff}!");
	}

	return 1;
}

CMD:elniai(playerid)
{
	new stirna11[30], stirna22[30], stirna33[30], stirna44[30], stirna55[30], String[50], Stringas[400];

	if(PI[playerid][Stirna1] == 0) 	stirna11 = "{FFAF00}nerastas";
	else 							stirna11 = "{19F14F}rastas";

	if(PI[playerid][Stirna2] == 0) 	stirna22 = "{FFAF00}nerastas";
	else 							stirna22 = "{19F14F}rastas";

	if(PI[playerid][Stirna3] == 0) 	stirna33 = "{FFAF00}nerastas";
	else 							stirna33 = "{19F14F}rastas";

	if(PI[playerid][Stirna4] == 0) 	stirna44 = "{FFAF00}nerastas";
	else 							stirna44 = "{19F14F}rastas";

	if(PI[playerid][Stirna5] == 0) 	stirna55 = "{FFAF00}nerastas";
	else 							stirna55 = "{19F14F}rastas";

	format(String, 128, " 1 elnias\t%s\n", stirna11); 	strcat(Stringas, String);
	format(String, 128, " 2 elnias\t%s\n", stirna22); 	strcat(Stringas, String);
	format(String, 128, " 3 elnias\t%s\n", stirna33); 	strcat(Stringas, String);
	format(String, 128, " 4 elnias\t%s\n", stirna44); 	strcat(Stringas, String);
	format(String, 128, " 5 elnias\t%s", stirna55); 	strcat(Stringas, String);

	ShowPlayerDialogEx(playerid, 6842, DIALOG_STYLE_LIST, "Kalëdø event", Stringas, "Pasirinkti", "Uþdaryti");

	return 1;
}*/

CMD:taisyti(playerid)
{
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, -2671.7439,-35.9309,3.8013)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti mechanikø bazëje!");

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{ffffff} Turite bûti transp. priemonëje!");

	if(GetPlayerMoneyA(playerid) < 500) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite tiek pinigø!");

	if(PI[playerid][KadaGydes] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Transp. priemonæ taisyti galima tik kas 1 minutæ!");

	PI[playerid][KadaGydes] = gettime() + 60;

	ac_RepairVehicle(GetPlayerVehicleID(playerid));
	GivePlayerMoneyA(playerid, -500);

	SendClientMessage 	(playerid, -1, "{ffffff} Tr. priemonë iðtaisyta!");

	return 1;
}

CMD:fps(playerid)
{
    new string[8];
    format(string, 8, "FPS: %d", GetServerTickRate());
    SendClientMessage(playerid, -1, string);

    return 1;
}

CMD:diseiti(playerid)
{
    if(Dazasvydis[playerid] != 0)
    {
    	OnPlayerPickUpPickup(playerid, PickupsInfo[IseitiIsDazasvydzio][0]);
    }

    return 1;
}

CMD:addcredithouse(playerid)
{
	new Query[80], Float: P_Pos[3], String[250]; GetPlayerPos(playerid, P_Pos[0], P_Pos[1], P_Pos[2]);

	for(new cHouseID; cHouseID < MAX_CREDIT_HOUSES; cHouseID ++)
	{
		format(Query, sizeof(Query), "SELECT * FROM `credithouses` WHERE `ID` = '%d'", cHouseID);
		mysql_query(Query);

		mysql_store_result();

		if(!mysql_num_rows())
		{
			CHD[cHouseID][_cHousePrice] 		= 800;
			CHD[cHouseID][_cHouseEnterPos][0] 	= P_Pos[0];
			CHD[cHouseID][_cHouseEnterPos][1] 	= P_Pos[1];
			CHD[cHouseID][_cHouseEnterPos][2] 	= P_Pos[2];

			format(String, sizeof(String), "{ffffff}Kreditinis namas\n\nNumeris: {4C7CFF}%d\n{ffffff}Kaina: {4C7CFF}%d {ffffff}kreditø\n\nNorëdami pirkti namà: {4C7CFF}/pirktinama",
			cHouseID + 1, CHD[cHouseID][_cHousePrice]);

			CHD[cHouseID][_cHouseText] 		= CreateDynamic3DTextLabel(String, -1, CHD[cHouseID][_cHouseEnterPos][0], CHD[cHouseID][_cHouseEnterPos][1], CHD[cHouseID][_cHouseEnterPos][2], 10);
			CHD[cHouseID][_cHousePickup] 	= CreatePickup(1273, 1, CHD[cHouseID][_cHouseEnterPos][0], CHD[cHouseID][_cHouseEnterPos][1], CHD[cHouseID][_cHouseEnterPos][2], 0);

			AddCreditHouse(cHouseID);

			return 1;
		}

		mysql_free_result();
	}

	return SendClientMessage(playerid, -1, "{ffffff} Serveryje yra per daug kreditiniø namø!");
}

CMD:pirktinama(playerid)
{
	new Query[128];

	for(new cHouseID; cHouseID < MAX_CREDIT_HOUSES; cHouseID ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, CHD[cHouseID][_cHouseEnterPos][0], CHD[cHouseID][_cHouseEnterPos][1], CHD[cHouseID][_cHouseEnterPos][2]))
		{
			SelectedCreditHouseID[playerid] = cHouseID;

			if(!strcmp(CHD[cHouseID][_cHouseOwner], GetPlayerNameEx(playerid), false))
			{
				return SendClientMessage(playerid, -1, "{ffffff} Tai yra jûsø namas, norëdami áeiti á vidø - spauskite ENTER!");
			}
			else
			{
				if(PlayerHaveCreditHouse(playerid) != -1) return SendClientMessage(playerid, -1, "{ffffff} Jus jau turite kreditiná namà!");

				if(HowMuchHaveCredits(GetPlayerNameEx(playerid)) < CHD[cHouseID][_cHousePrice]) return SendClientMessage(playerid, -1, "{ffffff} Jums neuþtenka kreditø ðio namo pirkimui!");
			
				format(Query, sizeof(Query), "UPDATE `players` SET `Kreditai` = '%d' WHERE Vardas = '%s'", HowMuchHaveCredits(GetPlayerNameEx(playerid)) - CHD[cHouseID][_cHousePrice], GetPlayerNameEx(playerid));
				mysql_query(Query);

				strdel(CHD[cHouseID][_cHouseOwner], 0,         					25);
				strcat(CHD[cHouseID][_cHouseOwner], GetPlayerNameEx(playerid), 	25);

				CHD[cHouseID][_cHouseTimeLeft] = gettime() + 2592000;

				UpdateCreditHouseLabel 	(cHouseID);
				SaveCreditHouse 		(cHouseID);

				SendClientMessage(playerid, -1, "{4C7CFF}< > {ffffff}Sëkmingai nusipirkote kreditiná namà! Norëdami áeiti á vidø - spauskite ENTER.");
				SendClientMessage(playerid, -1, "{4C7CFF}< > {ffffff}Norëdami naudotis namo garaþu, priëjæ prie vartø - spauskite ALT.");
				SendClientMessage(playerid, -1, "{4C7CFF}< > {ffffff}Ðis namas bus jûsø nuosavybë lygiai 1 mënësá skaièiuojant nuo dabar.");
			}
		}
	}

	return 1;
}

CMD:cnamas(playerid)
{
	if(Dazasvydis[playerid] != 0) return SendClientMessage(playerid, -1, "{ffffff} Daþasvydyje ðios komandos naudoti negalima!");

	new cHouseID = SelectedCreditHouseID[playerid];

	if(cHouseID == -1) return SendClientMessage(playerid, -1, "{ffffff} Norint naudotis ðia komanda, turite bûti namuose!");

	if(!strcmp(CHD[cHouseID][_cHouseOwner], GetPlayerNameEx(playerid), false))
	{
		new String[220];

		strcat(String, "{4C7CFF}< > {ffffff}Pasigydyti\n");
		strcat(String, "{4C7CFF}< > {ffffff}Pavalgyti\n \n");
		strcat(String, "{B54F4F}< > {ffffff}Seifas\n");
		strcat(String, "{B54F4F}< > {ffffff}Ginklai\n");
		strcat(String, "{B54F4F}< > {ffffff}Narkotikai\n \n");
		strcat(String, "{FFAF00}< > {ffffff}Atsisakyti namo");

		ShowPlayerDialogEx(playerid, PagrNamoValdymas, DIALOG_STYLE_LIST, "Namø valdymas", String, "Pasirinkti", "Uþdaryti");
	}

	return 1;
}

CMD:craktas(playerid)
{
	for(new cHouseID; cHouseID < MAX_CREDIT_HOUSES; cHouseID ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, CHD[cHouseID][_cHouseEnterPos][0], CHD[cHouseID][_cHouseEnterPos][1], CHD[cHouseID][_cHouseEnterPos][2]))
		{
			if(!strcmp(CHD[cHouseID][_cHouseOwner], GetPlayerNameEx(playerid), false))
			{
				if(CHD[cHouseID][_cHouseLocked])
				{
					SendClientMessage(playerid, -1, "{4C7CFF}< > {ffffff}Namo durys - atrakintos.");

					CHD[cHouseID][_cHouseLocked] = false;
				}
				else
				{
					SendClientMessage(playerid, -1, "{4C7CFF}< > {ffffff}Namo durys - uþrakintos.");

					CHD[cHouseID][_cHouseLocked] = true;
				}

				SaveCreditHouse(cHouseID);
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 1.0, CHD[cHouseID][_cHouseExitPos][0], CHD[cHouseID][_cHouseExitPos][1], CHD[cHouseID][_cHouseExitPos][2]))
		{
			if(!strcmp(CHD[cHouseID][_cHouseOwner], GetPlayerNameEx(playerid), false))
			{
				if(CHD[cHouseID][_cHouseLocked])
				{
					SendClientMessage(playerid, -1, "{4C7CFF}< > {ffffff}Namo durys - atrakintos.");

					CHD[cHouseID][_cHouseLocked] = false;
				}
				else
				{
					SendClientMessage(playerid, -1, "{4C7CFF}< > {ffffff}Namo durys - uþrakintos.");

					CHD[cHouseID][_cHouseLocked] = true;
				}

				SaveCreditHouse(cHouseID);
			}
		}
	}

	return 1;
}

CMD:meskere(playerid)
{
	if(!PI[playerid][meskere]) return SendClientMessage(playerid, -1, "{ffffff} Jus neturite meðkerës!");

	if(IsPlayerAttachedObjectSlotUsed(playerid, MESKERE_ATTACH_SLOT))
	{
	    RemovePlayerAttachedObject(playerid, MESKERE_ATTACH_SLOT);

	    SendClientMessage(playerid, -1, "{ffffff} Paslëpëte meðkëræ!");
	}
	else
	{
    	SetPlayerAttachedObject(playerid, MESKERE_ATTACH_SLOT, 18632, 6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);

    	SendClientMessage(playerid, -1, "{ffffff} Pasiëmëte meðkëræ!");
	}

	return 1;
}

CMD:ieskoti(playerid)
{
	if(Lektuvas == true)
	{
		switch(KoksLektuvas)
		{
			case 0:
			{
				for(new lektuvoid = 0; lektuvoid < 12; lektuvoid ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 1.5, PirmasLektuvas[lektuvoid][IeskotiX], PirmasLektuvas[lektuvoid][IeskotiY], PirmasLektuvas[lektuvoid][IeskotiZ]))
					{
						if(PirmasLektuvas[lektuvoid][ArIeskota] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðià vietà jau kaþkas apieðkojo!");

						if(PI[playerid][IeskojoLekt] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Naudoti ðià komandà galima tik kas 20 sekundþiø!");

						PirmasLektuvas[lektuvoid][ArIeskota] 	= 1;
						PI[playerid][IeskojoLekt] 				= gettime() + 7;

						switch(random(4))
						{
							case 0: // ginklai
							{
								SendClientMessage 	(playerid, -1, "{ffffff} Apieðkojæ ðià vietà radote ðiek tiek ginklø!");
								ac_GivePlayerWeapon 		(playerid, 22 + random(2), random(1000));
								ac_GivePlayerWeapon 		(playerid, 25, random(1000));
								ac_GivePlayerWeapon 		(playerid, 30 + random(1), random(1000));
								ac_GivePlayerWeapon 		(playerid, 33 + random(1), random(1000));
							}

							case 1: // narkotikai
							{
								SendClientMessage(playerid, -1, "{ffffff} Apieðkojæ ðià vietà radote ðiek tiek narkotikø ({FFAF00} /narkotikai{ffffff})!");

								PI[playerid][Weed] 		+= random(50);
								PI[playerid][Kokainas] 	+= random(50);
								PI[playerid][Ekstazi] 	+= random(50);
								PI[playerid][Heroinas] 	+= random(50);
							}

							case 2: // pinigai
							{
								SendClientMessage(playerid, -1, "{ffffff} Apieðkojæ ðià vietà radote ðiek tiek paketø pinigø!");
								GivePlayerMoneyA (playerid, 5000 + random(5000));
							}

							case 3: // nieko :(
							{
								SendClientMessage(playerid, -1, "{ffffff} Dëja, taèiau apieðkojæ ðià vietà jus nieko neradote!");
							}
						}
					}
				}
			}

			case 1:
			{
				for(new lektuvoid = 0; lektuvoid < 14; lektuvoid ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 1.5, AntrasLektuvas[lektuvoid][IeskotiX], AntrasLektuvas[lektuvoid][IeskotiY], AntrasLektuvas[lektuvoid][IeskotiZ]))
					{
						if(AntrasLektuvas[lektuvoid][ArIeskota] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðià vietà jau kaþkas apieðkojo!");

						if(PI[playerid][IeskojoLekt] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Naudoti ðià komandà galima tik kas 20 sekundþiø!");

						AntrasLektuvas[lektuvoid][ArIeskota] 	= 1;
						PI[playerid][IeskojoLekt] 				= gettime() + 7;

						switch(random(4))
						{
							case 0: // ginklai
							{
								SendClientMessage 	(playerid, -1, "{ffffff} Apieðkojæ ðià vietà radote ðiek tiek ginklø!");
								ac_GivePlayerWeapon 		(playerid, 22 + random(2), random(1000));
								ac_GivePlayerWeapon 		(playerid, 25, random(1000));
								ac_GivePlayerWeapon 		(playerid, 30 + random(1), random(1000));
								ac_GivePlayerWeapon 		(playerid, 33 + random(1), random(1000));
							}

							case 1: // narkotikai
							{
								SendClientMessage(playerid, -1, "{ffffff} Apieðkojæ ðià vietà radote ðiek tiek narkotikø ({FFAF00} /narkotikai{ffffff})!");

								PI[playerid][Weed] 		+= random(50);
								PI[playerid][Kokainas] 	+= random(50);
								PI[playerid][Ekstazi] 	+= random(50);
								PI[playerid][Heroinas] 	+= random(50);
							}

							case 2: // pinigai
							{
								SendClientMessage(playerid, -1, "{ffffff} Apieðkojæ ðià vietà radote ðiek tiek paketø pinigø!");
								GivePlayerMoneyA (playerid, 5000 + random(5000));
							}

							case 3: // nieko :(
							{
								SendClientMessage(playerid, -1, "{ffffff} Dëja, taèiau apieðkojæ ðià vietà jus nieko neradote!");
							}
						}
					}
				}
			}

			case 2:
			{
				for(new lektuvoid = 0; lektuvoid < 17; lektuvoid ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 1.5, TreciasLektuvas[lektuvoid][IeskotiX], TreciasLektuvas[lektuvoid][IeskotiY], TreciasLektuvas[lektuvoid][IeskotiZ]))
					{
						if(TreciasLektuvas[lektuvoid][ArIeskota] == 1) return SendClientMessage(playerid, -1, "{ffffff} Ðià vietà jau kaþkas apieðkojo!");

						if(PI[playerid][IeskojoLekt] > gettime()) return SendClientMessage(playerid, -1, "{ffffff} Naudoti ðià komandà galima tik kas 20 sekundþiø!");

						TreciasLektuvas[lektuvoid][ArIeskota] 	= 1;
						PI[playerid][IeskojoLekt] 				= gettime() + 7;

						switch(random(4))
						{
							case 0: // ginklai
							{
								SendClientMessage 	(playerid, -1, "{ffffff} Apieðkojæ ðià vietà radote ðiek tiek ginklø!");
								ac_GivePlayerWeapon 		(playerid, 22 + random(2), random(1000));
								ac_GivePlayerWeapon 		(playerid, 25, random(1000));
								ac_GivePlayerWeapon 		(playerid, 30 + random(1), random(1000));
								ac_GivePlayerWeapon 		(playerid, 33 + random(1), random(1000));
							}

							case 1: // narkotikai
							{
								SendClientMessage(playerid, -1, "{ffffff} Apieðkojæ ðià vietà radote ðiek tiek narkotikø ({FFAF00} /narkotikai{ffffff})!");

								PI[playerid][Weed] 		+= random(50);
								PI[playerid][Kokainas] 	+= random(50);
								PI[playerid][Ekstazi] 	+= random(50);
								PI[playerid][Heroinas] 	+= random(50);
							}

							case 2: // pinigai
							{
								SendClientMessage(playerid, -1, "{ffffff} Apieðkojæ ðià vietà radote ðiek tiek paketø pinigø!");
								GivePlayerMoneyA (playerid, 5000 + random(5000));
							}

							case 3: // nieko :(
							{
								SendClientMessage(playerid, -1, "{ffffff} Dëja, taèiau apieðkojæ ðià vietà jus nieko neradote!");
							}
						}
					}
				}
			}
		}
	}
	else
	{
		SendClientMessage(playerid, -1, "{ffffff} Ðiuo metu nëra nukritæs joks lëktuvas!");
	}

	return 1;
}

CMD:sukti(playerid)
{
    for(new i = 0; i<sizeof(BanditLocs); i++)
    {
        if(IsPlayerInRangeOfPoint(playerid,1.0,BanditLocs[i][0],BanditLocs[i][1], BanditLocs[i][2]))
        {
	        if(IsGambling[playerid] == false) //If player isn't gambling
	        {
				ShowPlayerDialog(playerid,DIALOG_STARTGAMBLE,DIALOG_STYLE_LIST, "{FFAF00}Pasirinkite norimà statymo sumà",
				"1. {FFAF00}$1\n2. {FFAF00}$3\n3. {FFAF00}$5\n4. {FFAF00}$7\n5. {FFAF00}$10\n6. {FFAF00}$12\n","Loðti","Uþdaryti");

                return 1;
			}
			else return SendClientMessage(playerid, -1, "{ffffff} Jus jau loðiate!");
		}
	}
    return 1;
}

CMD:nsukti(playerid)
{
    if(IsGambling[playerid] == true)
    {
        if(IsSpinning[playerid] == false)
        {
        	ShowPlayerDialog(playerid,DIALOG_STOPGAMBLE,DIALOG_STYLE_MSGBOX,"Sukimo aparatas","{ffffff}Ar tikrai norite palikti loðimà","Taip","Ne");
		}
		else return SendClientMessage(playerid, -1, "{ffffff} Palaukite kol sukimo aparatas sustos!");
	}

    return 1;
}

stock IsVehicleSeatOccupied(vehicleid, seatid);

stock GetPlayerNearestVehicle(playerid)
{
    new closest = -1;
    if(IsPlayerInAnyVehicle(playerid)) return GetPlayerVehicleID(playerid);
    for(new i = 0, size = GetVehiclePoolSize(); i <= size; i++)
    {
        if(GetDistanceFromPlayerToVehicle(playerid, i) < GetDistanceFromPlayerToVehicle(playerid, closest) && closest != -1 && IsVehicleConnected(i) && GetVehicleVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
        {
            closest = i;
        }
        if(closest == -1 && IsVehicleConnected(i)) closest = i;
    }
    return closest;
}

forward CheckGun();
public CheckGun()
{
	for(new p = 0; p < GetMaxPlayers(); p++)
 	{
 	    new String[128];
 	    if(GetPlayerSpecialAction(p) == SPECIAL_ACTION_USEJETPACK)
    	{
    	    if(PI[p][AdminLevel] >= LEVEL_OWNER) return 0;
        	format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}buvo iðmestas ið serverio!", GetPlayerNameEx(p));
			SendClientMessageToAll(-1, String);

			SendClientMessageToAll(-1, "{ffffff} Prieþastis: {FFAF00}Neleistinas JETPACK.");
			Kick(p);
    	}
  		new gunid = GetPlayerWeapon(p);
    	if(gunid == 16 || gunid == 18 || gunid == 26 || gunid == 28 || gunid == 32 || gunid == 35 || gunid == 36 || gunid == 37 || gunid == 38 || gunid == 39 || gunid == 40
		|| gunid == 18 || gunid == 26 || gunid == 28 || gunid == 32 || gunid == 35)
     	{
     	    if(PI[p][AdminLevel] >= LEVEL_OWNER) return 0;
         	format(String, sizeof(String), "{ffffff} Þaidëjas {FFAF00}%s {ffffff}buvo iðmestas ið serverio!", GetPlayerNameEx(p));
			SendClientMessageToAll(-1, String);

			SendClientMessageToAll(-1, "{ffffff} Prieþastis: {FFAF00}Neleistinø ginklø naudojimas.");

			ac_ResetPlayerWeapons(p);
            Kick(p);
        }
	}
 	return 1;
}
stock PadetiRaga(playerid) // by Johurt
{
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	RemovePlayerAttachedObject(playerid, 4);
	return 1;
}

